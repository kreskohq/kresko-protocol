/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common';

export type AssetStruct = {
  underlyingId: PromiseOrValue<BytesLike>;
  anchor: PromiseOrValue<string>;
  oracles: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  factor: PromiseOrValue<BigNumberish>;
  kFactor: PromiseOrValue<BigNumberish>;
  openFee: PromiseOrValue<BigNumberish>;
  closeFee: PromiseOrValue<BigNumberish>;
  liqIncentive: PromiseOrValue<BigNumberish>;
  supplyLimit: PromiseOrValue<BigNumberish>;
  depositLimitSCDP: PromiseOrValue<BigNumberish>;
  liquidityIndexSCDP: PromiseOrValue<BigNumberish>;
  swapInFeeSCDP: PromiseOrValue<BigNumberish>;
  swapOutFeeSCDP: PromiseOrValue<BigNumberish>;
  protocolFeeShareSCDP: PromiseOrValue<BigNumberish>;
  liqIncentiveSCDP: PromiseOrValue<BigNumberish>;
  decimals: PromiseOrValue<BigNumberish>;
  isCollateral: PromiseOrValue<boolean>;
  isKrAsset: PromiseOrValue<boolean>;
  isSCDPDepositAsset: PromiseOrValue<boolean>;
  isSCDPKrAsset: PromiseOrValue<boolean>;
  isSCDPCollateral: PromiseOrValue<boolean>;
  isSCDPCoverAsset: PromiseOrValue<boolean>;
};

export type AssetStructOutput = [
  string,
  string,
  [number, number],
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
] & {
  underlyingId: string;
  anchor: string;
  oracles: [number, number];
  factor: number;
  kFactor: number;
  openFee: number;
  closeFee: number;
  liqIncentive: number;
  supplyLimit: BigNumber;
  depositLimitSCDP: BigNumber;
  liquidityIndexSCDP: BigNumber;
  swapInFeeSCDP: number;
  swapOutFeeSCDP: number;
  protocolFeeShareSCDP: number;
  liqIncentiveSCDP: number;
  decimals: number;
  isCollateral: boolean;
  isKrAsset: boolean;
  isSCDPDepositAsset: boolean;
  isSCDPKrAsset: boolean;
  isSCDPCollateral: boolean;
  isSCDPCoverAsset: boolean;
};

export type FeedConfigurationStruct = {
  oracleIds: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  feeds: [PromiseOrValue<string>, PromiseOrValue<string>];
};

export type FeedConfigurationStructOutput = [[number, number], [string, string]] & {
  oracleIds: [number, number];
  feeds: [string, string];
};

export type CommonInitArgsStruct = {
  admin: PromiseOrValue<string>;
  council: PromiseOrValue<string>;
  treasury: PromiseOrValue<string>;
  minDebtValue: PromiseOrValue<BigNumberish>;
  oracleDeviationPct: PromiseOrValue<BigNumberish>;
  oracleDecimals: PromiseOrValue<BigNumberish>;
  sequencerUptimeFeed: PromiseOrValue<string>;
  sequencerGracePeriodTime: PromiseOrValue<BigNumberish>;
  oracleTimeout: PromiseOrValue<BigNumberish>;
  kreskian: PromiseOrValue<string>;
  questForKresk: PromiseOrValue<string>;
  phase: PromiseOrValue<BigNumberish>;
};

export type CommonInitArgsStructOutput = [
  string,
  string,
  string,
  BigNumber,
  number,
  number,
  string,
  number,
  number,
  string,
  string,
  number,
] & {
  admin: string;
  council: string;
  treasury: string;
  minDebtValue: BigNumber;
  oracleDeviationPct: number;
  oracleDecimals: number;
  sequencerUptimeFeed: string;
  sequencerGracePeriodTime: number;
  oracleTimeout: number;
  kreskian: string;
  questForKresk: string;
  phase: number;
};

export type PauseStruct = {
  enabled: PromiseOrValue<boolean>;
  timestamp0: PromiseOrValue<BigNumberish>;
  timestamp1: PromiseOrValue<BigNumberish>;
};

export type PauseStructOutput = [boolean, BigNumber, BigNumber] & {
  enabled: boolean;
  timestamp0: BigNumber;
  timestamp1: BigNumber;
};

export type SafetyStateStruct = { pause: PauseStruct };

export type SafetyStateStructOutput = [PauseStructOutput] & {
  pause: PauseStructOutput;
};

export type FacetCutStruct = {
  facetAddress: PromiseOrValue<string>;
  action: PromiseOrValue<BigNumberish>;
  functionSelectors: PromiseOrValue<BytesLike>[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  facetAddress: string;
  action: number;
  functionSelectors: string[];
};

export type FacetStruct = {
  facetAddress: PromiseOrValue<string>;
  functionSelectors: PromiseOrValue<BytesLike>[];
};

export type FacetStructOutput = [string, string[]] & {
  facetAddress: string;
  functionSelectors: string[];
};

export type MinterAccountStateStruct = {
  totalDebtValue: PromiseOrValue<BigNumberish>;
  totalCollateralValue: PromiseOrValue<BigNumberish>;
  collateralRatio: PromiseOrValue<BigNumberish>;
};

export type MinterAccountStateStructOutput = [BigNumber, BigNumber, BigNumber] & {
  totalDebtValue: BigNumber;
  totalCollateralValue: BigNumber;
  collateralRatio: BigNumber;
};

export type MinterInitArgsStruct = {
  liquidationThreshold: PromiseOrValue<BigNumberish>;
  minCollateralRatio: PromiseOrValue<BigNumberish>;
};

export type MinterInitArgsStructOutput = [number, number] & {
  liquidationThreshold: number;
  minCollateralRatio: number;
};

export type MaxLiqInfoStruct = {
  account: PromiseOrValue<string>;
  seizeAssetAddr: PromiseOrValue<string>;
  repayAssetAddr: PromiseOrValue<string>;
  repayValue: PromiseOrValue<BigNumberish>;
  repayAmount: PromiseOrValue<BigNumberish>;
  seizeAmount: PromiseOrValue<BigNumberish>;
  seizeValue: PromiseOrValue<BigNumberish>;
  repayAssetPrice: PromiseOrValue<BigNumberish>;
  repayAssetIndex: PromiseOrValue<BigNumberish>;
  seizeAssetPrice: PromiseOrValue<BigNumberish>;
  seizeAssetIndex: PromiseOrValue<BigNumberish>;
};

export type MaxLiqInfoStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  account: string;
  seizeAssetAddr: string;
  repayAssetAddr: string;
  repayValue: BigNumber;
  repayAmount: BigNumber;
  seizeAmount: BigNumber;
  seizeValue: BigNumber;
  repayAssetPrice: BigNumber;
  repayAssetIndex: BigNumber;
  seizeAssetPrice: BigNumber;
  seizeAssetIndex: BigNumber;
};

export type MinterParamsStruct = {
  minCollateralRatio: PromiseOrValue<BigNumberish>;
  liquidationThreshold: PromiseOrValue<BigNumberish>;
  maxLiquidationRatio: PromiseOrValue<BigNumberish>;
};

export type MinterParamsStructOutput = [number, number, number] & {
  minCollateralRatio: number;
  liquidationThreshold: number;
  maxLiquidationRatio: number;
};

export type SCDPInitArgsStruct = {
  swapFeeRecipient: PromiseOrValue<string>;
  minCollateralRatio: PromiseOrValue<BigNumberish>;
  liquidationThreshold: PromiseOrValue<BigNumberish>;
  sdiPricePrecision: PromiseOrValue<BigNumberish>;
};

export type SCDPInitArgsStructOutput = [string, number, number, number] & {
  swapFeeRecipient: string;
  minCollateralRatio: number;
  liquidationThreshold: number;
  sdiPricePrecision: number;
};

export type PairSetterStruct = {
  assetIn: PromiseOrValue<string>;
  assetOut: PromiseOrValue<string>;
  enabled: PromiseOrValue<boolean>;
};

export type PairSetterStructOutput = [string, string, boolean] & {
  assetIn: string;
  assetOut: string;
  enabled: boolean;
};

export type UserAssetDataStruct = {
  asset: PromiseOrValue<string>;
  assetPrice: PromiseOrValue<BigNumberish>;
  depositAmount: PromiseOrValue<BigNumberish>;
  scaledDepositAmount: PromiseOrValue<BigNumberish>;
  depositValue: PromiseOrValue<BigNumberish>;
  scaledDepositValue: PromiseOrValue<BigNumberish>;
};

export type UserAssetDataStructOutput = [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
  asset: string;
  assetPrice: BigNumber;
  depositAmount: BigNumber;
  scaledDepositAmount: BigNumber;
  depositValue: BigNumber;
  scaledDepositValue: BigNumber;
};

export type UserDataStruct = {
  account: PromiseOrValue<string>;
  totalDepositValue: PromiseOrValue<BigNumberish>;
  totalScaledDepositValue: PromiseOrValue<BigNumberish>;
  totalFeesValue: PromiseOrValue<BigNumberish>;
  deposits: UserAssetDataStruct[];
};

export type UserDataStructOutput = [string, BigNumber, BigNumber, BigNumber, UserAssetDataStructOutput[]] & {
  account: string;
  totalDepositValue: BigNumber;
  totalScaledDepositValue: BigNumber;
  totalFeesValue: BigNumber;
  deposits: UserAssetDataStructOutput[];
};

export type AssetDataStruct = {
  addr: PromiseOrValue<string>;
  depositAmount: PromiseOrValue<BigNumberish>;
  depositValue: PromiseOrValue<BigNumberish>;
  depositValueAdjusted: PromiseOrValue<BigNumberish>;
  debtAmount: PromiseOrValue<BigNumberish>;
  debtValue: PromiseOrValue<BigNumberish>;
  debtValueAdjusted: PromiseOrValue<BigNumberish>;
  swapDeposits: PromiseOrValue<BigNumberish>;
  asset: AssetStruct;
  assetPrice: PromiseOrValue<BigNumberish>;
  symbol: PromiseOrValue<string>;
};

export type AssetDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  AssetStructOutput,
  BigNumber,
  string,
] & {
  addr: string;
  depositAmount: BigNumber;
  depositValue: BigNumber;
  depositValueAdjusted: BigNumber;
  debtAmount: BigNumber;
  debtValue: BigNumber;
  debtValueAdjusted: BigNumber;
  swapDeposits: BigNumber;
  asset: AssetStructOutput;
  assetPrice: BigNumber;
  symbol: string;
};

export type GlobalDataStruct = {
  collateralValue: PromiseOrValue<BigNumberish>;
  collateralValueAdjusted: PromiseOrValue<BigNumberish>;
  debtValue: PromiseOrValue<BigNumberish>;
  debtValueAdjusted: PromiseOrValue<BigNumberish>;
  effectiveDebtValue: PromiseOrValue<BigNumberish>;
  cr: PromiseOrValue<BigNumberish>;
  crDebtValue: PromiseOrValue<BigNumberish>;
  crDebtValueAdjusted: PromiseOrValue<BigNumberish>;
};

export type GlobalDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  collateralValue: BigNumber;
  collateralValueAdjusted: BigNumber;
  debtValue: BigNumber;
  debtValueAdjusted: BigNumber;
  effectiveDebtValue: BigNumber;
  cr: BigNumber;
  crDebtValue: BigNumber;
  crDebtValueAdjusted: BigNumber;
};

export interface KreskoInterface extends utils.Interface {
  functions: {
    'addAsset(address,(bytes12,address,uint8[2],uint16,uint16,uint16,uint16,uint16,uint128,uint128,uint128,uint16,uint16,uint16,uint16,uint8,bool,bool,bool,bool,bool,bool),(uint8[2],address[2]),bool)': FunctionFragment;
    'setApi3Feed(bytes12,address)': FunctionFragment;
    'setApi3Feeds(bytes12[],address[])': FunctionFragment;
    'setChainLinkFeed(bytes12,address)': FunctionFragment;
    'setChainlinkFeeds(bytes12[],address[])': FunctionFragment;
    'updateAsset(address,(bytes12,address,uint8[2],uint16,uint16,uint16,uint16,uint16,uint128,uint128,uint128,uint16,uint16,uint16,uint16,uint8,bool,bool,bool,bool,bool,bool))': FunctionFragment;
    'updateFeeds(bytes12,(uint8[2],address[2]))': FunctionFragment;
    'updateOracleOrder(address,uint8[2])': FunctionFragment;
    'validateAssetConfig(address,(bytes12,address,uint8[2],uint16,uint16,uint16,uint16,uint16,uint128,uint128,uint128,uint16,uint16,uint16,uint16,uint8,bool,bool,bool,bool,bool,bool))': FunctionFragment;
    'validateLiqConfig(address)': FunctionFragment;
    'getAPI3Price(address)': FunctionFragment;
    'getAsset(address)': FunctionFragment;
    'getChainlinkPrice(address)': FunctionFragment;
    'getFeedForAddress(address,uint8)': FunctionFragment;
    'getFeedForId(bytes12,uint8)': FunctionFragment;
    'getPrice(address)': FunctionFragment;
    'getPriceOfAsset(address)': FunctionFragment;
    'getValue(address,uint256)': FunctionFragment;
    'redstonePrice(bytes12,address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'initializeCommon((address,address,address,uint64,uint16,uint8,address,uint32,uint32,address,address,uint8))': FunctionFragment;
    'updateExtOracleDecimals(uint8)': FunctionFragment;
    'updateFeeRecipient(address)': FunctionFragment;
    'updateKreskian(address)': FunctionFragment;
    'updateMinDebtValue(uint96)': FunctionFragment;
    'updateOracleDeviationPct(uint16)': FunctionFragment;
    'updateOracleTimeout(uint32)': FunctionFragment;
    'updatePhase(uint8)': FunctionFragment;
    'updateQuestForKresk(address)': FunctionFragment;
    'updateSequencerGracePeriodTime(uint32)': FunctionFragment;
    'updateSequencerUptimeFeed(address)': FunctionFragment;
    'domainSeparator()': FunctionFragment;
    'getExtOracleDecimals()': FunctionFragment;
    'getFeeRecipient()': FunctionFragment;
    'getMinDebtValue()': FunctionFragment;
    'getOracleDeviationPct()': FunctionFragment;
    'getOracleTimeout()': FunctionFragment;
    'getSequencerUptimeFeed()': FunctionFragment;
    'getSequencerUptimeFeedGracePeriod()': FunctionFragment;
    'getStorageVersion()': FunctionFragment;
    'assetActionPaused(uint8,address)': FunctionFragment;
    'safetyStateFor(address,uint8)': FunctionFragment;
    'safetyStateSet()': FunctionFragment;
    'setSafetyStateSet(bool)': FunctionFragment;
    'toggleAssetsPaused(address[],uint8,bool,uint256)': FunctionFragment;
    'diamondCut((address,uint8,bytes4[])[],address,bytes)': FunctionFragment;
    'upgradeState(address,bytes)': FunctionFragment;
    'facetAddress(bytes4)': FunctionFragment;
    'facetAddresses()': FunctionFragment;
    'facetFunctionSelectors(address)': FunctionFragment;
    'facets()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'initialized()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'setERC165(bytes4[],bytes4[])': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'getAccountCollateralAmount(address,address)': FunctionFragment;
    'getAccountCollateralAssets(address)': FunctionFragment;
    'getAccountCollateralRatio(address)': FunctionFragment;
    'getAccountCollateralRatios(address[])': FunctionFragment;
    'getAccountCollateralValues(address,address)': FunctionFragment;
    'getAccountDebtAmount(address,address)': FunctionFragment;
    'getAccountDepositIndex(address,address)': FunctionFragment;
    'getAccountLiquidatable(address)': FunctionFragment;
    'getAccountMinCollateralAtRatio(address,uint32)': FunctionFragment;
    'getAccountMintIndex(address,address)': FunctionFragment;
    'getAccountMintedAssets(address)': FunctionFragment;
    'getAccountState(address)': FunctionFragment;
    'getAccountTotalCollateralValue(address)': FunctionFragment;
    'getAccountTotalCollateralValues(address)': FunctionFragment;
    'getAccountTotalDebtValue(address)': FunctionFragment;
    'getAccountTotalDebtValues(address)': FunctionFragment;
    'previewFee(address,address,uint256,uint8)': FunctionFragment;
    'burnKreskoAsset(address,address,uint256,uint256)': FunctionFragment;
    'initializeMinter((uint32,uint32))': FunctionFragment;
    'updateCollateralFactor(address,uint16)': FunctionFragment;
    'updateKFactor(address,uint16)': FunctionFragment;
    'updateLiquidationIncentive(address,uint16)': FunctionFragment;
    'updateLiquidationThreshold(uint32)': FunctionFragment;
    'updateMaxLiquidationRatio(uint32)': FunctionFragment;
    'updateMinCollateralRatio(uint32)': FunctionFragment;
    'depositCollateral(address,address,uint256)': FunctionFragment;
    'withdrawCollateral(address,address,uint256,uint256)': FunctionFragment;
    'withdrawCollateralUnchecked(address,address,uint256,uint256,bytes)': FunctionFragment;
    'getMaxLiqValue(address,address,address)': FunctionFragment;
    'liquidate(address,address,uint256,address,uint256,uint256)': FunctionFragment;
    'mintKreskoAsset(address,address,uint256)': FunctionFragment;
    'getCollateralExists(address)': FunctionFragment;
    'getCollateralValueWithPrice(address,uint256)': FunctionFragment;
    'getDebtValueWithPrice(address,uint256)': FunctionFragment;
    'getKrAssetExists(address)': FunctionFragment;
    'getLiquidationThreshold()': FunctionFragment;
    'getMaxLiquidationRatio()': FunctionFragment;
    'getMinCollateralRatio()': FunctionFragment;
    'getMinterParameters()': FunctionFragment;
    'getCurrentParametersSCDP()': FunctionFragment;
    'initializeSCDP((address,uint32,uint32,uint8))': FunctionFragment;
    'setCollateralSCDP(address,bool)': FunctionFragment;
    'setDepositAssetSCDP(address,bool)': FunctionFragment;
    'setFeeAssetSCDP(address)': FunctionFragment;
    'setKrAssetSCDP(address,bool)': FunctionFragment;
    'setLiquidationThresholdSCDP(uint32)': FunctionFragment;
    'setMaxLiquidationRatioSCDP(uint32)': FunctionFragment;
    'setMinCollateralRatioSCDP(uint32)': FunctionFragment;
    'setSwapFee(address,uint16,uint16,uint16)': FunctionFragment;
    'setSwapPairs((address,address,bool)[])': FunctionFragment;
    'setSwapPairsSingle((address,address,bool))': FunctionFragment;
    'updateDepositLimitSCDP(address,uint128)': FunctionFragment;
    'updateLiquidationIncentiveSCDP(address,uint16)': FunctionFragment;
    'depositSCDP(address,address,uint256)': FunctionFragment;
    'getLiquidatableSCDP()': FunctionFragment;
    'getMaxLiqValueSCDP(address,address)': FunctionFragment;
    'liquidateSCDP(address,uint256,address)': FunctionFragment;
    'repaySCDP(address,uint256,address)': FunctionFragment;
    'withdrawSCDP(address,address,uint256)': FunctionFragment;
    'getAccountDepositFeesGainedSCDP(address,address)': FunctionFragment;
    'getAccountDepositSCDP(address,address)': FunctionFragment;
    'getAccountDepositValueSCDP(address,address)': FunctionFragment;
    'getAccountInfoSCDP(address,address[])': FunctionFragment;
    'getAccountInfosSCDP(address[],address[])': FunctionFragment;
    'getAccountScaledDepositValueCDP(address,address)': FunctionFragment;
    'getAccountScaledDepositsSCDP(address,address)': FunctionFragment;
    'getAccountTotalDepositsValueSCDP(address)': FunctionFragment;
    'getAccountTotalScaledDepositsValueSCDP(address)': FunctionFragment;
    'getAssetEnabledSCDP(address)': FunctionFragment;
    'getAssetInfoSCDP(address)': FunctionFragment;
    'getAssetInfosSCDP(address[])': FunctionFragment;
    'getCollateralRatioSCDP()': FunctionFragment;
    'getCollateralValueSCDP(address,bool)': FunctionFragment;
    'getCollateralsSCDP()': FunctionFragment;
    'getDebtSCDP(address)': FunctionFragment;
    'getDebtValueSCDP(address,bool)': FunctionFragment;
    'getDepositAssetsSCDP()': FunctionFragment;
    'getDepositEnabledSCDP(address)': FunctionFragment;
    'getDepositsSCDP(address)': FunctionFragment;
    'getFeeRecipientSCDP()': FunctionFragment;
    'getKreskoAssetsSCDP()': FunctionFragment;
    'getStatisticsSCDP()': FunctionFragment;
    'getSwapDepositsSCDP(address)': FunctionFragment;
    'getSwapEnabledSCDP(address,address)': FunctionFragment;
    'getTotalCollateralValueSCDP(bool)': FunctionFragment;
    'getTotalDebtValueSCDP(bool)': FunctionFragment;
    'cumulateIncomeSCDP(address,uint256)': FunctionFragment;
    'previewSwapSCDP(address,address,uint256)': FunctionFragment;
    'swapSCDP(address,address,address,uint256,uint256)': FunctionFragment;
    'SDICover(address,uint256)': FunctionFragment;
    'disableCoverAssetSDI(address)': FunctionFragment;
    'enableCoverAssetSDI(address)': FunctionFragment;
    'getCoverAssetsSDI()': FunctionFragment;
    'getEffectiveSDIDebt()': FunctionFragment;
    'getEffectiveSDIDebtUSD()': FunctionFragment;
    'getSDICoverAmount()': FunctionFragment;
    'getSDIPrice()': FunctionFragment;
    'getTotalSDIDebt()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'previewSCDPBurn(address,uint256,bool)': FunctionFragment;
    'previewSCDPMint(address,uint256,bool)': FunctionFragment;
    'setCoverRecipientSDI(address)': FunctionFragment;
    'totalSDI()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addAsset'
      | 'setApi3Feed'
      | 'setApi3Feeds'
      | 'setChainLinkFeed'
      | 'setChainlinkFeeds'
      | 'updateAsset'
      | 'updateFeeds'
      | 'updateOracleOrder'
      | 'validateAssetConfig'
      | 'validateLiqConfig'
      | 'getAPI3Price'
      | 'getAsset'
      | 'getChainlinkPrice'
      | 'getFeedForAddress'
      | 'getFeedForId'
      | 'getPrice'
      | 'getPriceOfAsset'
      | 'getValue'
      | 'redstonePrice'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'grantRole'
      | 'hasRole'
      | 'renounceRole'
      | 'revokeRole'
      | 'initializeCommon'
      | 'updateExtOracleDecimals'
      | 'updateFeeRecipient'
      | 'updateKreskian'
      | 'updateMinDebtValue'
      | 'updateOracleDeviationPct'
      | 'updateOracleTimeout'
      | 'updatePhase'
      | 'updateQuestForKresk'
      | 'updateSequencerGracePeriodTime'
      | 'updateSequencerUptimeFeed'
      | 'domainSeparator'
      | 'getExtOracleDecimals'
      | 'getFeeRecipient'
      | 'getMinDebtValue'
      | 'getOracleDeviationPct'
      | 'getOracleTimeout'
      | 'getSequencerUptimeFeed'
      | 'getSequencerUptimeFeedGracePeriod'
      | 'getStorageVersion'
      | 'assetActionPaused'
      | 'safetyStateFor'
      | 'safetyStateSet'
      | 'setSafetyStateSet'
      | 'toggleAssetsPaused'
      | 'diamondCut'
      | 'upgradeState'
      | 'facetAddress'
      | 'facetAddresses'
      | 'facetFunctionSelectors'
      | 'facets'
      | 'acceptOwnership'
      | 'initialized'
      | 'owner'
      | 'pendingOwner'
      | 'transferOwnership'
      | 'setERC165'
      | 'supportsInterface'
      | 'getAccountCollateralAmount'
      | 'getAccountCollateralAssets'
      | 'getAccountCollateralRatio'
      | 'getAccountCollateralRatios'
      | 'getAccountCollateralValues'
      | 'getAccountDebtAmount'
      | 'getAccountDepositIndex'
      | 'getAccountLiquidatable'
      | 'getAccountMinCollateralAtRatio'
      | 'getAccountMintIndex'
      | 'getAccountMintedAssets'
      | 'getAccountState'
      | 'getAccountTotalCollateralValue'
      | 'getAccountTotalCollateralValues'
      | 'getAccountTotalDebtValue'
      | 'getAccountTotalDebtValues'
      | 'previewFee'
      | 'burnKreskoAsset'
      | 'initializeMinter'
      | 'updateCollateralFactor'
      | 'updateKFactor'
      | 'updateLiquidationIncentive'
      | 'updateLiquidationThreshold'
      | 'updateMaxLiquidationRatio'
      | 'updateMinCollateralRatio'
      | 'depositCollateral'
      | 'withdrawCollateral'
      | 'withdrawCollateralUnchecked'
      | 'getMaxLiqValue'
      | 'liquidate'
      | 'mintKreskoAsset'
      | 'getCollateralExists'
      | 'getCollateralValueWithPrice'
      | 'getDebtValueWithPrice'
      | 'getKrAssetExists'
      | 'getLiquidationThreshold'
      | 'getMaxLiquidationRatio'
      | 'getMinCollateralRatio'
      | 'getMinterParameters'
      | 'getCurrentParametersSCDP'
      | 'initializeSCDP'
      | 'setCollateralSCDP'
      | 'setDepositAssetSCDP'
      | 'setFeeAssetSCDP'
      | 'setKrAssetSCDP'
      | 'setLiquidationThresholdSCDP'
      | 'setMaxLiquidationRatioSCDP'
      | 'setMinCollateralRatioSCDP'
      | 'setSwapFee'
      | 'setSwapPairs'
      | 'setSwapPairsSingle'
      | 'updateDepositLimitSCDP'
      | 'updateLiquidationIncentiveSCDP'
      | 'depositSCDP'
      | 'getLiquidatableSCDP'
      | 'getMaxLiqValueSCDP'
      | 'liquidateSCDP'
      | 'repaySCDP'
      | 'withdrawSCDP'
      | 'getAccountDepositFeesGainedSCDP'
      | 'getAccountDepositSCDP'
      | 'getAccountDepositValueSCDP'
      | 'getAccountInfoSCDP'
      | 'getAccountInfosSCDP'
      | 'getAccountScaledDepositValueCDP'
      | 'getAccountScaledDepositsSCDP'
      | 'getAccountTotalDepositsValueSCDP'
      | 'getAccountTotalScaledDepositsValueSCDP'
      | 'getAssetEnabledSCDP'
      | 'getAssetInfoSCDP'
      | 'getAssetInfosSCDP'
      | 'getCollateralRatioSCDP'
      | 'getCollateralValueSCDP'
      | 'getCollateralsSCDP'
      | 'getDebtSCDP'
      | 'getDebtValueSCDP'
      | 'getDepositAssetsSCDP'
      | 'getDepositEnabledSCDP'
      | 'getDepositsSCDP'
      | 'getFeeRecipientSCDP'
      | 'getKreskoAssetsSCDP'
      | 'getStatisticsSCDP'
      | 'getSwapDepositsSCDP'
      | 'getSwapEnabledSCDP'
      | 'getTotalCollateralValueSCDP'
      | 'getTotalDebtValueSCDP'
      | 'cumulateIncomeSCDP'
      | 'previewSwapSCDP'
      | 'swapSCDP'
      | 'SDICover'
      | 'disableCoverAssetSDI'
      | 'enableCoverAssetSDI'
      | 'getCoverAssetsSDI'
      | 'getEffectiveSDIDebt'
      | 'getEffectiveSDIDebtUSD'
      | 'getSDICoverAmount'
      | 'getSDIPrice'
      | 'getTotalSDIDebt'
      | 'initialize'
      | 'previewSCDPBurn'
      | 'previewSCDPMint'
      | 'setCoverRecipientSDI'
      | 'totalSDI',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addAsset',
    values: [PromiseOrValue<string>, AssetStruct, FeedConfigurationStruct, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApi3Feed',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApi3Feeds',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setChainLinkFeed',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setChainlinkFeeds',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'updateAsset', values: [PromiseOrValue<string>, AssetStruct]): string;
  encodeFunctionData(
    functionFragment: 'updateFeeds',
    values: [PromiseOrValue<BytesLike>, FeedConfigurationStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOracleOrder',
    values: [PromiseOrValue<string>, [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]],
  ): string;
  encodeFunctionData(functionFragment: 'validateAssetConfig', values: [PromiseOrValue<string>, AssetStruct]): string;
  encodeFunctionData(functionFragment: 'validateLiqConfig', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAPI3Price', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getChainlinkPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getFeedForAddress',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeedForId',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPriceOfAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getValue',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redstonePrice',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'initializeCommon', values: [CommonInitArgsStruct]): string;
  encodeFunctionData(functionFragment: 'updateExtOracleDecimals', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateFeeRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateKreskian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateMinDebtValue', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateOracleDeviationPct', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateOracleTimeout', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updatePhase', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateQuestForKresk', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateSequencerGracePeriodTime',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateSequencerUptimeFeed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'domainSeparator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExtOracleDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFeeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinDebtValue', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOracleDeviationPct', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOracleTimeout', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSequencerUptimeFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSequencerUptimeFeedGracePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStorageVersion', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'assetActionPaused',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safetyStateFor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'safetyStateSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setSafetyStateSet', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'toggleAssetsPaused',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'diamondCut',
    values: [FacetCutStruct[], PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradeState',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'facetAddress', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'facetAddresses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'facetFunctionSelectors', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'facets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setERC165',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getAccountCollateralAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getAccountCollateralAssets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountCollateralRatio', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountCollateralRatios', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'getAccountCollateralValues',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountDebtAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountDepositIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getAccountLiquidatable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getAccountMinCollateralAtRatio',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountMintIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getAccountMintedAssets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountState', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountTotalCollateralValue', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountTotalCollateralValues', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountTotalDebtValue', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountTotalDebtValues', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'previewFee',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnKreskoAsset',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'initializeMinter', values: [MinterInitArgsStruct]): string;
  encodeFunctionData(
    functionFragment: 'updateCollateralFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateKFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateLiquidationIncentive',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateLiquidationThreshold', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxLiquidationRatio', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMinCollateralRatio', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositCollateral',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawCollateral',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawCollateralUnchecked',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getMaxLiqValue',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintKreskoAsset',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getCollateralExists', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getCollateralValueWithPrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDebtValueWithPrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getKrAssetExists', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getLiquidationThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMaxLiquidationRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinCollateralRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinterParameters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentParametersSCDP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initializeSCDP', values: [SCDPInitArgsStruct]): string;
  encodeFunctionData(
    functionFragment: 'setCollateralSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositAssetSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeAssetSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setKrAssetSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setLiquidationThresholdSCDP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMaxLiquidationRatioSCDP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMinCollateralRatioSCDP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setSwapFee',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setSwapPairs', values: [PairSetterStruct[]]): string;
  encodeFunctionData(functionFragment: 'setSwapPairsSingle', values: [PairSetterStruct]): string;
  encodeFunctionData(
    functionFragment: 'updateDepositLimitSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateLiquidationIncentiveSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getLiquidatableSCDP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getMaxLiqValueSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'repaySCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountDepositFeesGainedSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountDepositSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountDepositValueSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountInfoSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountInfosSCDP',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountScaledDepositValueCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountScaledDepositsSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getAccountTotalDepositsValueSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getAccountTotalScaledDepositsValueSCDP',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getAssetEnabledSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAssetInfoSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAssetInfosSCDP', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'getCollateralRatioSCDP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getCollateralValueSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'getCollateralsSCDP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDebtSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getDebtValueSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'getDepositAssetsSCDP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDepositEnabledSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getDepositsSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getFeeRecipientSCDP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getKreskoAssetsSCDP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStatisticsSCDP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSwapDepositsSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getSwapEnabledSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getTotalCollateralValueSCDP', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'getTotalDebtValueSCDP', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'cumulateIncomeSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewSwapSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapSCDP',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'SDICover',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'disableCoverAssetSDI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'enableCoverAssetSDI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCoverAssetsSDI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEffectiveSDIDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEffectiveSDIDebtUSD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSDICoverAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSDIPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalSDIDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'previewSCDPBurn',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewSCDPMint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setCoverRecipientSDI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalSDI', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApi3Feed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApi3Feeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChainLinkFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChainlinkFeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOracleOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateAssetConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateLiqConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAPI3Price', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChainlinkPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeedForAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeedForId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriceOfAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redstonePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeCommon', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateExtOracleDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateKreskian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinDebtValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOracleDeviationPct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOracleTimeout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePhase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateQuestForKresk', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSequencerGracePeriodTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSequencerUptimeFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'domainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExtOracleDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinDebtValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracleDeviationPct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracleTimeout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSequencerUptimeFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSequencerUptimeFeedGracePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStorageVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assetActionPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safetyStateFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safetyStateSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSafetyStateSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleAssetsPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'diamondCut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'facetAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'facetAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'facetFunctionSelectors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'facets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setERC165', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountCollateralAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountCollateralAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountCollateralRatios', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountCollateralValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountDebtAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountDepositIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountLiquidatable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountMinCollateralAtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountMintIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountMintedAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountTotalCollateralValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountTotalCollateralValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountTotalDebtValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountTotalDebtValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnKreskoAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCollateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateKFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidationThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxLiquidationRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateralUnchecked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxLiqValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintKreskoAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralValueWithPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDebtValueWithPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getKrAssetExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidationThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxLiquidationRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinterParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentParametersSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollateralSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositAssetSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeAssetSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKrAssetSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationThresholdSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxLiquidationRatioSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinCollateralRatioSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapPairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapPairsSingle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDepositLimitSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidationIncentiveSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidatableSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxLiqValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaySCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountDepositFeesGainedSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountDepositSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountDepositValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountInfoSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountInfosSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountScaledDepositValueCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountScaledDepositsSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountTotalDepositsValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountTotalScaledDepositsValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetEnabledSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetInfoSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetInfosSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralRatioSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralsSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDebtSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDebtValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositAssetsSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositEnabledSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositsSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeRecipientSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getKreskoAssetsSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStatisticsSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSwapDepositsSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSwapEnabledSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalCollateralValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalDebtValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cumulateIncomeSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewSwapSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SDICover', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableCoverAssetSDI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableCoverAssetSDI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCoverAssetsSDI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEffectiveSDIDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEffectiveSDIDebtUSD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSDICoverAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSDIPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalSDIDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewSCDPBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewSCDPMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCoverRecipientSDI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSDI', data: BytesLike): Result;

  events: {
    'CollateralAssetAdded(string,address,uint256,address,uint256)': EventFragment;
    'CollateralAssetUpdated(string,address,uint256,address,uint256)': EventFragment;
    'KreskoAssetAdded(string,address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'KreskoAssetUpdated(string,address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'FeeRecipientUpdated(address)': EventFragment;
    'Initialized(address,uint96)': EventFragment;
    'MinimumDebtValueUpdated(uint256)': EventFragment;
    'SafetyStateChange(uint8,address,string)': EventFragment;
    'DiamondCut(tuple[],address,bytes)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PendingOwnershipTransfer(address,address)': EventFragment;
    'AMMOracleUpdated(address)': EventFragment;
    'BatchInterestLiquidationOccurred(address,address,address,uint256,uint256)': EventFragment;
    'CFactorUpdated(address,uint256)': EventFragment;
    'CollateralDeposited(address,address,uint256)': EventFragment;
    'CollateralWithdrawn(address,address,uint256)': EventFragment;
    'DebtPositionClosed(address,address,uint256)': EventFragment;
    'FeePaid(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'InterestLiquidationOccurred(address,address,address,uint256,address,uint256)': EventFragment;
    'KFactorUpdated(address,uint256)': EventFragment;
    'KreskoAssetBurned(address,address,uint256)': EventFragment;
    'KreskoAssetMinted(address,address,uint256)': EventFragment;
    'LiquidationIncentiveMultiplierUpdated(address,uint256)': EventFragment;
    'LiquidationOccurred(address,address,address,uint256,address,uint256)': EventFragment;
    'LiquidationThresholdUpdated(uint256)': EventFragment;
    'MaxLiquidationRatioUpdated(uint256)': EventFragment;
    'MinimumCollateralizationRatioUpdated(uint256)': EventFragment;
    'UncheckedCollateralWithdrawn(address,address,uint256)': EventFragment;
    'FeeSet(address,uint256,uint256,uint256)': EventFragment;
    'Income(address,uint256)': EventFragment;
    'PairSet(address,address,bool)': EventFragment;
    'SCDPCollateralUpdated(address,uint256)': EventFragment;
    'SCDPDeposit(address,address,uint256)': EventFragment;
    'SCDPKrAssetUpdated(address,uint64,uint64,uint128,uint256)': EventFragment;
    'SCDPLiquidationOccured(address,address,uint256,address,uint256)': EventFragment;
    'SCDPRepay(address,address,uint256,address,uint256)': EventFragment;
    'SCDPWithdraw(address,address,uint256,uint256)': EventFragment;
    'Swap(address,address,address,uint256,uint256)': EventFragment;
    'SwapFee(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CollateralAssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAssetUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KreskoAssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KreskoAssetUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeRecipientUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumDebtValueUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SafetyStateChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DiamondCut'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingOwnershipTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AMMOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BatchInterestLiquidationOccurred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CFactorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DebtPositionClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeePaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestLiquidationOccurred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KFactorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KreskoAssetBurned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KreskoAssetMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationIncentiveMultiplierUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationOccurred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationThresholdUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxLiquidationRatioUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumCollateralizationRatioUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UncheckedCollateralWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Income'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PairSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPCollateralUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPKrAssetUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPLiquidationOccured'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPRepay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapFee'): EventFragment;
}

export interface CollateralAssetAddedEventObject {
  id: string;
  collateralAsset: string;
  factor: BigNumber;
  anchor: string;
  liqIncentive: BigNumber;
}
export type CollateralAssetAddedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  CollateralAssetAddedEventObject
>;

export type CollateralAssetAddedEventFilter = TypedEventFilter<CollateralAssetAddedEvent>;

export interface CollateralAssetUpdatedEventObject {
  id: string;
  collateralAsset: string;
  factor: BigNumber;
  anchor: string;
  liqIncentive: BigNumber;
}
export type CollateralAssetUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  CollateralAssetUpdatedEventObject
>;

export type CollateralAssetUpdatedEventFilter = TypedEventFilter<CollateralAssetUpdatedEvent>;

export interface KreskoAssetAddedEventObject {
  id: string;
  kreskoAsset: string;
  anchor: string;
  kFactor: BigNumber;
  supplyLimit: BigNumber;
  closeFee: BigNumber;
  openFee: BigNumber;
}
export type KreskoAssetAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  KreskoAssetAddedEventObject
>;

export type KreskoAssetAddedEventFilter = TypedEventFilter<KreskoAssetAddedEvent>;

export interface KreskoAssetUpdatedEventObject {
  id: string;
  kreskoAsset: string;
  anchor: string;
  kFactor: BigNumber;
  supplyLimit: BigNumber;
  closeFee: BigNumber;
  openFee: BigNumber;
}
export type KreskoAssetUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  KreskoAssetUpdatedEventObject
>;

export type KreskoAssetUpdatedEventFilter = TypedEventFilter<KreskoAssetUpdatedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface FeeRecipientUpdatedEventObject {
  feeRecipient: string;
}
export type FeeRecipientUpdatedEvent = TypedEvent<[string], FeeRecipientUpdatedEventObject>;

export type FeeRecipientUpdatedEventFilter = TypedEventFilter<FeeRecipientUpdatedEvent>;

export interface InitializedEventObject {
  operator: string;
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[string, BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MinimumDebtValueUpdatedEventObject {
  minDebtValue: BigNumber;
}
export type MinimumDebtValueUpdatedEvent = TypedEvent<[BigNumber], MinimumDebtValueUpdatedEventObject>;

export type MinimumDebtValueUpdatedEventFilter = TypedEventFilter<MinimumDebtValueUpdatedEvent>;

export interface SafetyStateChangeEventObject {
  action: number;
  asset: string;
  description: string;
}
export type SafetyStateChangeEvent = TypedEvent<[number, string, string], SafetyStateChangeEventObject>;

export type SafetyStateChangeEventFilter = TypedEventFilter<SafetyStateChangeEvent>;

export interface DiamondCutEventObject {
  _diamondCut: FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutEvent = TypedEvent<[FacetCutStructOutput[], string, string], DiamondCutEventObject>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PendingOwnershipTransferEventObject {
  previousOwner: string;
  newOwner: string;
}
export type PendingOwnershipTransferEvent = TypedEvent<[string, string], PendingOwnershipTransferEventObject>;

export type PendingOwnershipTransferEventFilter = TypedEventFilter<PendingOwnershipTransferEvent>;

export interface AMMOracleUpdatedEventObject {
  ammOracle: string;
}
export type AMMOracleUpdatedEvent = TypedEvent<[string], AMMOracleUpdatedEventObject>;

export type AMMOracleUpdatedEventFilter = TypedEventFilter<AMMOracleUpdatedEvent>;

export interface BatchInterestLiquidationOccurredEventObject {
  account: string;
  liquidator: string;
  seizedCollateralAsset: string;
  repayUSD: BigNumber;
  collateralSent: BigNumber;
}
export type BatchInterestLiquidationOccurredEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  BatchInterestLiquidationOccurredEventObject
>;

export type BatchInterestLiquidationOccurredEventFilter = TypedEventFilter<BatchInterestLiquidationOccurredEvent>;

export interface CFactorUpdatedEventObject {
  collateralAsset: string;
  cFactor: BigNumber;
}
export type CFactorUpdatedEvent = TypedEvent<[string, BigNumber], CFactorUpdatedEventObject>;

export type CFactorUpdatedEventFilter = TypedEventFilter<CFactorUpdatedEvent>;

export interface CollateralDepositedEventObject {
  account: string;
  collateralAsset: string;
  amount: BigNumber;
}
export type CollateralDepositedEvent = TypedEvent<[string, string, BigNumber], CollateralDepositedEventObject>;

export type CollateralDepositedEventFilter = TypedEventFilter<CollateralDepositedEvent>;

export interface CollateralWithdrawnEventObject {
  account: string;
  collateralAsset: string;
  amount: BigNumber;
}
export type CollateralWithdrawnEvent = TypedEvent<[string, string, BigNumber], CollateralWithdrawnEventObject>;

export type CollateralWithdrawnEventFilter = TypedEventFilter<CollateralWithdrawnEvent>;

export interface DebtPositionClosedEventObject {
  account: string;
  kreskoAsset: string;
  amount: BigNumber;
}
export type DebtPositionClosedEvent = TypedEvent<[string, string, BigNumber], DebtPositionClosedEventObject>;

export type DebtPositionClosedEventFilter = TypedEventFilter<DebtPositionClosedEvent>;

export interface FeePaidEventObject {
  account: string;
  paymentCollateralAsset: string;
  feeType: BigNumber;
  paymentAmount: BigNumber;
  paymentValue: BigNumber;
  feeValue: BigNumber;
}
export type FeePaidEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber, BigNumber], FeePaidEventObject>;

export type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;

export interface InterestLiquidationOccurredEventObject {
  account: string;
  liquidator: string;
  repayKreskoAsset: string;
  repayUSD: BigNumber;
  seizedCollateralAsset: string;
  collateralSent: BigNumber;
}
export type InterestLiquidationOccurredEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber],
  InterestLiquidationOccurredEventObject
>;

export type InterestLiquidationOccurredEventFilter = TypedEventFilter<InterestLiquidationOccurredEvent>;

export interface KFactorUpdatedEventObject {
  kreskoAsset: string;
  kFactor: BigNumber;
}
export type KFactorUpdatedEvent = TypedEvent<[string, BigNumber], KFactorUpdatedEventObject>;

export type KFactorUpdatedEventFilter = TypedEventFilter<KFactorUpdatedEvent>;

export interface KreskoAssetBurnedEventObject {
  account: string;
  kreskoAsset: string;
  amount: BigNumber;
}
export type KreskoAssetBurnedEvent = TypedEvent<[string, string, BigNumber], KreskoAssetBurnedEventObject>;

export type KreskoAssetBurnedEventFilter = TypedEventFilter<KreskoAssetBurnedEvent>;

export interface KreskoAssetMintedEventObject {
  account: string;
  kreskoAsset: string;
  amount: BigNumber;
}
export type KreskoAssetMintedEvent = TypedEvent<[string, string, BigNumber], KreskoAssetMintedEventObject>;

export type KreskoAssetMintedEventFilter = TypedEventFilter<KreskoAssetMintedEvent>;

export interface LiquidationIncentiveMultiplierUpdatedEventObject {
  asset: string;
  liqIncentiveMultiplier: BigNumber;
}
export type LiquidationIncentiveMultiplierUpdatedEvent = TypedEvent<
  [string, BigNumber],
  LiquidationIncentiveMultiplierUpdatedEventObject
>;

export type LiquidationIncentiveMultiplierUpdatedEventFilter =
  TypedEventFilter<LiquidationIncentiveMultiplierUpdatedEvent>;

export interface LiquidationOccurredEventObject {
  account: string;
  liquidator: string;
  repayKreskoAsset: string;
  repayAmount: BigNumber;
  seizedCollateralAsset: string;
  collateralSent: BigNumber;
}
export type LiquidationOccurredEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber],
  LiquidationOccurredEventObject
>;

export type LiquidationOccurredEventFilter = TypedEventFilter<LiquidationOccurredEvent>;

export interface LiquidationThresholdUpdatedEventObject {
  liquidationThreshold: BigNumber;
}
export type LiquidationThresholdUpdatedEvent = TypedEvent<[BigNumber], LiquidationThresholdUpdatedEventObject>;

export type LiquidationThresholdUpdatedEventFilter = TypedEventFilter<LiquidationThresholdUpdatedEvent>;

export interface MaxLiquidationRatioUpdatedEventObject {
  newMaxLiquidationRatio: BigNumber;
}
export type MaxLiquidationRatioUpdatedEvent = TypedEvent<[BigNumber], MaxLiquidationRatioUpdatedEventObject>;

export type MaxLiquidationRatioUpdatedEventFilter = TypedEventFilter<MaxLiquidationRatioUpdatedEvent>;

export interface MinimumCollateralizationRatioUpdatedEventObject {
  minCollateralRatio: BigNumber;
}
export type MinimumCollateralizationRatioUpdatedEvent = TypedEvent<
  [BigNumber],
  MinimumCollateralizationRatioUpdatedEventObject
>;

export type MinimumCollateralizationRatioUpdatedEventFilter =
  TypedEventFilter<MinimumCollateralizationRatioUpdatedEvent>;

export interface UncheckedCollateralWithdrawnEventObject {
  account: string;
  collateralAsset: string;
  amount: BigNumber;
}
export type UncheckedCollateralWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  UncheckedCollateralWithdrawnEventObject
>;

export type UncheckedCollateralWithdrawnEventFilter = TypedEventFilter<UncheckedCollateralWithdrawnEvent>;

export interface FeeSetEventObject {
  _asset: string;
  openFee: BigNumber;
  closeFee: BigNumber;
  protocolFee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface IncomeEventObject {
  asset: string;
  amount: BigNumber;
}
export type IncomeEvent = TypedEvent<[string, BigNumber], IncomeEventObject>;

export type IncomeEventFilter = TypedEventFilter<IncomeEvent>;

export interface PairSetEventObject {
  assetIn: string;
  assetOut: string;
  enabled: boolean;
}
export type PairSetEvent = TypedEvent<[string, string, boolean], PairSetEventObject>;

export type PairSetEventFilter = TypedEventFilter<PairSetEvent>;

export interface SCDPCollateralUpdatedEventObject {
  _asset: string;
  liquidationThreshold: BigNumber;
}
export type SCDPCollateralUpdatedEvent = TypedEvent<[string, BigNumber], SCDPCollateralUpdatedEventObject>;

export type SCDPCollateralUpdatedEventFilter = TypedEventFilter<SCDPCollateralUpdatedEvent>;

export interface SCDPDepositEventObject {
  depositor: string;
  collateralAsset: string;
  amount: BigNumber;
}
export type SCDPDepositEvent = TypedEvent<[string, string, BigNumber], SCDPDepositEventObject>;

export type SCDPDepositEventFilter = TypedEventFilter<SCDPDepositEvent>;

export interface SCDPKrAssetUpdatedEventObject {
  _asset: string;
  openFee: BigNumber;
  closeFee: BigNumber;
  protocolFee: BigNumber;
  supplyLimit: BigNumber;
}
export type SCDPKrAssetUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  SCDPKrAssetUpdatedEventObject
>;

export type SCDPKrAssetUpdatedEventFilter = TypedEventFilter<SCDPKrAssetUpdatedEvent>;

export interface SCDPLiquidationOccuredEventObject {
  liquidator: string;
  repayKreskoAsset: string;
  repayAmount: BigNumber;
  seizeCollateral: string;
  seizeAmount: BigNumber;
}
export type SCDPLiquidationOccuredEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  SCDPLiquidationOccuredEventObject
>;

export type SCDPLiquidationOccuredEventFilter = TypedEventFilter<SCDPLiquidationOccuredEvent>;

export interface SCDPRepayEventObject {
  repayer: string;
  repayKreskoAsset: string;
  repayAmount: BigNumber;
  receiveKreskoAsset: string;
  receiveAmount: BigNumber;
}
export type SCDPRepayEvent = TypedEvent<[string, string, BigNumber, string, BigNumber], SCDPRepayEventObject>;

export type SCDPRepayEventFilter = TypedEventFilter<SCDPRepayEvent>;

export interface SCDPWithdrawEventObject {
  withdrawer: string;
  collateralAsset: string;
  amount: BigNumber;
  feeAmount: BigNumber;
}
export type SCDPWithdrawEvent = TypedEvent<[string, string, BigNumber, BigNumber], SCDPWithdrawEventObject>;

export type SCDPWithdrawEventFilter = TypedEventFilter<SCDPWithdrawEvent>;

export interface SwapEventObject {
  who: string;
  assetIn: string;
  assetOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type SwapEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface SwapFeeEventObject {
  feeAsset: string;
  assetIn: string;
  feeAmount: BigNumber;
  protocolFeeAmount: BigNumber;
}
export type SwapFeeEvent = TypedEvent<[string, string, BigNumber, BigNumber], SwapFeeEventObject>;

export type SwapFeeEventFilter = TypedEventFilter<SwapFeeEvent>;

export interface Kresko extends BaseContract {
  contractName: 'Kresko';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KreskoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<[void]>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;

    getAPI3Price(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[AssetStructOutput]>;

    getChainlinkPrice(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeedForAddress(
      _asset: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getPrice(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOfAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getValue(
      _asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeCommon(
      args: CommonInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateExtOracleDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateKreskian(
      _kreskian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinDebtValue(
      _newMinDebtValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleTimeout(
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateQuestForKresk(
      _questForKresk: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<[number]>;

    getFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getMinDebtValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<[number]>;

    getOracleTimeout(overrides?: CallOverrides): Promise<[number]>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<[string]>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<[number]>;

    getStorageVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[SafetyStateStructOutput]>;

    safetyStateSet(overrides?: CallOverrides): Promise<[boolean]>;

    setSafetyStateSet(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeState(
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(overrides?: CallOverrides): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(overrides?: CallOverrides): Promise<[FacetStructOutput[]] & { facets_: FacetStructOutput[] }>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean] & { initialized_: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    pendingOwner(overrides?: CallOverrides): Promise<[string] & { pendingOwner_: string }>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setERC165(
      interfaceIds: PromiseOrValue<BytesLike>[],
      interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    getAccountCollateralAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

    getAccountCollateralRatio(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    getAccountCollateralRatios(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAccountCollateralValues(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getAccountDebtAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountDepositIndex(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { i: BigNumber }>;

    getAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    getAccountMinCollateralAtRatio(
      _account: PromiseOrValue<string>,
      _ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountMintIndex(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountMintedAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

    getAccountState(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[MinterAccountStateStructOutput]>;

    getAccountTotalCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountTotalCollateralValues(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; valueAdjusted: BigNumber }>;

    getAccountTotalDebtValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountTotalDebtValues(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; valueAdjusted: BigNumber }>;

    previewFee(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    burnKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeMinter(
      args: MinterInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiqIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getMaxLiqValue(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[MaxLiqInfoStructOutput]>;

    liquidate(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      _repayAssetIndex: PromiseOrValue<BigNumberish>,
      _seizeAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCollateralExists(
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { exists: boolean }>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getKrAssetExists(
      _kreskoAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { exists: boolean }>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<[number]>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<[number]>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<[number]>;

    getMinterParameters(overrides?: CallOverrides): Promise<[MinterParamsStructOutput]>;

    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<[SCDPInitArgsStructOutput]>;

    initializeSCDP(
      _init: SCDPInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeAssetSCDP(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidationThresholdSCDP(
      _lt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxLiquidationRatioSCDP(
      _mlr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinCollateralRatioSCDP(
      _mcr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapPairs(
      _pairs: PairSetterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapPairsSingle(
      _pair: PairSetterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<[boolean]>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[MaxLiqInfoStructOutput]>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAccountDepositFeesGainedSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountDepositSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountDepositValueSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountInfoSCDP(
      _account: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[UserDataStructOutput] & { result: UserDataStructOutput }>;

    getAccountInfosSCDP(
      _accounts: PromiseOrValue<string>[],
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[UserDataStructOutput[]] & { result: UserDataStructOutput[] }>;

    getAccountScaledDepositValueCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountScaledDepositsSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAccountTotalDepositsValueSCDP(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountTotalScaledDepositsValueSCDP(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAssetEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    getAssetInfoSCDP(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[AssetDataStructOutput] & { results: AssetDataStructOutput }>;

    getAssetInfosSCDP(
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[AssetDataStructOutput[]] & { results: AssetDataStructOutput[] }>;

    getCollateralRatioSCDP(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateralValueSCDP(
      _depositAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getCollateralsSCDP(overrides?: CallOverrides): Promise<[string[]] & { result: string[] }>;

    getDebtSCDP(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebtValueSCDP(
      _kreskoAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDepositAssetsSCDP(overrides?: CallOverrides): Promise<[string[]] & { result: string[] }>;

    getDepositEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    getDepositsSCDP(_depositAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeRecipientSCDP(overrides?: CallOverrides): Promise<[string]>;

    getKreskoAssetsSCDP(overrides?: CallOverrides): Promise<[string[]]>;

    getStatisticsSCDP(overrides?: CallOverrides): Promise<[GlobalDataStructOutput]>;

    getSwapDepositsSCDP(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSwapEnabledSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    getTotalCollateralValueSCDP(
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getTotalDebtValueSCDP(_ignoreFactors: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        feeAmount: BigNumber;
        feeAmountProtocol: BigNumber;
      }
    >;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    SDICover(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableCoverAssetSDI(
      _assetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enableCoverAssetSDI(
      _assetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCoverAssetsSDI(overrides?: CallOverrides): Promise<[string[]]>;

    getEffectiveSDIDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEffectiveSDIDebtUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSDICoverAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSDIPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalSDIDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _coverRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewSCDPBurn(
      _assetAddr: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    previewSCDPMint(
      _assetAddr: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    setCoverRecipientSDI(
      _newCoverRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalSDI(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addAsset(
    _assetAddr: PromiseOrValue<string>,
    _config: AssetStruct,
    _feedConfig: FeedConfigurationStruct,
    _setFeeds: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApi3Feed(
    _assetId: PromiseOrValue<BytesLike>,
    _feedAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApi3Feeds(
    _assetIds: PromiseOrValue<BytesLike>[],
    _feeds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setChainLinkFeed(
    _assetId: PromiseOrValue<BytesLike>,
    _feedAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setChainlinkFeeds(
    _assetIds: PromiseOrValue<BytesLike>[],
    _feeds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAsset(
    _assetAddr: PromiseOrValue<string>,
    _config: AssetStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFeeds(
    _assetId: PromiseOrValue<BytesLike>,
    _feedConfig: FeedConfigurationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOracleOrder(
    _assetAddr: PromiseOrValue<string>,
    _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  validateAssetConfig(
    _assetAddr: PromiseOrValue<string>,
    _config: AssetStruct,
    overrides?: CallOverrides,
  ): Promise<void>;

  validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

  getAPI3Price(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<AssetStructOutput>;

  getChainlinkPrice(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getFeedForAddress(
    _asset: PromiseOrValue<string>,
    _oracleType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getFeedForId(
    _underlyingId: PromiseOrValue<BytesLike>,
    _oracleType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getPrice(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOfAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getValue(
    _asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  redstonePrice(
    _underlyingId: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeCommon(
    args: CommonInitArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateExtOracleDecimals(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    _newFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateKreskian(
    _kreskian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMinDebtValue(
    _newMinDebtValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOracleDeviationPct(
    _oracleDeviationPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOracleTimeout(
    _oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePhase(
    _phase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateQuestForKresk(
    _questForKresk: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSequencerGracePeriodTime(
    _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSequencerUptimeFeed(
    _sequencerUptimeFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  getExtOracleDecimals(overrides?: CallOverrides): Promise<number>;

  getFeeRecipient(overrides?: CallOverrides): Promise<string>;

  getMinDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

  getOracleDeviationPct(overrides?: CallOverrides): Promise<number>;

  getOracleTimeout(overrides?: CallOverrides): Promise<number>;

  getSequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

  getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<number>;

  getStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;

  assetActionPaused(
    _action: PromiseOrValue<BigNumberish>,
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  safetyStateFor(
    _asset: PromiseOrValue<string>,
    _action: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<SafetyStateStructOutput>;

  safetyStateSet(overrides?: CallOverrides): Promise<boolean>;

  setSafetyStateSet(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  toggleAssetsPaused(
    _assets: PromiseOrValue<string>[],
    _action: PromiseOrValue<BigNumberish>,
    _withDuration: PromiseOrValue<boolean>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: FacetCutStruct[],
    _init: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeState(
    _init: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  facetAddress(_functionSelector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(_facet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setERC165(
    interfaceIds: PromiseOrValue<BytesLike>[],
    interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  getAccountCollateralAmount(
    _account: PromiseOrValue<string>,
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getAccountCollateralRatio(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAccountCollateralRatios(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

  getAccountCollateralValues(
    _account: PromiseOrValue<string>,
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      adjustedValue: BigNumber;
      price: BigNumber;
    }
  >;

  getAccountDebtAmount(
    _account: PromiseOrValue<string>,
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountDepositIndex(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getAccountMinCollateralAtRatio(
    _account: PromiseOrValue<string>,
    _ratio: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountMintIndex(
    _account: PromiseOrValue<string>,
    _kreskoAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountMintedAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getAccountState(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MinterAccountStateStructOutput>;

  getAccountTotalCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAccountTotalCollateralValues(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { value: BigNumber; valueAdjusted: BigNumber }>;

  getAccountTotalDebtValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAccountTotalDebtValues(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { value: BigNumber; valueAdjusted: BigNumber }>;

  previewFee(
    _account: PromiseOrValue<string>,
    _kreskoAsset: PromiseOrValue<string>,
    _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
    _feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string[], BigNumber[]]>;

  burnKreskoAsset(
    _account: PromiseOrValue<string>,
    _kreskoAsset: PromiseOrValue<string>,
    _burnAmount: PromiseOrValue<BigNumberish>,
    _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeMinter(
    args: MinterInitArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateCollateralFactor(
    _collateralAsset: PromiseOrValue<string>,
    _newFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateKFactor(
    _kreskoAsset: PromiseOrValue<string>,
    _newFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLiquidationIncentive(
    _collateralAsset: PromiseOrValue<string>,
    _newLiqIncentive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLiquidationThreshold(
    _newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxLiquidationRatio(
    _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMinCollateralRatio(
    _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositCollateral(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _withdrawAmount: PromiseOrValue<BigNumberish>,
    _collateralIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawCollateralUnchecked(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _withdrawAmount: PromiseOrValue<BigNumberish>,
    _collateralIndex: PromiseOrValue<BigNumberish>,
    _userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getMaxLiqValue(
    _account: PromiseOrValue<string>,
    _repayAssetAddr: PromiseOrValue<string>,
    _seizeAssetAddr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<MaxLiqInfoStructOutput>;

  liquidate(
    _account: PromiseOrValue<string>,
    _repayAssetAddr: PromiseOrValue<string>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    _seizeAssetAddr: PromiseOrValue<string>,
    _repayAssetIndex: PromiseOrValue<BigNumberish>,
    _seizeAssetIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintKreskoAsset(
    _account: PromiseOrValue<string>,
    _kreskoAsset: PromiseOrValue<string>,
    _mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCollateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getCollateralValueWithPrice(
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      adjustedValue: BigNumber;
      price: BigNumber;
    }
  >;

  getDebtValueWithPrice(
    _kreskoAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      adjustedValue: BigNumber;
      price: BigNumber;
    }
  >;

  getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getLiquidationThreshold(overrides?: CallOverrides): Promise<number>;

  getMaxLiquidationRatio(overrides?: CallOverrides): Promise<number>;

  getMinCollateralRatio(overrides?: CallOverrides): Promise<number>;

  getMinterParameters(overrides?: CallOverrides): Promise<MinterParamsStructOutput>;

  getCurrentParametersSCDP(overrides?: CallOverrides): Promise<SCDPInitArgsStructOutput>;

  initializeSCDP(
    _init: SCDPInitArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCollateralSCDP(
    _assetAddr: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositAssetSCDP(
    _assetAddr: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeAssetSCDP(
    asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setKrAssetSCDP(
    _assetAddr: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidationThresholdSCDP(
    _lt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxLiquidationRatioSCDP(
    _mlr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinCollateralRatioSCDP(
    _mcr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapFee(
    _krAsset: PromiseOrValue<string>,
    _openFee: PromiseOrValue<BigNumberish>,
    _closeFee: PromiseOrValue<BigNumberish>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapPairs(
    _pairs: PairSetterStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapPairsSingle(
    _pair: PairSetterStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDepositLimitSCDP(
    _assetAddr: PromiseOrValue<string>,
    _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLiquidationIncentiveSCDP(
    _assetAddr: PromiseOrValue<string>,
    _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositSCDP(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getLiquidatableSCDP(overrides?: CallOverrides): Promise<boolean>;

  getMaxLiqValueSCDP(
    _repayAssetAddr: PromiseOrValue<string>,
    _seizeAssetAddr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<MaxLiqInfoStructOutput>;

  liquidateSCDP(
    _repayAssetAddr: PromiseOrValue<string>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    _seizeAssetAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repaySCDP(
    _repayAssetAddr: PromiseOrValue<string>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    _seizeAssetAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawSCDP(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAccountDepositFeesGainedSCDP(
    _account: PromiseOrValue<string>,
    _depositAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountDepositSCDP(
    _account: PromiseOrValue<string>,
    _depositAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountDepositValueSCDP(
    _account: PromiseOrValue<string>,
    _depositAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountInfoSCDP(
    _account: PromiseOrValue<string>,
    _assets: PromiseOrValue<string>[],
    overrides?: CallOverrides,
  ): Promise<UserDataStructOutput>;

  getAccountInfosSCDP(
    _accounts: PromiseOrValue<string>[],
    _assets: PromiseOrValue<string>[],
    overrides?: CallOverrides,
  ): Promise<UserDataStructOutput[]>;

  getAccountScaledDepositValueCDP(
    _account: PromiseOrValue<string>,
    _depositAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountScaledDepositsSCDP(
    _account: PromiseOrValue<string>,
    _depositAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAccountTotalDepositsValueSCDP(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAccountTotalScaledDepositsValueSCDP(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAssetEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getAssetInfoSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<AssetDataStructOutput>;

  getAssetInfosSCDP(_assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<AssetDataStructOutput[]>;

  getCollateralRatioSCDP(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralValueSCDP(
    _depositAsset: PromiseOrValue<string>,
    _ignoreFactors: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCollateralsSCDP(overrides?: CallOverrides): Promise<string[]>;

  getDebtSCDP(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getDebtValueSCDP(
    _kreskoAsset: PromiseOrValue<string>,
    _ignoreFactors: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDepositAssetsSCDP(overrides?: CallOverrides): Promise<string[]>;

  getDepositEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getDepositsSCDP(_depositAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getFeeRecipientSCDP(overrides?: CallOverrides): Promise<string>;

  getKreskoAssetsSCDP(overrides?: CallOverrides): Promise<string[]>;

  getStatisticsSCDP(overrides?: CallOverrides): Promise<GlobalDataStructOutput>;

  getSwapDepositsSCDP(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getSwapEnabledSCDP(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  getTotalCollateralValueSCDP(_ignoreFactors: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDebtValueSCDP(_ignoreFactors: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  cumulateIncomeSCDP(
    _depositAssetAddr: PromiseOrValue<string>,
    _incomeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewSwapSCDP(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountOut: BigNumber;
      feeAmount: BigNumber;
      feeAmountProtocol: BigNumber;
    }
  >;

  swapSCDP(
    _receiver: PromiseOrValue<string>,
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  SDICover(
    _assetAddr: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disableCoverAssetSDI(
    _assetAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enableCoverAssetSDI(
    _assetAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCoverAssetsSDI(overrides?: CallOverrides): Promise<string[]>;

  getEffectiveSDIDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getEffectiveSDIDebtUSD(overrides?: CallOverrides): Promise<BigNumber>;

  getSDICoverAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getSDIPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalSDIDebt(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _coverRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewSCDPBurn(
    _assetAddr: PromiseOrValue<string>,
    _burnAmount: PromiseOrValue<BigNumberish>,
    _ignoreFactors: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  previewSCDPMint(
    _assetAddr: PromiseOrValue<string>,
    _mintAmount: PromiseOrValue<BigNumberish>,
    _ignoreFactors: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  setCoverRecipientSDI(
    _newCoverRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalSDI(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateAsset(_assetAddr: PromiseOrValue<string>, _config: AssetStruct, overrides?: CallOverrides): Promise<void>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<void>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getAPI3Price(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<AssetStructOutput>;

    getChainlinkPrice(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getFeedForAddress(
      _asset: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getPrice(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getValue(
      _asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initializeCommon(args: CommonInitArgsStruct, overrides?: CallOverrides): Promise<void>;

    updateExtOracleDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateFeeRecipient(_newFeeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateKreskian(_kreskian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateMinDebtValue(_newMinDebtValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOracleTimeout(_oracleTimeout: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePhase(_phase: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateQuestForKresk(_questForKresk: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateSequencerUptimeFeed(_sequencerUptimeFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<number>;

    getFeeRecipient(overrides?: CallOverrides): Promise<string>;

    getMinDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<number>;

    getOracleTimeout(overrides?: CallOverrides): Promise<number>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<number>;

    getStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;

    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<SafetyStateStructOutput>;

    safetyStateSet(overrides?: CallOverrides): Promise<boolean>;

    setSafetyStateSet(val: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeState(
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    facetAddress(_functionSelector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(_facet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(_newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setERC165(
      interfaceIds: PromiseOrValue<BytesLike>[],
      interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    getAccountCollateralAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getAccountCollateralRatio(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountCollateralRatios(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    getAccountCollateralValues(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getAccountDebtAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountDepositIndex(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getAccountMinCollateralAtRatio(
      _account: PromiseOrValue<string>,
      _ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountMintIndex(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountMintedAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getAccountState(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<MinterAccountStateStructOutput>;

    getAccountTotalCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalCollateralValues(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; valueAdjusted: BigNumber }>;

    getAccountTotalDebtValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalDebtValues(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; valueAdjusted: BigNumber }>;

    previewFee(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    burnKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initializeMinter(args: MinterInitArgsStruct, overrides?: CallOverrides): Promise<void>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiqIncentive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateLiquidationThreshold(_newThreshold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getMaxLiqValue(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<MaxLiqInfoStructOutput>;

    liquidate(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      _repayAssetIndex: PromiseOrValue<BigNumberish>,
      _seizeAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    mintKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCollateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<number>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<number>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<number>;

    getMinterParameters(overrides?: CallOverrides): Promise<MinterParamsStructOutput>;

    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<SCDPInitArgsStructOutput>;

    initializeSCDP(_init: SCDPInitArgsStruct, overrides?: CallOverrides): Promise<void>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeAssetSCDP(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLiquidationThresholdSCDP(_lt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxLiquidationRatioSCDP(_mlr: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMinCollateralRatioSCDP(_mcr: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSwapPairs(_pairs: PairSetterStruct[], overrides?: CallOverrides): Promise<void>;

    setSwapPairsSingle(_pair: PairSetterStruct, overrides?: CallOverrides): Promise<void>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<boolean>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<MaxLiqInfoStructOutput>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAccountDepositFeesGainedSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountDepositSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountDepositValueSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountInfoSCDP(
      _account: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<UserDataStructOutput>;

    getAccountInfosSCDP(
      _accounts: PromiseOrValue<string>[],
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<UserDataStructOutput[]>;

    getAccountScaledDepositValueCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountScaledDepositsSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountTotalDepositsValueSCDP(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalScaledDepositsValueSCDP(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAssetEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getAssetInfoSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<AssetDataStructOutput>;

    getAssetInfosSCDP(_assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<AssetDataStructOutput[]>;

    getCollateralRatioSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralValueSCDP(
      _depositAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCollateralsSCDP(overrides?: CallOverrides): Promise<string[]>;

    getDebtSCDP(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDebtValueSCDP(
      _kreskoAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDepositAssetsSCDP(overrides?: CallOverrides): Promise<string[]>;

    getDepositEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getDepositsSCDP(_depositAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRecipientSCDP(overrides?: CallOverrides): Promise<string>;

    getKreskoAssetsSCDP(overrides?: CallOverrides): Promise<string[]>;

    getStatisticsSCDP(overrides?: CallOverrides): Promise<GlobalDataStructOutput>;

    getSwapDepositsSCDP(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSwapEnabledSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getTotalCollateralValueSCDP(_ignoreFactors: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebtValueSCDP(_ignoreFactors: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        feeAmount: BigNumber;
        feeAmountProtocol: BigNumber;
      }
    >;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    SDICover(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; value: BigNumber }>;

    disableCoverAssetSDI(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    enableCoverAssetSDI(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getCoverAssetsSDI(overrides?: CallOverrides): Promise<string[]>;

    getEffectiveSDIDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getEffectiveSDIDebtUSD(overrides?: CallOverrides): Promise<BigNumber>;

    getSDICoverAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getSDIPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSDIDebt(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_coverRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    previewSCDPBurn(
      _assetAddr: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewSCDPMint(
      _assetAddr: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setCoverRecipientSDI(_newCoverRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    totalSDI(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'CollateralAssetAdded(string,address,uint256,address,uint256)'(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetAddedEventFilter;
    CollateralAssetAdded(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetAddedEventFilter;

    'CollateralAssetUpdated(string,address,uint256,address,uint256)'(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetUpdatedEventFilter;
    CollateralAssetUpdated(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetUpdatedEventFilter;

    'KreskoAssetAdded(string,address,address,uint256,uint256,uint256,uint256)'(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetAddedEventFilter;
    KreskoAssetAdded(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetAddedEventFilter;

    'KreskoAssetUpdated(string,address,address,uint256,uint256,uint256,uint256)'(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetUpdatedEventFilter;
    KreskoAssetUpdated(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetUpdatedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'FeeRecipientUpdated(address)'(feeRecipient?: PromiseOrValue<string> | null): FeeRecipientUpdatedEventFilter;
    FeeRecipientUpdated(feeRecipient?: PromiseOrValue<string> | null): FeeRecipientUpdatedEventFilter;

    'Initialized(address,uint96)'(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;
    Initialized(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;

    'MinimumDebtValueUpdated(uint256)'(minDebtValue?: null): MinimumDebtValueUpdatedEventFilter;
    MinimumDebtValueUpdated(minDebtValue?: null): MinimumDebtValueUpdatedEventFilter;

    'SafetyStateChange(uint8,address,string)'(
      action?: PromiseOrValue<BigNumberish> | null,
      asset?: PromiseOrValue<string> | null,
      description?: PromiseOrValue<string> | null,
    ): SafetyStateChangeEventFilter;
    SafetyStateChange(
      action?: PromiseOrValue<BigNumberish> | null,
      asset?: PromiseOrValue<string> | null,
      description?: PromiseOrValue<string> | null,
    ): SafetyStateChangeEventFilter;

    'DiamondCut(tuple[],address,bytes)'(_diamondCut?: null, _init?: null, _calldata?: null): DiamondCutEventFilter;
    DiamondCut(_diamondCut?: null, _init?: null, _calldata?: null): DiamondCutEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'PendingOwnershipTransfer(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): PendingOwnershipTransferEventFilter;
    PendingOwnershipTransfer(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): PendingOwnershipTransferEventFilter;

    'AMMOracleUpdated(address)'(ammOracle?: PromiseOrValue<string> | null): AMMOracleUpdatedEventFilter;
    AMMOracleUpdated(ammOracle?: PromiseOrValue<string> | null): AMMOracleUpdatedEventFilter;

    'BatchInterestLiquidationOccurred(address,address,address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      seizedCollateralAsset?: PromiseOrValue<string> | null,
      repayUSD?: null,
      collateralSent?: null,
    ): BatchInterestLiquidationOccurredEventFilter;
    BatchInterestLiquidationOccurred(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      seizedCollateralAsset?: PromiseOrValue<string> | null,
      repayUSD?: null,
      collateralSent?: null,
    ): BatchInterestLiquidationOccurredEventFilter;

    'CFactorUpdated(address,uint256)'(
      collateralAsset?: PromiseOrValue<string> | null,
      cFactor?: null,
    ): CFactorUpdatedEventFilter;
    CFactorUpdated(collateralAsset?: PromiseOrValue<string> | null, cFactor?: null): CFactorUpdatedEventFilter;

    'CollateralDeposited(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): CollateralDepositedEventFilter;
    CollateralDeposited(
      account?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): CollateralDepositedEventFilter;

    'CollateralWithdrawn(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): CollateralWithdrawnEventFilter;
    CollateralWithdrawn(
      account?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): CollateralWithdrawnEventFilter;

    'DebtPositionClosed(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): DebtPositionClosedEventFilter;
    DebtPositionClosed(
      account?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): DebtPositionClosedEventFilter;

    'FeePaid(address,address,uint256,uint256,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      paymentCollateralAsset?: PromiseOrValue<string> | null,
      feeType?: PromiseOrValue<BigNumberish> | null,
      paymentAmount?: null,
      paymentValue?: null,
      feeValue?: null,
    ): FeePaidEventFilter;
    FeePaid(
      account?: PromiseOrValue<string> | null,
      paymentCollateralAsset?: PromiseOrValue<string> | null,
      feeType?: PromiseOrValue<BigNumberish> | null,
      paymentAmount?: null,
      paymentValue?: null,
      feeValue?: null,
    ): FeePaidEventFilter;

    'InterestLiquidationOccurred(address,address,address,uint256,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayUSD?: null,
      seizedCollateralAsset?: null,
      collateralSent?: null,
    ): InterestLiquidationOccurredEventFilter;
    InterestLiquidationOccurred(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayUSD?: null,
      seizedCollateralAsset?: null,
      collateralSent?: null,
    ): InterestLiquidationOccurredEventFilter;

    'KFactorUpdated(address,uint256)'(
      kreskoAsset?: PromiseOrValue<string> | null,
      kFactor?: null,
    ): KFactorUpdatedEventFilter;
    KFactorUpdated(kreskoAsset?: PromiseOrValue<string> | null, kFactor?: null): KFactorUpdatedEventFilter;

    'KreskoAssetBurned(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): KreskoAssetBurnedEventFilter;
    KreskoAssetBurned(
      account?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): KreskoAssetBurnedEventFilter;

    'KreskoAssetMinted(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): KreskoAssetMintedEventFilter;
    KreskoAssetMinted(
      account?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): KreskoAssetMintedEventFilter;

    'LiquidationIncentiveMultiplierUpdated(address,uint256)'(
      asset?: PromiseOrValue<string> | null,
      liqIncentiveMultiplier?: null,
    ): LiquidationIncentiveMultiplierUpdatedEventFilter;
    LiquidationIncentiveMultiplierUpdated(
      asset?: PromiseOrValue<string> | null,
      liqIncentiveMultiplier?: null,
    ): LiquidationIncentiveMultiplierUpdatedEventFilter;

    'LiquidationOccurred(address,address,address,uint256,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizedCollateralAsset?: null,
      collateralSent?: null,
    ): LiquidationOccurredEventFilter;
    LiquidationOccurred(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizedCollateralAsset?: null,
      collateralSent?: null,
    ): LiquidationOccurredEventFilter;

    'LiquidationThresholdUpdated(uint256)'(liquidationThreshold?: null): LiquidationThresholdUpdatedEventFilter;
    LiquidationThresholdUpdated(liquidationThreshold?: null): LiquidationThresholdUpdatedEventFilter;

    'MaxLiquidationRatioUpdated(uint256)'(newMaxLiquidationRatio?: null): MaxLiquidationRatioUpdatedEventFilter;
    MaxLiquidationRatioUpdated(newMaxLiquidationRatio?: null): MaxLiquidationRatioUpdatedEventFilter;

    'MinimumCollateralizationRatioUpdated(uint256)'(
      minCollateralRatio?: null,
    ): MinimumCollateralizationRatioUpdatedEventFilter;
    MinimumCollateralizationRatioUpdated(minCollateralRatio?: null): MinimumCollateralizationRatioUpdatedEventFilter;

    'UncheckedCollateralWithdrawn(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): UncheckedCollateralWithdrawnEventFilter;
    UncheckedCollateralWithdrawn(
      account?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): UncheckedCollateralWithdrawnEventFilter;

    'FeeSet(address,uint256,uint256,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
    ): FeeSetEventFilter;
    FeeSet(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
    ): FeeSetEventFilter;

    'Income(address,uint256)'(asset?: null, amount?: null): IncomeEventFilter;
    Income(asset?: null, amount?: null): IncomeEventFilter;

    'PairSet(address,address,bool)'(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      enabled?: null,
    ): PairSetEventFilter;
    PairSet(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      enabled?: null,
    ): PairSetEventFilter;

    'SCDPCollateralUpdated(address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      liquidationThreshold?: null,
    ): SCDPCollateralUpdatedEventFilter;
    SCDPCollateralUpdated(
      _asset?: PromiseOrValue<string> | null,
      liquidationThreshold?: null,
    ): SCDPCollateralUpdatedEventFilter;

    'SCDPDeposit(address,address,uint256)'(
      depositor?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): SCDPDepositEventFilter;
    SCDPDeposit(
      depositor?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): SCDPDepositEventFilter;

    'SCDPKrAssetUpdated(address,uint64,uint64,uint128,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
      supplyLimit?: null,
    ): SCDPKrAssetUpdatedEventFilter;
    SCDPKrAssetUpdated(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
      supplyLimit?: null,
    ): SCDPKrAssetUpdatedEventFilter;

    'SCDPLiquidationOccured(address,address,uint256,address,uint256)'(
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizeCollateral?: PromiseOrValue<string> | null,
      seizeAmount?: null,
    ): SCDPLiquidationOccuredEventFilter;
    SCDPLiquidationOccured(
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizeCollateral?: PromiseOrValue<string> | null,
      seizeAmount?: null,
    ): SCDPLiquidationOccuredEventFilter;

    'SCDPRepay(address,address,uint256,address,uint256)'(
      repayer?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      receiveKreskoAsset?: PromiseOrValue<string> | null,
      receiveAmount?: null,
    ): SCDPRepayEventFilter;
    SCDPRepay(
      repayer?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      receiveKreskoAsset?: PromiseOrValue<string> | null,
      receiveAmount?: null,
    ): SCDPRepayEventFilter;

    'SCDPWithdraw(address,address,uint256,uint256)'(
      withdrawer?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): SCDPWithdrawEventFilter;
    SCDPWithdraw(
      withdrawer?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): SCDPWithdrawEventFilter;

    'Swap(address,address,address,uint256,uint256)'(
      who?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
    ): SwapEventFilter;
    Swap(
      who?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
    ): SwapEventFilter;

    'SwapFee(address,address,uint256,uint256)'(
      feeAsset?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      feeAmount?: null,
      protocolFeeAmount?: null,
    ): SwapFeeEventFilter;
    SwapFee(
      feeAsset?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      feeAmount?: null,
      protocolFeeAmount?: null,
    ): SwapFeeEventFilter;
  };

  estimateGas: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAPI3Price(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkPrice(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getFeedForAddress(
      _asset: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPrice(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getValue(
      _asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeCommon(
      args: CommonInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateExtOracleDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateKreskian(
      _kreskian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMinDebtValue(
      _newMinDebtValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOracleTimeout(
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateQuestForKresk(
      _questForKresk: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getMinDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;

    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safetyStateSet(overrides?: CallOverrides): Promise<BigNumber>;

    setSafetyStateSet(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeState(
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    facetAddress(_functionSelector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(_facet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setERC165(
      interfaceIds: PromiseOrValue<BytesLike>[],
      interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountCollateralAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountCollateralRatio(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountCollateralRatios(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;

    getAccountCollateralValues(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountDebtAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountDepositIndex(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountMinCollateralAtRatio(
      _account: PromiseOrValue<string>,
      _ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountMintIndex(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountMintedAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountState(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalCollateralValues(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalDebtValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalDebtValues(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    previewFee(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burnKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeMinter(
      args: MinterInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiqIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLiquidationThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getMaxLiqValue(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidate(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      _repayAssetIndex: PromiseOrValue<BigNumberish>,
      _seizeAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCollateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMinterParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    initializeSCDP(
      _init: SCDPInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeAssetSCDP(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidationThresholdSCDP(
      _lt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxLiquidationRatioSCDP(
      _mlr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinCollateralRatioSCDP(
      _mcr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapPairs(
      _pairs: PairSetterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapPairsSingle(
      _pair: PairSetterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAccountDepositFeesGainedSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountDepositSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountDepositValueSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountInfoSCDP(
      _account: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountInfosSCDP(
      _accounts: PromiseOrValue<string>[],
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountScaledDepositValueCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountScaledDepositsSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountTotalDepositsValueSCDP(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountTotalScaledDepositsValueSCDP(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAssetEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetInfoSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetInfosSCDP(_assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralRatioSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralValueSCDP(
      _depositAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCollateralsSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtSCDP(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDebtValueSCDP(
      _kreskoAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDepositAssetsSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositsSCDP(_depositAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRecipientSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getKreskoAssetsSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getStatisticsSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapDepositsSCDP(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSwapEnabledSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalCollateralValueSCDP(_ignoreFactors: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebtValueSCDP(_ignoreFactors: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    SDICover(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disableCoverAssetSDI(
      _assetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enableCoverAssetSDI(
      _assetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCoverAssetsSDI(overrides?: CallOverrides): Promise<BigNumber>;

    getEffectiveSDIDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getEffectiveSDIDebtUSD(overrides?: CallOverrides): Promise<BigNumber>;

    getSDICoverAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getSDIPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSDIDebt(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _coverRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewSCDPBurn(
      _assetAddr: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewSCDPMint(
      _assetAddr: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setCoverRecipientSDI(
      _newCoverRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalSDI(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAPI3Price(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainlinkPrice(_feed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeedForAddress(
      _asset: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPrice(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceOfAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValue(
      _asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeCommon(
      args: CommonInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateExtOracleDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateKreskian(
      _kreskian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMinDebtValue(
      _newMinDebtValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOracleTimeout(
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateQuestForKresk(
      _questForKresk: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinDebtValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStorageVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safetyStateSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSafetyStateSet(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeState(
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(_facet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setERC165(
      interfaceIds: PromiseOrValue<BytesLike>[],
      interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountCollateralAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountCollateralAssets(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountCollateralRatio(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountCollateralRatios(
      _accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountCollateralValues(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountDebtAmount(
      _account: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountDepositIndex(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountMinCollateralAtRatio(
      _account: PromiseOrValue<string>,
      _ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountMintIndex(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountMintedAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountState(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountTotalCollateralValue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountTotalCollateralValues(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountTotalDebtValue(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountTotalDebtValues(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewFee(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burnKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeMinter(
      args: MinterInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiqIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLiquidationThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getMaxLiqValue(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidate(
      _account: PromiseOrValue<string>,
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      _repayAssetIndex: PromiseOrValue<BigNumberish>,
      _seizeAssetIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintKreskoAsset(
      _account: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCollateralExists(
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinterParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeSCDP(
      _init: SCDPInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeAssetSCDP(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationThresholdSCDP(
      _lt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxLiquidationRatioSCDP(
      _mlr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinCollateralRatioSCDP(
      _mcr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapPairs(
      _pairs: PairSetterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapPairsSingle(
      _pair: PairSetterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAccountDepositFeesGainedSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountDepositSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountDepositValueSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountInfoSCDP(
      _account: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountInfosSCDP(
      _accounts: PromiseOrValue<string>[],
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountScaledDepositValueCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountScaledDepositsSCDP(
      _account: PromiseOrValue<string>,
      _depositAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountTotalDepositsValueSCDP(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAccountTotalScaledDepositsValueSCDP(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAssetEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetInfoSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetInfosSCDP(_assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralRatioSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralValueSCDP(
      _depositAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCollateralsSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtSCDP(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtValueSCDP(
      _kreskoAsset: PromiseOrValue<string>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDepositAssetsSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositEnabledSCDP(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositsSCDP(_depositAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeRecipientSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKreskoAssetsSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStatisticsSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapDepositsSCDP(
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSwapEnabledSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalCollateralValueSCDP(
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalDebtValueSCDP(
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    SDICover(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableCoverAssetSDI(
      _assetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enableCoverAssetSDI(
      _assetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCoverAssetsSDI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEffectiveSDIDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEffectiveSDIDebtUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSDICoverAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSDIPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSDIDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _coverRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewSCDPBurn(
      _assetAddr: PromiseOrValue<string>,
      _burnAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewSCDPMint(
      _assetAddr: PromiseOrValue<string>,
      _mintAmount: PromiseOrValue<BigNumberish>,
      _ignoreFactors: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setCoverRecipientSDI(
      _newCoverRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalSDI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
