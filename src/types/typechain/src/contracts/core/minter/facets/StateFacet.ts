/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type MinterParamsStruct = {
  minCollateralRatio: PromiseOrValue<BigNumberish>;
  liquidationThreshold: PromiseOrValue<BigNumberish>;
  maxLiquidationRatio: PromiseOrValue<BigNumberish>;
};

export type MinterParamsStructOutput = [number, number, number] & {
  minCollateralRatio: number;
  liquidationThreshold: number;
  maxLiquidationRatio: number;
};

export interface StateFacetInterface extends utils.Interface {
  functions: {
    'getCollateralExists(address)': FunctionFragment;
    'getCollateralValueWithPrice(address,uint256)': FunctionFragment;
    'getDebtValueWithPrice(address,uint256)': FunctionFragment;
    'getKrAssetExists(address)': FunctionFragment;
    'getLiquidationThreshold()': FunctionFragment;
    'getMaxLiquidationRatio()': FunctionFragment;
    'getMinCollateralRatio()': FunctionFragment;
    'getMinterParameters()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getCollateralExists'
      | 'getCollateralValueWithPrice'
      | 'getDebtValueWithPrice'
      | 'getKrAssetExists'
      | 'getLiquidationThreshold'
      | 'getMaxLiquidationRatio'
      | 'getMinCollateralRatio'
      | 'getMinterParameters',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getCollateralExists', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getCollateralValueWithPrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDebtValueWithPrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getKrAssetExists', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getLiquidationThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMaxLiquidationRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinCollateralRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinterParameters', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getCollateralExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralValueWithPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDebtValueWithPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getKrAssetExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidationThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxLiquidationRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinterParameters', data: BytesLike): Result;

  events: {};
}

export interface StateFacet extends BaseContract {
  contractName: 'StateFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StateFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCollateralExists(
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { exists: boolean }>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getKrAssetExists(
      _kreskoAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { exists: boolean }>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<[number]>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<[number]>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<[number]>;

    getMinterParameters(overrides?: CallOverrides): Promise<[MinterParamsStructOutput]>;
  };

  getCollateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getCollateralValueWithPrice(
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      adjustedValue: BigNumber;
      price: BigNumber;
    }
  >;

  getDebtValueWithPrice(
    _kreskoAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      adjustedValue: BigNumber;
      price: BigNumber;
    }
  >;

  getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getLiquidationThreshold(overrides?: CallOverrides): Promise<number>;

  getMaxLiquidationRatio(overrides?: CallOverrides): Promise<number>;

  getMinCollateralRatio(overrides?: CallOverrides): Promise<number>;

  getMinterParameters(overrides?: CallOverrides): Promise<MinterParamsStructOutput>;

  callStatic: {
    getCollateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        adjustedValue: BigNumber;
        price: BigNumber;
      }
    >;

    getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<number>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<number>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<number>;

    getMinterParameters(overrides?: CallOverrides): Promise<MinterParamsStructOutput>;
  };

  filters: {};

  estimateGas: {
    getCollateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMinterParameters(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getCollateralExists(
      _collateralAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCollateralValueWithPrice(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDebtValueWithPrice(
      _kreskoAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getKrAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLiquidationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinCollateralRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinterParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
