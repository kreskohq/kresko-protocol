/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type MinterInitArgsStruct = {
  liquidationThreshold: PromiseOrValue<BigNumberish>;
  minCollateralRatio: PromiseOrValue<BigNumberish>;
};

export type MinterInitArgsStructOutput = [number, number] & {
  liquidationThreshold: number;
  minCollateralRatio: number;
};

export interface IConfigurationFacetInterface extends utils.Interface {
  functions: {
    'initializeMinter((uint32,uint32))': FunctionFragment;
    'updateCollateralFactor(address,uint16)': FunctionFragment;
    'updateKFactor(address,uint16)': FunctionFragment;
    'updateLiquidationIncentive(address,uint16)': FunctionFragment;
    'updateLiquidationThreshold(uint32)': FunctionFragment;
    'updateMaxLiquidationRatio(uint32)': FunctionFragment;
    'updateMinCollateralRatio(uint32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'initializeMinter'
      | 'updateCollateralFactor'
      | 'updateKFactor'
      | 'updateLiquidationIncentive'
      | 'updateLiquidationThreshold'
      | 'updateMaxLiquidationRatio'
      | 'updateMinCollateralRatio',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'initializeMinter', values: [MinterInitArgsStruct]): string;
  encodeFunctionData(
    functionFragment: 'updateCollateralFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateKFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateLiquidationIncentive',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateLiquidationThreshold', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxLiquidationRatio', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMinCollateralRatio', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'initializeMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCollateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateKFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidationThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxLiquidationRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinCollateralRatio', data: BytesLike): Result;

  events: {};
}

export interface IConfigurationFacet extends BaseContract {
  contractName: 'IConfigurationFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConfigurationFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializeMinter(
      args: MinterInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _kFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  initializeMinter(
    args: MinterInitArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateCollateralFactor(
    _collateralAsset: PromiseOrValue<string>,
    _newFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateKFactor(
    _kreskoAsset: PromiseOrValue<string>,
    _kFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLiquidationIncentive(
    _collateralAsset: PromiseOrValue<string>,
    _newLiquidationIncentive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLiquidationThreshold(
    _newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxLiquidationRatio(
    _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMinCollateralRatio(
    _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    initializeMinter(args: MinterInitArgsStruct, overrides?: CallOverrides): Promise<void>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _kFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateLiquidationThreshold(_newThreshold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    initializeMinter(
      args: MinterInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _kFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLiquidationThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeMinter(
      args: MinterInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateCollateralFactor(
      _collateralAsset: PromiseOrValue<string>,
      _newFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateKFactor(
      _kreskoAsset: PromiseOrValue<string>,
      _kFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLiquidationIncentive(
      _collateralAsset: PromiseOrValue<string>,
      _newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLiquidationThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxLiquidationRatio(
      _newMaxLiquidationRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMinCollateralRatio(
      _newMinCollateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
