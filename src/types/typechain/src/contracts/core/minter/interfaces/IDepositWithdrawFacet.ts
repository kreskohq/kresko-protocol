/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface IDepositWithdrawFacetInterface extends utils.Interface {
  functions: {
    'depositCollateral(address,address,uint256)': FunctionFragment;
    'withdrawCollateral(address,address,uint256,uint256)': FunctionFragment;
    'withdrawCollateralUnchecked(address,address,uint256,uint256,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'depositCollateral' | 'withdrawCollateral' | 'withdrawCollateralUnchecked',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'depositCollateral',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawCollateral',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawCollateralUnchecked',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateralUnchecked', data: BytesLike): Result;

  events: {};
}

export interface IDepositWithdrawFacet extends BaseContract {
  contractName: 'IDepositWithdrawFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDepositWithdrawFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  depositCollateral(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _withdrawAmount: PromiseOrValue<BigNumberish>,
    _collateralIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawCollateralUnchecked(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _withdrawAmount: PromiseOrValue<BigNumberish>,
    _collateralIndex: PromiseOrValue<BigNumberish>,
    _userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCollateralUnchecked(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      _collateralIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
