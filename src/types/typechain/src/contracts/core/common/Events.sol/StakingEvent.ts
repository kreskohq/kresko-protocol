/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, Signer, utils } from 'ethers';
import type { EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface StakingEventInterface extends utils.Interface {
  functions: {};

  events: {
    'ClaimRewards(address,address,uint256)': EventFragment;
    'ClaimRewardsMulti(address)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256)': EventFragment;
    'LiquidityAndStakeAdded(address,uint256,uint256)': EventFragment;
    'LiquidityAndStakeRemoved(address,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClaimRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimRewardsMulti'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityAndStakeAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityAndStakeRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ClaimRewardsEventObject {
  user: string;
  rewardToken: string;
  amount: BigNumber;
}
export type ClaimRewardsEvent = TypedEvent<[string, string, BigNumber], ClaimRewardsEventObject>;

export type ClaimRewardsEventFilter = TypedEventFilter<ClaimRewardsEvent>;

export interface ClaimRewardsMultiEventObject {
  to: string;
}
export type ClaimRewardsMultiEvent = TypedEvent<[string], ClaimRewardsMultiEventObject>;

export type ClaimRewardsMultiEventFilter = TypedEventFilter<ClaimRewardsMultiEvent>;

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface LiquidityAndStakeAddedEventObject {
  to: string;
  amount: BigNumber;
  pid: BigNumber;
}
export type LiquidityAndStakeAddedEvent = TypedEvent<[string, BigNumber, BigNumber], LiquidityAndStakeAddedEventObject>;

export type LiquidityAndStakeAddedEventFilter = TypedEventFilter<LiquidityAndStakeAddedEvent>;

export interface LiquidityAndStakeRemovedEventObject {
  to: string;
  amount: BigNumber;
  pid: BigNumber;
}
export type LiquidityAndStakeRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LiquidityAndStakeRemovedEventObject
>;

export type LiquidityAndStakeRemovedEventFilter = TypedEventFilter<LiquidityAndStakeRemovedEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface StakingEvent extends BaseContract {
  contractName: 'StakingEvent';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    'ClaimRewards(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): ClaimRewardsEventFilter;
    ClaimRewards(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): ClaimRewardsEventFilter;

    'ClaimRewardsMulti(address)'(to?: PromiseOrValue<string> | null): ClaimRewardsMultiEventFilter;
    ClaimRewardsMulti(to?: PromiseOrValue<string> | null): ClaimRewardsMultiEventFilter;

    'Deposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): DepositEventFilter;

    'EmergencyWithdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawEventFilter;

    'LiquidityAndStakeAdded(address,uint256,uint256)'(
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
    ): LiquidityAndStakeAddedEventFilter;
    LiquidityAndStakeAdded(
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
    ): LiquidityAndStakeAddedEventFilter;

    'LiquidityAndStakeRemoved(address,uint256,uint256)'(
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
    ): LiquidityAndStakeRemovedEventFilter;
    LiquidityAndStakeRemoved(
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
    ): LiquidityAndStakeRemovedEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
