/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface ICommonStateFacetInterface extends utils.Interface {
  functions: {
    'domainSeparator()': FunctionFragment;
    'getExtOracleDecimals()': FunctionFragment;
    'getFeeRecipient()': FunctionFragment;
    'getMinDebtValue()': FunctionFragment;
    'getOracleDeviationPct()': FunctionFragment;
    'getOracleTimeout()': FunctionFragment;
    'getSequencerUptimeFeed()': FunctionFragment;
    'getSequencerUptimeFeedGracePeriod()': FunctionFragment;
    'getStorageVersion()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'domainSeparator'
      | 'getExtOracleDecimals'
      | 'getFeeRecipient'
      | 'getMinDebtValue'
      | 'getOracleDeviationPct'
      | 'getOracleTimeout'
      | 'getSequencerUptimeFeed'
      | 'getSequencerUptimeFeedGracePeriod'
      | 'getStorageVersion',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'domainSeparator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExtOracleDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFeeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinDebtValue', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOracleDeviationPct', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOracleTimeout', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSequencerUptimeFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSequencerUptimeFeedGracePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStorageVersion', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'domainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExtOracleDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinDebtValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracleDeviationPct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracleTimeout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSequencerUptimeFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSequencerUptimeFeedGracePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStorageVersion', data: BytesLike): Result;

  events: {};
}

export interface ICommonStateFacet extends BaseContract {
  contractName: 'ICommonStateFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICommonStateFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<[number]>;

    getFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getMinDebtValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<[number]>;

    getOracleTimeout(overrides?: CallOverrides): Promise<[number]>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<[string]>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<[number]>;

    getStorageVersion(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  getExtOracleDecimals(overrides?: CallOverrides): Promise<number>;

  getFeeRecipient(overrides?: CallOverrides): Promise<string>;

  getMinDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

  getOracleDeviationPct(overrides?: CallOverrides): Promise<number>;

  getOracleTimeout(overrides?: CallOverrides): Promise<number>;

  getSequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

  getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<number>;

  getStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    domainSeparator(overrides?: CallOverrides): Promise<string>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<number>;

    getFeeRecipient(overrides?: CallOverrides): Promise<string>;

    getMinDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<number>;

    getOracleTimeout(overrides?: CallOverrides): Promise<number>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<number>;

    getStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getMinDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtOracleDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinDebtValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleDeviationPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSequencerUptimeFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSequencerUptimeFeedGracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStorageVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
