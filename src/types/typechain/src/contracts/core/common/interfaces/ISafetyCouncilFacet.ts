/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type PauseStruct = {
  enabled: PromiseOrValue<boolean>;
  timestamp0: PromiseOrValue<BigNumberish>;
  timestamp1: PromiseOrValue<BigNumberish>;
};

export type PauseStructOutput = [boolean, BigNumber, BigNumber] & {
  enabled: boolean;
  timestamp0: BigNumber;
  timestamp1: BigNumber;
};

export type SafetyStateStruct = { pause: PauseStruct };

export type SafetyStateStructOutput = [PauseStructOutput] & {
  pause: PauseStructOutput;
};

export interface ISafetyCouncilFacetInterface extends utils.Interface {
  functions: {
    'assetActionPaused(uint8,address)': FunctionFragment;
    'safetyStateFor(address,uint8)': FunctionFragment;
    'safetyStateSet()': FunctionFragment;
    'setSafetyStateSet(bool)': FunctionFragment;
    'toggleAssetsPaused(address[],uint8,bool,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'assetActionPaused'
      | 'safetyStateFor'
      | 'safetyStateSet'
      | 'setSafetyStateSet'
      | 'toggleAssetsPaused',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'assetActionPaused',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safetyStateFor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'safetyStateSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setSafetyStateSet', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'toggleAssetsPaused',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'assetActionPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safetyStateFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safetyStateSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSafetyStateSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleAssetsPaused', data: BytesLike): Result;

  events: {};
}

export interface ISafetyCouncilFacet extends BaseContract {
  contractName: 'ISafetyCouncilFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISafetyCouncilFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[SafetyStateStructOutput]>;

    safetyStateSet(overrides?: CallOverrides): Promise<[boolean]>;

    setSafetyStateSet(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  assetActionPaused(
    _action: PromiseOrValue<BigNumberish>,
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  safetyStateFor(
    _asset: PromiseOrValue<string>,
    _action: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<SafetyStateStructOutput>;

  safetyStateSet(overrides?: CallOverrides): Promise<boolean>;

  setSafetyStateSet(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  toggleAssetsPaused(
    _assets: PromiseOrValue<string>[],
    _action: PromiseOrValue<BigNumberish>,
    _withDuration: PromiseOrValue<boolean>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<SafetyStateStructOutput>;

    safetyStateSet(overrides?: CallOverrides): Promise<boolean>;

    setSafetyStateSet(val: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safetyStateSet(overrides?: CallOverrides): Promise<BigNumber>;

    setSafetyStateSet(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetActionPaused(
      _action: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safetyStateFor(
      _asset: PromiseOrValue<string>,
      _action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safetyStateSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSafetyStateSet(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    toggleAssetsPaused(
      _assets: PromiseOrValue<string>[],
      _action: PromiseOrValue<BigNumberish>,
      _withDuration: PromiseOrValue<boolean>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
