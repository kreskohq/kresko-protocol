/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type AssetStruct = {
  underlyingId: PromiseOrValue<BytesLike>;
  anchor: PromiseOrValue<string>;
  oracles: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  factor: PromiseOrValue<BigNumberish>;
  kFactor: PromiseOrValue<BigNumberish>;
  openFee: PromiseOrValue<BigNumberish>;
  closeFee: PromiseOrValue<BigNumberish>;
  liqIncentive: PromiseOrValue<BigNumberish>;
  supplyLimit: PromiseOrValue<BigNumberish>;
  depositLimitSCDP: PromiseOrValue<BigNumberish>;
  liquidityIndexSCDP: PromiseOrValue<BigNumberish>;
  swapInFeeSCDP: PromiseOrValue<BigNumberish>;
  swapOutFeeSCDP: PromiseOrValue<BigNumberish>;
  protocolFeeShareSCDP: PromiseOrValue<BigNumberish>;
  liqIncentiveSCDP: PromiseOrValue<BigNumberish>;
  decimals: PromiseOrValue<BigNumberish>;
  isCollateral: PromiseOrValue<boolean>;
  isKrAsset: PromiseOrValue<boolean>;
  isSCDPDepositAsset: PromiseOrValue<boolean>;
  isSCDPKrAsset: PromiseOrValue<boolean>;
  isSCDPCollateral: PromiseOrValue<boolean>;
  isSCDPCoverAsset: PromiseOrValue<boolean>;
};

export type AssetStructOutput = [
  string,
  string,
  [number, number],
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
] & {
  underlyingId: string;
  anchor: string;
  oracles: [number, number];
  factor: number;
  kFactor: number;
  openFee: number;
  closeFee: number;
  liqIncentive: number;
  supplyLimit: BigNumber;
  depositLimitSCDP: BigNumber;
  liquidityIndexSCDP: BigNumber;
  swapInFeeSCDP: number;
  swapOutFeeSCDP: number;
  protocolFeeShareSCDP: number;
  liqIncentiveSCDP: number;
  decimals: number;
  isCollateral: boolean;
  isKrAsset: boolean;
  isSCDPDepositAsset: boolean;
  isSCDPKrAsset: boolean;
  isSCDPCollateral: boolean;
  isSCDPCoverAsset: boolean;
};

export interface IAssetStateFacetInterface extends utils.Interface {
  functions: {
    'getAPI3Price(address)': FunctionFragment;
    'getAsset(address)': FunctionFragment;
    'getChainlinkPrice(address)': FunctionFragment;
    'getFeedForAddress(address,uint8)': FunctionFragment;
    'getFeedForId(bytes12,uint8)': FunctionFragment;
    'getPrice(address)': FunctionFragment;
    'getPriceOfAsset(address)': FunctionFragment;
    'getValue(address,uint256)': FunctionFragment;
    'redstonePrice(bytes12,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAPI3Price'
      | 'getAsset'
      | 'getChainlinkPrice'
      | 'getFeedForAddress'
      | 'getFeedForId'
      | 'getPrice'
      | 'getPriceOfAsset'
      | 'getValue'
      | 'redstonePrice',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getAPI3Price', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getChainlinkPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getFeedForAddress',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeedForId',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPriceOfAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getValue',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redstonePrice',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'getAPI3Price', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChainlinkPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeedForAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeedForId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriceOfAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redstonePrice', data: BytesLike): Result;

  events: {};
}

export interface IAssetStateFacet extends BaseContract {
  contractName: 'IAssetStateFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssetStateFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAPI3Price(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[AssetStructOutput]>;

    getChainlinkPrice(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeedForAddress(
      _assetAddr: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string] & { feedAddr: string }>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string] & { feedAddr: string }>;

    getPrice(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOfAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getValue(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  getAPI3Price(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<AssetStructOutput>;

  getChainlinkPrice(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getFeedForAddress(
    _assetAddr: PromiseOrValue<string>,
    _oracleType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getFeedForId(
    _underlyingId: PromiseOrValue<BytesLike>,
    _oracleType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getPrice(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOfAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getValue(
    _assetAddr: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  redstonePrice(
    _underlyingId: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    getAPI3Price(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<AssetStructOutput>;

    getChainlinkPrice(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getFeedForAddress(
      _assetAddr: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getPrice(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getValue(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAPI3Price(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkPrice(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getFeedForAddress(
      _assetAddr: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPrice(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getValue(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAPI3Price(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainlinkPrice(_feedAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeedForAddress(
      _assetAddr: PromiseOrValue<string>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFeedForId(
      _underlyingId: PromiseOrValue<BytesLike>,
      _oracleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPrice(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceOfAsset(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValue(
      _assetAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    redstonePrice(
      _underlyingId: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
