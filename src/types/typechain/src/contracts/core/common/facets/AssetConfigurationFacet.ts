/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type AssetStruct = {
  underlyingId: PromiseOrValue<BytesLike>;
  anchor: PromiseOrValue<string>;
  oracles: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  factor: PromiseOrValue<BigNumberish>;
  kFactor: PromiseOrValue<BigNumberish>;
  openFee: PromiseOrValue<BigNumberish>;
  closeFee: PromiseOrValue<BigNumberish>;
  liqIncentive: PromiseOrValue<BigNumberish>;
  supplyLimit: PromiseOrValue<BigNumberish>;
  depositLimitSCDP: PromiseOrValue<BigNumberish>;
  liquidityIndexSCDP: PromiseOrValue<BigNumberish>;
  swapInFeeSCDP: PromiseOrValue<BigNumberish>;
  swapOutFeeSCDP: PromiseOrValue<BigNumberish>;
  protocolFeeShareSCDP: PromiseOrValue<BigNumberish>;
  liqIncentiveSCDP: PromiseOrValue<BigNumberish>;
  decimals: PromiseOrValue<BigNumberish>;
  isCollateral: PromiseOrValue<boolean>;
  isKrAsset: PromiseOrValue<boolean>;
  isSCDPDepositAsset: PromiseOrValue<boolean>;
  isSCDPKrAsset: PromiseOrValue<boolean>;
  isSCDPCollateral: PromiseOrValue<boolean>;
  isSCDPCoverAsset: PromiseOrValue<boolean>;
};

export type AssetStructOutput = [
  string,
  string,
  [number, number],
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
] & {
  underlyingId: string;
  anchor: string;
  oracles: [number, number];
  factor: number;
  kFactor: number;
  openFee: number;
  closeFee: number;
  liqIncentive: number;
  supplyLimit: BigNumber;
  depositLimitSCDP: BigNumber;
  liquidityIndexSCDP: BigNumber;
  swapInFeeSCDP: number;
  swapOutFeeSCDP: number;
  protocolFeeShareSCDP: number;
  liqIncentiveSCDP: number;
  decimals: number;
  isCollateral: boolean;
  isKrAsset: boolean;
  isSCDPDepositAsset: boolean;
  isSCDPKrAsset: boolean;
  isSCDPCollateral: boolean;
  isSCDPCoverAsset: boolean;
};

export type FeedConfigurationStruct = {
  oracleIds: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  feeds: [PromiseOrValue<string>, PromiseOrValue<string>];
};

export type FeedConfigurationStructOutput = [[number, number], [string, string]] & {
  oracleIds: [number, number];
  feeds: [string, string];
};

export interface AssetConfigurationFacetInterface extends utils.Interface {
  functions: {
    'addAsset(address,(bytes12,address,uint8[2],uint16,uint16,uint16,uint16,uint16,uint128,uint128,uint128,uint16,uint16,uint16,uint16,uint8,bool,bool,bool,bool,bool,bool),(uint8[2],address[2]),bool)': FunctionFragment;
    'setApi3Feed(bytes12,address)': FunctionFragment;
    'setApi3Feeds(bytes12[],address[])': FunctionFragment;
    'setChainLinkFeed(bytes12,address)': FunctionFragment;
    'setChainlinkFeeds(bytes12[],address[])': FunctionFragment;
    'updateAsset(address,(bytes12,address,uint8[2],uint16,uint16,uint16,uint16,uint16,uint128,uint128,uint128,uint16,uint16,uint16,uint16,uint8,bool,bool,bool,bool,bool,bool))': FunctionFragment;
    'updateFeeds(bytes12,(uint8[2],address[2]))': FunctionFragment;
    'updateOracleOrder(address,uint8[2])': FunctionFragment;
    'validateAssetConfig(address,(bytes12,address,uint8[2],uint16,uint16,uint16,uint16,uint16,uint128,uint128,uint128,uint16,uint16,uint16,uint16,uint8,bool,bool,bool,bool,bool,bool))': FunctionFragment;
    'validateLiqConfig(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addAsset'
      | 'setApi3Feed'
      | 'setApi3Feeds'
      | 'setChainLinkFeed'
      | 'setChainlinkFeeds'
      | 'updateAsset'
      | 'updateFeeds'
      | 'updateOracleOrder'
      | 'validateAssetConfig'
      | 'validateLiqConfig',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addAsset',
    values: [PromiseOrValue<string>, AssetStruct, FeedConfigurationStruct, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApi3Feed',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApi3Feeds',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setChainLinkFeed',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setChainlinkFeeds',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'updateAsset', values: [PromiseOrValue<string>, AssetStruct]): string;
  encodeFunctionData(
    functionFragment: 'updateFeeds',
    values: [PromiseOrValue<BytesLike>, FeedConfigurationStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOracleOrder',
    values: [PromiseOrValue<string>, [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]],
  ): string;
  encodeFunctionData(functionFragment: 'validateAssetConfig', values: [PromiseOrValue<string>, AssetStruct]): string;
  encodeFunctionData(functionFragment: 'validateLiqConfig', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApi3Feed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApi3Feeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChainLinkFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChainlinkFeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOracleOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateAssetConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateLiqConfig', data: BytesLike): Result;

  events: {
    'CollateralAssetAdded(string,address,uint256,address,uint256)': EventFragment;
    'CollateralAssetUpdated(string,address,uint256,address,uint256)': EventFragment;
    'KreskoAssetAdded(string,address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'KreskoAssetUpdated(string,address,address,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CollateralAssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAssetUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KreskoAssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KreskoAssetUpdated'): EventFragment;
}

export interface CollateralAssetAddedEventObject {
  id: string;
  collateralAsset: string;
  factor: BigNumber;
  anchor: string;
  liqIncentive: BigNumber;
}
export type CollateralAssetAddedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  CollateralAssetAddedEventObject
>;

export type CollateralAssetAddedEventFilter = TypedEventFilter<CollateralAssetAddedEvent>;

export interface CollateralAssetUpdatedEventObject {
  id: string;
  collateralAsset: string;
  factor: BigNumber;
  anchor: string;
  liqIncentive: BigNumber;
}
export type CollateralAssetUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  CollateralAssetUpdatedEventObject
>;

export type CollateralAssetUpdatedEventFilter = TypedEventFilter<CollateralAssetUpdatedEvent>;

export interface KreskoAssetAddedEventObject {
  id: string;
  kreskoAsset: string;
  anchor: string;
  kFactor: BigNumber;
  supplyLimit: BigNumber;
  closeFee: BigNumber;
  openFee: BigNumber;
}
export type KreskoAssetAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  KreskoAssetAddedEventObject
>;

export type KreskoAssetAddedEventFilter = TypedEventFilter<KreskoAssetAddedEvent>;

export interface KreskoAssetUpdatedEventObject {
  id: string;
  kreskoAsset: string;
  anchor: string;
  kFactor: BigNumber;
  supplyLimit: BigNumber;
  closeFee: BigNumber;
  openFee: BigNumber;
}
export type KreskoAssetUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  KreskoAssetUpdatedEventObject
>;

export type KreskoAssetUpdatedEventFilter = TypedEventFilter<KreskoAssetUpdatedEvent>;

export interface AssetConfigurationFacet extends BaseContract {
  contractName: 'AssetConfigurationFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetConfigurationFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<[void]>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
  };

  addAsset(
    _assetAddr: PromiseOrValue<string>,
    _config: AssetStruct,
    _feedConfig: FeedConfigurationStruct,
    _setFeeds: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApi3Feed(
    _assetId: PromiseOrValue<BytesLike>,
    _feedAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApi3Feeds(
    _assetIds: PromiseOrValue<BytesLike>[],
    _feeds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setChainLinkFeed(
    _assetId: PromiseOrValue<BytesLike>,
    _feedAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setChainlinkFeeds(
    _assetIds: PromiseOrValue<BytesLike>[],
    _feeds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAsset(
    _assetAddr: PromiseOrValue<string>,
    _config: AssetStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFeeds(
    _assetId: PromiseOrValue<BytesLike>,
    _feedConfig: FeedConfigurationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOracleOrder(
    _assetAddr: PromiseOrValue<string>,
    _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  validateAssetConfig(
    _assetAddr: PromiseOrValue<string>,
    _config: AssetStruct,
    overrides?: CallOverrides,
  ): Promise<void>;

  validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateAsset(_assetAddr: PromiseOrValue<string>, _config: AssetStruct, overrides?: CallOverrides): Promise<void>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<void>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CollateralAssetAdded(string,address,uint256,address,uint256)'(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetAddedEventFilter;
    CollateralAssetAdded(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetAddedEventFilter;

    'CollateralAssetUpdated(string,address,uint256,address,uint256)'(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetUpdatedEventFilter;
    CollateralAssetUpdated(
      id?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      factor?: null,
      anchor?: null,
      liqIncentive?: null,
    ): CollateralAssetUpdatedEventFilter;

    'KreskoAssetAdded(string,address,address,uint256,uint256,uint256,uint256)'(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetAddedEventFilter;
    KreskoAssetAdded(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetAddedEventFilter;

    'KreskoAssetUpdated(string,address,address,uint256,uint256,uint256,uint256)'(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetUpdatedEventFilter;
    KreskoAssetUpdated(
      id?: PromiseOrValue<string> | null,
      kreskoAsset?: PromiseOrValue<string> | null,
      anchor?: null,
      kFactor?: null,
      supplyLimit?: null,
      closeFee?: null,
      openFee?: null,
    ): KreskoAssetUpdatedEventFilter;
  };

  estimateGas: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      _feedConfig: FeedConfigurationStruct,
      _setFeeds: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApi3Feed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApi3Feeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setChainLinkFeed(
      _assetId: PromiseOrValue<BytesLike>,
      _feedAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setChainlinkFeeds(
      _assetIds: PromiseOrValue<BytesLike>[],
      _feeds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAsset(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFeeds(
      _assetId: PromiseOrValue<BytesLike>,
      _feedConfig: FeedConfigurationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOracleOrder(
      _assetAddr: PromiseOrValue<string>,
      _newOracleOrder: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    validateAssetConfig(
      _assetAddr: PromiseOrValue<string>,
      _config: AssetStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    validateLiqConfig(_assetAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
