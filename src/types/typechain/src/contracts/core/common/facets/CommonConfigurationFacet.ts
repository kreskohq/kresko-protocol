/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type CommonInitArgsStruct = {
  admin: PromiseOrValue<string>;
  council: PromiseOrValue<string>;
  treasury: PromiseOrValue<string>;
  minDebtValue: PromiseOrValue<BigNumberish>;
  oracleDeviationPct: PromiseOrValue<BigNumberish>;
  oracleDecimals: PromiseOrValue<BigNumberish>;
  sequencerUptimeFeed: PromiseOrValue<string>;
  sequencerGracePeriodTime: PromiseOrValue<BigNumberish>;
  oracleTimeout: PromiseOrValue<BigNumberish>;
  kreskian: PromiseOrValue<string>;
  questForKresk: PromiseOrValue<string>;
  phase: PromiseOrValue<BigNumberish>;
};

export type CommonInitArgsStructOutput = [
  string,
  string,
  string,
  BigNumber,
  number,
  number,
  string,
  number,
  number,
  string,
  string,
  number,
] & {
  admin: string;
  council: string;
  treasury: string;
  minDebtValue: BigNumber;
  oracleDeviationPct: number;
  oracleDecimals: number;
  sequencerUptimeFeed: string;
  sequencerGracePeriodTime: number;
  oracleTimeout: number;
  kreskian: string;
  questForKresk: string;
  phase: number;
};

export interface CommonConfigurationFacetInterface extends utils.Interface {
  functions: {
    'initializeCommon((address,address,address,uint64,uint16,uint8,address,uint32,uint32,address,address,uint8))': FunctionFragment;
    'updateExtOracleDecimals(uint8)': FunctionFragment;
    'updateFeeRecipient(address)': FunctionFragment;
    'updateKreskian(address)': FunctionFragment;
    'updateMinDebtValue(uint96)': FunctionFragment;
    'updateOracleDeviationPct(uint16)': FunctionFragment;
    'updateOracleTimeout(uint32)': FunctionFragment;
    'updatePhase(uint8)': FunctionFragment;
    'updateQuestForKresk(address)': FunctionFragment;
    'updateSequencerGracePeriodTime(uint32)': FunctionFragment;
    'updateSequencerUptimeFeed(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'initializeCommon'
      | 'updateExtOracleDecimals'
      | 'updateFeeRecipient'
      | 'updateKreskian'
      | 'updateMinDebtValue'
      | 'updateOracleDeviationPct'
      | 'updateOracleTimeout'
      | 'updatePhase'
      | 'updateQuestForKresk'
      | 'updateSequencerGracePeriodTime'
      | 'updateSequencerUptimeFeed',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'initializeCommon', values: [CommonInitArgsStruct]): string;
  encodeFunctionData(functionFragment: 'updateExtOracleDecimals', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateFeeRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateKreskian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateMinDebtValue', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateOracleDeviationPct', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateOracleTimeout', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updatePhase', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateQuestForKresk', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateSequencerGracePeriodTime',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateSequencerUptimeFeed', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'initializeCommon', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateExtOracleDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateKreskian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinDebtValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOracleDeviationPct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOracleTimeout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePhase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateQuestForKresk', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSequencerGracePeriodTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSequencerUptimeFeed', data: BytesLike): Result;

  events: {
    'FeeRecipientUpdated(address)': EventFragment;
    'Initialized(address,uint96)': EventFragment;
    'MinimumDebtValueUpdated(uint256)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FeeRecipientUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumDebtValueUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
}

export interface FeeRecipientUpdatedEventObject {
  feeRecipient: string;
}
export type FeeRecipientUpdatedEvent = TypedEvent<[string], FeeRecipientUpdatedEventObject>;

export type FeeRecipientUpdatedEventFilter = TypedEventFilter<FeeRecipientUpdatedEvent>;

export interface InitializedEventObject {
  operator: string;
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[string, BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MinimumDebtValueUpdatedEventObject {
  minDebtValue: BigNumber;
}
export type MinimumDebtValueUpdatedEvent = TypedEvent<[BigNumber], MinimumDebtValueUpdatedEventObject>;

export type MinimumDebtValueUpdatedEventFilter = TypedEventFilter<MinimumDebtValueUpdatedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface CommonConfigurationFacet extends BaseContract {
  contractName: 'CommonConfigurationFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommonConfigurationFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializeCommon(
      args: CommonInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateExtOracleDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateKreskian(
      _kreskian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinDebtValue(
      _newMinDebtValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleTimeout(
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateQuestForKresk(
      _questForKresk: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  initializeCommon(
    args: CommonInitArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateExtOracleDecimals(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    _newFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateKreskian(
    _kreskian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMinDebtValue(
    _newMinDebtValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOracleDeviationPct(
    _oracleDeviationPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOracleTimeout(
    _oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePhase(
    _phase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateQuestForKresk(
    _questForKresk: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSequencerGracePeriodTime(
    _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSequencerUptimeFeed(
    _sequencerUptimeFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    initializeCommon(args: CommonInitArgsStruct, overrides?: CallOverrides): Promise<void>;

    updateExtOracleDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateFeeRecipient(_newFeeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateKreskian(_kreskian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateMinDebtValue(_newMinDebtValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOracleTimeout(_oracleTimeout: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePhase(_phase: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateQuestForKresk(_questForKresk: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateSequencerUptimeFeed(_sequencerUptimeFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'FeeRecipientUpdated(address)'(feeRecipient?: PromiseOrValue<string> | null): FeeRecipientUpdatedEventFilter;
    FeeRecipientUpdated(feeRecipient?: PromiseOrValue<string> | null): FeeRecipientUpdatedEventFilter;

    'Initialized(address,uint96)'(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;
    Initialized(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;

    'MinimumDebtValueUpdated(uint256)'(minDebtValue?: null): MinimumDebtValueUpdatedEventFilter;
    MinimumDebtValueUpdated(minDebtValue?: null): MinimumDebtValueUpdatedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
  };

  estimateGas: {
    initializeCommon(
      args: CommonInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateExtOracleDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateKreskian(
      _kreskian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMinDebtValue(
      _newMinDebtValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOracleTimeout(
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateQuestForKresk(
      _questForKresk: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeCommon(
      args: CommonInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateExtOracleDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateKreskian(
      _kreskian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMinDebtValue(
      _newMinDebtValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOracleDeviationPct(
      _oracleDeviationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOracleTimeout(
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePhase(
      _phase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateQuestForKresk(
      _questForKresk: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSequencerGracePeriodTime(
      _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSequencerUptimeFeed(
      _sequencerUptimeFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
