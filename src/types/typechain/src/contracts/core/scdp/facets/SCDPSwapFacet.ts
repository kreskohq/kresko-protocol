/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface SCDPSwapFacetInterface extends utils.Interface {
  functions: {
    'cumulateIncomeSCDP(address,uint256)': FunctionFragment;
    'previewSwapSCDP(address,address,uint256)': FunctionFragment;
    'swapSCDP(address,address,address,uint256,uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'cumulateIncomeSCDP' | 'previewSwapSCDP' | 'swapSCDP'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'cumulateIncomeSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewSwapSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapSCDP',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'cumulateIncomeSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewSwapSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapSCDP', data: BytesLike): Result;

  events: {
    'Income(address,uint256)': EventFragment;
    'Swap(address,address,address,uint256,uint256)': EventFragment;
    'SwapFee(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Income'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapFee'): EventFragment;
}

export interface IncomeEventObject {
  asset: string;
  amount: BigNumber;
}
export type IncomeEvent = TypedEvent<[string, BigNumber], IncomeEventObject>;

export type IncomeEventFilter = TypedEventFilter<IncomeEvent>;

export interface SwapEventObject {
  who: string;
  assetIn: string;
  assetOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type SwapEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface SwapFeeEventObject {
  feeAsset: string;
  assetIn: string;
  feeAmount: BigNumber;
  protocolFeeAmount: BigNumber;
}
export type SwapFeeEvent = TypedEvent<[string, string, BigNumber, BigNumber], SwapFeeEventObject>;

export type SwapFeeEventFilter = TypedEventFilter<SwapFeeEvent>;

export interface SCDPSwapFacet extends BaseContract {
  contractName: 'SCDPSwapFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SCDPSwapFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        feeAmount: BigNumber;
        feeAmountProtocol: BigNumber;
      }
    >;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  cumulateIncomeSCDP(
    _depositAssetAddr: PromiseOrValue<string>,
    _incomeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewSwapSCDP(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountOut: BigNumber;
      feeAmount: BigNumber;
      feeAmountProtocol: BigNumber;
    }
  >;

  swapSCDP(
    _receiver: PromiseOrValue<string>,
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        feeAmount: BigNumber;
        feeAmountProtocol: BigNumber;
      }
    >;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Income(address,uint256)'(asset?: null, amount?: null): IncomeEventFilter;
    Income(asset?: null, amount?: null): IncomeEventFilter;

    'Swap(address,address,address,uint256,uint256)'(
      who?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
    ): SwapEventFilter;
    Swap(
      who?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
    ): SwapEventFilter;

    'SwapFee(address,address,uint256,uint256)'(
      feeAsset?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      feeAmount?: null,
      protocolFeeAmount?: null,
    ): SwapFeeEventFilter;
    SwapFee(
      feeAsset?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      feeAmount?: null,
      protocolFeeAmount?: null,
    ): SwapFeeEventFilter;
  };

  estimateGas: {
    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cumulateIncomeSCDP(
      _depositAssetAddr: PromiseOrValue<string>,
      _incomeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewSwapSCDP(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    swapSCDP(
      _receiver: PromiseOrValue<string>,
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
