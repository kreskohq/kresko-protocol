/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type MaxLiqInfoStruct = {
  account: PromiseOrValue<string>;
  seizeAssetAddr: PromiseOrValue<string>;
  repayAssetAddr: PromiseOrValue<string>;
  repayValue: PromiseOrValue<BigNumberish>;
  repayAmount: PromiseOrValue<BigNumberish>;
  seizeAmount: PromiseOrValue<BigNumberish>;
  seizeValue: PromiseOrValue<BigNumberish>;
  repayAssetPrice: PromiseOrValue<BigNumberish>;
  repayAssetIndex: PromiseOrValue<BigNumberish>;
  seizeAssetPrice: PromiseOrValue<BigNumberish>;
  seizeAssetIndex: PromiseOrValue<BigNumberish>;
};

export type MaxLiqInfoStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  account: string;
  seizeAssetAddr: string;
  repayAssetAddr: string;
  repayValue: BigNumber;
  repayAmount: BigNumber;
  seizeAmount: BigNumber;
  seizeValue: BigNumber;
  repayAssetPrice: BigNumber;
  repayAssetIndex: BigNumber;
  seizeAssetPrice: BigNumber;
  seizeAssetIndex: BigNumber;
};

export interface SCDPFacetInterface extends utils.Interface {
  functions: {
    'depositSCDP(address,address,uint256)': FunctionFragment;
    'getLiquidatableSCDP()': FunctionFragment;
    'getMaxLiqValueSCDP(address,address)': FunctionFragment;
    'liquidateSCDP(address,uint256,address)': FunctionFragment;
    'repaySCDP(address,uint256,address)': FunctionFragment;
    'withdrawSCDP(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'depositSCDP'
      | 'getLiquidatableSCDP'
      | 'getMaxLiqValueSCDP'
      | 'liquidateSCDP'
      | 'repaySCDP'
      | 'withdrawSCDP',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'depositSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getLiquidatableSCDP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getMaxLiqValueSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'repaySCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'depositSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidatableSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxLiqValueSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaySCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawSCDP', data: BytesLike): Result;

  events: {
    'SCDPDeposit(address,address,uint256)': EventFragment;
    'SCDPLiquidationOccured(address,address,uint256,address,uint256)': EventFragment;
    'SCDPRepay(address,address,uint256,address,uint256)': EventFragment;
    'SCDPWithdraw(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'SCDPDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPLiquidationOccured'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPRepay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPWithdraw'): EventFragment;
}

export interface SCDPDepositEventObject {
  depositor: string;
  collateralAsset: string;
  amount: BigNumber;
}
export type SCDPDepositEvent = TypedEvent<[string, string, BigNumber], SCDPDepositEventObject>;

export type SCDPDepositEventFilter = TypedEventFilter<SCDPDepositEvent>;

export interface SCDPLiquidationOccuredEventObject {
  liquidator: string;
  repayKreskoAsset: string;
  repayAmount: BigNumber;
  seizeCollateral: string;
  seizeAmount: BigNumber;
}
export type SCDPLiquidationOccuredEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  SCDPLiquidationOccuredEventObject
>;

export type SCDPLiquidationOccuredEventFilter = TypedEventFilter<SCDPLiquidationOccuredEvent>;

export interface SCDPRepayEventObject {
  repayer: string;
  repayKreskoAsset: string;
  repayAmount: BigNumber;
  receiveKreskoAsset: string;
  receiveAmount: BigNumber;
}
export type SCDPRepayEvent = TypedEvent<[string, string, BigNumber, string, BigNumber], SCDPRepayEventObject>;

export type SCDPRepayEventFilter = TypedEventFilter<SCDPRepayEvent>;

export interface SCDPWithdrawEventObject {
  withdrawer: string;
  collateralAsset: string;
  amount: BigNumber;
  feeAmount: BigNumber;
}
export type SCDPWithdrawEvent = TypedEvent<[string, string, BigNumber, BigNumber], SCDPWithdrawEventObject>;

export type SCDPWithdrawEventFilter = TypedEventFilter<SCDPWithdrawEvent>;

export interface SCDPFacet extends BaseContract {
  contractName: 'SCDPFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SCDPFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<[boolean]>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[MaxLiqInfoStructOutput]>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  depositSCDP(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getLiquidatableSCDP(overrides?: CallOverrides): Promise<boolean>;

  getMaxLiqValueSCDP(
    _repayAssetAddr: PromiseOrValue<string>,
    _seizeAssetAddr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<MaxLiqInfoStructOutput>;

  liquidateSCDP(
    _repayAssetAddr: PromiseOrValue<string>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    _seizeAssetAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repaySCDP(
    _repayAssetAddr: PromiseOrValue<string>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    _seizeAssetAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawSCDP(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<boolean>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<MaxLiqInfoStructOutput>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'SCDPDeposit(address,address,uint256)'(
      depositor?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): SCDPDepositEventFilter;
    SCDPDeposit(
      depositor?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): SCDPDepositEventFilter;

    'SCDPLiquidationOccured(address,address,uint256,address,uint256)'(
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizeCollateral?: PromiseOrValue<string> | null,
      seizeAmount?: null,
    ): SCDPLiquidationOccuredEventFilter;
    SCDPLiquidationOccured(
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizeCollateral?: PromiseOrValue<string> | null,
      seizeAmount?: null,
    ): SCDPLiquidationOccuredEventFilter;

    'SCDPRepay(address,address,uint256,address,uint256)'(
      repayer?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      receiveKreskoAsset?: PromiseOrValue<string> | null,
      receiveAmount?: null,
    ): SCDPRepayEventFilter;
    SCDPRepay(
      repayer?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      receiveKreskoAsset?: PromiseOrValue<string> | null,
      receiveAmount?: null,
    ): SCDPRepayEventFilter;

    'SCDPWithdraw(address,address,uint256,uint256)'(
      withdrawer?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): SCDPWithdrawEventFilter;
    SCDPWithdraw(
      withdrawer?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): SCDPWithdrawEventFilter;
  };

  estimateGas: {
    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getLiquidatableSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLiqValueSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidateSCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repaySCDP(
      _repayAssetAddr: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _seizeAssetAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawSCDP(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
