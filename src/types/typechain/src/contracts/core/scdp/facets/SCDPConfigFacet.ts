/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export type SCDPInitArgsStruct = {
  swapFeeRecipient: PromiseOrValue<string>;
  minCollateralRatio: PromiseOrValue<BigNumberish>;
  liquidationThreshold: PromiseOrValue<BigNumberish>;
  sdiPricePrecision: PromiseOrValue<BigNumberish>;
};

export type SCDPInitArgsStructOutput = [string, number, number, number] & {
  swapFeeRecipient: string;
  minCollateralRatio: number;
  liquidationThreshold: number;
  sdiPricePrecision: number;
};

export type PairSetterStruct = {
  assetIn: PromiseOrValue<string>;
  assetOut: PromiseOrValue<string>;
  enabled: PromiseOrValue<boolean>;
};

export type PairSetterStructOutput = [string, string, boolean] & {
  assetIn: string;
  assetOut: string;
  enabled: boolean;
};

export interface SCDPConfigFacetInterface extends utils.Interface {
  functions: {
    'getCurrentParametersSCDP()': FunctionFragment;
    'initializeSCDP((address,uint32,uint32,uint8))': FunctionFragment;
    'setCollateralSCDP(address,bool)': FunctionFragment;
    'setDepositAssetSCDP(address,bool)': FunctionFragment;
    'setFeeAssetSCDP(address)': FunctionFragment;
    'setKrAssetSCDP(address,bool)': FunctionFragment;
    'setLiquidationThresholdSCDP(uint32)': FunctionFragment;
    'setMaxLiquidationRatioSCDP(uint32)': FunctionFragment;
    'setMinCollateralRatioSCDP(uint32)': FunctionFragment;
    'setSwapFee(address,uint16,uint16,uint16)': FunctionFragment;
    'setSwapPairs((address,address,bool)[])': FunctionFragment;
    'setSwapPairsSingle((address,address,bool))': FunctionFragment;
    'updateDepositLimitSCDP(address,uint128)': FunctionFragment;
    'updateLiquidationIncentiveSCDP(address,uint16)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getCurrentParametersSCDP'
      | 'initializeSCDP'
      | 'setCollateralSCDP'
      | 'setDepositAssetSCDP'
      | 'setFeeAssetSCDP'
      | 'setKrAssetSCDP'
      | 'setLiquidationThresholdSCDP'
      | 'setMaxLiquidationRatioSCDP'
      | 'setMinCollateralRatioSCDP'
      | 'setSwapFee'
      | 'setSwapPairs'
      | 'setSwapPairsSingle'
      | 'updateDepositLimitSCDP'
      | 'updateLiquidationIncentiveSCDP',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getCurrentParametersSCDP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initializeSCDP', values: [SCDPInitArgsStruct]): string;
  encodeFunctionData(
    functionFragment: 'setCollateralSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositAssetSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeAssetSCDP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setKrAssetSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setLiquidationThresholdSCDP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMaxLiquidationRatioSCDP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMinCollateralRatioSCDP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setSwapFee',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setSwapPairs', values: [PairSetterStruct[]]): string;
  encodeFunctionData(functionFragment: 'setSwapPairsSingle', values: [PairSetterStruct]): string;
  encodeFunctionData(
    functionFragment: 'updateDepositLimitSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateLiquidationIncentiveSCDP',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'getCurrentParametersSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollateralSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositAssetSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeAssetSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKrAssetSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationThresholdSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxLiquidationRatioSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinCollateralRatioSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapPairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapPairsSingle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDepositLimitSCDP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidationIncentiveSCDP', data: BytesLike): Result;

  events: {
    'FeeSet(address,uint256,uint256,uint256)': EventFragment;
    'Initialized(address,uint96)': EventFragment;
    'LiquidationIncentiveMultiplierUpdated(address,uint256)': EventFragment;
    'PairSet(address,address,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationIncentiveMultiplierUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PairSet'): EventFragment;
}

export interface FeeSetEventObject {
  _asset: string;
  openFee: BigNumber;
  closeFee: BigNumber;
  protocolFee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface InitializedEventObject {
  operator: string;
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[string, BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidationIncentiveMultiplierUpdatedEventObject {
  asset: string;
  liqIncentiveMultiplier: BigNumber;
}
export type LiquidationIncentiveMultiplierUpdatedEvent = TypedEvent<
  [string, BigNumber],
  LiquidationIncentiveMultiplierUpdatedEventObject
>;

export type LiquidationIncentiveMultiplierUpdatedEventFilter =
  TypedEventFilter<LiquidationIncentiveMultiplierUpdatedEvent>;

export interface PairSetEventObject {
  assetIn: string;
  assetOut: string;
  enabled: boolean;
}
export type PairSetEvent = TypedEvent<[string, string, boolean], PairSetEventObject>;

export type PairSetEventFilter = TypedEventFilter<PairSetEvent>;

export interface SCDPConfigFacet extends BaseContract {
  contractName: 'SCDPConfigFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SCDPConfigFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<[SCDPInitArgsStructOutput]>;

    initializeSCDP(
      _init: SCDPInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeAssetSCDP(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidationThresholdSCDP(
      _lt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxLiquidationRatioSCDP(
      _mlr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinCollateralRatioSCDP(
      _mcr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapPairs(
      _pairs: PairSetterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapPairsSingle(
      _pair: PairSetterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  getCurrentParametersSCDP(overrides?: CallOverrides): Promise<SCDPInitArgsStructOutput>;

  initializeSCDP(
    _init: SCDPInitArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCollateralSCDP(
    _assetAddr: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositAssetSCDP(
    _assetAddr: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeAssetSCDP(
    asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setKrAssetSCDP(
    _assetAddr: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidationThresholdSCDP(
    _lt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxLiquidationRatioSCDP(
    _mlr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinCollateralRatioSCDP(
    _mcr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapFee(
    _krAsset: PromiseOrValue<string>,
    _openFee: PromiseOrValue<BigNumberish>,
    _closeFee: PromiseOrValue<BigNumberish>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapPairs(
    _pairs: PairSetterStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapPairsSingle(
    _pair: PairSetterStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDepositLimitSCDP(
    _assetAddr: PromiseOrValue<string>,
    _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLiquidationIncentiveSCDP(
    _assetAddr: PromiseOrValue<string>,
    _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<SCDPInitArgsStructOutput>;

    initializeSCDP(_init: SCDPInitArgsStruct, overrides?: CallOverrides): Promise<void>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeAssetSCDP(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLiquidationThresholdSCDP(_lt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxLiquidationRatioSCDP(_mlr: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMinCollateralRatioSCDP(_mcr: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSwapPairs(_pairs: PairSetterStruct[], overrides?: CallOverrides): Promise<void>;

    setSwapPairsSingle(_pair: PairSetterStruct, overrides?: CallOverrides): Promise<void>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'FeeSet(address,uint256,uint256,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
    ): FeeSetEventFilter;
    FeeSet(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
    ): FeeSetEventFilter;

    'Initialized(address,uint96)'(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;
    Initialized(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;

    'LiquidationIncentiveMultiplierUpdated(address,uint256)'(
      asset?: PromiseOrValue<string> | null,
      liqIncentiveMultiplier?: null,
    ): LiquidationIncentiveMultiplierUpdatedEventFilter;
    LiquidationIncentiveMultiplierUpdated(
      asset?: PromiseOrValue<string> | null,
      liqIncentiveMultiplier?: null,
    ): LiquidationIncentiveMultiplierUpdatedEventFilter;

    'PairSet(address,address,bool)'(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      enabled?: null,
    ): PairSetEventFilter;
    PairSet(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      enabled?: null,
    ): PairSetEventFilter;
  };

  estimateGas: {
    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<BigNumber>;

    initializeSCDP(
      _init: SCDPInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeAssetSCDP(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidationThresholdSCDP(
      _lt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxLiquidationRatioSCDP(
      _mlr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinCollateralRatioSCDP(
      _mcr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapPairs(
      _pairs: PairSetterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapPairsSingle(
      _pair: PairSetterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentParametersSCDP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeSCDP(
      _init: SCDPInitArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCollateralSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeAssetSCDP(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setKrAssetSCDP(
      _assetAddr: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationThresholdSCDP(
      _lt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxLiquidationRatioSCDP(
      _mlr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinCollateralRatioSCDP(
      _mcr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      _krAsset: PromiseOrValue<string>,
      _openFee: PromiseOrValue<BigNumberish>,
      _closeFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapPairs(
      _pairs: PairSetterStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapPairsSingle(
      _pair: PairSetterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDepositLimitSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newDepositLimitSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLiquidationIncentiveSCDP(
      _assetAddr: PromiseOrValue<string>,
      _newLiqIncentiveSCDP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
