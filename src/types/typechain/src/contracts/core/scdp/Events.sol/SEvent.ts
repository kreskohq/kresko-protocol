/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from 'ethers';
import type { EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface SEventInterface extends utils.Interface {
  functions: {};

  events: {
    'FeeSet(address,uint256,uint256,uint256)': EventFragment;
    'Income(address,uint256)': EventFragment;
    'PairSet(address,address,bool)': EventFragment;
    'SCDPCollateralUpdated(address,uint256)': EventFragment;
    'SCDPDeposit(address,address,uint256)': EventFragment;
    'SCDPKrAssetUpdated(address,uint64,uint64,uint128,uint256)': EventFragment;
    'SCDPLiquidationOccured(address,address,uint256,address,uint256)': EventFragment;
    'SCDPRepay(address,address,uint256,address,uint256)': EventFragment;
    'SCDPWithdraw(address,address,uint256,uint256)': EventFragment;
    'Swap(address,address,address,uint256,uint256)': EventFragment;
    'SwapFee(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Income'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PairSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPCollateralUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPKrAssetUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPLiquidationOccured'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPRepay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SCDPWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapFee'): EventFragment;
}

export interface FeeSetEventObject {
  _asset: string;
  openFee: BigNumber;
  closeFee: BigNumber;
  protocolFee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface IncomeEventObject {
  asset: string;
  amount: BigNumber;
}
export type IncomeEvent = TypedEvent<[string, BigNumber], IncomeEventObject>;

export type IncomeEventFilter = TypedEventFilter<IncomeEvent>;

export interface PairSetEventObject {
  assetIn: string;
  assetOut: string;
  enabled: boolean;
}
export type PairSetEvent = TypedEvent<[string, string, boolean], PairSetEventObject>;

export type PairSetEventFilter = TypedEventFilter<PairSetEvent>;

export interface SCDPCollateralUpdatedEventObject {
  _asset: string;
  liquidationThreshold: BigNumber;
}
export type SCDPCollateralUpdatedEvent = TypedEvent<[string, BigNumber], SCDPCollateralUpdatedEventObject>;

export type SCDPCollateralUpdatedEventFilter = TypedEventFilter<SCDPCollateralUpdatedEvent>;

export interface SCDPDepositEventObject {
  depositor: string;
  collateralAsset: string;
  amount: BigNumber;
}
export type SCDPDepositEvent = TypedEvent<[string, string, BigNumber], SCDPDepositEventObject>;

export type SCDPDepositEventFilter = TypedEventFilter<SCDPDepositEvent>;

export interface SCDPKrAssetUpdatedEventObject {
  _asset: string;
  openFee: BigNumber;
  closeFee: BigNumber;
  protocolFee: BigNumber;
  supplyLimit: BigNumber;
}
export type SCDPKrAssetUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  SCDPKrAssetUpdatedEventObject
>;

export type SCDPKrAssetUpdatedEventFilter = TypedEventFilter<SCDPKrAssetUpdatedEvent>;

export interface SCDPLiquidationOccuredEventObject {
  liquidator: string;
  repayKreskoAsset: string;
  repayAmount: BigNumber;
  seizeCollateral: string;
  seizeAmount: BigNumber;
}
export type SCDPLiquidationOccuredEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  SCDPLiquidationOccuredEventObject
>;

export type SCDPLiquidationOccuredEventFilter = TypedEventFilter<SCDPLiquidationOccuredEvent>;

export interface SCDPRepayEventObject {
  repayer: string;
  repayKreskoAsset: string;
  repayAmount: BigNumber;
  receiveKreskoAsset: string;
  receiveAmount: BigNumber;
}
export type SCDPRepayEvent = TypedEvent<[string, string, BigNumber, string, BigNumber], SCDPRepayEventObject>;

export type SCDPRepayEventFilter = TypedEventFilter<SCDPRepayEvent>;

export interface SCDPWithdrawEventObject {
  withdrawer: string;
  collateralAsset: string;
  amount: BigNumber;
  feeAmount: BigNumber;
}
export type SCDPWithdrawEvent = TypedEvent<[string, string, BigNumber, BigNumber], SCDPWithdrawEventObject>;

export type SCDPWithdrawEventFilter = TypedEventFilter<SCDPWithdrawEvent>;

export interface SwapEventObject {
  who: string;
  assetIn: string;
  assetOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type SwapEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface SwapFeeEventObject {
  feeAsset: string;
  assetIn: string;
  feeAmount: BigNumber;
  protocolFeeAmount: BigNumber;
}
export type SwapFeeEvent = TypedEvent<[string, string, BigNumber, BigNumber], SwapFeeEventObject>;

export type SwapFeeEventFilter = TypedEventFilter<SwapFeeEvent>;

export interface SEvent extends BaseContract {
  contractName: 'SEvent';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    'FeeSet(address,uint256,uint256,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
    ): FeeSetEventFilter;
    FeeSet(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
    ): FeeSetEventFilter;

    'Income(address,uint256)'(asset?: null, amount?: null): IncomeEventFilter;
    Income(asset?: null, amount?: null): IncomeEventFilter;

    'PairSet(address,address,bool)'(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      enabled?: null,
    ): PairSetEventFilter;
    PairSet(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      enabled?: null,
    ): PairSetEventFilter;

    'SCDPCollateralUpdated(address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      liquidationThreshold?: null,
    ): SCDPCollateralUpdatedEventFilter;
    SCDPCollateralUpdated(
      _asset?: PromiseOrValue<string> | null,
      liquidationThreshold?: null,
    ): SCDPCollateralUpdatedEventFilter;

    'SCDPDeposit(address,address,uint256)'(
      depositor?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): SCDPDepositEventFilter;
    SCDPDeposit(
      depositor?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
    ): SCDPDepositEventFilter;

    'SCDPKrAssetUpdated(address,uint64,uint64,uint128,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
      supplyLimit?: null,
    ): SCDPKrAssetUpdatedEventFilter;
    SCDPKrAssetUpdated(
      _asset?: PromiseOrValue<string> | null,
      openFee?: null,
      closeFee?: null,
      protocolFee?: null,
      supplyLimit?: null,
    ): SCDPKrAssetUpdatedEventFilter;

    'SCDPLiquidationOccured(address,address,uint256,address,uint256)'(
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizeCollateral?: PromiseOrValue<string> | null,
      seizeAmount?: null,
    ): SCDPLiquidationOccuredEventFilter;
    SCDPLiquidationOccured(
      liquidator?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      seizeCollateral?: PromiseOrValue<string> | null,
      seizeAmount?: null,
    ): SCDPLiquidationOccuredEventFilter;

    'SCDPRepay(address,address,uint256,address,uint256)'(
      repayer?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      receiveKreskoAsset?: PromiseOrValue<string> | null,
      receiveAmount?: null,
    ): SCDPRepayEventFilter;
    SCDPRepay(
      repayer?: PromiseOrValue<string> | null,
      repayKreskoAsset?: PromiseOrValue<string> | null,
      repayAmount?: null,
      receiveKreskoAsset?: PromiseOrValue<string> | null,
      receiveAmount?: null,
    ): SCDPRepayEventFilter;

    'SCDPWithdraw(address,address,uint256,uint256)'(
      withdrawer?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): SCDPWithdrawEventFilter;
    SCDPWithdraw(
      withdrawer?: PromiseOrValue<string> | null,
      collateralAsset?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): SCDPWithdrawEventFilter;

    'Swap(address,address,address,uint256,uint256)'(
      who?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
    ): SwapEventFilter;
    Swap(
      who?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
    ): SwapEventFilter;

    'SwapFee(address,address,uint256,uint256)'(
      feeAsset?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      feeAmount?: null,
      protocolFeeAmount?: null,
    ): SwapFeeEventFilter;
    SwapFee(
      feeAsset?: PromiseOrValue<string> | null,
      assetIn?: PromiseOrValue<string> | null,
      feeAmount?: null,
      protocolFeeAmount?: null,
    ): SwapFeeEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
