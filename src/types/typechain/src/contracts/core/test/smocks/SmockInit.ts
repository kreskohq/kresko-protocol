/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface SmockInitInterface extends utils.Interface {
  functions: {
    'getBool()': FunctionFragment;
    'getNumber()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'upgradeState()': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'getBool' | 'getNumber' | 'initialize' | 'upgradeState'): FunctionFragment;

  encodeFunctionData(functionFragment: 'getBool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'upgradeState', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getBool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeState', data: BytesLike): Result;

  events: {
    'Call(address)': EventFragment;
    'Initialized(address,uint96)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Call'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
}

export interface CallEventObject {
  caller: string;
}
export type CallEvent = TypedEvent<[string], CallEventObject>;

export type CallEventFilter = TypedEventFilter<CallEvent>;

export interface InitializedEventObject {
  operator: string;
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[string, BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface SmockInit extends BaseContract {
  contractName: 'SmockInit';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmockInitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBool(overrides?: CallOverrides): Promise<[boolean]>;

    getNumber(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  getBool(overrides?: CallOverrides): Promise<boolean>;

  getNumber(overrides?: CallOverrides): Promise<number>;

  initialize(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    getBool(overrides?: CallOverrides): Promise<boolean>;

    getNumber(overrides?: CallOverrides): Promise<number>;

    initialize(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeState(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Call(address)'(caller?: PromiseOrValue<string> | null): CallEventFilter;
    Call(caller?: PromiseOrValue<string> | null): CallEventFilter;

    'Initialized(address,uint96)'(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;
    Initialized(operator?: PromiseOrValue<string> | null, version?: null): InitializedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
  };

  estimateGas: {
    getBool(overrides?: CallOverrides): Promise<BigNumber>;

    getNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    getBool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeState(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
