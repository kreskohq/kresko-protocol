/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface SmockFacetInterface extends utils.Interface {
  functions: {
    'MESSAGE_THROTTLE()': FunctionFragment;
    'activate()': FunctionFragment;
    'disable()': FunctionFragment;
    'operator()': FunctionFragment;
    'setMessage(string)': FunctionFragment;
    'smockInitialized()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MESSAGE_THROTTLE'
      | 'activate'
      | 'disable'
      | 'operator'
      | 'setMessage'
      | 'smockInitialized',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MESSAGE_THROTTLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setMessage', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'smockInitialized', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MESSAGE_THROTTLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'smockInitialized', data: BytesLike): Result;

  events: {
    'Call(address)': EventFragment;
    'NewMessage(address,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Call'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMessage'): EventFragment;
}

export interface CallEventObject {
  caller: string;
}
export type CallEvent = TypedEvent<[string], CallEventObject>;

export type CallEventFilter = TypedEventFilter<CallEvent>;

export interface NewMessageEventObject {
  caller: string;
  message: string;
}
export type NewMessageEvent = TypedEvent<[string, string], NewMessageEventObject>;

export type NewMessageEventFilter = TypedEventFilter<NewMessageEvent>;

export interface SmockFacet extends BaseContract {
  contractName: 'SmockFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmockFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MESSAGE_THROTTLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    setMessage(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    smockInitialized(overrides?: CallOverrides): Promise<[boolean]>;
  };

  MESSAGE_THROTTLE(overrides?: CallOverrides): Promise<BigNumber>;

  activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  operator(overrides?: CallOverrides): Promise<string>;

  setMessage(
    message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  smockInitialized(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    MESSAGE_THROTTLE(overrides?: CallOverrides): Promise<BigNumber>;

    activate(overrides?: CallOverrides): Promise<void>;

    disable(overrides?: CallOverrides): Promise<void>;

    operator(overrides?: CallOverrides): Promise<string>;

    setMessage(message: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    smockInitialized(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Call(address)'(caller?: PromiseOrValue<string> | null): CallEventFilter;
    Call(caller?: PromiseOrValue<string> | null): CallEventFilter;

    'NewMessage(address,string)'(caller?: PromiseOrValue<string> | null, message?: null): NewMessageEventFilter;
    NewMessage(caller?: PromiseOrValue<string> | null, message?: null): NewMessageEventFilter;
  };

  estimateGas: {
    MESSAGE_THROTTLE(overrides?: CallOverrides): Promise<BigNumber>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    setMessage(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    smockInitialized(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MESSAGE_THROTTLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMessage(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    smockInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
