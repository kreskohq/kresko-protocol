/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface ISmockFacetInterface extends utils.Interface {
  functions: {
    'activate()': FunctionFragment;
    'disable()': FunctionFragment;
    'setMessage(string)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'activate' | 'disable' | 'setMessage'): FunctionFragment;

  encodeFunctionData(functionFragment: 'activate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setMessage', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMessage', data: BytesLike): Result;

  events: {
    'NewMessage(address,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewMessage'): EventFragment;
}

export interface NewMessageEventObject {
  caller: string;
  message: string;
}
export type NewMessageEvent = TypedEvent<[string, string], NewMessageEventObject>;

export type NewMessageEventFilter = TypedEventFilter<NewMessageEvent>;

export interface ISmockFacet extends BaseContract {
  contractName: 'ISmockFacet';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISmockFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setMessage(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setMessage(
    message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    disable(overrides?: CallOverrides): Promise<void>;

    setMessage(message: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'NewMessage(address,string)'(caller?: PromiseOrValue<string> | null, message?: null): NewMessageEventFilter;
    NewMessage(caller?: PromiseOrValue<string> | null, message?: null): NewMessageEventFilter;
  };

  estimateGas: {
    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setMessage(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    disable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setMessage(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
