/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface SmockFacet2Interface extends utils.Interface {
  functions: {
    'getNewStructValueFromExtended()': FunctionFragment;
    'getOldStructValueFromExtended()': FunctionFragment;
    'initialize()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'getNewStructValueFromExtended' | 'getOldStructValueFromExtended' | 'initialize',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getNewStructValueFromExtended', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOldStructValueFromExtended', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getNewStructValueFromExtended', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOldStructValueFromExtended', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;

  events: {};
}

export interface SmockFacet2 extends BaseContract {
  contractName: 'SmockFacet2';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmockFacet2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getNewStructValueFromExtended(overrides?: CallOverrides): Promise<[boolean]>;

    getOldStructValueFromExtended(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  getNewStructValueFromExtended(overrides?: CallOverrides): Promise<boolean>;

  getOldStructValueFromExtended(overrides?: CallOverrides): Promise<boolean>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    getNewStructValueFromExtended(overrides?: CallOverrides): Promise<boolean>;

    getOldStructValueFromExtended(overrides?: CallOverrides): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getNewStructValueFromExtended(overrides?: CallOverrides): Promise<BigNumber>;

    getOldStructValueFromExtended(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    getNewStructValueFromExtended(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOldStructValueFromExtended(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
