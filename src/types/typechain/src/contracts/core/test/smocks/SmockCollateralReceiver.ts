/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface SmockCollateralReceiverInterface extends utils.Interface {
  functions: {
    'account()': FunctionFragment;
    'collateralAsset()': FunctionFragment;
    'kresko()': FunctionFragment;
    'onUncheckedCollateralWithdraw(address,address,uint256,uint256,bytes)': FunctionFragment;
    'test(address,uint256)': FunctionFragment;
    'testDepositAlternate(address,uint256,address)': FunctionFragment;
    'testInsufficientRedeposit(address,uint256)': FunctionFragment;
    'testRedeposit(address,uint256)': FunctionFragment;
    'testWithdrawalAmount(address,uint256)': FunctionFragment;
    'userData()': FunctionFragment;
    'withdrawalAmountReceived()': FunctionFragment;
    'withdrawalAmountRequested()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'account'
      | 'collateralAsset'
      | 'kresko'
      | 'onUncheckedCollateralWithdraw'
      | 'test'
      | 'testDepositAlternate'
      | 'testInsufficientRedeposit'
      | 'testRedeposit'
      | 'testWithdrawalAmount'
      | 'userData'
      | 'withdrawalAmountReceived'
      | 'withdrawalAmountRequested',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'account', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'kresko', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onUncheckedCollateralWithdraw',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'test', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'testDepositAlternate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'testInsufficientRedeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'testRedeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'testWithdrawalAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawalAmountReceived', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawalAmountRequested', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'account', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kresko', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onUncheckedCollateralWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'test', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'testDepositAlternate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'testInsufficientRedeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'testRedeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'testWithdrawalAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalAmountReceived', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalAmountRequested', data: BytesLike): Result;

  events: {};
}

export interface SmockCollateralReceiver extends BaseContract {
  contractName: 'SmockCollateralReceiver';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmockCollateralReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    account(overrides?: CallOverrides): Promise<[string]>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    kresko(overrides?: CallOverrides): Promise<[string]>;

    onUncheckedCollateralWithdraw(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawalAmount: PromiseOrValue<BigNumberish>,
      _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    test(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testDepositAlternate(
      _collateralWithdraw: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _collateralDeposit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testInsufficientRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    testWithdrawalAmount(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string] & {
        val: BigNumber;
        val1: BigNumber;
        addr: string;
      }
    >;

    withdrawalAmountReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalAmountRequested(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  account(overrides?: CallOverrides): Promise<string>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  kresko(overrides?: CallOverrides): Promise<string>;

  onUncheckedCollateralWithdraw(
    _account: PromiseOrValue<string>,
    _collateralAsset: PromiseOrValue<string>,
    _withdrawalAmount: PromiseOrValue<BigNumberish>,
    _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
    _userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  test(
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testDepositAlternate(
    _collateralWithdraw: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _collateralDeposit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testInsufficientRedeposit(
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testRedeposit(
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  testWithdrawalAmount(
    _collateralAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userData(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, string] & {
      val: BigNumber;
      val1: BigNumber;
      addr: string;
    }
  >;

  withdrawalAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalAmountRequested(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    account(overrides?: CallOverrides): Promise<string>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    kresko(overrides?: CallOverrides): Promise<string>;

    onUncheckedCollateralWithdraw(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawalAmount: PromiseOrValue<BigNumberish>,
      _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    test(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    testDepositAlternate(
      _collateralWithdraw: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _collateralDeposit: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    testInsufficientRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    testRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    testWithdrawalAmount(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    userData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string] & {
        val: BigNumber;
        val1: BigNumber;
        addr: string;
      }
    >;

    withdrawalAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAmountRequested(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    account(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    kresko(overrides?: CallOverrides): Promise<BigNumber>;

    onUncheckedCollateralWithdraw(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawalAmount: PromiseOrValue<BigNumberish>,
      _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    test(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testDepositAlternate(
      _collateralWithdraw: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _collateralDeposit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testInsufficientRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    testWithdrawalAmount(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userData(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAmountRequested(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    account(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kresko(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onUncheckedCollateralWithdraw(
      _account: PromiseOrValue<string>,
      _collateralAsset: PromiseOrValue<string>,
      _withdrawalAmount: PromiseOrValue<BigNumberish>,
      _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
      _userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    test(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testDepositAlternate(
      _collateralWithdraw: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _collateralDeposit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testInsufficientRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testRedeposit(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    testWithdrawalAmount(
      _collateralAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalAmountReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalAmountRequested(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
