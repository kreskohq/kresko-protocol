/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../../common';

export interface SmockStorageInterface extends utils.Interface {
  functions: {
    'SMOCK_STORAGE_POSITION()': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'SMOCK_STORAGE_POSITION'): FunctionFragment;

  encodeFunctionData(functionFragment: 'SMOCK_STORAGE_POSITION', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'SMOCK_STORAGE_POSITION', data: BytesLike): Result;

  events: {
    'Call(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Call'): EventFragment;
}

export interface CallEventObject {
  caller: string;
}
export type CallEvent = TypedEvent<[string], CallEventObject>;

export type CallEventFilter = TypedEventFilter<CallEvent>;

export interface SmockStorage extends BaseContract {
  contractName: 'SmockStorage';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmockStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SMOCK_STORAGE_POSITION(overrides?: CallOverrides): Promise<[string]>;
  };

  SMOCK_STORAGE_POSITION(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SMOCK_STORAGE_POSITION(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Call(address)'(caller?: PromiseOrValue<string> | null): CallEventFilter;
    Call(caller?: PromiseOrValue<string> | null): CallEventFilter;
  };

  estimateGas: {
    SMOCK_STORAGE_POSITION(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SMOCK_STORAGE_POSITION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
