/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from 'ethers';
import type { EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common';

export interface VEventInterface extends utils.Interface {
  functions: {};

  events: {
    'AssetAdded(address,address,uint256,uint256,uint256)': EventFragment;
    'AssetEnabledStatusChanged(address,bool,uint256)': EventFragment;
    'AssetRemoved(address,uint256)': EventFragment;
    'Deposit(address,address,address,uint256,uint256)': EventFragment;
    'OracleSet(address,address,uint256,uint256)': EventFragment;
    'Withdraw(address,address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetEnabledStatusChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AssetAddedEventObject {
  asset: string;
  oracle: string;
  price: BigNumber;
  depositLimit: BigNumber;
  timestamp: BigNumber;
}
export type AssetAddedEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], AssetAddedEventObject>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface AssetEnabledStatusChangedEventObject {
  asset: string;
  enabled: boolean;
  timestamp: BigNumber;
}
export type AssetEnabledStatusChangedEvent = TypedEvent<
  [string, boolean, BigNumber],
  AssetEnabledStatusChangedEventObject
>;

export type AssetEnabledStatusChangedEventFilter = TypedEventFilter<AssetEnabledStatusChangedEvent>;

export interface AssetRemovedEventObject {
  asset: string;
  timestamp: BigNumber;
}
export type AssetRemovedEvent = TypedEvent<[string, BigNumber], AssetRemovedEventObject>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export interface DepositEventObject {
  caller: string;
  receiver: string;
  asset: string;
  assetsIn: BigNumber;
  sharesOut: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OracleSetEventObject {
  asset: string;
  oracle: string;
  price: BigNumber;
  timestamp: BigNumber;
}
export type OracleSetEvent = TypedEvent<[string, string, BigNumber, BigNumber], OracleSetEventObject>;

export type OracleSetEventFilter = TypedEventFilter<OracleSetEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  asset: string;
  owner: string;
  assetsOut: BigNumber;
  sharesIn: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface VEvent extends BaseContract {
  contractName: 'VEvent';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    'AssetAdded(address,address,uint256,uint256,uint256)'(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      depositLimit?: null,
      timestamp?: null,
    ): AssetAddedEventFilter;
    AssetAdded(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      depositLimit?: null,
      timestamp?: null,
    ): AssetAddedEventFilter;

    'AssetEnabledStatusChanged(address,bool,uint256)'(
      asset?: PromiseOrValue<string> | null,
      enabled?: null,
      timestamp?: null,
    ): AssetEnabledStatusChangedEventFilter;
    AssetEnabledStatusChanged(
      asset?: PromiseOrValue<string> | null,
      enabled?: null,
      timestamp?: null,
    ): AssetEnabledStatusChangedEventFilter;

    'AssetRemoved(address,uint256)'(asset?: PromiseOrValue<string> | null, timestamp?: null): AssetRemovedEventFilter;
    AssetRemoved(asset?: PromiseOrValue<string> | null, timestamp?: null): AssetRemovedEventFilter;

    'Deposit(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      assetsIn?: null,
      sharesOut?: null,
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      assetsIn?: null,
      sharesOut?: null,
    ): DepositEventFilter;

    'OracleSet(address,address,uint256,uint256)'(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      timestamp?: null,
    ): OracleSetEventFilter;
    OracleSet(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      timestamp?: null,
    ): OracleSetEventFilter;

    'Withdraw(address,address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      owner?: null,
      assetsOut?: null,
      sharesIn?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      owner?: null,
      assetsOut?: null,
      sharesIn?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
