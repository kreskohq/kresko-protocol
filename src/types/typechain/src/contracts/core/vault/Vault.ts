/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../common';

export type VaultAssetStruct = {
  token: PromiseOrValue<string>;
  oracle: PromiseOrValue<string>;
  maxDeposits: PromiseOrValue<BigNumberish>;
  depositFee: PromiseOrValue<BigNumberish>;
  withdrawFee: PromiseOrValue<BigNumberish>;
  enabled: PromiseOrValue<boolean>;
};

export type VaultAssetStructOutput = [string, string, BigNumber, BigNumber, BigNumber, boolean] & {
  token: string;
  oracle: string;
  maxDeposits: BigNumber;
  depositFee: BigNumber;
  withdrawFee: BigNumber;
  enabled: boolean;
};

export interface VaultInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'HUNDRED()': FunctionFragment;
    'addAsset((address,address,uint256,uint256,uint256,bool))': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'assetList(uint256)': FunctionFragment;
    'assets(address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'deposit(address,uint256,address)': FunctionFragment;
    'exchangeRate()': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'governance()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address,address)': FunctionFragment;
    'maxRedeem(address,address)': FunctionFragment;
    'maxWithdraw(address,address)': FunctionFragment;
    'mint(address,uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'oracleDecimals()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'previewDeposit(address,uint256)': FunctionFragment;
    'previewMint(address,uint256)': FunctionFragment;
    'previewRedeem(address,uint256)': FunctionFragment;
    'previewWithdraw(address,uint256)': FunctionFragment;
    'redeem(address,uint256,address,address)': FunctionFragment;
    'removeAsset(address)': FunctionFragment;
    'setAssetEnabled(address,bool)': FunctionFragment;
    'setDepositFee(address,uint256)': FunctionFragment;
    'setFeeRecipient(address)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'setMaxDeposits(address,uint256)': FunctionFragment;
    'setOracle(address,address)': FunctionFragment;
    'setOracleDecimals(uint8)': FunctionFragment;
    'setWithdrawFee(address,uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'withdraw(address,uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'HUNDRED'
      | 'addAsset'
      | 'allowance'
      | 'approve'
      | 'assetList'
      | 'assets'
      | 'balanceOf'
      | 'decimals'
      | 'deposit'
      | 'exchangeRate'
      | 'feeRecipient'
      | 'governance'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'nonces'
      | 'oracleDecimals'
      | 'permit'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'redeem'
      | 'removeAsset'
      | 'setAssetEnabled'
      | 'setDepositFee'
      | 'setFeeRecipient'
      | 'setGovernance'
      | 'setMaxDeposits'
      | 'setOracle'
      | 'setOracleDecimals'
      | 'setWithdrawFee'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'HUNDRED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addAsset', values: [VaultAssetStruct]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'assetList', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'assets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'exchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'oracleDecimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'removeAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setAssetEnabled',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setMaxDeposits',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOracleDecimals', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setWithdrawFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'HUNDRED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assetList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracleDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAssetEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracleDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'AssetAdded(address,address,uint256,uint256,uint256)': EventFragment;
    'AssetEnabledStatusChanged(address,bool,uint256)': EventFragment;
    'AssetRemoved(address,uint256)': EventFragment;
    'Deposit(address,address,address,uint256,uint256)': EventFragment;
    'OracleSet(address,address,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetEnabledStatusChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AssetAddedEventObject {
  asset: string;
  oracle: string;
  price: BigNumber;
  depositLimit: BigNumber;
  timestamp: BigNumber;
}
export type AssetAddedEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], AssetAddedEventObject>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface AssetEnabledStatusChangedEventObject {
  asset: string;
  enabled: boolean;
  timestamp: BigNumber;
}
export type AssetEnabledStatusChangedEvent = TypedEvent<
  [string, boolean, BigNumber],
  AssetEnabledStatusChangedEventObject
>;

export type AssetEnabledStatusChangedEventFilter = TypedEventFilter<AssetEnabledStatusChangedEvent>;

export interface AssetRemovedEventObject {
  asset: string;
  timestamp: BigNumber;
}
export type AssetRemovedEvent = TypedEvent<[string, BigNumber], AssetRemovedEventObject>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export interface DepositEventObject {
  caller: string;
  receiver: string;
  asset: string;
  assetsIn: BigNumber;
  sharesOut: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OracleSetEventObject {
  asset: string;
  oracle: string;
  price: BigNumber;
  timestamp: BigNumber;
}
export type OracleSetEvent = TypedEvent<[string, string, BigNumber, BigNumber], OracleSetEventObject>;

export type OracleSetEventFilter = TypedEventFilter<OracleSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  asset: string;
  owner: string;
  assetsOut: BigNumber;
  sharesIn: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Vault extends BaseContract {
  contractName: 'Vault';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    HUNDRED(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAsset(
      config: VaultAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    assetList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    assets(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[VaultAssetStructOutput]>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    maxDeposit(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(
      asset: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { max: BigNumber }>;

    maxRedeem(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { max: BigNumber }>;

    maxWithdraw(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { max: BigNumber }>;

    mint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleDecimals(overrides?: CallOverrides): Promise<[number]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewDeposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { sharesOut: BigNumber; assetFee: BigNumber }>;

    previewMint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assetsIn: BigNumber; assetFee: BigNumber }>;

    previewRedeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assetsOut: BigNumber; assetFee: BigNumber }>;

    previewWithdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { sharesIn: BigNumber; assetFee: BigNumber }>;

    redeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAssetEnabled(
      asset: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxDeposits(
      asset: PromiseOrValue<string>,
      maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOracle(
      asset: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOracleDecimals(
      _oracleDecimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber] & { result: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  HUNDRED(overrides?: CallOverrides): Promise<BigNumber>;

  addAsset(
    config: VaultAssetStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  assetList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  assets(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<VaultAssetStructOutput>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    asset: PromiseOrValue<string>,
    assetsIn: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  maxDeposit(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(asset: PromiseOrValue<string>, user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(
    asset: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  maxWithdraw(
    asset: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  mint(
    asset: PromiseOrValue<string>,
    sharesOut: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  oracleDecimals(overrides?: CallOverrides): Promise<number>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewDeposit(
    asset: PromiseOrValue<string>,
    assetsIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { sharesOut: BigNumber; assetFee: BigNumber }>;

  previewMint(
    asset: PromiseOrValue<string>,
    sharesOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { assetsIn: BigNumber; assetFee: BigNumber }>;

  previewRedeem(
    asset: PromiseOrValue<string>,
    sharesIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { assetsOut: BigNumber; assetFee: BigNumber }>;

  previewWithdraw(
    asset: PromiseOrValue<string>,
    assetsOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { sharesIn: BigNumber; assetFee: BigNumber }>;

  redeem(
    asset: PromiseOrValue<string>,
    sharesIn: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeAsset(
    asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAssetEnabled(
    asset: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositFee(
    asset: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _newFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _newGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxDeposits(
    asset: PromiseOrValue<string>,
    maxDeposits: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOracle(
    asset: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOracleDecimals(
    _oracleDecimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    asset: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    asset: PromiseOrValue<string>,
    assetsOut: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    HUNDRED(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(config: VaultAssetStruct, overrides?: CallOverrides): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    assetList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    assets(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<VaultAssetStructOutput>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { sharesOut: BigNumber; assetFee: BigNumber }>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    maxDeposit(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(asset: PromiseOrValue<string>, user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxWithdraw(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assetsIn: BigNumber; assetFee: BigNumber }>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    oracleDecimals(overrides?: CallOverrides): Promise<number>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    previewDeposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { sharesOut: BigNumber; assetFee: BigNumber }>;

    previewMint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assetsIn: BigNumber; assetFee: BigNumber }>;

    previewRedeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assetsOut: BigNumber; assetFee: BigNumber }>;

    previewWithdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { sharesIn: BigNumber; assetFee: BigNumber }>;

    redeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assetsOut: BigNumber; assetFee: BigNumber }>;

    removeAsset(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setAssetEnabled(
      asset: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeRecipient(_newFeeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setGovernance(_newGovernance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMaxDeposits(
      asset: PromiseOrValue<string>,
      maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOracle(asset: PromiseOrValue<string>, oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOracleDecimals(_oracleDecimals: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setWithdrawFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    withdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { sharesIn: BigNumber; assetFee: BigNumber }>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;

    'AssetAdded(address,address,uint256,uint256,uint256)'(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      depositLimit?: null,
      timestamp?: null,
    ): AssetAddedEventFilter;
    AssetAdded(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      depositLimit?: null,
      timestamp?: null,
    ): AssetAddedEventFilter;

    'AssetEnabledStatusChanged(address,bool,uint256)'(
      asset?: PromiseOrValue<string> | null,
      enabled?: null,
      timestamp?: null,
    ): AssetEnabledStatusChangedEventFilter;
    AssetEnabledStatusChanged(
      asset?: PromiseOrValue<string> | null,
      enabled?: null,
      timestamp?: null,
    ): AssetEnabledStatusChangedEventFilter;

    'AssetRemoved(address,uint256)'(asset?: PromiseOrValue<string> | null, timestamp?: null): AssetRemovedEventFilter;
    AssetRemoved(asset?: PromiseOrValue<string> | null, timestamp?: null): AssetRemovedEventFilter;

    'Deposit(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      assetsIn?: null,
      sharesOut?: null,
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      assetsIn?: null,
      sharesOut?: null,
    ): DepositEventFilter;

    'OracleSet(address,address,uint256,uint256)'(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      timestamp?: null,
    ): OracleSetEventFilter;
    OracleSet(
      asset?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      price?: null,
      timestamp?: null,
    ): OracleSetEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;

    'Withdraw(address,address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      owner?: null,
      assetsOut?: null,
      sharesIn?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      owner?: null,
      assetsOut?: null,
      sharesIn?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    HUNDRED(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(config: VaultAssetStruct, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    assetList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    assets(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(asset: PromiseOrValue<string>, user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxWithdraw(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    oracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewDeposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewMint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewRedeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAssetEnabled(
      asset: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGovernance(
      _newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxDeposits(
      asset: PromiseOrValue<string>,
      maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOracle(
      asset: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOracleDecimals(
      _oracleDecimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWithdrawFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HUNDRED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAsset(
      config: VaultAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    assetList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assets(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(
      asset: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      asset: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewDeposit(
      asset: PromiseOrValue<string>,
      assetsIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewMint(
      asset: PromiseOrValue<string>,
      sharesOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    redeem(
      asset: PromiseOrValue<string>,
      sharesIn: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAssetEnabled(
      asset: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxDeposits(
      asset: PromiseOrValue<string>,
      maxDeposits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOracle(
      asset: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOracleDecimals(
      _oracleDecimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      asset: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      asset: PromiseOrValue<string>,
      assetsOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
