/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type { SEvent, SEventInterface } from '../../../../../../src/contracts/core/scdp/Events.sol/SEvent';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_asset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'openFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'closeFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'protocolFee',
        type: 'uint256',
      },
    ],
    name: 'FeeSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Income',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'assetIn',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'assetOut',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'enabled',
        type: 'bool',
      },
    ],
    name: 'PairSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_asset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'liquidationThreshold',
        type: 'uint256',
      },
    ],
    name: 'SCDPCollateralUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'depositor',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'SCDPDeposit',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_asset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'openFee',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'closeFee',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'uint128',
        name: 'protocolFee',
        type: 'uint128',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'supplyLimit',
        type: 'uint256',
      },
    ],
    name: 'SCDPKrAssetUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'liquidator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'repayKreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'repayAmount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'seizeCollateral',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'seizeAmount',
        type: 'uint256',
      },
    ],
    name: 'SCDPLiquidationOccured',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'repayer',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'repayKreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'repayAmount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'receiveKreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'receiveAmount',
        type: 'uint256',
      },
    ],
    name: 'SCDPRepay',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'withdrawer',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'feeAmount',
        type: 'uint256',
      },
    ],
    name: 'SCDPWithdraw',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'who',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'assetIn',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'assetOut',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    name: 'Swap',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'feeAsset',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'assetIn',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'feeAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'protocolFeeAmount',
        type: 'uint256',
      },
    ],
    name: 'SwapFee',
    type: 'event',
  },
] as const;

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200bac35a12a6bac85b92188938badf4f6d5a29002793cbbbee789d4a639b7eb2464736f6c63430008150033';

type SEventConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: SEventConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SEvent__factory extends ContractFactory {
  constructor(...args: SEventConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'SEvent';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<SEvent> {
    return super.deploy(overrides || {}) as Promise<SEvent>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SEvent {
    return super.attach(address) as SEvent;
  }
  override connect(signer: Signer): SEvent__factory {
    return super.connect(signer) as SEvent__factory;
  }
  static readonly contractName: 'SEvent';

  public readonly contractName: 'SEvent';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SEventInterface {
    return new utils.Interface(_abi) as SEventInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SEvent {
    return new Contract(address, _abi, signerOrProvider) as SEvent;
  }
}
