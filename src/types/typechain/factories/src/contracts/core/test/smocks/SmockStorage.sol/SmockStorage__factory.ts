/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../../common';
import type {
  SmockStorage,
  SmockStorageInterface,
} from '../../../../../../../src/contracts/core/test/smocks/SmockStorage.sol/SmockStorage';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'caller',
        type: 'address',
      },
    ],
    name: 'Call',
    type: 'event',
  },
  {
    inputs: [],
    name: 'SMOCK_STORAGE_POSITION',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80639767af4d146038575b600080fd5b605e7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de81565b60405190815260200160405180910390f3fea2646970667358221220c282baec1e5dea10467043ec4ad40dd57037a50de80277b89419b3a1e18b410a64736f6c63430008150033';

type SmockStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: SmockStorageConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class SmockStorage__factory extends ContractFactory {
  constructor(...args: SmockStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'SmockStorage';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<SmockStorage> {
    return super.deploy(overrides || {}) as Promise<SmockStorage>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SmockStorage {
    return super.attach(address) as SmockStorage;
  }
  override connect(signer: Signer): SmockStorage__factory {
    return super.connect(signer) as SmockStorage__factory;
  }
  static readonly contractName: 'SmockStorage';

  public readonly contractName: 'SmockStorage';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SmockStorageInterface {
    return new utils.Interface(_abi) as SmockStorageInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SmockStorage {
    return new Contract(address, _abi, signerOrProvider) as SmockStorage;
  }
}
