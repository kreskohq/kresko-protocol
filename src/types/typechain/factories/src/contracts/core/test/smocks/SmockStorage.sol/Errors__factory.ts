/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../../common';
import type {
  Errors,
  ErrorsInterface,
} from '../../../../../../../src/contracts/core/test/smocks/SmockStorage.sol/Errors';

const _abi = [
  {
    inputs: [],
    name: 'ACTIVE',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'INITIALIZED',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'NOT_ACTIVE',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x61019e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063807012431461005057806395288883146100a2578063c90bd047146100de575b600080fd5b61008c6040518060400160405280601681526020017f536d6f636b46616365743a204e6f74206163746976650000000000000000000081525081565b604051610099919061011a565b60405180910390f35b61008c6040518060400160405280601381526020017f416c726561647920696e697469616c697a65640000000000000000000000000081525081565b61008c6040518060400160405280601281526020017f536d6f636b46616365743a20416374697665000000000000000000000000000081525081565b600060208083528351808285015260005b818110156101475785810183015185820160400152820161012b565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220b20257b879038c53ad911f0c158f325c7f35ed606a065d1598288f0c14677e9164736f6c63430008150033';

type ErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: ErrorsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Errors';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }
  static readonly contractName: 'Errors';

  public readonly contractName: 'Errors';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
