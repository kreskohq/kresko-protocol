/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, BigNumberish, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../../common';
import type {
  MockERC20Restricted,
  MockERC20RestrictedInterface,
} from '../../../../../../../src/contracts/core/test/mocks/MockERC20.sol/MockERC20Restricted';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: '_decimals',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: '_initialSupply',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'minters',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'nonces',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'permit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: '_name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_symbol',
        type: 'string',
      },
    ],
    name: 'reinitializeERC20',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_minters',
        type: 'address[]',
      },
    ],
    name: 'toggleMinters',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60e06040523480156200001157600080fd5b506040516200169c3803806200169c833981016040819052620000349162000271565b83838360006200004584826200038b565b5060016200005483826200038b565b5060ff81166080524660a0526200006a620000a3565b60c052506200007e9150339050826200013f565b5050336000908152600660205260409020805460ff1916600117905550620004fd9050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620000d7919062000457565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8060026000828254620001539190620004d5565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d457600080fd5b81516001600160401b0380821115620001f157620001f1620001ac565b604051601f8301601f19908116603f011681019082821181831017156200021c576200021c620001ac565b816040528381526020925086838588010111156200023957600080fd5b600091505b838210156200025d57858201830151818301840152908201906200023e565b600093810190920192909252949350505050565b600080600080608085870312156200028857600080fd5b84516001600160401b0380821115620002a057600080fd5b620002ae88838901620001c2565b95506020870151915080821115620002c557600080fd5b50620002d487828801620001c2565b935050604085015160ff81168114620002ec57600080fd5b6060959095015193969295505050565b600181811c908216806200031157607f821691505b6020821081036200033257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200038657600081815260208120601f850160051c81016020861015620003615750805b601f850160051c820191505b8181101562000382578281556001016200036d565b5050505b505050565b81516001600160401b03811115620003a757620003a7620001ac565b620003bf81620003b88454620002fc565b8462000338565b602080601f831160018114620003f75760008415620003de5750858301515b600019600386901b1c1916600185901b17855562000382565b600085815260208120601f198616915b82811015620004285788860151825594840194600190910190840162000407565b5085821015620004475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008083546200046781620002fc565b600182811680156200048257600181146200049857620004c9565b60ff1984168752821515830287019450620004c9565b8760005260208060002060005b85811015620004c05781548a820152908401908201620004a5565b50505082870194505b50929695505050505050565b80820180821115620004f757634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05161116f6200052d60003960006105bf0152600061058a015260006101c0015261116f6000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80637ecebe00116100b2578063a9059cbb11610081578063dd62ed3e11610066578063dd62ed3e146102bb578063e8aa4527146102e6578063f46eccc4146102f957600080fd5b8063a9059cbb14610295578063d505accf146102a857600080fd5b80637ecebe001461022f5780638da5cb5b1461024f57806395d89b411461027a5780639dc29fac1461028257600080fd5b806323b872dd116101095780633644e515116100ee5780633644e515146101f457806340c10f19146101fc57806370a082311461020f57600080fd5b806323b872dd146101a8578063313ce567146101bb57600080fd5b806306fdde031461013b578063095ea7b3146101595780630ce403f41461017c57806318160ddd14610191575b600080fd5b61014361031c565b6040516101509190610bfc565b60405180910390f35b61016c610167366004610c66565b6103aa565b6040519015158152602001610150565b61018f61018a366004610d33565b610417565b005b61019a60025481565b604051908152602001610150565b61016c6101b6366004610d97565b610494565b6101e27f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610150565b61019a610586565b61018f61020a366004610c66565b6105e1565b61019a61021d366004610dd3565b60036020526000908152604090205481565b61019a61023d366004610dd3565b60056020526000908152604090205481565b600754610262906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b610143610638565b61018f610290366004610c66565b610645565b61016c6102a3366004610c66565b610698565b61018f6102b6366004610df5565b610710565b61019a6102c9366004610e68565b600460209081526000928352604080842090915290825290205481565b61018f6102f4366004610e9b565b61097e565b61016c610307366004610dd3565b60066020526000908152604090205460ff1681565b6000805461032990610f10565b80601f016020809104026020016040519081016040528092919081815260200182805461035590610f10565b80156103a25780601f10610377576101008083540402835291602001916103a2565b820191906000526020600020905b81548152906001019060200180831161038557829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104059086815260200190565b60405180910390a35060015b92915050565b6007546001600160a01b031633146104765760405162461bcd60e51b815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006104828382610f98565b50600161048f8282610f98565b505050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146104f0576104cb838261106e565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b0385166000908152600360205260408120805485929061051890849061106e565b90915550506001600160a01b03808516600081815260036020526040908190208054870190555190918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105739087815260200190565b60405180910390a3506001949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146105bc576105b7610a82565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b3360009081526006602052604090205460ff1661062a5760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b604482015260640161046d565b6106348282610b1c565b5050565b6001805461032990610f10565b3360009081526006602052604090205460ff1661068e5760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b604482015260640161046d565b6106348282610b88565b336000908152600360205260408120805483919083906106b990849061106e565b90915550506001600160a01b038316600081815260036020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104059086815260200190565b428410156107605760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161046d565b6000600161076c610586565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e0830190915280519201919091207f19010000000000000000000000000000000000000000000000000000000000006101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610893573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906108c95750876001600160a01b0316816001600160a01b0316145b6109155760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5349474e4552000000000000000000000000000000000000604482015260640161046d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b3360009081526006602052604090205460ff166109c75760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b604482015260640161046d565b60005b8181101561048f57600660008484848181106109e8576109e8611081565b90506020020160208101906109fd9190610dd3565b6001600160a01b03168152602081019190915260400160009081205460ff161590600690858585818110610a3357610a33611081565b9050602002016020810190610a489190610dd3565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610a7a81611097565b9150506109ca565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051610ab491906110b0565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8060026000828254610b2e9190611126565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290610bb090849061106e565b90915550506002805482900390556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b7c565b600060208083528351808285015260005b81811015610c2957858101830151858201604001528201610c0d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610c6157600080fd5b919050565b60008060408385031215610c7957600080fd5b610c8283610c4a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610cb757600080fd5b813567ffffffffffffffff80821115610cd257610cd2610c90565b604051601f8301601f19908116603f01168101908282118183101715610cfa57610cfa610c90565b81604052838152866020858801011115610d1357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610d4657600080fd5b823567ffffffffffffffff80821115610d5e57600080fd5b610d6a86838701610ca6565b93506020850135915080821115610d8057600080fd5b50610d8d85828601610ca6565b9150509250929050565b600080600060608486031215610dac57600080fd5b610db584610c4a565b9250610dc360208501610c4a565b9150604084013590509250925092565b600060208284031215610de557600080fd5b610dee82610c4a565b9392505050565b600080600080600080600060e0888a031215610e1057600080fd5b610e1988610c4a565b9650610e2760208901610c4a565b95506040880135945060608801359350608088013560ff81168114610e4b57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610e7b57600080fd5b610e8483610c4a565b9150610e9260208401610c4a565b90509250929050565b60008060208385031215610eae57600080fd5b823567ffffffffffffffff80821115610ec657600080fd5b818501915085601f830112610eda57600080fd5b813581811115610ee957600080fd5b8660208260051b8501011115610efe57600080fd5b60209290920196919550909350505050565b600181811c90821680610f2457607f821691505b602082108103610f4457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561048f57600081815260208120601f850160051c81016020861015610f715750805b601f850160051c820191505b81811015610f9057828155600101610f7d565b505050505050565b815167ffffffffffffffff811115610fb257610fb2610c90565b610fc681610fc08454610f10565b84610f4a565b602080601f831160018114610ffb5760008415610fe35750858301515b600019600386901b1c1916600185901b178555610f90565b600085815260208120601f198616915b8281101561102a5788860151825594840194600190910190840161100b565b50858210156110485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561041157610411611058565b634e487b7160e01b600052603260045260246000fd5b6000600182016110a9576110a9611058565b5060010190565b60008083546110be81610f10565b600182811680156110d657600181146110eb5761111a565b60ff198416875282151583028701945061111a565b8760005260208060002060005b858110156111115781548a8201529084019082016110f8565b50505082870194505b50929695505050505050565b808201808211156104115761041161105856fea26469706673582212200c843c8da2833a8d55da93e2c584f40d17c9c42a621a91f7221499cb4372fd5364736f6c63430008150033';

type MockERC20RestrictedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockERC20RestrictedConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockERC20Restricted__factory extends ContractFactory {
  constructor(...args: MockERC20RestrictedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockERC20Restricted';
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<MockERC20Restricted> {
    return super.deploy(_name, _symbol, _decimals, _initialSupply, overrides || {}) as Promise<MockERC20Restricted>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, _decimals, _initialSupply, overrides || {});
  }
  override attach(address: string): MockERC20Restricted {
    return super.attach(address) as MockERC20Restricted;
  }
  override connect(signer: Signer): MockERC20Restricted__factory {
    return super.connect(signer) as MockERC20Restricted__factory;
  }
  static readonly contractName: 'MockERC20Restricted';

  public readonly contractName: 'MockERC20Restricted';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20RestrictedInterface {
    return new utils.Interface(_abi) as MockERC20RestrictedInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockERC20Restricted {
    return new Contract(address, _abi, signerOrProvider) as MockERC20Restricted;
  }
}
