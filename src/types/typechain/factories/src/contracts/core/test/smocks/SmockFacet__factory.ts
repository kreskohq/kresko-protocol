/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type { SmockFacet, SmockFacetInterface } from '../../../../../../src/contracts/core/test/smocks/SmockFacet';

const _abi = [
  {
    inputs: [],
    name: 'STRING_HEX_LENGTH_INSUFFICIENT',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'caller',
        type: 'address',
      },
    ],
    name: 'Call',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'caller',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'message',
        type: 'string',
      },
    ],
    name: 'NewMessage',
    type: 'event',
  },
  {
    inputs: [],
    name: 'MESSAGE_THROTTLE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'activate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'disable',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'operator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'message',
        type: 'string',
      },
    ],
    name: 'setMessage',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'smockInitialized',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b50610bbe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063368b877211610050578063368b8772146100c3578063570ca735146100d657806376885a3b1461011f57600080fd5b80630f15f4c0146100775780631d5dddfb146100815780632f2770db146100bb575b600080fd5b61007f610135565b005b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de5460ff1660405190151581526020015b60405180910390f35b61007f6101f1565b61007f6100d1366004610849565b6102a0565b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de546201000090046001600160a01b03166040516001600160a01b0390911681526020016100b2565b610127600281565b6040519081526020016100b2565b7f78568ec36e22260a8c0f6c7ce4425ffdb86b4ee55173ba81d2c6222e4bde396a61015f81610469565b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de5460408051808201909152601681527f536d6f636b46616365743a204e6f742061637469766500000000000000000000602082015290610100900460ff16156101e55760405162461bcd60e51b81526004016101dc919061091e565b60405180910390fd5b506101ee61047a565b50565b7f78568ec36e22260a8c0f6c7ce4425ffdb86b4ee55173ba81d2c6222e4bde396a61021b81610469565b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de5460408051808201909152601281527f536d6f636b46616365743a204163746976650000000000000000000000000000602082015290610100900460ff166102975760405162461bcd60e51b81526004016101dc919061091e565b506101ee610529565b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de5460408051808201909152601281527f536d6f636b46616365743a204163746976650000000000000000000000000000602082015290610100900460ff1661031c5760405162461bcd60e51b81526004016101dc919061091e565b507f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0e15461034b90600290610967565b43101561039a5760405162461bcd60e51b815260206004820152601460248201527f43616e7420736574206d6573736167652079657400000000000000000000000060448201526064016101dc565b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0e06103c58282610a03565b503360008181527f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0df6020526040808220805460ff19166001179055517f14132cc4b70ff72fc431320e27440c1369a17f8c25a51a3e172a05e097e6bfb79190a2336001600160a01b03167f8da45d748eefefd09cc1491cd32086b6d6a0bd7063d08f05c94df9eb1404bd808260405161045e919061091e565b60405180910390a250565b6101ee81610475610551565b6105ad565b60017f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de5b80549115156101000261ff001990921691909117905560016104dd7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de90565b3360008181526001929092016020526040808320805460ff19169415159490941790935591517f14132cc4b70ff72fc431320e27440c1369a17f8c25a51a3e172a05e097e6bfb79190a2565b60007f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de61049e565b60003033036105a757600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506105aa9050565b50335b90565b6105b78282610615565b610611576105cf816001600160a01b03166014610661565b6105da836020610661565b6040516020016105eb929190610ac3565b60408051601f198184030181529082905262461bcd60e51b82526101dc9160040161091e565b5050565b60008281527fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815c602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60606000610670836002610b44565b61067b906002610967565b67ffffffffffffffff81111561069357610693610833565b6040519080825280601f01601f1916602001820160405280156106bd576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106106f4576106f4610b5b565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061073f5761073f610b5b565b60200101906001600160f81b031916908160001a9053506000610763846002610b44565b61076e906001610967565b90505b60018111156107f3577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106107af576107af610b5b565b1a60f81b8282815181106107c5576107c5610b5b565b60200101906001600160f81b031916908160001a90535060049490941c936107ec81610b71565b9050610771565b50831561082c576040517ff4c71c1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561085b57600080fd5b813567ffffffffffffffff8082111561087357600080fd5b818401915084601f83011261088757600080fd5b81358181111561089957610899610833565b604051601f8201601f19908116603f011681019083821181831017156108c1576108c1610833565b816040528281528760208487010111156108da57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b838110156109155781810151838201526020016108fd565b50506000910152565b602081526000825180602084015261093d8160408501602087016108fa565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561065b5761065b610951565b600181811c9082168061098e57607f821691505b6020821081036109ae57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156109fe57600081815260208120601f850160051c810160208610156109db5750805b601f850160051c820191505b818110156109fa578281556001016109e7565b5050505b505050565b815167ffffffffffffffff811115610a1d57610a1d610833565b610a3181610a2b845461097a565b846109b4565b602080601f831160018114610a665760008415610a4e5750858301515b600019600386901b1c1916600185901b1785556109fa565b600085815260208120601f198616915b82811015610a9557888601518255948401946001909101908401610a76565b5085821015610ab35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610afb8160178501602088016108fa565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610b388160288401602088016108fa565b01602801949350505050565b808202811582820484141761065b5761065b610951565b634e487b7160e01b600052603260045260246000fd5b600081610b8057610b80610951565b50600019019056fea26469706673582212204c42bdd77e4d4d2b74467d7ae3eabd487f7388f4eb850591b145dec510d41b0a64736f6c63430008150033';

type SmockFacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: SmockFacetConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class SmockFacet__factory extends ContractFactory {
  constructor(...args: SmockFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'SmockFacet';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<SmockFacet> {
    return super.deploy(overrides || {}) as Promise<SmockFacet>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SmockFacet {
    return super.attach(address) as SmockFacet;
  }
  override connect(signer: Signer): SmockFacet__factory {
    return super.connect(signer) as SmockFacet__factory;
  }
  static readonly contractName: 'SmockFacet';

  public readonly contractName: 'SmockFacet';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SmockFacetInterface {
    return new utils.Interface(_abi) as SmockFacetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SmockFacet {
    return new Contract(address, _abi, signerOrProvider) as SmockFacet;
  }
}
