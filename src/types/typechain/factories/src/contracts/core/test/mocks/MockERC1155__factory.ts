/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type { MockERC1155, MockERC1155Interface } from '../../../../../../src/contracts/core/test/mocks/MockERC1155';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'balance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'ERC1155InsufficientBalance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'approver',
        type: 'address',
      },
    ],
    name: 'ERC1155InvalidApprover',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'idsLength',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'valuesLength',
        type: 'uint256',
      },
    ],
    name: 'ERC1155InvalidArrayLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'ERC1155InvalidOperator',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
    ],
    name: 'ERC1155InvalidReceiver',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'ERC1155InvalidSender',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'ERC1155MissingApprovalForAll',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'approved',
        type: 'bool',
      },
    ],
    name: 'ApprovalForAll',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: 'ids',
        type: 'uint256[]',
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: 'values',
        type: 'uint256[]',
      },
    ],
    name: 'TransferBatch',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'TransferSingle',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'string',
        name: 'value',
        type: 'string',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
    ],
    name: 'URI',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'accounts',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: 'ids',
        type: 'uint256[]',
      },
    ],
    name: 'balanceOfBatch',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'isApprovedForAll',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256[]',
        name: 'ids',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: 'values',
        type: 'uint256[]',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'safeTransferFrom',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: 'approved',
        type: 'bool',
      },
    ],
    name: 'setApprovalForAll',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'uri',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060408051808201909152600c81526b1a1d1d1c1cce8bcbdd195cdd60a21b602082015262000040816200006c565b50620000663360006001604051806020016040528060008152506200007e60201b60201c565b620008fa565b60026200007a82826200064b565b5050565b6001600160a01b038416620000ae57604051632bfa23e760e11b8152600060048201526024015b60405180910390fd5b60408051600180825260208201869052818301908152606082018590526080820190925290620000e3600087848487620000eb565b505050505050565b620000f9858585856200014e565b6001600160a01b038416156200014757825133906001036200013757602084810151908401516200012f8389898585896200037c565b5050620000e3565b620000e3818787878787620004b6565b5050505050565b80518251146200017f5781518151604051635b05999160e01b815260048101929092526024820152604401620000a5565b3360005b835181101562000298576020818102858101820151908501909101516001600160a01b038816156200023a576000828152602081815260408083206001600160a01b038c1684529091529020548181101562000213576040516303dee4c560e01b81526001600160a01b038a166004820152602481018290526044810183905260648101849052608401620000a5565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b0387161562000282576000828152602081815260408083206001600160a01b038b168452909152812080548392906200027c9084906200072d565b90915550505b505080620002909062000749565b905062000183565b5082516001036200031c5760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516200030c929190918252602082015260400190565b60405180910390a4505062000147565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516200036d929190620007a2565b60405180910390a45050505050565b6001600160a01b0384163b15620000e35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620003c390899089908890889088906004016200081c565b6020604051808303816000875af192505050801562000401575060408051601f3d908101601f19168201909252620003fe9181019062000863565b60015b6200046f573d80801562000432576040519150601f19603f3d011682016040523d82523d6000602084013e62000437565b606091505b5080516000036200046757604051632bfa23e760e11b81526001600160a01b0386166004820152602401620000a5565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b14620004ad57604051632bfa23e760e11b81526001600160a01b0386166004820152602401620000a5565b50505050505050565b6001600160a01b0384163b15620000e35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190620004fd908990899088908890889060040162000896565b6020604051808303816000875af19250505080156200053b575060408051601f3d908101601f19168201909252620005389181019062000863565b60015b6200056c573d80801562000432576040519150601f19603f3d011682016040523d82523d6000602084013e62000437565b6001600160e01b0319811663bc197c8160e01b14620004ad57604051632bfa23e760e11b81526001600160a01b0386166004820152602401620000a5565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620005d557607f821691505b602082108103620005f657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200064657600081815260208120601f850160051c81016020861015620006255750805b601f850160051c820191505b81811015620000e35782815560010162000631565b505050565b81516001600160401b03811115620006675762000667620005aa565b6200067f81620006788454620005c0565b84620005fc565b602080601f831160018114620006b757600084156200069e5750858301515b600019600386901b1c1916600185901b178555620000e3565b600085815260208120601f198616915b82811015620006e857888601518255948401946001909101908401620006c7565b5085821015620007075787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082018082111562000743576200074362000717565b92915050565b6000600182016200075e576200075e62000717565b5060010190565b600081518084526020808501945080840160005b83811015620007975781518752958201959082019060010162000779565b509495945050505050565b604081526000620007b7604083018562000765565b8281036020840152620007cb818562000765565b95945050505050565b6000815180845260005b81811015620007fc57602081850181015186830182015201620007de565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906200085890830184620007d4565b979650505050505050565b6000602082840312156200087657600080fd5b81516001600160e01b0319811681146200088f57600080fd5b9392505050565b6001600160a01b0386811682528516602082015260a060408201819052600090620008c49083018662000765565b8281036060840152620008d8818662000765565b90508281036080840152620008ee8185620007d4565b98975050505050505050565b611186806200090a6000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b27565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b6a565b6101b4565b60405190151581526020016100a9565b6100e86100e3366004610b8e565b61024f565b6040516100a99190610bed565b610108610103366004610d46565b6102e3565b005b61011d610118366004610df0565b61036e565b6040516100a99190610eeb565b610108610138366004610efe565b610443565b6100c561014b366004610f3a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610108610187366004610f6d565b610452565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061021757506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806101ae57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146101ae565b60606002805461025e90610fd2565b80601f016020809104026020016040519081016040528092919081815260200182805461028a90610fd2565b80156102d75780601f106102ac576101008083540402835291602001916102d7565b820191906000526020600020905b8154815290600101906020018083116102ba57829003601f168201915b50505050509050919050565b336001600160a01b038616811480159061032357506001600160a01b0380871660009081526001602090815260408083209385168352929052205460ff16155b156103595760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b61036686868686866104d0565b505050505050565b6060815183511461039f5781518351604051635b05999160e01b815260048101929092526024820152604401610350565b6000835167ffffffffffffffff8111156103bb576103bb610c00565b6040519080825280602002602001820160405280156103e4578160200160208202803683370190505b50905060005b845181101561043b5760208082028601015161040e9060208084028701015161018c565b8282815181106104205761042061100c565b602090810291909101015261043481611038565b90506103ea565b509392505050565b61044e338383610537565b5050565b336001600160a01b038616811480159061049257506001600160a01b0380871660009081526001602090815260408083209385168352929052205460ff16155b156104c35760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610350565b61036686868686866105e7565b6001600160a01b0384166104fa57604051632bfa23e760e11b815260006004820152602401610350565b6001600160a01b03851661052357604051626a0d4560e21b815260006004820152602401610350565b6105308585858585610675565b5050505050565b6001600160a01b03821661057a576040517fced3e10000000000000000000000000000000000000000000000000000000000815260006004820152602401610350565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661061157604051632bfa23e760e11b815260006004820152602401610350565b6001600160a01b03851661063a57604051626a0d4560e21b815260006004820152602401610350565b6040805160018082526020820186905281830190815260608201859052608082019092529061066c8787848487610675565b50505050505050565b610681858585856106c8565b6001600160a01b0384161561053057825133906001036106ba57602084810151908401516106b38389898585896108fe565b5050610366565b610366818787878787610a22565b80518251146106f75781518151604051635b05999160e01b815260048101929092526024820152604401610350565b3360005b835181101561081f576020818102858101820151908501909101516001600160a01b038816156107c7576000828152602081815260408083206001600160a01b038c168452909152902054818110156107a0576040517f03dee4c50000000000000000000000000000000000000000000000000000000081526001600160a01b038a166004820152602481018290526044810183905260648101849052608401610350565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b0387161561080c576000828152602081815260408083206001600160a01b038b16845290915281208054839290610806908490611051565b90915550505b50508061081890611038565b90506106fb565b5082516001036108a05760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051610891929190918252602082015260400190565b60405180910390a45050610530565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516108ef929190611064565b60405180910390a45050505050565b6001600160a01b0384163b156103665760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906109429089908990889088908890600401611092565b6020604051808303816000875af192505050801561097d575060408051601f3d908101601f1916820190925261097a918101906110d5565b60015b6109e6573d8080156109ab576040519150601f19603f3d011682016040523d82523d6000602084013e6109b0565b606091505b5080516000036109de57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610350565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b1461066c57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610350565b6001600160a01b0384163b156103665760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610a6690899089908890889088906004016110f2565b6020604051808303816000875af1925050508015610aa1575060408051601f3d908101601f19168201909252610a9e918101906110d5565b60015b610acf573d8080156109ab576040519150601f19603f3d011682016040523d82523d6000602084013e6109b0565b6001600160e01b0319811663bc197c8160e01b1461066c57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610350565b80356001600160a01b0381168114610b2257600080fd5b919050565b60008060408385031215610b3a57600080fd5b610b4383610b0b565b946020939093013593505050565b6001600160e01b031981168114610b6757600080fd5b50565b600060208284031215610b7c57600080fd5b8135610b8781610b51565b9392505050565b600060208284031215610ba057600080fd5b5035919050565b6000815180845260005b81811015610bcd57602081850181015186830182015201610bb1565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610b876020830184610ba7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c3f57610c3f610c00565b604052919050565b600067ffffffffffffffff821115610c6157610c61610c00565b5060051b60200190565b600082601f830112610c7c57600080fd5b81356020610c91610c8c83610c47565b610c16565b82815260059290921b84018101918181019086841115610cb057600080fd5b8286015b84811015610ccb5780358352918301918301610cb4565b509695505050505050565b600082601f830112610ce757600080fd5b813567ffffffffffffffff811115610d0157610d01610c00565b610d14601f8201601f1916602001610c16565b818152846020838601011115610d2957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d5e57600080fd5b610d6786610b0b565b9450610d7560208701610b0b565b9350604086013567ffffffffffffffff80821115610d9257600080fd5b610d9e89838a01610c6b565b94506060880135915080821115610db457600080fd5b610dc089838a01610c6b565b93506080880135915080821115610dd657600080fd5b50610de388828901610cd6565b9150509295509295909350565b60008060408385031215610e0357600080fd5b823567ffffffffffffffff80821115610e1b57600080fd5b818501915085601f830112610e2f57600080fd5b81356020610e3f610c8c83610c47565b82815260059290921b84018101918181019089841115610e5e57600080fd5b948201945b83861015610e8357610e7486610b0b565b82529482019490820190610e63565b96505086013592505080821115610e9957600080fd5b50610ea685828601610c6b565b9150509250929050565b600081518084526020808501945080840160005b83811015610ee057815187529582019590820190600101610ec4565b509495945050505050565b602081526000610b876020830184610eb0565b60008060408385031215610f1157600080fd5b610f1a83610b0b565b915060208301358015158114610f2f57600080fd5b809150509250929050565b60008060408385031215610f4d57600080fd5b610f5683610b0b565b9150610f6460208401610b0b565b90509250929050565b600080600080600060a08688031215610f8557600080fd5b610f8e86610b0b565b9450610f9c60208701610b0b565b93506040860135925060608601359150608086013567ffffffffffffffff811115610fc657600080fd5b610de388828901610cd6565b600181811c90821680610fe657607f821691505b60208210810361100657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161104a5761104a611022565b5060010190565b808201808211156101ae576101ae611022565b6040815260006110776040830185610eb0565b82810360208401526110898185610eb0565b95945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526110ca60a0830184610ba7565b979650505050505050565b6000602082840312156110e757600080fd5b8151610b8781610b51565b60006001600160a01b03808816835280871660208401525060a0604083015261111e60a0830186610eb0565b82810360608401526111308186610eb0565b905082810360808401526111448185610ba7565b9897505050505050505056fea2646970667358221220b0f65323916809195f9cf07dc091ecb8195b634a0ee10f35f8de03887dd474e464736f6c63430008150033';

type MockERC1155ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockERC1155ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockERC1155__factory extends ContractFactory {
  constructor(...args: MockERC1155ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockERC1155';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MockERC1155> {
    return super.deploy(overrides || {}) as Promise<MockERC1155>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC1155 {
    return super.attach(address) as MockERC1155;
  }
  override connect(signer: Signer): MockERC1155__factory {
    return super.connect(signer) as MockERC1155__factory;
  }
  static readonly contractName: 'MockERC1155';

  public readonly contractName: 'MockERC1155';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC1155Interface {
    return new utils.Interface(_abi) as MockERC1155Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockERC1155 {
    return new Contract(address, _abi, signerOrProvider) as MockERC1155;
  }
}
