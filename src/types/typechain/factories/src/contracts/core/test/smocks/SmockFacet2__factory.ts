/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type { SmockFacet2, SmockFacet2Interface } from '../../../../../../src/contracts/core/test/smocks/SmockFacet2';

const _abi = [
  {
    inputs: [],
    name: 'getNewStructValueFromExtended',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getOldStructValueFromExtended',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5061010c806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806336d0c1d01460415780638129fc1c14607b578063f6af19c01460ad575b600080fd5b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0de5460ff165b604051901515815260200160405180910390f35b60ab7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0e2805460ff19166001179055565b005b7f67301b4e5cd5524778597dc615896d3b917dbc55199870fdeb8c8cb13d6fa0e25460ff16606756fea264697066735822122003845f99b5bf016aa759e7c6aeb5640535e02eed54c126be8cc728a46ae5a03f64736f6c63430008150033';

type SmockFacet2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: SmockFacet2ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class SmockFacet2__factory extends ContractFactory {
  constructor(...args: SmockFacet2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'SmockFacet2';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<SmockFacet2> {
    return super.deploy(overrides || {}) as Promise<SmockFacet2>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SmockFacet2 {
    return super.attach(address) as SmockFacet2;
  }
  override connect(signer: Signer): SmockFacet2__factory {
    return super.connect(signer) as SmockFacet2__factory;
  }
  static readonly contractName: 'SmockFacet2';

  public readonly contractName: 'SmockFacet2';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SmockFacet2Interface {
    return new utils.Interface(_abi) as SmockFacet2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SmockFacet2 {
    return new Contract(address, _abi, signerOrProvider) as SmockFacet2;
  }
}
