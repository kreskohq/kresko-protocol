/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type {
  MockSequencerUptimeFeed,
  MockSequencerUptimeFeedInterface,
} from '../../../../../../src/contracts/core/test/mocks/MockSequencerUptimeFeed';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      {
        internalType: 'uint80',
        name: 'roundId',
        type: 'uint80',
      },
      {
        internalType: 'int256',
        name: 'answer',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'startedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'updatedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint80',
        name: 'answeredInRound',
        type: 'uint80',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: '_answer',
        type: 'int256',
      },
    ],
    name: 'setAnswer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5042600081905560015560e6806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806399213cd8146037578063feaf968c146048575b600080fd5b604660423660046098565b607f565b005b6002546000805460408051838152602081019490945283810191909152606083018290526080830191909152519081900360a00190f35b60025481146091574260005560028190555b5042600155565b60006020828403121560a957600080fd5b503591905056fea2646970667358221220aebdf586367363b64f24ca12b6c2c5a68d58b568a301dfe5eba5ee8b172d505e64736f6c63430008150033';

type MockSequencerUptimeFeedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSequencerUptimeFeedConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSequencerUptimeFeed__factory extends ContractFactory {
  constructor(...args: MockSequencerUptimeFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockSequencerUptimeFeed';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MockSequencerUptimeFeed> {
    return super.deploy(overrides || {}) as Promise<MockSequencerUptimeFeed>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSequencerUptimeFeed {
    return super.attach(address) as MockSequencerUptimeFeed;
  }
  override connect(signer: Signer): MockSequencerUptimeFeed__factory {
    return super.connect(signer) as MockSequencerUptimeFeed__factory;
  }
  static readonly contractName: 'MockSequencerUptimeFeed';

  public readonly contractName: 'MockSequencerUptimeFeed';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSequencerUptimeFeedInterface {
    return new utils.Interface(_abi) as MockSequencerUptimeFeedInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockSequencerUptimeFeed {
    return new Contract(address, _abi, signerOrProvider) as MockSequencerUptimeFeed;
  }
}
