/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type {
  RedstoneDefaultsLib,
  RedstoneDefaultsLibInterface,
} from '../../../../../../src/contracts/core/libs/RedstoneInternals.sol/RedstoneDefaultsLib';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'receivedTimestampSeconds',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'blockTimestamp',
        type: 'uint256',
      },
    ],
    name: 'TimestampFromTooLongFuture',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'receivedTimestampSeconds',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'blockTimestamp',
        type: 'uint256',
      },
    ],
    name: 'TimestampIsTooOld',
    type: 'error',
  },
] as const;

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220570bb53291ae788407fa21cabd9bea7d3f9515c5874b875464c5c2c0fad0208264736f6c63430008150033';

type RedstoneDefaultsLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: RedstoneDefaultsLibConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class RedstoneDefaultsLib__factory extends ContractFactory {
  constructor(...args: RedstoneDefaultsLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'RedstoneDefaultsLib';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<RedstoneDefaultsLib> {
    return super.deploy(overrides || {}) as Promise<RedstoneDefaultsLib>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RedstoneDefaultsLib {
    return super.attach(address) as RedstoneDefaultsLib;
  }
  override connect(signer: Signer): RedstoneDefaultsLib__factory {
    return super.connect(signer) as RedstoneDefaultsLib__factory;
  }
  static readonly contractName: 'RedstoneDefaultsLib';

  public readonly contractName: 'RedstoneDefaultsLib';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RedstoneDefaultsLibInterface {
    return new utils.Interface(_abi) as RedstoneDefaultsLibInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RedstoneDefaultsLib {
    return new Contract(address, _abi, signerOrProvider) as RedstoneDefaultsLib;
  }
}
