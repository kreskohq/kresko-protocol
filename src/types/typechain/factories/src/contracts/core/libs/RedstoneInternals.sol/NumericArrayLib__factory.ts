/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type {
  NumericArrayLib,
  NumericArrayLibInterface,
} from '../../../../../../src/contracts/core/libs/RedstoneInternals.sol/NumericArrayLib';

const _abi = [
  {
    inputs: [],
    name: 'CanNotPickMedianOfEmptyArray',
    type: 'error',
  },
] as const;

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f07a612d673a9357b35c9a3e331b292937864ddfe76634d5934bfe5d5c6daf4364736f6c63430008150033';

type NumericArrayLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: NumericArrayLibConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class NumericArrayLib__factory extends ContractFactory {
  constructor(...args: NumericArrayLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'NumericArrayLib';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<NumericArrayLib> {
    return super.deploy(overrides || {}) as Promise<NumericArrayLib>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NumericArrayLib {
    return super.attach(address) as NumericArrayLib;
  }
  override connect(signer: Signer): NumericArrayLib__factory {
    return super.connect(signer) as NumericArrayLib__factory;
  }
  static readonly contractName: 'NumericArrayLib';

  public readonly contractName: 'NumericArrayLib';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NumericArrayLibInterface {
    return new utils.Interface(_abi) as NumericArrayLibInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NumericArrayLib {
    return new Contract(address, _abi, signerOrProvider) as NumericArrayLib;
  }
}
