/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type {
  CommonStateFacet,
  CommonStateFacetInterface,
} from '../../../../../../src/contracts/core/common/facets/CommonStateFacet';

const _abi = [
  {
    inputs: [],
    name: 'domainSeparator',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getExtOracleDecimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getFeeRecipient',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinDebtValue',
    outputs: [
      {
        internalType: 'uint96',
        name: '',
        type: 'uint96',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getOracleDeviationPct',
    outputs: [
      {
        internalType: 'uint16',
        name: '',
        type: 'uint16',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getOracleTimeout',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getSequencerUptimeFeed',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getSequencerUptimeFeedGracePeriod',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getStorageVersion',
    outputs: [
      {
        internalType: 'uint96',
        name: '',
        type: 'uint96',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5061037f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806379fd5e2e11610076578063ab5b2f221161005b578063ab5b2f22146102a9578063abc9433f146102e5578063f698da251461031957600080fd5b806379fd5e2e14610217578063a056076c1461026c57600080fd5b80630f6fd328146100a8578063217070ea146101065780634ccb20c01461015f5780634fe100a0146101bd575b600080fd5b7fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815a547e01000000000000000000000000000000000000000000000000000000000000900460ff1660405160ff90911681526020015b60405180910390f35b7fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815a547c0100000000000000000000000000000000000000000000000000000000900461ffff1660405161ffff90911681526020016100fd565b7fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba9781595473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100fd565b7fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815a547801000000000000000000000000000000000000000000000000900463ffffffff165b60405163ffffffff90911681526020016100fd565b7f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f1054600160a01b90046bffffffffffffffffffffffff165b6040516bffffffffffffffffffffffff90911681526020016100fd565b7fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815a5473ffffffffffffffffffffffffffffffffffffffff16610198565b7fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815954600160a01b90046bffffffffffffffffffffffff1661024f565b7fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815a54600160a01b900463ffffffff16610202565b7f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f0e546040519081526020016100fd56fea2646970667358221220603bc79a7a7a324919156f890df58c175083042059bd07da663e64c20f6a893e64736f6c63430008150033';

type CommonStateFacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: CommonStateFacetConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class CommonStateFacet__factory extends ContractFactory {
  constructor(...args: CommonStateFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'CommonStateFacet';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<CommonStateFacet> {
    return super.deploy(overrides || {}) as Promise<CommonStateFacet>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CommonStateFacet {
    return super.attach(address) as CommonStateFacet;
  }
  override connect(signer: Signer): CommonStateFacet__factory {
    return super.connect(signer) as CommonStateFacet__factory;
  }
  static readonly contractName: 'CommonStateFacet';

  public readonly contractName: 'CommonStateFacet';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommonStateFacetInterface {
    return new utils.Interface(_abi) as CommonStateFacetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CommonStateFacet {
    return new Contract(address, _abi, signerOrProvider) as CommonStateFacet;
  }
}
