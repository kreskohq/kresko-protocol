/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type {
  DiamondEvent,
  DiamondEventInterface,
} from '../../../../../../src/contracts/core/common/Events.sol/DiamondEvent';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'facetAddress',
            type: 'address',
          },
          {
            internalType: 'enum FacetCutAction',
            name: 'action',
            type: 'uint8',
          },
          {
            internalType: 'bytes4[]',
            name: 'functionSelectors',
            type: 'bytes4[]',
          },
        ],
        indexed: false,
        internalType: 'struct FacetCut[]',
        name: '_diamondCut',
        type: 'tuple[]',
      },
      {
        indexed: false,
        internalType: 'address',
        name: '_init',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: '_calldata',
        type: 'bytes',
      },
    ],
    name: 'DiamondCut',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint96',
        name: 'version',
        type: 'uint96',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
] as const;

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db3ca8b00103f3cc7ae7d3a120aaed789413ba3bcbfb41ff616e22e87e54263164736f6c63430008150033';

type DiamondEventConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: DiamondEventConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class DiamondEvent__factory extends ContractFactory {
  constructor(...args: DiamondEventConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'DiamondEvent';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<DiamondEvent> {
    return super.deploy(overrides || {}) as Promise<DiamondEvent>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondEvent {
    return super.attach(address) as DiamondEvent;
  }
  override connect(signer: Signer): DiamondEvent__factory {
    return super.connect(signer) as DiamondEvent__factory;
  }
  static readonly contractName: 'DiamondEvent';

  public readonly contractName: 'DiamondEvent';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondEventInterface {
    return new utils.Interface(_abi) as DiamondEventInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DiamondEvent {
    return new Contract(address, _abi, signerOrProvider) as DiamondEvent;
  }
}
