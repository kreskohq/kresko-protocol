/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  IDiamondCutFacet,
  IDiamondCutFacetInterface,
} from '../../../../../../src/contracts/core/diamond/interfaces/IDiamondCutFacet';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'facetAddress',
            type: 'address',
          },
          {
            internalType: 'enum FacetCutAction',
            name: 'action',
            type: 'uint8',
          },
          {
            internalType: 'bytes4[]',
            name: 'functionSelectors',
            type: 'bytes4[]',
          },
        ],
        internalType: 'struct FacetCut[]',
        name: '_diamondCut',
        type: 'tuple[]',
      },
      {
        internalType: 'address',
        name: '_init',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_calldata',
        type: 'bytes',
      },
    ],
    name: 'diamondCut',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_init',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_calldata',
        type: 'bytes',
      },
    ],
    name: 'upgradeState',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IDiamondCutFacet__factory {
  static readonly abi = _abi;
  static createInterface(): IDiamondCutFacetInterface {
    return new utils.Interface(_abi) as IDiamondCutFacetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IDiamondCutFacet {
    return new Contract(address, _abi, signerOrProvider) as IDiamondCutFacet;
  }
}
