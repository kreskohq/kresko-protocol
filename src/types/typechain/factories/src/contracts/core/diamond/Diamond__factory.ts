/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../common';
import type {
  Diamond,
  DiamondInterface,
  FacetCutStruct,
  InitializationStruct,
} from '../../../../../src/contracts/core/diamond/Diamond';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'facetAddress',
            type: 'address',
          },
          {
            internalType: 'enum FacetCutAction',
            name: 'action',
            type: 'uint8',
          },
          {
            internalType: 'bytes4[]',
            name: 'functionSelectors',
            type: 'bytes4[]',
          },
        ],
        internalType: 'struct FacetCut[]',
        name: '_diamondCut',
        type: 'tuple[]',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'initContract',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'initData',
            type: 'bytes',
          },
        ],
        internalType: 'struct Initialization[]',
        name: '_initializations',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'ADDRESS_HAS_NO_CODE',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ALREADY_INITIALIZED',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'bytes4',
        name: '',
        type: 'bytes4',
      },
    ],
    name: 'DIAMOND_FUNCTION_ALREADY_EXISTS',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: '',
        type: 'bytes4',
      },
    ],
    name: 'DIAMOND_FUNCTION_NOT_FOUND',
    type: 'error',
  },
  {
    inputs: [],
    name: 'DIAMOND_INCORRECT_FACET_CUT_ACTION',
    type: 'error',
  },
  {
    inputs: [],
    name: 'DIAMOND_INIT_ADDRESS_ZERO_BUT_CALLDATA_NOT_EMPTY',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'DIAMOND_INIT_FAILED',
    type: 'error',
  },
  {
    inputs: [],
    name: 'DIAMOND_INIT_NOT_ZERO_BUT_CALLDATA_IS_EMPTY',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'DIAMOND_NO_FACET_SELECTORS',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'DIAMOND_REMOVE_FUNCTIONS_NONZERO_FACET_ADDRESS',
    type: 'error',
  },
  {
    inputs: [],
    name: 'DIAMOND_REMOVE_FUNCTION_FACET_IS_ZERO',
    type: 'error',
  },
  {
    inputs: [],
    name: 'DIAMOND_REPLACE_FUNCTION_DUPLICATE',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SAFETY_COUNCIL_NOT_ALLOWED',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ZERO_ADDRESS',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'facetAddress',
            type: 'address',
          },
          {
            internalType: 'enum FacetCutAction',
            name: 'action',
            type: 'uint8',
          },
          {
            internalType: 'bytes4[]',
            name: 'functionSelectors',
            type: 'bytes4[]',
          },
        ],
        indexed: false,
        internalType: 'struct FacetCut[]',
        name: '_diamondCut',
        type: 'tuple[]',
      },
      {
        indexed: false,
        internalType: 'address',
        name: '_init',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: '_calldata',
        type: 'bytes',
      },
    ],
    name: 'DiamondCut',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint96',
        name: 'version',
        type: 'uint96',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'role',
        type: 'bytes32',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'RoleGranted',
    type: 'event',
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
] as const;

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162001989380380620019898339810160408190526200003491620013c6565b6200004f60008051602062001917833981519152846200019c565b6200007f82600060405180602001604052806000815250620000766200018960201b60201c565b92919062000335565b620000ab7fb9dacdf02281f2e98ddbadaaf44db270b3d5a916342df47c59f77937a6bcd5d8846200055b565b60005b81518110156200011f576200010a828281518110620000d157620000d16200159a565b602002602001015160000151838381518110620000f257620000f26200159a565b6020026020010151602001516200066f60201b60201c565b806200011681620015c6565b915050620000ae565b506001600160a01b0383167f94675b964f30c4a84c4ee98bd8964a23de3d815be42d925168f12e18145a1e0e6000805160206200191783398151915260070154604051600160a01b9091046001600160601b0316815260200160405180910390a2505050620017bd565b6000805160206200191783398151915290565b6004820154600160a01b900460ff1615620001ca5760405163439a74c960e01b815260040160405180910390fd5b600482018054600160a01b60ff60a01b199091168117909155600783018054919091046001600160601b03169060146200020483620015e2565b91906101000a8154816001600160601b0302191690836001600160601b03160217905550506200027c6040518060400160405280600f81526020016e12dc995cdadbc8141c9bdd1bd8dbdb608a1b81525060405180604001604052806002815260200161563160f01b815250620007a560201b60201c565b60058301556006820180546001600160a01b0319166001600160a01b0383169081179091556348e2b09360e01b6000908152600384016020526040808220805460ff1990811660019081179092556301ffc9a760e01b84528284208054821683179055630b34c46b60e21b8452828420805482168317905563f060b80160e01b845282842080549091169091179055517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35050565b60005b83518110156200050b5760008482815181106200035957620003596200159a565b6020026020010151602001519050600060028111156200037d576200037d62001613565b81600281111562000392576200039262001613565b03620003f557620003ef858381518110620003b157620003b16200159a565b602002602001015160000151868481518110620003d257620003d26200159a565b602002602001015160400151886200082b60201b9092919060201c565b620004f5565b60018160028111156200040c576200040c62001613565b036200046957620003ef8583815181106200042b576200042b6200159a565b6020026020010151600001518684815181106200044c576200044c6200159a565b6020026020010151604001518862000a1b60201b9092919060201c565b600281600281111562000480576200048062001613565b03620004dd57620003ef8583815181106200049f576200049f6200159a565b602002602001015160000151868481518110620004c057620004c06200159a565b6020026020010151604001518862000bf260201b9092919060201c565b604051629f458960e51b815260040160405180910390fd5b50806200050281620015c6565b91505062000338565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051620005419392919062001657565b60405180910390a16200055582826200066f565b50505050565b817f63c78130e99c06ebba6a66c1d39fd4ba216b40745c5eef34cf1c9ad2864a7e4081016200059d576040516365fa585160e01b815260040160405180910390fd5b620005a9838362000cd1565b6200066a576000838152600080516020620018f7833981519152602090815260408083206001600160a01b03861684528252808320805460ff191660011790558583527fd6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815d90915290206200061e908362000d0c565b506200062962000d2a565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b505050565b6001600160a01b03821615801562000688575060008151115b15620006a757604051636423f74960e11b815260040160405180910390fd5b6001600160a01b03821615620007a1578051600003620006da57604051630f484e3d60e01b815260040160405180910390fd5b620006e58262000d88565b600080836001600160a01b0316836040516200070291906200175e565b600060405180830381855af49150503d80600081146200073f576040519150601f19603f3d011682016040523d82523d6000602084013e62000744565b606091505b50915091508162000555578051156200077c578060405162461bcd60e51b81526004016200077391906200177c565b60405180910390fd5b604051630749d8a760e41b81526001600160a01b038516600482015260240162000773565b5050565b600060405180608001604052806052815260200162001937605291398051906020012083805190602001208380519060200120620007e862000db960201b60201c565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905092915050565b80516000036200085a57604051637384b7af60e01b81526001600160a01b038316600482015260240162000773565b6001600160a01b038216620008825760405163538ba4f960e01b815260040160405180910390fd5b6001600160a01b0382166000908152600184016020526040812054906001600160601b0382169003620008bb57620008bb848462000dbd565b60005b825181101562000a14576000838281518110620008df57620008df6200159a565b6020908102919091018101516001600160e01b031981166000908152918890526040909120549091506001600160a01b03168015620009555760405163eddd0bfd60e01b81526001600160a01b038088166004830152821660248201526001600160e01b03198316604482015260640162000773565b6001600160e01b0319821660008181526020898152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558b168085526001808e0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925289905281546001600160a01b03191617905583620009f981620015e2565b9450505050808062000a0b90620015c6565b915050620008be565b5050505050565b805160000362000a4a57604051637384b7af60e01b81526001600160a01b038316600482015260240162000773565b6001600160a01b03821662000a725760405163538ba4f960e01b815260040160405180910390fd5b6001600160a01b0382166000908152600184016020526040812054906001600160601b038216900362000aab5762000aab848462000dbd565b60005b825181101562000a1457600083828151811062000acf5762000acf6200159a565b6020908102919091018101516001600160e01b031981166000908152918890526040909120549091506001600160a01b03908116908616810362000b2657604051631fa1aa9160e11b815260040160405180910390fd5b62000b3387828462000e10565b6001600160e01b0319821660008181526020898152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558b168085526001808e0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925289905281546001600160a01b0319161790558362000bd781620015e2565b9450505050808062000be990620015c6565b91505062000aae565b805160000362000c2157604051637384b7af60e01b81526001600160a01b038316600482015260240162000773565b6001600160a01b0382161562000c5657604051631f20249360e01b81526001600160a01b038316600482015260240162000773565b60005b81518110156200055557600082828151811062000c7a5762000c7a6200159a565b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b031662000cb986828462000e10565b5050808062000cc890620015c6565b91505062000c59565b6000828152600080516020620018f7833981519152602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b600062000d23836001600160a01b03841662001129565b9392505050565b600030330362000d8257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915062000d859050565b50335b90565b803b6000819003620007a1576040516316626c0f60e21b81526001600160a01b038316600482015260240162000773565b4690565b62000dc88162000d88565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160a01b03821662000e3857604051633ac87b8560e11b815260040160405180910390fd5b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b0316929162000e899162001791565b905080821462000f82576001600160a01b0384166000908152600186016020526040812080548390811062000ec25762000ec26200159a565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811062000f165762000f166200159a565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b0384166000908152600186016020526040902080548062000fae5762000fae620017a7565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812081905581900362000a14576002850154600090620010149060019062001791565b6001600160a01b0386166000908152600180890160205260409091200154909150808214620010ca5760008760020183815481106200105757620010576200159a565b6000918252602090912001546002890180546001600160a01b0390921692508291849081106200108b576200108b6200159a565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480620010e057620010e0620017a7565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b6000818152600183016020526040812054620011725750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000d06565b50600062000d06565b80516001600160a01b03811681146200119357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620011d357620011d362001198565b60405290565b604051606081016001600160401b0381118282101715620011d357620011d362001198565b604051601f8201601f191681016001600160401b038111828210171562001229576200122962001198565b604052919050565b60006001600160401b038211156200124d576200124d62001198565b5060051b60200190565b60005b83811015620012745781810151838201526020016200125a565b50506000910152565b6000601f83818401126200129057600080fd5b82516020620012a9620012a38362001231565b620011fe565b82815260059290921b85018101918181019087841115620012c957600080fd5b8287015b84811015620013ba5780516001600160401b0380821115620012ef5760008081fd5b908901906040601f19838d0381018213156200130b5760008081fd5b62001315620011ae565b620013228986016200117b565b81528285015184811115620013375760008081fd5b8086019550508d603f8601126200134e5760008081fd5b888501518481111562001365576200136562001198565b620013768a848e84011601620011fe565b94508085528e848288010111156200139057600092508283fd5b620013a1818b870186890162001257565b50808901939093525050845250918301918301620012cd565b50979650505050505050565b600080600060608486031215620013dc57600080fd5b620013e7846200117b565b60208501519093506001600160401b03808211156200140557600080fd5b818601915086601f8301126200141a57600080fd5b81516200142b620012a38262001231565b8082825260208201915060208360051b8601019250898311156200144e57600080fd5b602085015b8381101562001566578051858111156200146c57600080fd5b86016060818d03601f190112156200148357600080fd5b6200148d620011d9565b6200149b602083016200117b565b8152604082015160038110620014b057600080fd5b6020820152606082015187811115620014c857600080fd5b8083019250508c603f830112620014de57600080fd5b6020820151620014f2620012a38262001231565b81815260059190911b83016040019060208101908f8311156200151457600080fd5b6040850194505b828510156200154f5784516001600160e01b0319811681146200153d57600080fd5b8252602094850194909101906200151b565b604084015250508452506020928301920162001453565b50604089015190965093505050808211156200158157600080fd5b5062001590868287016200127d565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620015db57620015db620015b0565b5060010190565b60006001600160601b038281166002600160601b03198101620016095762001609620015b0565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b600081518084526200164381602086016020860162001257565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200172c57898403607f19018652815180516001600160a01b03168552838101518986019060038110620016c857634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620017165783516001600160e01b0319168252928601926001929092019190860190620016ea565b5097850197955050509082019060010162001680565b50506001600160a01b038a1690880152868103604088015262001750818962001629565b9a9950505050505050505050565b600082516200177281846020870162001257565b9190910192915050565b60208152600062000d23602083018462001629565b8181038181111562000d065762000d06620015b0565b634e487b7160e01b600052603160045260246000fd5b61012a80620017cd6000396000f3fe608060405236600a57005b600080357fffffffff000000000000000000000000000000000000000000000000000000001681527f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f09602052604090205473ffffffffffffffffffffffffffffffffffffffff168060d1576040517f88512ccc0000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000060003516600482015260240160405180910390fd5b3660008037600080366000845af43d6000803e80801560ef573d6000f35b3d6000fdfea264697066735822122084a2e02c4ef8707e7341480fca07ea60bcfd7c3982ae8d7b739ee8ae209d8c3664736f6c63430008150033d6577bbd1315995ef7d02da632fcee9ea37575f42959077f04433a81ba97815c080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f09454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429';

type DiamondConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: DiamondConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class Diamond__factory extends ContractFactory {
  constructor(...args: DiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Diamond';
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _diamondCut: FacetCutStruct[],
    _initializations: InitializationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<Diamond> {
    return super.deploy(_owner, _diamondCut, _initializations, overrides || {}) as Promise<Diamond>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _diamondCut: FacetCutStruct[],
    _initializations: InitializationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, _diamondCut, _initializations, overrides || {});
  }
  override attach(address: string): Diamond {
    return super.attach(address) as Diamond;
  }
  override connect(signer: Signer): Diamond__factory {
    return super.connect(signer) as Diamond__factory;
  }
  static readonly contractName: 'Diamond';

  public readonly contractName: 'Diamond';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInterface {
    return new utils.Interface(_abi) as DiamondInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Diamond {
    return new Contract(address, _abi, signerOrProvider) as Diamond;
  }
}
