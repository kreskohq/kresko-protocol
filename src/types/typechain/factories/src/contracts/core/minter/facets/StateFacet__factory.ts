/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type { StateFacet, StateFacetInterface } from '../../../../../../src/contracts/core/minter/facets/StateFacet';

const _abi = [
  {
    inputs: [],
    name: 'CalldataMustHaveValidPayload',
    type: 'error',
  },
  {
    inputs: [],
    name: 'CalldataOverOrUnderFlow',
    type: 'error',
  },
  {
    inputs: [],
    name: 'CanNotPickMedianOfEmptyArray',
    type: 'error',
  },
  {
    inputs: [],
    name: 'IncorrectUnsignedMetadataSize',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'receivedSignersCount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'requiredSignersCount',
        type: 'uint256',
      },
    ],
    name: 'InsufficientNumberOfUniqueSigners',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'primaryPrice',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'referencePrice',
        type: 'uint256',
      },
    ],
    name: 'PRICE_UNSTABLE',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SEQUENCER_DOWN_NO_REDSTONE_AVAILABLE',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receivedSigner',
        type: 'address',
      },
    ],
    name: 'SignerNotAuthorised',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'underlyingId',
        type: 'string',
      },
    ],
    name: 'ZERO_PRICE',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_collateralAsset',
        type: 'address',
      },
    ],
    name: 'getCollateralExists',
    outputs: [
      {
        internalType: 'bool',
        name: 'exists',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_collateralAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'getCollateralValueWithPrice',
    outputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'adjustedValue',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_kreskoAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'getDebtValueWithPrice',
    outputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'adjustedValue',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_kreskoAsset',
        type: 'address',
      },
    ],
    name: 'getKrAssetExists',
    outputs: [
      {
        internalType: 'bool',
        name: 'exists',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getLiquidationThreshold',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMaxLiquidationRatio',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinCollateralRatio',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinterParameters',
    outputs: [
      {
        components: [
          {
            internalType: 'uint32',
            name: 'minCollateralRatio',
            type: 'uint32',
          },
          {
            internalType: 'uint32',
            name: 'liquidationThreshold',
            type: 'uint32',
          },
          {
            internalType: 'uint32',
            name: 'maxLiquidationRatio',
            type: 'uint32',
          },
        ],
        internalType: 'struct MinterParams',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '';

type StateFacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: StateFacetConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class StateFacet__factory extends ContractFactory {
  constructor(...args: StateFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'StateFacet';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<StateFacet> {
    return super.deploy(overrides || {}) as Promise<StateFacet>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StateFacet {
    return super.attach(address) as StateFacet;
  }
  override connect(signer: Signer): StateFacet__factory {
    return super.connect(signer) as StateFacet__factory;
  }
  static readonly contractName: 'StateFacet';

  public readonly contractName: 'StateFacet';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StateFacetInterface {
    return new utils.Interface(_abi) as StateFacetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StateFacet {
    return new Contract(address, _abi, signerOrProvider) as StateFacet;
  }
}
