/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  ICollateralReceiver,
  ICollateralReceiverInterface,
} from '../../../../../../src/contracts/core/minter/interfaces/ICollateralReceiver';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_collateralAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_withdrawalAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_depositedCollateralAssetIndex',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_userData',
        type: 'bytes',
      },
    ],
    name: 'onUncheckedCollateralWithdraw',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class ICollateralReceiver__factory {
  static readonly abi = _abi;
  static createInterface(): ICollateralReceiverInterface {
    return new utils.Interface(_abi) as ICollateralReceiverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ICollateralReceiver {
    return new Contract(address, _abi, signerOrProvider) as ICollateralReceiver;
  }
}
