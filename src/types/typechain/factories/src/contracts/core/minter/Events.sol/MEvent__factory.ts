/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type { MEvent, MEventInterface } from '../../../../../../src/contracts/core/minter/Events.sol/MEvent';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'ammOracle',
        type: 'address',
      },
    ],
    name: 'AMMOracleUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'liquidator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'seizedCollateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'repayUSD',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'collateralSent',
        type: 'uint256',
      },
    ],
    name: 'BatchInterestLiquidationOccurred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'cFactor',
        type: 'uint256',
      },
    ],
    name: 'CFactorUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'string',
        name: 'id',
        type: 'string',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'factor',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'anchor',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'liqIncentive',
        type: 'uint256',
      },
    ],
    name: 'CollateralAssetAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'string',
        name: 'id',
        type: 'string',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'factor',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'anchor',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'liqIncentive',
        type: 'uint256',
      },
    ],
    name: 'CollateralAssetUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'CollateralDeposited',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'CollateralWithdrawn',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'kreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'DebtPositionClosed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'paymentCollateralAsset',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'feeType',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'paymentAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'paymentValue',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'feeValue',
        type: 'uint256',
      },
    ],
    name: 'FeePaid',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'feeRecipient',
        type: 'address',
      },
    ],
    name: 'FeeRecipientUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'liquidator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'repayKreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'repayUSD',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'seizedCollateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'collateralSent',
        type: 'uint256',
      },
    ],
    name: 'InterestLiquidationOccurred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'kreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'kFactor',
        type: 'uint256',
      },
    ],
    name: 'KFactorUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'string',
        name: 'id',
        type: 'string',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'kreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'anchor',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'kFactor',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'supplyLimit',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'closeFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'openFee',
        type: 'uint256',
      },
    ],
    name: 'KreskoAssetAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'kreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'KreskoAssetBurned',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'kreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'KreskoAssetMinted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'string',
        name: 'id',
        type: 'string',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'kreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'anchor',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'kFactor',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'supplyLimit',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'closeFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'openFee',
        type: 'uint256',
      },
    ],
    name: 'KreskoAssetUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'liqIncentiveMultiplier',
        type: 'uint256',
      },
    ],
    name: 'LiquidationIncentiveMultiplierUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'liquidator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'repayKreskoAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'repayAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'seizedCollateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'collateralSent',
        type: 'uint256',
      },
    ],
    name: 'LiquidationOccurred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'liquidationThreshold',
        type: 'uint256',
      },
    ],
    name: 'LiquidationThresholdUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newMaxLiquidationRatio',
        type: 'uint256',
      },
    ],
    name: 'MaxLiquidationRatioUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'minCollateralRatio',
        type: 'uint256',
      },
    ],
    name: 'MinimumCollateralizationRatioUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'minDebtValue',
        type: 'uint256',
      },
    ],
    name: 'MinimumDebtValueUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'enum Action',
        name: 'action',
        type: 'uint8',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'string',
        name: 'description',
        type: 'string',
      },
    ],
    name: 'SafetyStateChange',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'collateralAsset',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'UncheckedCollateralWithdrawn',
    type: 'event',
  },
] as const;

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122031f5b3ae44d90a077936af48f2b725cc890412203fc43fe1f548c5492a5fe2d164736f6c63430008150033';

type MEventConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MEventConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MEvent__factory extends ContractFactory {
  constructor(...args: MEventConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MEvent';
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MEvent> {
    return super.deploy(overrides || {}) as Promise<MEvent>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MEvent {
    return super.attach(address) as MEvent;
  }
  override connect(signer: Signer): MEvent__factory {
    return super.connect(signer) as MEvent__factory;
  }
  static readonly contractName: 'MEvent';

  public readonly contractName: 'MEvent';

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MEventInterface {
    return new utils.Interface(_abi) as MEventInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MEvent {
    return new Contract(address, _abi, signerOrProvider) as MEvent;
  }
}
