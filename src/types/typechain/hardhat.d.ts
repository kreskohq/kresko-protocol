/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from '@nomiclabs/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'Kresko',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Kresko__factory>;
    getContractFactory(
      name: 'AccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: 'AccessControlEnumerableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: 'ContextUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: 'ERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: 'PausableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: 'IAccessControlEnumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: 'IERC1155Errors',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: 'IERC20Errors',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: 'IERC721Errors',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: 'ERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: 'IERC1155MetadataURI',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: 'IERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: 'IERC1155Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: 'Address',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'Math',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'IGnosisSafeL2',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IGnosisSafeL2__factory>;
    getContractFactory(
      name: 'CError',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CError__factory>;
    getContractFactory(
      name: 'AuthEvent',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AuthEvent__factory>;
    getContractFactory(
      name: 'DiamondEvent',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DiamondEvent__factory>;
    getContractFactory(
      name: 'StakingEvent',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StakingEvent__factory>;
    getContractFactory(
      name: 'AssetConfigurationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AssetConfigurationFacet__factory>;
    getContractFactory(
      name: 'AssetStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AssetStateFacet__factory>;
    getContractFactory(
      name: 'AuthorizationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AuthorizationFacet__factory>;
    getContractFactory(
      name: 'CommonConfigurationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CommonConfigurationFacet__factory>;
    getContractFactory(
      name: 'CommonStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CommonStateFacet__factory>;
    getContractFactory(
      name: 'SafetyCouncilFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SafetyCouncilFacet__factory>;
    getContractFactory(
      name: 'IAssetConfigurationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAssetConfigurationFacet__factory>;
    getContractFactory(
      name: 'IAssetStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAssetStateFacet__factory>;
    getContractFactory(
      name: 'IAuthorizationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAuthorizationFacet__factory>;
    getContractFactory(
      name: 'ICommonConfigurationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICommonConfigurationFacet__factory>;
    getContractFactory(
      name: 'ICommonStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICommonStateFacet__factory>;
    getContractFactory(
      name: 'IERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: 'ISafetyCouncilFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISafetyCouncilFacet__factory>;
    getContractFactory(
      name: 'Diamond',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: 'DiamondCutFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DiamondCutFacet__factory>;
    getContractFactory(
      name: 'DiamondLoupeFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DiamondLoupeFacet__factory>;
    getContractFactory(
      name: 'DiamondOwnershipFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DiamondOwnershipFacet__factory>;
    getContractFactory(
      name: 'ERC165Facet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165Facet__factory>;
    getContractFactory(
      name: 'IDiamondCutFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IDiamondCutFacet__factory>;
    getContractFactory(
      name: 'IDiamondLoupeFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IDiamondLoupeFacet__factory>;
    getContractFactory(
      name: 'IDiamondOwnershipFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IDiamondOwnershipFacet__factory>;
    getContractFactory(
      name: 'IERC165Facet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165Facet__factory>;
    getContractFactory(
      name: 'IKISS',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IKISS__factory>;
    getContractFactory(
      name: 'KISS',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.KISS__factory>;
    getContractFactory(
      name: 'ERC4626Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC4626Upgradeable__factory>;
    getContractFactory(
      name: 'IERC4626Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC4626Upgradeable__factory>;
    getContractFactory(
      name: 'IKreskoAsset',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IKreskoAsset__factory>;
    getContractFactory(
      name: 'ISyncable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISyncable__factory>;
    getContractFactory(
      name: 'IKreskoAssetAnchor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IKreskoAssetAnchor__factory>;
    getContractFactory(
      name: 'IKreskoAssetIssuer',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IKreskoAssetIssuer__factory>;
    getContractFactory(
      name: 'KreskoAsset',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.KreskoAsset__factory>;
    getContractFactory(
      name: 'KreskoAssetAnchor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.KreskoAssetAnchor__factory>;
    getContractFactory(
      name: 'NumericArrayLib',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.NumericArrayLib__factory>;
    getContractFactory(
      name: 'RedstoneDefaultsLib',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RedstoneDefaultsLib__factory>;
    getContractFactory(
      name: 'RedstoneError',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RedstoneError__factory>;
    getContractFactory(
      name: 'MEvent',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MEvent__factory>;
    getContractFactory(
      name: 'AccountStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccountStateFacet__factory>;
    getContractFactory(
      name: 'BurnFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BurnFacet__factory>;
    getContractFactory(
      name: 'ConfigurationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ConfigurationFacet__factory>;
    getContractFactory(
      name: 'DepositWithdrawFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DepositWithdrawFacet__factory>;
    getContractFactory(
      name: 'LiquidationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LiquidationFacet__factory>;
    getContractFactory(
      name: 'MintFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MintFacet__factory>;
    getContractFactory(
      name: 'StateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StateFacet__factory>;
    getContractFactory(
      name: 'IAccountStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccountStateFacet__factory>;
    getContractFactory(
      name: 'IBurnFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBurnFacet__factory>;
    getContractFactory(
      name: 'ICollateralReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICollateralReceiver__factory>;
    getContractFactory(
      name: 'IConfigurationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IConfigurationFacet__factory>;
    getContractFactory(
      name: 'IDepositWithdrawFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IDepositWithdrawFacet__factory>;
    getContractFactory(
      name: 'ILiquidationFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILiquidationFacet__factory>;
    getContractFactory(
      name: 'IMintFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMintFacet__factory>;
    getContractFactory(
      name: 'IStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IStateFacet__factory>;
    getContractFactory(
      name: 'SEvent',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SEvent__factory>;
    getContractFactory(
      name: 'SCDPConfigFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SCDPConfigFacet__factory>;
    getContractFactory(
      name: 'SCDPFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SCDPFacet__factory>;
    getContractFactory(
      name: 'SCDPStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SCDPStateFacet__factory>;
    getContractFactory(
      name: 'SCDPSwapFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SCDPSwapFacet__factory>;
    getContractFactory(
      name: 'SDIFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SDIFacet__factory>;
    getContractFactory(
      name: 'ISCDPConfigFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISCDPConfigFacet__factory>;
    getContractFactory(
      name: 'ISCDPFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISCDPFacet__factory>;
    getContractFactory(
      name: 'ISCDPStateFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISCDPStateFacet__factory>;
    getContractFactory(
      name: 'ISCDPSwapFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISCDPSwapFacet__factory>;
    getContractFactory(
      name: 'ISDIFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISDIFacet__factory>;
    getContractFactory(
      name: 'SDICoverRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SDICoverRecipient__factory>;
    getContractFactory(
      name: 'MockERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockERC1155__factory>;
    getContractFactory(name: 'DAI', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.DAI__factory>;
    getContractFactory(
      name: 'MockERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: 'MockERC20Restricted',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockERC20Restricted__factory>;
    getContractFactory(
      name: 'USDC',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.USDC__factory>;
    getContractFactory(
      name: 'USDT',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.USDT__factory>;
    getContractFactory(
      name: 'WETH',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: 'MockOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockOracle__factory>;
    getContractFactory(
      name: 'MockSequencerUptimeFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockSequencerUptimeFeed__factory>;
    getContractFactory(
      name: 'CalldataExtractor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CalldataExtractor__factory>;
    getContractFactory(
      name: 'ProxyConnector',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ProxyConnector__factory>;
    getContractFactory(
      name: 'RedstoneConstants',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RedstoneConstants__factory>;
    getContractFactory(
      name: 'ISmockFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISmockFacet__factory>;
    getContractFactory(
      name: 'SmockCollateralReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SmockCollateralReceiver__factory>;
    getContractFactory(
      name: 'SmockFacet',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SmockFacet__factory>;
    getContractFactory(
      name: 'SmockFacet2',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SmockFacet2__factory>;
    getContractFactory(
      name: 'SmockInit',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SmockInit__factory>;
    getContractFactory(
      name: 'Errors',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: 'SmockStorage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SmockStorage__factory>;
    getContractFactory(
      name: 'VEvent',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.VEvent__factory>;
    getContractFactory(
      name: 'IVault',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: 'IVaultExtender',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IVaultExtender__factory>;
    getContractFactory(
      name: 'Vault',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: 'AggregatorV3Interface',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'ERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'IERC20Permit',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: 'IProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: 'WETH9',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WETH9__factory>;

    getContractAt(name: 'Kresko', address: string, signer?: ethers.Signer): Promise<Contracts.Kresko>;
    getContractAt(
      name: 'AccessControlUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: 'AccessControlEnumerableUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(name: 'Initializable', address: string, signer?: ethers.Signer): Promise<Contracts.Initializable>;
    getContractAt(
      name: 'ContextUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: 'ERC165Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: 'PausableUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: 'IAccessControlEnumerable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(name: 'IAccessControl', address: string, signer?: ethers.Signer): Promise<Contracts.IAccessControl>;
    getContractAt(name: 'IERC1155Errors', address: string, signer?: ethers.Signer): Promise<Contracts.IERC1155Errors>;
    getContractAt(name: 'IERC20Errors', address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Errors>;
    getContractAt(name: 'IERC721Errors', address: string, signer?: ethers.Signer): Promise<Contracts.IERC721Errors>;
    getContractAt(name: 'ERC1155', address: string, signer?: ethers.Signer): Promise<Contracts.ERC1155>;
    getContractAt(
      name: 'IERC1155MetadataURI',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(name: 'IERC1155', address: string, signer?: ethers.Signer): Promise<Contracts.IERC1155>;
    getContractAt(
      name: 'IERC1155Receiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(name: 'Address', address: string, signer?: ethers.Signer): Promise<Contracts.Address>;
    getContractAt(name: 'ERC165', address: string, signer?: ethers.Signer): Promise<Contracts.ERC165>;
    getContractAt(name: 'IERC165', address: string, signer?: ethers.Signer): Promise<Contracts.IERC165>;
    getContractAt(name: 'Math', address: string, signer?: ethers.Signer): Promise<Contracts.Math>;
    getContractAt(name: 'ERC20', address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(name: 'IGnosisSafeL2', address: string, signer?: ethers.Signer): Promise<Contracts.IGnosisSafeL2>;
    getContractAt(name: 'CError', address: string, signer?: ethers.Signer): Promise<Contracts.CError>;
    getContractAt(name: 'AuthEvent', address: string, signer?: ethers.Signer): Promise<Contracts.AuthEvent>;
    getContractAt(name: 'DiamondEvent', address: string, signer?: ethers.Signer): Promise<Contracts.DiamondEvent>;
    getContractAt(name: 'StakingEvent', address: string, signer?: ethers.Signer): Promise<Contracts.StakingEvent>;
    getContractAt(
      name: 'AssetConfigurationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AssetConfigurationFacet>;
    getContractAt(name: 'AssetStateFacet', address: string, signer?: ethers.Signer): Promise<Contracts.AssetStateFacet>;
    getContractAt(
      name: 'AuthorizationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AuthorizationFacet>;
    getContractAt(
      name: 'CommonConfigurationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CommonConfigurationFacet>;
    getContractAt(
      name: 'CommonStateFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CommonStateFacet>;
    getContractAt(
      name: 'SafetyCouncilFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.SafetyCouncilFacet>;
    getContractAt(
      name: 'IAssetConfigurationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAssetConfigurationFacet>;
    getContractAt(
      name: 'IAssetStateFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAssetStateFacet>;
    getContractAt(
      name: 'IAuthorizationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAuthorizationFacet>;
    getContractAt(
      name: 'ICommonConfigurationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICommonConfigurationFacet>;
    getContractAt(
      name: 'ICommonStateFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICommonStateFacet>;
    getContractAt(name: 'IERC1155', address: string, signer?: ethers.Signer): Promise<Contracts.IERC1155>;
    getContractAt(
      name: 'ISafetyCouncilFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ISafetyCouncilFacet>;
    getContractAt(name: 'Diamond', address: string, signer?: ethers.Signer): Promise<Contracts.Diamond>;
    getContractAt(name: 'DiamondCutFacet', address: string, signer?: ethers.Signer): Promise<Contracts.DiamondCutFacet>;
    getContractAt(
      name: 'DiamondLoupeFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DiamondLoupeFacet>;
    getContractAt(
      name: 'DiamondOwnershipFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DiamondOwnershipFacet>;
    getContractAt(name: 'ERC165Facet', address: string, signer?: ethers.Signer): Promise<Contracts.ERC165Facet>;
    getContractAt(
      name: 'IDiamondCutFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IDiamondCutFacet>;
    getContractAt(
      name: 'IDiamondLoupeFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IDiamondLoupeFacet>;
    getContractAt(
      name: 'IDiamondOwnershipFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IDiamondOwnershipFacet>;
    getContractAt(name: 'IERC165Facet', address: string, signer?: ethers.Signer): Promise<Contracts.IERC165Facet>;
    getContractAt(name: 'IKISS', address: string, signer?: ethers.Signer): Promise<Contracts.IKISS>;
    getContractAt(name: 'KISS', address: string, signer?: ethers.Signer): Promise<Contracts.KISS>;
    getContractAt(
      name: 'ERC4626Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC4626Upgradeable>;
    getContractAt(
      name: 'IERC4626Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC4626Upgradeable>;
    getContractAt(name: 'IKreskoAsset', address: string, signer?: ethers.Signer): Promise<Contracts.IKreskoAsset>;
    getContractAt(name: 'ISyncable', address: string, signer?: ethers.Signer): Promise<Contracts.ISyncable>;
    getContractAt(
      name: 'IKreskoAssetAnchor',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IKreskoAssetAnchor>;
    getContractAt(
      name: 'IKreskoAssetIssuer',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IKreskoAssetIssuer>;
    getContractAt(name: 'KreskoAsset', address: string, signer?: ethers.Signer): Promise<Contracts.KreskoAsset>;
    getContractAt(
      name: 'KreskoAssetAnchor',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.KreskoAssetAnchor>;
    getContractAt(name: 'NumericArrayLib', address: string, signer?: ethers.Signer): Promise<Contracts.NumericArrayLib>;
    getContractAt(
      name: 'RedstoneDefaultsLib',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.RedstoneDefaultsLib>;
    getContractAt(name: 'RedstoneError', address: string, signer?: ethers.Signer): Promise<Contracts.RedstoneError>;
    getContractAt(name: 'MEvent', address: string, signer?: ethers.Signer): Promise<Contracts.MEvent>;
    getContractAt(
      name: 'AccountStateFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccountStateFacet>;
    getContractAt(name: 'BurnFacet', address: string, signer?: ethers.Signer): Promise<Contracts.BurnFacet>;
    getContractAt(
      name: 'ConfigurationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ConfigurationFacet>;
    getContractAt(
      name: 'DepositWithdrawFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DepositWithdrawFacet>;
    getContractAt(
      name: 'LiquidationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LiquidationFacet>;
    getContractAt(name: 'MintFacet', address: string, signer?: ethers.Signer): Promise<Contracts.MintFacet>;
    getContractAt(name: 'StateFacet', address: string, signer?: ethers.Signer): Promise<Contracts.StateFacet>;
    getContractAt(
      name: 'IAccountStateFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAccountStateFacet>;
    getContractAt(name: 'IBurnFacet', address: string, signer?: ethers.Signer): Promise<Contracts.IBurnFacet>;
    getContractAt(
      name: 'ICollateralReceiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICollateralReceiver>;
    getContractAt(
      name: 'IConfigurationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IConfigurationFacet>;
    getContractAt(
      name: 'IDepositWithdrawFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IDepositWithdrawFacet>;
    getContractAt(
      name: 'ILiquidationFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILiquidationFacet>;
    getContractAt(name: 'IMintFacet', address: string, signer?: ethers.Signer): Promise<Contracts.IMintFacet>;
    getContractAt(name: 'IStateFacet', address: string, signer?: ethers.Signer): Promise<Contracts.IStateFacet>;
    getContractAt(name: 'SEvent', address: string, signer?: ethers.Signer): Promise<Contracts.SEvent>;
    getContractAt(name: 'SCDPConfigFacet', address: string, signer?: ethers.Signer): Promise<Contracts.SCDPConfigFacet>;
    getContractAt(name: 'SCDPFacet', address: string, signer?: ethers.Signer): Promise<Contracts.SCDPFacet>;
    getContractAt(name: 'SCDPStateFacet', address: string, signer?: ethers.Signer): Promise<Contracts.SCDPStateFacet>;
    getContractAt(name: 'SCDPSwapFacet', address: string, signer?: ethers.Signer): Promise<Contracts.SCDPSwapFacet>;
    getContractAt(name: 'SDIFacet', address: string, signer?: ethers.Signer): Promise<Contracts.SDIFacet>;
    getContractAt(
      name: 'ISCDPConfigFacet',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ISCDPConfigFacet>;
    getContractAt(name: 'ISCDPFacet', address: string, signer?: ethers.Signer): Promise<Contracts.ISCDPFacet>;
    getContractAt(name: 'ISCDPStateFacet', address: string, signer?: ethers.Signer): Promise<Contracts.ISCDPStateFacet>;
    getContractAt(name: 'ISCDPSwapFacet', address: string, signer?: ethers.Signer): Promise<Contracts.ISCDPSwapFacet>;
    getContractAt(name: 'ISDIFacet', address: string, signer?: ethers.Signer): Promise<Contracts.ISDIFacet>;
    getContractAt(
      name: 'SDICoverRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.SDICoverRecipient>;
    getContractAt(name: 'MockERC1155', address: string, signer?: ethers.Signer): Promise<Contracts.MockERC1155>;
    getContractAt(name: 'DAI', address: string, signer?: ethers.Signer): Promise<Contracts.DAI>;
    getContractAt(name: 'MockERC20', address: string, signer?: ethers.Signer): Promise<Contracts.MockERC20>;
    getContractAt(
      name: 'MockERC20Restricted',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockERC20Restricted>;
    getContractAt(name: 'USDC', address: string, signer?: ethers.Signer): Promise<Contracts.USDC>;
    getContractAt(name: 'USDT', address: string, signer?: ethers.Signer): Promise<Contracts.USDT>;
    getContractAt(name: 'WETH', address: string, signer?: ethers.Signer): Promise<Contracts.WETH>;
    getContractAt(name: 'MockOracle', address: string, signer?: ethers.Signer): Promise<Contracts.MockOracle>;
    getContractAt(
      name: 'MockSequencerUptimeFeed',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockSequencerUptimeFeed>;
    getContractAt(
      name: 'CalldataExtractor',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CalldataExtractor>;
    getContractAt(name: 'ProxyConnector', address: string, signer?: ethers.Signer): Promise<Contracts.ProxyConnector>;
    getContractAt(
      name: 'RedstoneConstants',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.RedstoneConstants>;
    getContractAt(name: 'ISmockFacet', address: string, signer?: ethers.Signer): Promise<Contracts.ISmockFacet>;
    getContractAt(
      name: 'SmockCollateralReceiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.SmockCollateralReceiver>;
    getContractAt(name: 'SmockFacet', address: string, signer?: ethers.Signer): Promise<Contracts.SmockFacet>;
    getContractAt(name: 'SmockFacet2', address: string, signer?: ethers.Signer): Promise<Contracts.SmockFacet2>;
    getContractAt(name: 'SmockInit', address: string, signer?: ethers.Signer): Promise<Contracts.SmockInit>;
    getContractAt(name: 'Errors', address: string, signer?: ethers.Signer): Promise<Contracts.Errors>;
    getContractAt(name: 'SmockStorage', address: string, signer?: ethers.Signer): Promise<Contracts.SmockStorage>;
    getContractAt(name: 'VEvent', address: string, signer?: ethers.Signer): Promise<Contracts.VEvent>;
    getContractAt(name: 'IVault', address: string, signer?: ethers.Signer): Promise<Contracts.IVault>;
    getContractAt(name: 'IVaultExtender', address: string, signer?: ethers.Signer): Promise<Contracts.IVaultExtender>;
    getContractAt(name: 'Vault', address: string, signer?: ethers.Signer): Promise<Contracts.Vault>;
    getContractAt(
      name: 'AggregatorV3Interface',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(name: 'ERC20', address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'ERC20Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(name: 'IERC165', address: string, signer?: ethers.Signer): Promise<Contracts.IERC165>;
    getContractAt(name: 'IERC20Permit', address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Permit>;
    getContractAt(name: 'IProxy', address: string, signer?: ethers.Signer): Promise<Contracts.IProxy>;
    getContractAt(name: 'WETH9', address: string, signer?: ethers.Signer): Promise<Contracts.WETH9>;

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
  }
}
