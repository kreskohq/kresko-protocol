{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-01T15:57:29.835Z",
    "end": "2023-08-01T15:57:40.830Z",
    "duration": 10995,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1807e19f-161a-49c7-b3fc-03143189ca01",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/01-positions.ts",
      "file": "/src/test/collateral-pool/01-positions.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "49dfa9dd-0bbf-4b8c-b799-500dc91d70fb",
          "title": "Leverage Positions NFT",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/01-positions.ts",
          "file": "/src/test/collateral-pool/01-positions.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Leverage Positions NFT\"",
              "fullTitle": "Leverage Positions NFT \"before each\" hook in \"Leverage Positions NFT\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "b1d82bf0-5263-4853-8ea8-7936ed018b3c",
              "parentUUID": "49dfa9dd-0bbf-4b8c-b799-500dc91d70fb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Leverage Positions NFT\"",
              "fullTitle": "Leverage Positions NFT \"before each\" hook in \"Leverage Positions NFT\"",
              "timedOut": false,
              "duration": 5077,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "depositor = _hardhat.default.users.testUserOne;\nusers = [\n    _hardhat.default.users.testUserFive,\n    _hardhat.default.users.testUserSix\n];\npositions = await _hardhat.default.getContractOrFork(\"Positions\");\n[KISS, krETH, assetAAsset, assetAAsset8Dec] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: KISSPrice,\n        symbol: \"KISS\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 100000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"krETH\",\n        price: ETHPrice,\n        symbol: \"krETH\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 100000\n    }, true),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"assetA18Dec\",\n        price: assetAPrice,\n        factor: 1,\n        decimals: 18\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"assetA8Dec\",\n        price: assetAPrice,\n        factor: 0.8,\n        decimals: 8\n    })\n]);\nawait assetAAsset.setBalance(depositor, amountA18Dec);\nawait assetAAsset.contract.connect(depositor).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait assetAAsset8Dec.setBalance(depositor, depositAmount8Dec);\nawait assetAAsset8Dec.contract.connect(depositor).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nfor (const user of users){\n    await Promise.all([\n        await assetAAsset.setBalance(user, amountA18Dec),\n        await assetAAsset8Dec.setBalance(user, depositAmount8Dec),\n        await assetAAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await assetAAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}",
              "err": {},
              "uuid": "006481a3-7d3a-4e1b-b40b-0c6957d9b614",
              "parentUUID": "49dfa9dd-0bbf-4b8c-b799-500dc91d70fb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0d40042-1535-47a0-a990-420878560013",
              "title": "Positions",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/01-positions.ts",
              "file": "/src/test/collateral-pool/01-positions.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Positions\"",
                  "fullTitle": "Leverage Positions NFT Positions \"before each\" hook in \"Positions\"",
                  "timedOut": false,
                  "duration": 81,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "depositor = _hardhat.default.users.testUserOne;\nconst krETHFee = (0, _lib.toBig)(0.005);\nconst KISSFee = (0, _lib.toBig)(0.005);\nconst leverage = (0, _lib.toBig)(2);\nconst totalFeePct = krETHFee.add(KISSFee).wadMul(leverage);\nconst amountBWithFees = (0, _lib.toBig)(1).wadMul(leverage);\nconst fees = amountBWithFees.wadMul(totalFeePct);\nposition = {\n    account: users[1].address,\n    leverage: leverage,\n    assetA: KISS.address,\n    amountA: (0, _lib.toBig)(ETHPrice),\n    assetB: krETH.address,\n    amountBMin: amountBWithFees.sub(fees)\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    assetAAsset.address,\n    assetAAsset8Dec.address,\n    KISS.address,\n    krETH.address\n], [\n    {\n        decimals: 0,\n        liquidityIndex: 0,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        depositLimit: _hardhat.ethers.constants.MaxUint256\n    },\n    {\n        decimals: 8,\n        liquidityIndex: 0,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        depositLimit: _hardhat.ethers.constants.MaxUint256\n    },\n    {\n        decimals: 0,\n        liquidityIndex: 0,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        depositLimit: _hardhat.ethers.constants.MaxUint256\n    },\n    {\n        decimals: 0,\n        liquidityIndex: 0,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        depositLimit: _hardhat.ethers.constants.MaxUint256\n    }\n]);\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KISS.address,\n    krETH.address\n], [\n    {\n        openFee: KISSFee,\n        closeFee: KISSFee,\n        protocolFee: (0, _lib.toBig)(0.25),\n        supplyLimit: (0, _lib.toBig)(1000000)\n    },\n    {\n        openFee: krETHFee,\n        closeFee: krETHFee,\n        protocolFee: (0, _lib.toBig)(0.25),\n        supplyLimit: (0, _lib.toBig)(1000000)\n    }\n]);\nawait _hardhat.default.Diamond.setSwapPairs([\n    {\n        assetIn: KISS.address,\n        assetOut: krETH.address,\n        enabled: true\n    }\n]);\nawait _hardhat.default.Diamond.connect(depositor).poolDeposit(depositor.address, assetAAsset.address, amountA18Dec);\nawait KISS.setBalance(users[1], amountA18Dec);\nawait KISS.contract.connect(users[1]).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);",
                  "err": {},
                  "uuid": "8a218be8-5949-45df-953f-669ab980a14f",
                  "parentUUID": "d0d40042-1535-47a0-a990-420878560013",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "anyone should be able to liquidate a losing position",
                  "fullTitle": "Leverage Positions NFT Positions anyone should be able to liquidate a losing position",
                  "timedOut": false,
                  "duration": 185,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(3),\n    amountBMin: 0\n});\nconst liquidator = users[0];\nkrETH.setPrice(1500); // 2.5\nconst [pos, ratio] = await positions.getPosition(0);\n(0, _chai.expect)(ratio).to.be.lt(pos.leverage);\nconst [isLiquidatable] = await positions.isLiquidatable([\n    0\n]);\n(0, _chai.expect)(isLiquidatable).to.be.true;\nawait positions.connect(liquidator).closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.eq(0);",
                  "err": {},
                  "uuid": "07c7aa1b-bf43-4f64-92c8-17cb24464eac",
                  "parentUUID": "d0d40042-1535-47a0-a990-420878560013",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "anyone should be able to close a winning position",
                  "fullTitle": "Leverage Positions NFT Positions anyone should be able to close a winning position",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(3),\n    amountBMin: 0\n});\nconst closer = users[0];\nkrETH.setPrice(2100); // 2.5\nconst [, ratio] = await positions.getPosition(0);\n(0, _chai.expect)(ratio).to.be.eq(0.5e18.toString());\nconst [isClosable] = await positions.isClosable([\n    0\n]);\n(0, _chai.expect)(isClosable).to.be.true;\nawait positions.connect(closer).closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.gt(0);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.gt(0);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.gt(0);",
                  "err": {},
                  "uuid": "eb6f340a-f217-418c-bd41-764e388c6a2b",
                  "parentUUID": "d0d40042-1535-47a0-a990-420878560013",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07c7aa1b-bf43-4f64-92c8-17cb24464eac",
                "eb6f340a-f217-418c-bd41-764e388c6a2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 401,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}