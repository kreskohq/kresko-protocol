{
  "stats": {
    "suites": 8,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-17T13:24:00.188Z",
    "end": "2023-08-17T13:28:14.676Z",
    "duration": 254488,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f0f70060-f550-4287-9faa-882680c517be",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
      "file": "/src/test/collateral-pool/00-collateral-pool.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "57111177-cac6-45c3-a4de-35fd891d5960",
          "title": "Collateral Pool",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
          "file": "/src/test/collateral-pool/00-collateral-pool.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Collateral Pool\"",
              "fullTitle": "Collateral Pool \"before each\" hook in \"Collateral Pool\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "91beb44b-6af8-4afe-ad95-3f3228d8d44a",
              "parentUUID": "57111177-cac6-45c3-a4de-35fd891d5960",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Collateral Pool\"",
              "fullTitle": "Collateral Pool \"before each\" hook in \"Collateral Pool\"",
              "timedOut": false,
              "duration": 4871,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = [\n    _hardhat.default.users.testUserFive,\n    _hardhat.default.users.testUserSix,\n    _hardhat.default.users.testUserSeven\n];\n[KreskoAsset, CollateralAsset, CollateralAsset8Dec] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice10USD\",\n        price: collateralPrice,\n        symbol: \"KreskoAssetPrice10USD\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1.25,\n        supplyLimit: 100000\n    }, true),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral18Dec\",\n        price: collateralPrice,\n        factor: 1,\n        decimals: 18\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral8Dec\",\n        price: collateralPrice,\n        factor: 0.8,\n        decimals: 8\n    })\n]);\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, depositAmount18Dec),\n        await CollateralAsset8Dec.setBalance(user, depositAmount8Dec),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}",
              "err": {},
              "uuid": "bdc04aca-665f-4005-b789-ab1f826dfbe4",
              "parentUUID": "57111177-cac6-45c3-a4de-35fd891d5960",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
              "title": "#Configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be initialized with correct params",
                  "fullTitle": "Collateral Pool #Configuration should be initialized with correct params",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { args  } = await (0, _shared.getCollateralPoolInitializer)(_hardhat.default);\nconst configuration = await _hardhat.default.Diamond.getCollateralPoolConfig();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.lt).to.equal(args.lt);\n(0, _chai.expect)(configuration.mcr).to.equal(args.mcr);",
                  "err": {},
                  "uuid": "088054e9-d3e4-462e-94a2-4df075c0c31b",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted collateral",
                  "fullTitle": "Collateral Pool #Configuration should be able to add whitelisted collateral",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal(configuration.liquidationIncentive);\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(configuration.depositLimit);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "96d4cca6-bc2c-46d9-8230-5bf89e539804",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted collateral",
                  "fullTitle": "Collateral Pool #Configuration should be able to update a whitelisted collateral",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.updatePoolCollateral(CollateralAsset.address, (0, _lib.toBig)(1.05), 1);\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal((0, _lib.toBig)(1.05));\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(1);",
                  "err": {},
                  "uuid": "640f866b-f987-4f0c-a9cd-b247ae55a015",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted collateral asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to disable a whitelisted collateral asset",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "9fb4a302-d602-40b1-8813-1e0c02ed3ecb",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a collateral asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to remove a collateral asset",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "8746bc44-4b6f-4940-9db4-6d5c566e608f",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to add whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(configuration.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(configuration.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(configuration.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(configuration.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "3622a989-db28-4005-beea-3cd988abcc2b",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to update a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst update = {\n    openFee: (0, _lib.toBig)(0.05),\n    closeFee: (0, _lib.toBig)(0.05),\n    protocolFee: (0, _lib.toBig)(0.4),\n    supplyLimit: (0, _lib.toBig)(50000)\n};\nawait _hardhat.default.Diamond.updatePoolKrAsset(KreskoAsset.address, update);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(update.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(update.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(update.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(update.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "45f930bd-8874-458c-8b0d-ec553bce77c7",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to disable a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "50ccff5e-80ee-40cb-b3d1-5503e758c658",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to remove a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "b6453fc1-4460-478c-9ab1-255532365947",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to enable and disable swap pairs",
                  "fullTitle": "Collateral Pool #Configuration should be able to enable and disable swap pairs",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapPairsEnabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: true\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: false\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "26b6e700-ed52-4a6b-8774-975892fc9459",
                  "parentUUID": "800bb8b5-6a68-4c35-8e90-42e9d8a8659f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "088054e9-d3e4-462e-94a2-4df075c0c31b",
                "96d4cca6-bc2c-46d9-8230-5bf89e539804",
                "640f866b-f987-4f0c-a9cd-b247ae55a015",
                "9fb4a302-d602-40b1-8813-1e0c02ed3ecb",
                "8746bc44-4b6f-4940-9db4-6d5c566e608f",
                "3622a989-db28-4005-beea-3cd988abcc2b",
                "45f930bd-8874-458c-8b0d-ec553bce77c7",
                "50ccff5e-80ee-40cb-b3d1-5503e758c658",
                "b6453fc1-4460-478c-9ab1-255532365947",
                "26b6e700-ed52-4a6b-8774-975892fc9459"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 847,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "20915352-4aab-4555-a25f-9a8959c0882d",
              "title": "#Deposit",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Deposit\"",
                  "fullTitle": "Collateral Pool #Deposit \"before each\" hook in \"#Deposit\"",
                  "timedOut": false,
                  "duration": 70,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 8,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "1c81b88a-855a-4dbe-8272-feb20cdfb516",
                  "parentUUID": "20915352-4aab-4555-a25f-9a8959c0882d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "Collateral Pool #Deposit should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 980,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    // Unadjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    // Adjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n// Unadjusted\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);\n// Adjusted\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "de050358-8912-4cdc-a50a-8c5e8cf24673",
                  "parentUUID": "20915352-4aab-4555-a25f-9a8959c0882d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "Collateral Pool #Deposit should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 1357,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec);\n    // WITHOUT_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n    // WITH_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(expectedValueAdjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.add(expectedValueAdjusted8Dec));\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.mul(users.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(users.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(users.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(valueTotalAdjusted8Dec);\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(valueAdjusted);\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(users.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(users.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted8Dec);\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "08a3b3be-8755-493f-ab64-cd1836b2cb41",
                  "parentUUID": "20915352-4aab-4555-a25f-9a8959c0882d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de050358-8912-4cdc-a50a-8c5e8cf24673",
                "08a3b3be-8755-493f-ab64-cd1836b2cb41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2337,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "e7840f27-58d0-42d7-9e3f-9a1212b390a7",
              "title": "#Withdraw",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Withdraw\"",
                  "fullTitle": "Collateral Pool #Withdraw \"before each\" hook in \"#Withdraw\"",
                  "timedOut": false,
                  "duration": 75,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "439fddcf-765a-428c-b05f-893d1cda3463",
                  "parentUUID": "e7840f27-58d0-42d7-9e3f-9a1212b390a7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to withdraw full collateral of multiple assets",
                  "fullTitle": "Collateral Pool #Withdraw should be able to withdraw full collateral of multiple assets",
                  "timedOut": false,
                  "duration": 1954,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(Kresko.address)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.equal(0);\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "c0962eca-68dc-45c8-981e-9358f49ae4fc",
                  "parentUUID": "e7840f27-58d0-42d7-9e3f-9a1212b390a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw partial collateral of multiple assets",
                  "fullTitle": "Collateral Pool #Withdraw should be able to withdraw partial collateral of multiple assets",
                  "timedOut": false,
                  "duration": 2006,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const partialWithdraw = depositAmount18Dec.div(users.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(users.length);\nconst expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice * 1 * depositAmount, 8).mul(200).div(300); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8).mul(200).div(300); // cfactor = 0.8\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, partialWithdraw);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, partialWithdraw8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(partialWithdraw);\n    (0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(user.address)).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.closeTo(expectedValueAdjusted.add(expectedValueAdjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(_hardhat.default.Diamond.address)).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.closeTo(expectedValueUnadjusted.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.closeTo(expectedValueAdjusted.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.closeTo(expectedValueUnadjusted8Dec.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.closeTo(expectedValueAdjusted8Dec.mul(users.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(users.length).add(expectedValueUnadjusted.mul(users.length));\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "64ac9369-7744-4675-b198-7b0140ce1df2",
                  "parentUUID": "e7840f27-58d0-42d7-9e3f-9a1212b390a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0962eca-68dc-45c8-981e-9358f49ae4fc",
                "64ac9369-7744-4675-b198-7b0140ce1df2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3960,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "92c455a5-68c8-4796-ac50-26392128682e",
              "title": "#Fee Distribution",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Fee Distribution\"",
                  "fullTitle": "Collateral Pool #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                  "timedOut": false,
                  "duration": 101,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "incomeCumulator = _hardhat.default.users.admin;\nawait CollateralAsset.setBalance(incomeCumulator, depositAmount18Dec.mul(users.length));\nawait CollateralAsset.contract.connect(incomeCumulator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 8,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "48ac1e6a-3b85-4ec8-91b4-e1ce34ba5c7c",
                  "parentUUID": "92c455a5-68c8-4796-ac50-26392128682e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to cumulate fees into deposits",
                  "fullTitle": "Collateral Pool #Fee Distribution should be able to cumulate fees into deposits",
                  "timedOut": false,
                  "duration": 3119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fees = depositAmount18Dec.mul(users.length);\nconst expectedValueNoFees = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, incomeCumulator).cumulateIncome(CollateralAsset.address, fees);\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees); // fees for single asset\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(expectedValueNoFees); // fees\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees); // fees\n    // withdraw principal\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n}\n// expect protocol to have no collateral here, only fees left.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(fees);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(global.collateralValue).to.equal(0);\n// withdraw fees\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    // fees in user wallet\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    // nothing left in protocol for user\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n// nothing left in protocol.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);",
                  "err": {},
                  "uuid": "ab19b3d2-6144-4d58-8004-54ded730920e",
                  "parentUUID": "92c455a5-68c8-4796-ac50-26392128682e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab19b3d2-6144-4d58-8004-54ded730920e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
              "title": "#Swap",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Swap\"",
                  "fullTitle": "Collateral Pool #Swap \"before each\" hook in \"#Swap\"",
                  "timedOut": false,
                  "duration": 3700,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000));\n    await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.setBalance(swapper, (0, _lib.toBig)(10000));\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "3db3b9ff-255d-4aaa-bff3-c5bbea9bec90",
                  "parentUUID": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have collateral in pool",
                  "fullTitle": "Collateral Pool #Swap should have collateral in pool",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = await _hardhat.default.Diamond.getPoolStats(false);\n(0, _chai.expect)(value.collateralValue).to.equal((0, _lib.toBig)(10000, 8));\n(0, _chai.expect)(value.debtValue).to.equal(0);\n(0, _chai.expect)(value.cr).to.equal(0);",
                  "err": {},
                  "uuid": "87fa6bbb-082d-486d-9cc3-3f51bf6dc3f4",
                  "parentUUID": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to preview a swap",
                  "fullTitle": "Collateral Pool #Swap should be able to preview a swap",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD);\nconst assetInPrice = (0, _lib.toBig)(ONE_USD, 8);\nconst assetOutPrice = (0, _lib.toBig)(KreskoAsset2Price, 8);\nconst feePercentage = (0, _lib.toBig)(0.015 + 0.025);\nconst feePercentageProtocol = (0, _lib.toBig)(0.5);\nconst expectedTotalFee = swapAmount.wadMul(feePercentage);\nconst expectedProtocolFee = expectedTotalFee.wadMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(assetInPrice).wadDiv(assetOutPrice);\nconst [amountOut, feeAmount, feeAmountProtocol] = await _hardhat.default.Diamond.previewSwap(KISS.address, KreskoAsset2.address, (0, _lib.toBig)(1));\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                  "err": {},
                  "uuid": "462a8e58-5e17-42fe-a5d0-aaf8f2bfd679",
                  "parentUUID": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == 0 | swap collateral == 0",
                  "fullTitle": "Collateral Pool #Swap should be able to swap, shared debt == 0 | swap collateral == 0",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOut = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nconst tx = await Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(await KreskoAsset2.contract.balanceOf(swapper.address)).to.equal(expectedAmountOut);\n(0, _chai.expect)(await KISS.contract.balanceOf(swapper.address)).to.equal((0, _lib.toBig)(10000).sub(swapAmount));\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal((0, _lib.toBig)(0.96));\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(await Kresko.getPoolDebtValue(KreskoAsset2.address, true)).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(await Kresko.getPoolDebt(KreskoAsset2.address)).to.equal((0, _lib.toBig)(0.0096));\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(10000.96, 8));\n(0, _chai.expect)(global.debtValue).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(global.cr).to.equal((0, _lib.toBig)(10000.96, 8).wadDiv((0, _lib.toBig)(0.96, 8)));",
                  "err": {},
                  "uuid": "c24197e3-cf2d-45a6-9643-7bdd07939964",
                  "parentUUID": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "fullTitle": "Collateral Pool #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "timedOut": false,
                  "duration": 1907,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountAsset = (0, _lib.toBig)(1); // $100\nconst expectedKissOut = (0, _lib.toBig)(96); // $100 * 0.96 = $96\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: KISS,\n    amount: (0, _lib.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: KreskoAsset2,\n    amount: (0, _lib.toBig)(0.1)\n});\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmountAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDebtValue(KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDebt(KreskoAsset2.address)).to.equal(0);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n// back to starting point\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(10000, 8));\n(0, _chai.expect)(global.debtValue).to.equal(0);\n(0, _chai.expect)(global.cr).to.equal(0);",
                  "err": {},
                  "uuid": "3abdbe88-527a-4294-886a-f0d0c21a1a67",
                  "parentUUID": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                  "fullTitle": "Collateral Pool #Swap should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                  "timedOut": false,
                  "duration": 1858,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOutAsset = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst expectedSecondFeeValue = (0, _lib.toBig)(0.96, 8).wadMul((0, _lib.toBig)(0.04)); // $0.96 * 4% = $0.0384\nconst expectedSecondFeeKISS = (0, _lib.toBig)(0.96).wadMul((0, _lib.toBig)(0.04)); // 0.96 * 4% = 0.0384\nconst expectedAmountOutKISS = (0, _lib.toBig)(0.96).sub(expectedSecondFeeKISS); // = 0.9216\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, expectedAmountOutAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(expectedAmountOutAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOutKISS);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(expectedSecondFeeKISS);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(expectedSecondFeeValue);\n(0, _chai.expect)(await Kresko.getPoolDebtValue(KreskoAsset2.address, true)).to.equal(expectedSecondFeeValue);\n(0, _chai.expect)(await Kresko.getPoolDebt(KreskoAsset2.address)).to.equal(expectedSecondFeeKISS.wadDiv((0, _lib.toBig)(KreskoAsset2Price)));\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\nconst expectedCollateralValue = (0, _lib.toBig)(10000, 8).add(expectedSecondFeeValue);\nconst expectedDebtValue = expectedSecondFeeValue;\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedDebtValue);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedDebtValue));",
                  "err": {},
                  "uuid": "6183a077-a5e1-4d7a-99eb-90a4fbe5b2cd",
                  "parentUUID": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                  "fullTitle": "Collateral Pool #Swap should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                  "timedOut": false,
                  "duration": 2592,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmountKiss = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountKrAsset = (0, _lib.toBig)(2); // $200\nconst expectedKissOut = (0, _lib.toBig)(192); // $200 * 0.96 = $192\nconst expectedDebtKiss = (0, _lib.toBig)(96); // 192 required out - 96 in collateral from first swap = 96 new debt\nconst expectedDebtValueKiss = (0, _lib.toBig)(96, 8); // $192 - $96 = $96\nconst expectedCollateralKrAssetValue = (0, _lib.toBig)(96, 8); // $192 swapped in after fees, $96 in debt = $96 to swap owned collateral\nconst expectedCollateralKrAsset = (0, _lib.toBig)(0.96); // $192 swapped in after fees, $96 in debt = $96 to swap owned collateral\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: KISS,\n    amount: (0, _lib.toBig)(400)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: KreskoAsset2,\n    amount: (0, _lib.toBig)(1.04)\n});\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmountKiss, 0);\nconst stats = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(stats.collateralValue).to.be.gt((0, _lib.toBig)(10000, 8));\n// the swap that matters, here user has 0.96 krAsset in wallet, 1.04 minted. swaps expecting 192 kiss after fees.\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n// KISS deposits sent in swap\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(0);\n// KrAsset debt is cleared\n(0, _chai.expect)(await Kresko.getPoolDebtValue(KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDebt(KreskoAsset2.address)).to.equal(0);\n// KISS debt is issued\n(0, _chai.expect)(await Kresko.getPoolDebtValue(KISS.address, true)).to.equal(expectedDebtValueKiss);\n(0, _chai.expect)(await Kresko.getPoolDebt(KISS.address)).to.equal(expectedDebtKiss);\n// krAsset collateral deposits added after debt cleared in swap\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KreskoAsset2.address)).to.equal(expectedCollateralKrAsset);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KreskoAsset2.address, true)).to.equal(expectedCollateralKrAssetValue);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\nconst expectedCollateralValue = (0, _lib.toBig)(10000, 8).add(expectedCollateralKrAssetValue);\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedDebtValueKiss);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedDebtValueKiss));",
                  "err": {},
                  "uuid": "a5a53364-0d2f-4137-b34a-0f69d5d1e93a",
                  "parentUUID": "85645b25-0afa-4dc7-b6eb-c1efcf6e45a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87fa6bbb-082d-486d-9cc3-3f51bf6dc3f4",
                "462a8e58-5e17-42fe-a5d0-aaf8f2bfd679",
                "c24197e3-cf2d-45a6-9643-7bdd07939964",
                "3abdbe88-527a-4294-886a-f0d0c21a1a67",
                "6183a077-a5e1-4d7a-99eb-90a4fbe5b2cd",
                "a5a53364-0d2f-4137-b34a-0f69d5d1e93a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7672,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "7c66a60a-bf46-45a5-aee5-58b3c11629d2",
              "title": "#Liquidations",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Liquidations\"",
                  "fullTitle": "Collateral Pool #Liquidations \"before each\" hook in \"#Liquidations\"",
                  "timedOut": false,
                  "duration": 3936,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000)),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}\nawait KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait Promise.all([\n    (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec),\n    (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset8Dec.address, depositAmount8Dec)\n]);\nCollateralAsset.setPrice(collateralPrice);",
                  "err": {},
                  "uuid": "e0b12c4c-8a48-4144-8d10-2015f7c6ab2a",
                  "parentUUID": "7c66a60a-bf46-45a5-aee5-58b3c11629d2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify if the pool is not underwater",
                  "fullTitle": "Collateral Pool #Liquidations should identify if the pool is not underwater",
                  "timedOut": false,
                  "duration": 1324,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.false;",
                  "err": {},
                  "uuid": "2ee09ad6-8b5e-4d67-ab46-27f55d7e2a17",
                  "parentUUID": "7c66a60a-bf46-45a5-aee5-58b3c11629d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert liquidations if the pool is not underwater",
                  "fullTitle": "Collateral Pool #Liquidations should revert liquidations if the pool is not underwater",
                  "timedOut": false,
                  "duration": 2125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.false;\nconst KreskoLiquidator = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.liquidator);\nawait KreskoAsset2.setBalance(_hardhat.default.users.liquidator, (0, _lib.toBig)(1000000));\nawait (0, _chai.expect)(KreskoLiquidator.poolLiquidate(KreskoAsset2.address, (0, _lib.toBig)(7.7), CollateralAsset8Dec.address)).to.be.revertedWith(\"not-liquidatable\");",
                  "err": {},
                  "uuid": "089724f9-9405-41e6-bdcc-25c00fe2a54a",
                  "parentUUID": "7c66a60a-bf46-45a5-aee5-58b3c11629d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify if the pool is underwater",
                  "fullTitle": "Collateral Pool #Liquidations should identify if the pool is underwater",
                  "timedOut": false,
                  "duration": 1884,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nCollateralAsset.setPrice(collateralPrice / 1000);\nCollateralAsset8Dec.setPrice(collateralPrice / 1000);\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.be.lt((await _hardhat.default.Diamond.getCollateralPoolConfig()).lt);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.true;",
                  "err": {},
                  "uuid": "8579a576-3c94-4139-9a74-06b4589c7d7c",
                  "parentUUID": "7c66a60a-bf46-45a5-aee5-58b3c11629d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow liquidating the underwater pool",
                  "fullTitle": "Collateral Pool #Liquidations should allow liquidating the underwater pool",
                  "timedOut": false,
                  "duration": 6333,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nKreskoAsset2.setPrice(newKreskoAssetPrice);\nconst KreskoLiquidator = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.liquidator);\nconst repayAmount = (await _hardhat.default.Diamond.getMaxLiquidation(_hardhat.default.ethers.constants.AddressZero, KreskoAsset2.address, CollateralAsset.address)).wadDiv(await KreskoAsset2.getPrice());\nawait KreskoAsset2.setBalance(_hardhat.default.users.liquidator, repayAmount.add(1e18.toString()));\nconst tx = await KreskoLiquidator.poolLiquidate(KreskoAsset2.address, repayAmount, CollateralAsset.address);\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.gt((await _hardhat.default.Diamond.getCollateralPoolConfig()).lt);\n(0, _chai.expect)(await KreskoLiquidator.poolIsLiquidatable()).to.equal(false);\nawait (0, _chai.expect)(KreskoLiquidator.poolLiquidate(KreskoAsset2.address, repayAmount, CollateralAsset8Dec.address)).to.be.revertedWith(\"not-liquidatable\");\nconst event = await (0, _lib.getNamedEvent)(tx, \"CollateralPoolLiquidationOccured\");\nconst expectedSeizeAmount = repayAmount.wadMul((0, _lib.toBig)(newKreskoAssetPrice, 8)).wadMul((0, _lib.toBig)(1.05)).wadDiv((0, _lib.toBig)(collateralPrice, 8));\n(0, _chai.expect)(event.args.liquidator).to.eq(_hardhat.default.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(CollateralAsset.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(KreskoAsset2.address);\nconst expectedDepositsAfter = depositAmount18Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address)).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountDepositsWithFees(depositor.address, CollateralAsset.address)).to.eq(expectedDepositsAfter);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, users[2]).poolDeposit(users[2].address, CollateralAsset.address, depositAmount18Dec.mul(10));\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.gt((await _hardhat.default.Diamond.getCollateralPoolConfig()).mcr);\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolWithdraw(depositor.address, CollateralAsset.address, expectedDepositsAfter)).to.not.be.reverted;\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address)).to.eq(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountDepositsWithFees(depositor.address, CollateralAsset.address)).to.eq(0);",
                  "err": {},
                  "uuid": "3aee67a0-4511-4990-9d3e-7c963e15c87b",
                  "parentUUID": "7c66a60a-bf46-45a5-aee5-58b3c11629d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ee09ad6-8b5e-4d67-ab46-27f55d7e2a17",
                "089724f9-9405-41e6-bdcc-25c00fe2a54a",
                "8579a576-3c94-4139-9a74-06b4589c7d7c",
                "3aee67a0-4511-4990-9d3e-7c963e15c87b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11666,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
              "title": "#Error",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Error\"",
                  "fullTitle": "Collateral Pool #Error \"before each\" hook in \"#Error\"",
                  "timedOut": false,
                  "duration": 4601,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000));\n    await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.setBalance(swapper, (0, _lib.toBig)(10000));\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "c655921e-fb8d-43d1-8c7d-064f329c7bdc",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert depositing unsupported tokens",
                  "fullTitle": "Collateral Pool #Error should revert depositing unsupported tokens",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [UnsupportedToken] = await _hardhat.default.deploy(\"MockERC20\", {\n    args: [\n        \"UnsupportedToken\",\n        \"UnsupportedToken\",\n        18,\n        (0, _lib.toBig)(1000000)\n    ]\n});\nawait UnsupportedToken.approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst { deployer  } = await _hardhat.default.getNamedAccounts();\nawait (0, _chai.expect)(_hardhat.default.Diamond.poolDeposit(deployer, UnsupportedToken.address, 1)).to.be.revertedWith(\"asset-disabled\");",
                  "err": {},
                  "uuid": "f9d83930-c454-42d3-bc3f-0a10a2d53e23",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing without deposits",
                  "fullTitle": "Collateral Pool #Error should revert withdrawing without deposits",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KreskoUserNoDeposits = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(KreskoUserNoDeposits.poolWithdraw(depositor.address, CollateralAsset.address, 1)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "e3fa13a3-0b7a-4124-81a7-07e4ad870e60",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals below MCR",
                  "fullTitle": "Collateral Pool #Error should revert withdrawals below MCR",
                  "timedOut": false,
                  "duration": 1891,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(1000); // $1000\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0); // generate debt\nconst deposits = await Kresko.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address);\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolWithdraw(depositor.address, CollateralAsset.address, deposits)).to.be.revertedWith(\"withdraw-mcr-violation\");",
                  "err": {},
                  "uuid": "5aff441d-d3fc-4c0e-9af1-b8a29fe4e538",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals of swap owned collateral deposits",
                  "fullTitle": "Collateral Pool #Error should revert withdrawals of swap owned collateral deposits",
                  "timedOut": false,
                  "duration": 1210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0);\nconst deposits = await Kresko.getPoolSwapDeposits(KreskoAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(Kresko.poolWithdraw(swapper.address, KreskoAsset2.address, deposits)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "12520d4e-c374-47d1-aff7-33e0c3a264cf",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping with price below minAmountOut",
                  "fullTitle": "Collateral Pool #Error should revert swapping with price below minAmountOut",
                  "timedOut": false,
                  "duration": 301,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nconst [amountOut] = await Kresko.previewSwap(KreskoAsset2.address, KISS.address, swapAmount);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWith(\"swap-slippage\");",
                  "err": {},
                  "uuid": "0ce2249c-f6d8-47cf-bb51-0fc1ef1b419a",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping unsupported route",
                  "fullTitle": "Collateral Pool #Error should revert swapping unsupported route",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, CollateralAsset.address, swapAmount, 0)).to.be.revertedWith(\"swap-disabled\");",
                  "err": {},
                  "uuid": "274373e4-f30a-419a-9aee-2f0348d55c6e",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset in is disabled",
                  "fullTitle": "Collateral Pool #Error should revert swapping if asset in is disabled",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"asset-in-disabled\");",
                  "err": {},
                  "uuid": "425f7077-6e48-457d-be2c-c5791289c174",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset out is disabled",
                  "fullTitle": "Collateral Pool #Error should revert swapping if asset out is disabled",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                  "err": {},
                  "uuid": "3a4e6772-6b47-4098-8035-39551e792f74",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping causes CDP to go below MCR",
                  "fullTitle": "Collateral Pool #Error should revert swapping causes CDP to go below MCR",
                  "timedOut": false,
                  "duration": 1351,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1000000);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"swap-mcr-violation\");",
                  "err": {},
                  "uuid": "88c4a905-a1bb-44cb-a924-61e0c1f11aaf",
                  "parentUUID": "506dd8ed-1112-4de0-8fe0-fef6173b91ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9d83930-c454-42d3-bc3f-0a10a2d53e23",
                "e3fa13a3-0b7a-4124-81a7-07e4ad870e60",
                "5aff441d-d3fc-4c0e-9af1-b8a29fe4e538",
                "12520d4e-c374-47d1-aff7-33e0c3a264cf",
                "0ce2249c-f6d8-47cf-bb51-0fc1ef1b419a",
                "274373e4-f30a-419a-9aee-2f0348d55c6e",
                "425f7077-6e48-457d-be2c-c5791289c174",
                "3a4e6772-6b47-4098-8035-39551e792f74",
                "88c4a905-a1bb-44cb-a924-61e0c1f11aaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5198,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}