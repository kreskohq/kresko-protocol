{
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-18T18:45:52.845Z",
    "end": "2023-05-18T18:46:50.061Z",
    "duration": 57216,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c85857f6-5ffa-4154-86c7-56c8d6af16df",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
      "file": "/src/test/collateral-pool/00-collateral-pool.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aeb0d944-444f-4e8a-91a4-a1bd8c6920e3",
          "title": "Collateral Pool",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
          "file": "/src/test/collateral-pool/00-collateral-pool.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Collateral Pool\"",
              "fullTitle": "Collateral Pool \"before each\" hook in \"Collateral Pool\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "90777e6e-0de6-4988-8024-8210f83ede90",
              "parentUUID": "aeb0d944-444f-4e8a-91a4-a1bd8c6920e3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Collateral Pool\"",
              "fullTitle": "Collateral Pool \"before each\" hook in \"Collateral Pool\"",
              "timedOut": false,
              "duration": 2947,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = [\n    _hardhat.default.users.testUserFive,\n    _hardhat.default.users.testUserSix\n];\noracleDecimals = await _hardhat.default.Diamond.extOracleDecimals();\n[KreskoAsset, CollateralAsset, CollateralAsset8Dec] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice10USD\",\n        price: collateralPrice,\n        symbol: \"KreskoAssetPrice10USD\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1.25,\n        supplyLimit: 100000\n    }, true),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral18Dec\",\n        price: kreskoAssetPrice,\n        factor: 1,\n        decimals: 18\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral8Dec\",\n        price: kreskoAssetPrice,\n        factor: 0.8,\n        decimals: 8\n    })\n]);\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, depositAmount18Dec),\n        await CollateralAsset8Dec.setBalance(user, depositAmount8Dec),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}",
              "err": {},
              "uuid": "402cabe0-f1d7-4a07-9f3d-2d89acb32bdd",
              "parentUUID": "aeb0d944-444f-4e8a-91a4-a1bd8c6920e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6ca4ea04-e320-42f5-acfa-43f040087b23",
              "title": "#Error",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Error\"",
                  "fullTitle": "Collateral Pool #Error \"before each\" hook in \"#Error\"",
                  "timedOut": false,
                  "duration": 3476,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000));\n    await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.setBalance(swapper, (0, _lib.toBig)(10000));\n}\nawait _hardhat.default.Diamond.connect(depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "fb3554f7-4dfd-4887-8f3f-73023b3c40e4",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert depositing unsupported tokens",
                  "fullTitle": "Collateral Pool #Error should revert depositing unsupported tokens",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [UnsupportedToken] = await _hardhat.default.deploy(\"MockERC20\", {\n    args: [\n        \"UnsupportedToken\",\n        \"UnsupportedToken\",\n        18,\n        (0, _lib.toBig)(1000000)\n    ]\n});\nawait UnsupportedToken.approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst { deployer  } = await _hardhat.default.getNamedAccounts();\nawait (0, _chai.expect)(_hardhat.default.Diamond.poolDeposit(deployer, UnsupportedToken.address, 1)).to.be.revertedWith(\"asset-disabled\");",
                  "err": {},
                  "uuid": "e6627e3b-9ed5-4b1e-8faa-35355b1b019f",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing without deposits",
                  "fullTitle": "Collateral Pool #Error should revert withdrawing without deposits",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KreskoUserNoDeposits = _hardhat.default.Diamond.connect(swapper);\nawait (0, _chai.expect)(KreskoUserNoDeposits.poolWithdraw(depositor.address, CollateralAsset.address, 1)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "962d60ff-68c3-41d0-b567-c74aa01cbfc6",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals below MCR",
                  "fullTitle": "Collateral Pool #Error should revert withdrawals below MCR",
                  "timedOut": false,
                  "duration": 157,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(1000); // $1000\nconst Kresko = _hardhat.default.Diamond.connect(swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0); // generate debt\nconst deposits = await Kresko.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address);\nawait (0, _chai.expect)(Kresko.connect(depositor).poolWithdraw(depositor.address, CollateralAsset.address, deposits)).to.be.revertedWith(\"withdraw-mcr-violation\");",
                  "err": {},
                  "uuid": "52bce86c-3669-4146-992e-74f40c5b1d39",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals of swap owned collateral deposits",
                  "fullTitle": "Collateral Pool #Error should revert withdrawals of swap owned collateral deposits",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = _hardhat.default.Diamond.connect(swapper);\nawait Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0);\nconst deposits = await Kresko.getPoolSwapDeposits(KreskoAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(Kresko.poolWithdraw(swapper.address, KreskoAsset2.address, deposits)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "e619c3ba-2437-4369-b9a7-402bbaf4d0c3",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping below slippage",
                  "fullTitle": "Collateral Pool #Error should revert swapping below slippage",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = _hardhat.default.Diamond.connect(swapper);\nconst [amountOut] = await Kresko.previewSwap(KreskoAsset2.address, KISS.address, swapAmount);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWith(\"swap-slippage\");",
                  "err": {},
                  "uuid": "f220a33b-2b12-4e71-bfc8-17dfd21aae0e",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping unsupported route",
                  "fullTitle": "Collateral Pool #Error should revert swapping unsupported route",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = _hardhat.default.Diamond.connect(swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, CollateralAsset.address, swapAmount, 0)).to.be.revertedWith(\"swap-disabled\");",
                  "err": {},
                  "uuid": "f186bb69-155b-493e-b034-dfbe2b375637",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset in is disabled",
                  "fullTitle": "Collateral Pool #Error should revert swapping if asset in is disabled",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = _hardhat.default.Diamond.connect(swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"asset-in-disabled\");",
                  "err": {},
                  "uuid": "04b5c6ea-6986-4637-92d2-2924efae4d87",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset out is disabled",
                  "fullTitle": "Collateral Pool #Error should revert swapping if asset out is disabled",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = _hardhat.default.Diamond.connect(swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                  "err": {},
                  "uuid": "6b7d2cae-42ce-439a-a9a2-4ee1c3838928",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping causes CDP to go below MCR",
                  "fullTitle": "Collateral Pool #Error should revert swapping causes CDP to go below MCR",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1000000);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = _hardhat.default.Diamond.connect(swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"swap-mcr-violation\");",
                  "err": {},
                  "uuid": "1c637fa3-937d-4e89-8993-13b8c40a8140",
                  "parentUUID": "6ca4ea04-e320-42f5-acfa-43f040087b23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6627e3b-9ed5-4b1e-8faa-35355b1b019f",
                "962d60ff-68c3-41d0-b567-c74aa01cbfc6",
                "52bce86c-3669-4146-992e-74f40c5b1d39",
                "e619c3ba-2437-4369-b9a7-402bbaf4d0c3",
                "f220a33b-2b12-4e71-bfc8-17dfd21aae0e",
                "f186bb69-155b-493e-b034-dfbe2b375637",
                "04b5c6ea-6986-4637-92d2-2924efae4d87",
                "6b7d2cae-42ce-439a-a9a2-4ee1c3838928",
                "1c637fa3-937d-4e89-8993-13b8c40a8140"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 731,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}