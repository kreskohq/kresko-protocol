{
  "stats": {
    "suites": 87,
    "tests": 268,
    "passes": 246,
    "pending": 22,
    "failures": 0,
    "start": "2023-09-24T20:20:33.473Z",
    "end": "2023-09-24T20:25:39.031Z",
    "duration": 305558,
    "testsRegistered": 268,
    "passPercent": 100,
    "pendingPercent": 8.208955223880597,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f4427654-e2d5-4dd8-b518-9db48a91f06b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f4ad181d-bc0f-488c-9cab-ff832c3ddc75",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.assetValuesFixture)();\nf.user = hre.users.testUserSeven;\nUser = (0, _redstone.wrapKresko)(hre.Diamond, f.user);",
              "err": {},
              "uuid": "07de8a58-8ee2-4789-8dd7-ebf3082d77f0",
              "parentUUID": "f4ad181d-bc0f-488c-9cab-ff832c3ddc75",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2d721878-7cf7-4036-919d-f507c6d6220e",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 304,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nconst expectedDepositValue = (0, _lib.toBig)(50, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "c2c674ea-2694-4bf8-af83-3222ca46df52",
                  "parentUUID": "2d721878-7cf7-4036-919d-f507c6d6220e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 287,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nconst expectedDepositValue = (0, _lib.toBig)(50, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "3be4247e-dbc7-4119-8785-f57137727785",
                  "parentUUID": "2d721878-7cf7-4036-919d-f507c6d6220e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 284,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nconst expectedDepositValue = (0, _lib.toBig)(50, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "3d1c7f4c-9d0a-4407-ae7c-ca99b4c73892",
                  "parentUUID": "2d721878-7cf7-4036-919d-f507c6d6220e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 653,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.depositCollateral(f.user.address, f.CollateralAsset.address, (0, _lib.toBig)(10));\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, (0, _lib.toBig)(10, 8));\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, (0, _lib.toBig)(10, 21));\nconst expectedDepositValue = (0, _lib.toBig)(150, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "2ec40132-ddb5-443b-96a1-d48d652e8faf",
                  "parentUUID": "2d721878-7cf7-4036-919d-f507c6d6220e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2c674ea-2694-4bf8-af83-3222ca46df52",
                "3be4247e-dbc7-4119-8785-f57137727785",
                "3d1c7f4c-9d0a-4407-ae7c-ca99b4c73892",
                "2ec40132-ddb5-443b-96a1-d48d652e8faf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1528,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "ce9aeb3d-ef10-40ff-be03-a1e6715b21bd",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 468,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(f.startingBalance));",
                  "err": {},
                  "uuid": "6e62dfe1-6ebe-4b28-b5b7-4c476159d8f4",
                  "parentUUID": "ce9aeb3d-ef10-40ff-be03-a1e6715b21bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 469,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset8Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset8Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(f.startingBalance, 8));",
                  "err": {},
                  "uuid": "f8332db6-240a-4268-8fe3-3906b2d8dc4c",
                  "parentUUID": "ce9aeb3d-ef10-40ff-be03-a1e6715b21bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 474,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset21Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset21Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(f.startingBalance, 21));",
                  "err": {},
                  "uuid": "063f54f9-f0f7-46e1-aa6b-2ebdfe448fc6",
                  "parentUUID": "ce9aeb3d-ef10-40ff-be03-a1e6715b21bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e62dfe1-6ebe-4b28-b5b7-4c476159d8f4",
                "f8332db6-240a-4268-8fe3-3906b2d8dc4c",
                "063f54f9-f0f7-46e1-aa6b-2ebdfe448fc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1411,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "a01bd91c-073e-420f-8ad8-5c728065dc03",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 1842,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, f.extOracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getDebtAmountToValue(f.KreskoAsset.address, mintAmount, true);\nconst kFactor = (await hre.Diamond.getKreskoAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(f.user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "ba828c1b-867c-49eb-8a42-cbe72cc912a2",
                  "parentUUID": "a01bd91c-073e-420f-8ad8-5c728065dc03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 1885,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, f.extOracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getDebtAmountToValue(f.KreskoAsset.address, mintAmount, true);\nconst kFactor = (await hre.Diamond.getKreskoAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(f.user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "98a3854e-aed3-46d4-b36f-015b6c95263d",
                  "parentUUID": "a01bd91c-073e-420f-8ad8-5c728065dc03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 1618,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, f.extOracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getDebtAmountToValue(f.KreskoAsset.address, mintAmount, true);\nconst kFactor = (await hre.Diamond.getKreskoAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(f.user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "d1e3fdf2-5eb5-4b03-9818-2b23c1d43f45",
                  "parentUUID": "a01bd91c-073e-420f-8ad8-5c728065dc03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba828c1b-867c-49eb-8a42-cbe72cc912a2",
                "98a3854e-aed3-46d4-b36f-015b6c95263d",
                "d1e3fdf2-5eb5-4b03-9818-2b23c1d43f45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "5a9d7019-8e64-43b1-a8b0-c62f26fffbbb",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "22c36e5a-5354-46ae-a179-28a2fc9d8454",
              "parentUUID": "5a9d7019-8e64-43b1-a8b0-c62f26fffbbb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "952aa79a-d169-42d8-964c-a24f11a77c89",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 191,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "a3a6d889-1348-4f8b-b768-142e4cbf9a31",
                  "parentUUID": "952aa79a-d169-42d8-964c-a24f11a77c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = f.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "da32a6e6-4699-4e33-8c61-9461e3a57b4a",
                  "parentUUID": "952aa79a-d169-42d8-964c-a24f11a77c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 287,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = f.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "e81e822c-e4e0-4217-9a21-4232a379a650",
                  "parentUUID": "952aa79a-d169-42d8-964c-a24f11a77c89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3a6d889-1348-4f8b-b768-142e4cbf9a31",
                "da32a6e6-4699-4e33-8c61-9461e3a57b4a",
                "e81e822c-e4e0-4217-9a21-4232a379a650"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 604,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "faf7559c-21cc-4edc-b02d-87b0264c42b9",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _test.diamondFixture)();",
              "err": {},
              "uuid": "b9ea9534-da4d-4c45-9a0e-f770393b5a06",
              "parentUUID": "faf7559c-21cc-4edc-b02d-87b0264c42b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ea5ac934-746f-43d4-a8a9-10bf25014cfc",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.owner()).to.equal(hre.addr.deployer);",
                  "err": {},
                  "uuid": "ee4c171d-e6ef-47e3-b71d-d7792860e6e6",
                  "parentUUID": "ea5ac934-746f-43d4-a8a9-10bf25014cfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.ADMIN, hre.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "01ed6b0a-b62f-4e70-ada8-8c39050535cc",
                  "parentUUID": "ea5ac934-746f-43d4-a8a9-10bf25014cfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await hre.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "d8ed4bdc-ae40-4969-81e0-44fd10bc77f5",
                  "parentUUID": "ea5ac934-746f-43d4-a8a9-10bf25014cfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 322,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _test.wrapContractWithSigner)(hre.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await hre.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "61d78521-912b-408b-9e2b-6d9d20c195fa",
                  "parentUUID": "ea5ac934-746f-43d4-a8a9-10bf25014cfc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee4c171d-e6ef-47e3-b71d-d7792860e6e6",
                "01ed6b0a-b62f-4e70-ada8-8c39050535cc",
                "d8ed4bdc-ae40-4969-81e0-44fd10bc77f5",
                "61d78521-912b-408b-9e2b-6d9d20c195fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 710,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "4d7dbcba-8bc7-43b6-baa3-f2ff30889af1",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "772d120e-0fb4-48dc-9a8d-6b102a34ff4b",
              "parentUUID": "4d7dbcba-8bc7-43b6-baa3-f2ff30889af1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "253ea199-7ea2-4f63-bc18-09b7a14bc663",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 659,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy(\"SmockInit\");\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hre.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await hre.Diamond.hasRole(TEST_OPERATOR_ROLE, hre.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await hre.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], hre.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(hre.addr.userOne);",
                  "err": {},
                  "uuid": "72f37a13-a597-4ba0-bbb4-f3cf640c9f80",
                  "parentUUID": "253ea199-7ea2-4f63-bc18-09b7a14bc663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 467,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: hre.addr.userOne\n});\nconst facetsBefore = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: \"SmockFacet\"\n});\nconst facetsAfter = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "b52bdee0-2ddb-49ce-b7d3-0b1c92eff70a",
                  "parentUUID": "253ea199-7ea2-4f63-bc18-09b7a14bc663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 231,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.nonadmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hre.Diamond.facetAddress(signature);\nconst functions = await hre.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hre.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hre.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await hre.ethers.getContractAt(\"AuthEvent\", hre.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(hre.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner , newOwner  } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(hre.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "38cd46c2-14a7-4a23-8c18-534ccf58175a",
                  "parentUUID": "253ea199-7ea2-4f63-bc18-09b7a14bc663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 377,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.nonadmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hre.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hre.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\"\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hre.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hre.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).acceptOwnership());\nconst currentOwner = await hre.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "7da55565-343a-4ca1-b060-fc4c1310ffa8",
                  "parentUUID": "253ea199-7ea2-4f63-bc18-09b7a14bc663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 255,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hre.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "f1f2135e-52fd-4821-9560-b5df7ffb9e0e",
                  "parentUUID": "253ea199-7ea2-4f63-bc18-09b7a14bc663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 721,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy(\"SmockInit\");\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await hre.ethers.getContractAt(\"SmockFacet\", hre.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hre.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hre.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hre.ethers.getContractAt(\"SmockFacet2\", hre.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "6b9164e5-4e0a-4154-bee1-37f7af6780da",
                  "parentUUID": "253ea199-7ea2-4f63-bc18-09b7a14bc663",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72f37a13-a597-4ba0-bbb4-f3cf640c9f80",
                "b52bdee0-2ddb-49ce-b7d3-0b1c92eff70a",
                "38cd46c2-14a7-4a23-8c18-534ccf58175a",
                "7da55565-343a-4ca1-b060-fc4c1310ffa8",
                "f1f2135e-52fd-4821-9560-b5df7ffb9e0e",
                "6b9164e5-4e0a-4154-bee1-37f7af6780da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2710,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "cdbc4a38-d3ac-455d-9202-b48c68092385",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f155f4dd-8702-4eb3-b8a5-c5b80d3ce7d7",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7808dcb4-dfea-4ac3-88b9-53c2a96e0585",
                  "parentUUID": "f155f4dd-8702-4eb3-b8a5-c5b80d3ce7d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "7808dcb4-dfea-4ac3-88b9-53c2a96e0585"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "8aea5ba8-9136-4765-be09-96d40216b2b1",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fe6c24fe-c189-4f1d-9563-52d5c6cdf5f0",
                  "parentUUID": "8aea5ba8-9136-4765-be09-96d40216b2b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "fe6c24fe-c189-4f1d-9563-52d5c6cdf5f0"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "486f6dc0-6d1c-42c9-b5d3-3080f14fbc5b",
              "title": "#facet-upgrade-16-05-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works",
                  "fullTitle": "Forking #facet-upgrade-16-05-2023 works",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "357184a0-bde8-4fbe-8bdd-27d3b7332054",
                  "parentUUID": "486f6dc0-6d1c-42c9-b5d3-3080f14fbc5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "357184a0-bde8-4fbe-8bdd-27d3b7332054"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "59b8e700-7817-4c6e-9275-bae9ba26d256",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "15461845-3aba-40c9-a167-d9355cad2f25",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "f = await (0, _test.defaultFixture)();\nconst deployment = f.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "a3b40a63-f39a-4673-b7c8-58d0eb2eed32",
                  "parentUUID": "15461845-3aba-40c9-a167-d9355cad2f25",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, hre.addr.deployer, hre.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "33c658f7-2b5e-4627-ac84-534440dd09cd",
                  "parentUUID": "15461845-3aba-40c9-a167-d9355cad2f25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b0abd438-82a6-4ab3-9cc0-dcdafe24e4e6",
                  "parentUUID": "15461845-3aba-40c9-a167-d9355cad2f25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "f95dd8ee-85b4-42a2-be98-2bc23bdf1e5b",
                  "parentUUID": "15461845-3aba-40c9-a167-d9355cad2f25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "3274b3f4-b857-45d0-8eee-3e1013a724dc",
                  "parentUUID": "15461845-3aba-40c9-a167-d9355cad2f25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33c658f7-2b5e-4627-ac84-534440dd09cd",
                "f95dd8ee-85b4-42a2-be98-2bc23bdf1e5b",
                "3274b3f4-b857-45d0-8eee-3e1013a724dc"
              ],
              "failures": [],
              "pending": [
                "b0abd438-82a6-4ab3-9cc0-dcdafe24e4e6"
              ],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "754136a2-9202-48d8-aa17-f82790d7ed0a",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "9ae1cd0a-23ff-44eb-967a-91a3d933760c",
                  "parentUUID": "754136a2-9202-48d8-aa17-f82790d7ed0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(_shared.anchorTokenPrefix + symbol);\n(0, _chai.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "1d1024db-96f8-4140-9117-b888e0200756",
                  "parentUUID": "754136a2-9202-48d8-aa17-f82790d7ed0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "bafd73eb-f5ef-492d-a3c6-7ffbf44b5b84",
                  "parentUUID": "754136a2-9202-48d8-aa17-f82790d7ed0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);\nawait KreskoAssetAnchor.reinitializeERC20(name, symbol, 3);",
                  "err": {},
                  "uuid": "cdc44974-5be0-4337-bbe8-cb67952cd3ce",
                  "parentUUID": "754136a2-9202-48d8-aa17-f82790d7ed0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ae1cd0a-23ff-44eb-967a-91a3d933760c",
                "1d1024db-96f8-4140-9117-b888e0200756",
                "cdc44974-5be0-4337-bbe8-cb67952cd3ce"
              ],
              "failures": [],
              "pending": [
                "bafd73eb-f5ef-492d-a3c6-7ffbf44b5b84"
              ],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "9808faca-027f-4ebc-b987-e1a814541fc0",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset  } = await (0, _test.kreskoAssetFixture)());\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "3f035a06-c9fe-46f8-8231-7a40c3d3e2c8",
              "parentUUID": "9808faca-027f-4ebc-b987-e1a814541fc0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cbedd661-8477-41a4-bead-be0fc017ec0d",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "9c87234a-00d3-4bc5-bbb4-8a23035ce3c4",
                  "parentUUID": "cbedd661-8477-41a4-bead-be0fc017ec0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "01605a3c-b188-4fa5-be0e-340049d25181",
                  "parentUUID": "cbedd661-8477-41a4-bead-be0fc017ec0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hre.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "ddd0fa20-f5e4-4232-a3aa-0eabfbd99485",
                  "parentUUID": "cbedd661-8477-41a4-bead-be0fc017ec0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.renounceRole(_test.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hre.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "b7677b43-4072-4abb-b393-8bd20961e894",
                  "parentUUID": "cbedd661-8477-41a4-bead-be0fc017ec0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c87234a-00d3-4bc5-bbb4-8a23035ce3c4",
                "01605a3c-b188-4fa5-be0e-340049d25181",
                "ddd0fa20-f5e4-4232-a3aa-0eabfbd99485",
                "b7677b43-4072-4abb-b393-8bd20961e894"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "2e971143-465a-4765-b892-98a3e7610333",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "ca5411ca-1dac-48c3-ae1a-b0e68dff6cb2",
                  "parentUUID": "2e971143-465a-4765-b892-98a3e7610333",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "25869485-5954-4cf3-be37-4c232e8504db",
                  "parentUUID": "2e971143-465a-4765-b892-98a3e7610333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).approve(hre.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "9564ec7a-d9a7-4cf4-9ac2-d5a7588de789",
                  "parentUUID": "2e971143-465a-4765-b892-98a3e7610333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await KreskoAsset.balanceOf(hre.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "ca0e4d99-3860-4312-a659-817463910421",
                  "parentUUID": "2e971143-465a-4765-b892-98a3e7610333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.connect(hre.users.userTwo).burn(hre.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hre.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "314e777c-f775-4367-9ffe-9d1a2ff64bdf",
                  "parentUUID": "2e971143-465a-4765-b892-98a3e7610333",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25869485-5954-4cf3-be37-4c232e8504db",
                "9564ec7a-d9a7-4cf4-9ac2-d5a7588de789",
                "ca0e4d99-3860-4312-a659-817463910421",
                "314e777c-f775-4367-9ffe-9d1a2ff64bdf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "ca07bccd-8a38-4693-8b18-54ac3530d4af",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset  } = await (0, _test.kreskoAssetFixture)());\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "bfa0ceca-2efa-4f51-a39a-10eb9c767158",
              "parentUUID": "ca07bccd-8a38-4693-8b18-54ac3530d4af",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3f110ddf-d13b-497c-8be2-11dc1be9be06",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "15beaa84-8546-4c7c-877f-6478094b0283",
                  "parentUUID": "3f110ddf-d13b-497c-8be2-11dc1be9be06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "2aab75d0-2b63-4423-a42e-34d798121981",
                  "parentUUID": "3f110ddf-d13b-497c-8be2-11dc1be9be06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "fc717b99-5194-485d-b185-1d60922300cc",
                  "parentUUID": "3f110ddf-d13b-497c-8be2-11dc1be9be06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                      "err": {},
                      "uuid": "6320485d-b634-4f78-aa55-d9a497c1bc98",
                      "parentUUID": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "5d0bb6f6-4e6d-4a7d-ae87-634a378b19c4",
                      "parentUUID": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "8f884605-1724-4cc2-b713-623c7811b104",
                      "parentUUID": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "79c5b77e-ee9e-4876-90e0-d4752f52e856",
                      "parentUUID": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "b451bc04-9cf6-443d-a858-4c58fa38c78b",
                      "parentUUID": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "3adf012f-f067-49a2-9bfa-1fba911819e5",
                      "parentUUID": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "25477cae-b9e4-460c-8b5d-eb7f5faac59f",
                      "parentUUID": "7b02abee-fd90-49b8-ab95-a0c84898ddf2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6320485d-b634-4f78-aa55-d9a497c1bc98",
                    "5d0bb6f6-4e6d-4a7d-ae87-634a378b19c4",
                    "8f884605-1724-4cc2-b713-623c7811b104",
                    "79c5b77e-ee9e-4876-90e0-d4752f52e856",
                    "b451bc04-9cf6-443d-a858-4c58fa38c78b",
                    "3adf012f-f067-49a2-9bfa-1fba911819e5",
                    "25477cae-b9e4-460c-8b5d-eb7f5faac59f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 97,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "9be189fb-e829-46e3-a22a-06d018f25ff1",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "f61f63bf-b190-4944-9252-f4431fa576d6",
                      "parentUUID": "9be189fb-e829-46e3-a22a-06d018f25ff1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "09f40961-52b4-4622-9b9f-2c19169fd42f",
                      "parentUUID": "9be189fb-e829-46e3-a22a-06d018f25ff1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "e6acbe08-8de7-44c3-87cb-6356a79f099d",
                      "parentUUID": "9be189fb-e829-46e3-a22a-06d018f25ff1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "05ad7cb3-e1a3-4858-8551-fd90017271b8",
                      "parentUUID": "9be189fb-e829-46e3-a22a-06d018f25ff1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "8f48b2b8-ee8e-41e5-b68f-4eb89d271b44",
                      "parentUUID": "9be189fb-e829-46e3-a22a-06d018f25ff1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "edd71713-d9d9-41b4-898c-1142397faac6",
                      "parentUUID": "9be189fb-e829-46e3-a22a-06d018f25ff1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f61f63bf-b190-4944-9252-f4431fa576d6",
                    "09f40961-52b4-4622-9b9f-2c19169fd42f",
                    "e6acbe08-8de7-44c3-87cb-6356a79f099d",
                    "05ad7cb3-e1a3-4858-8551-fd90017271b8",
                    "8f48b2b8-ee8e-41e5-b68f-4eb89d271b44",
                    "edd71713-d9d9-41b4-898c-1142397faac6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 193,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [
                "15beaa84-8546-4c7c-877f-6478094b0283",
                "2aab75d0-2b63-4423-a42e-34d798121981",
                "fc717b99-5194-485d-b185-1d60922300cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "a45a85b8-2cb5-475c-9503-c310dcc901c2",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset , KreskoAssetAnchor  } = await (0, _test.kreskoAssetFixture)());\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "f3bc0311-5d29-4473-815e-fb7058c13cf0",
              "parentUUID": "a45a85b8-2cb5-475c-9503-c310dcc901c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cb170a7e-5842-4aba-8907-a37036488e47",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount.add(_test.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "23f620b2-2650-46f3-8e35-c0382d8b9def",
                  "parentUUID": "cb170a7e-5842-4aba-8907-a37036488e47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1e690a9c-cf98-4b0c-b266-e67cc867356a",
                  "parentUUID": "cb170a7e-5842-4aba-8907-a37036488e47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3c30eb5d-3945-4e82-9a73-9c3f4458ce8a",
                  "parentUUID": "cb170a7e-5842-4aba-8907-a37036488e47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a28ff0bc-04ae-45ff-a92b-030c9556d172",
                  "parentUUID": "cb170a7e-5842-4aba-8907-a37036488e47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "14ad2382-6799-4d66-9ebb-0e779aebce36",
                  "parentUUID": "cb170a7e-5842-4aba-8907-a37036488e47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "5708b99b-b8a7-4149-913d-92e0175f8134",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0467597b-1cd2-4b97-ac2d-64514eea1b8e",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f491bad7-35fa-4d5d-bc97-fbed758a616a",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "9597ad51-c163-44f6-9e09-4b4311febad8",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "60a19405-20a8-4e6f-be96-32940d99c0e9",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "99f2fa83-8dcb-4fc3-8779-5e73e3b2e488",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "5d254944-886d-49cb-bea4-f252420e3bf4",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6efdc85b-fccf-46a6-91ca-c79bb40c699f",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b4b77822-9fc3-4e07-994f-aa2cd3dda7a2",
                          "parentUUID": "361a2259-12e7-4768-9be7-a33a0d5226e2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "0467597b-1cd2-4b97-ac2d-64514eea1b8e",
                        "f491bad7-35fa-4d5d-bc97-fbed758a616a",
                        "9597ad51-c163-44f6-9e09-4b4311febad8",
                        "60a19405-20a8-4e6f-be96-32940d99c0e9",
                        "99f2fa83-8dcb-4fc3-8779-5e73e3b2e488",
                        "5d254944-886d-49cb-bea4-f252420e3bf4",
                        "6efdc85b-fccf-46a6-91ca-c79bb40c699f",
                        "b4b77822-9fc3-4e07-994f-aa2cd3dda7a2"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [
                "23f620b2-2650-46f3-8e35-c0382d8b9def"
              ],
              "failures": [],
              "pending": [
                "1e690a9c-cf98-4b0c-b266-e67cc867356a",
                "3c30eb5d-3945-4e82-9a73-9c3f4458ce8a",
                "a28ff0bc-04ae-45ff-a92b-030c9556d172",
                "14ad2382-6799-4d66-9ebb-0e779aebce36"
              ],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "ca960102-a8b3-48f1-b5a5-643b47996a46",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9990c986-325f-4300-88b0-f453b8e8dfe9",
              "parentUUID": "ca960102-a8b3-48f1-b5a5-643b47996a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ae15de19-b288-4d1a-87c7-f6800ff400b6",
              "parentUUID": "ca960102-a8b3-48f1-b5a5-643b47996a46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "9990c986-325f-4300-88b0-f453b8e8dfe9",
            "ae15de19-b288-4d1a-87c7-f6800ff400b6"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "c20b26ee-099e-4208-980e-d635291a3783",
          "title": "Minter - Init",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _test.defaultFixture)();",
              "err": {},
              "uuid": "4d61515c-7936-49bc-91e6-36002e2f1c1b",
              "parentUUID": "c20b26ee-099e-4208-980e-d635291a3783",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "096a7161-61a7-44fe-b9c7-499d9508b7f4",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 573,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst { args  } = await (0, _shared.getMinterInitializer)(hre);\n(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.SAFETY_COUNCIL, hre.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getFeeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await hre.Diamond.getMinCollateralRatio()).to.equal(args.minCollateralRatio);\n(0, _chai.expect)(await hre.Diamond.getMinDebtValue()).to.equal(args.minDebtValue);",
                  "err": {},
                  "uuid": "53500d88-6f76-48e3-932a-06f4a3369c85",
                  "parentUUID": "096a7161-61a7-44fe-b9c7-499d9508b7f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst initializer = await (0, _shared.getMinterInitializer)(hre);\nconst initializerContract = await hre.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initializeMinter(initializer.args);\nawait (0, _chai.expect)(hre.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "17854629-09c1-4b99-abcb-02401cd58d2b",
                  "parentUUID": "096a7161-61a7-44fe-b9c7-499d9508b7f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hre.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._shared.minterFacets,\n    ..._shared.diamondFacets,\n    ..._shared.scdpFacets\n].map(async (name)=>{\n    const deployment = await hre.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "46e18d9a-6d70-4bb8-b752-2dfcfdd474dd",
                  "parentUUID": "096a7161-61a7-44fe-b9c7-499d9508b7f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53500d88-6f76-48e3-932a-06f4a3369c85",
                "17854629-09c1-4b99-abcb-02401cd58d2b",
                "46e18d9a-6d70-4bb8-b752-2dfcfdd474dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 917,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "b9488d99-9606-416e-8002-2ed0b96bbaed",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.defaultFixture)();",
              "err": {},
              "uuid": "17521323-3f0f-47f5-8ec0-f1eaba1b052f",
              "parentUUID": "b9488d99-9606-416e-8002-2ed0b96bbaed",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 681,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = (0, _test.getNewMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(hre.Diamond.updateMinCollateralRatio(update.minCollateralRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMinDebtValue(update.minDebtValue)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(update.MLR)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(update.oracleDeviationPct)).to.not.be.reverted;\nconst { minCollateralRatio , minDebtValue , feeRecipient , oracleDeviationPct  } = await hre.Diamond.getCurrentParameters();\n(0, _chai.expect)(update.minCollateralRatio.toBigInt()).to.equal(minCollateralRatio);\n(0, _chai.expect)(update.minDebtValue.toBigInt()).to.equal(minDebtValue);\n(0, _chai.expect)(update.feeRecipient).to.equal(feeRecipient);\n(0, _chai.expect)(update.oracleDeviationPct).to.equal(oracleDeviationPct);",
                  "err": {},
                  "uuid": "cae6aa60-7e1c-46c3-a33c-4259ff5fc8de",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 666,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)(_test.defaultCollateralArgs);\n(0, _chai.expect)(await hre.Diamond.getCollateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hre.Diamond.getCollateralAmountToValue(contract.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)(Number(oraclePrice)).to.equal((0, _lib.toBig)(_test.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "24a7a32a-fcea-434c-bf5c-10bc4150f3ce",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 967,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , kresko  } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = (0, _lib.fromBig)(await hre.Diamond.getDebtAmountToValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(values.exists).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal((0, _lib.toBig)(_test.defaultKrAssetArgs.factor));\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_test.defaultKrAssetArgs.price);\n(0, _chai.expect)((0, _lib.fromBig)(values.supplyLimit)).to.equal(_test.defaultKrAssetArgs.supplyLimit);\n(0, _chai.expect)((0, _lib.fromBig)(values.closeFee)).to.equal(_test.defaultKrAssetArgs.closeFee);\n(0, _chai.expect)((0, _lib.fromBig)(values.openFee)).to.equal(_test.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "3e37ba5f-2b13-4cb5-abf8-dd6a749ebc43",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 197,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.getExtOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "a229672e-a76b-4ec2-96fc-e6b077174251",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidation ratio",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidation ratio",
                  "timedOut": false,
                  "duration": 289,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.getMaxLiquidationRatio();\nconst newMLR = (0, _lib.toBig)(1.42);\n(0, _chai.expect)(currentMLM.eq(newMLR)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(newMLR)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getMaxLiquidationRatio()).eq(newMLR)).to.be.true;",
                  "err": {},
                  "uuid": "9b151e92-8819-4ef7-8ae9-51cb0a928809",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update oracle deviation pct",
                  "timedOut": false,
                  "duration": 290,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentODPCT = await hre.Diamond.getOracleDeviationPct();\nconst newODPCT = (0, _lib.toBig)(0.3);\n(0, _chai.expect)(currentODPCT.eq(newODPCT)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newODPCT)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getOracleDeviationPct()).eq(newODPCT)).to.be.true;",
                  "err": {},
                  "uuid": "1f710b69-f162-413f-99ea-2d977c8d9e50",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 292,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getKreskoAsset(f.KrAsset.address)).kFactor;\nconst newRatio = (0, _lib.toBig)(1.2);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(f.KrAsset.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getKreskoAsset(f.KrAsset.address)).kFactor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "4f605f23-90a1-473b-b845-d1e5cc309c28",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 293,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getCollateralAsset(f.Collateral.address)).factor;\nconst newRatio = (0, _lib.toBig)(0.9);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCollateralFactor(f.Collateral.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getCollateralAsset(f.Collateral.address)).factor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "0c98c7d6-77cc-4a77-a71e-94a1b14834f2",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 625,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oracleAnswer = (0, _lib.fromBig)((await f.KrAsset.priceFeed.latestRoundData())[1], 8);\nconst kreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, _chai.expect)(oracleAnswer).to.equal(_test.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, _lib.toBig)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, _lib.toBig)(0.02),\n    openFee: (0, _lib.toBig)(0.02)\n};\nconst FakeFeed = await (0, _oracle.getFakeOracle)(update.price);\nawait (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateKreskoAsset(f.KrAsset.address, ...await (0, _krassets.getKrAssetConfig)(f.KrAsset.contract, f.KrAsset.anchor.address, update.factor, (0, _lib.toBig)(update.supplyLimit), update.closeFee, update.openFee, FakeFeed.address, \"MockKreskoAsset\", [\n    _oracles.OracleType.Chainlink,\n    _oracles.OracleType.Redstone\n]));\nconst newValues = await hre.Diamond.getKreskoAsset(f.KrAsset.address);\nconst updatedOracleAnswer = (0, _lib.fromBig)((await FakeFeed.latestRoundData())[1], 8);\nconst newKreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(newValues.exists).to.equal(true);\n(0, _chai.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, _chai.expect)((0, _lib.fromBig)(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "683b958d-28c7-4e29-b471-2d5e7191248c",
                  "parentUUID": "574d9fb5-6291-41c3-9e2b-298d6f7333aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cae6aa60-7e1c-46c3-a33c-4259ff5fc8de",
                "24a7a32a-fcea-434c-bf5c-10bc4150f3ce",
                "3e37ba5f-2b13-4cb5-abf8-dd6a749ebc43",
                "a229672e-a76b-4ec2-96fc-e6b077174251",
                "9b151e92-8819-4ef7-8ae9-51cb0a928809",
                "1f710b69-f162-413f-99ea-2d977c8d9e50",
                "4f605f23-90a1-473b-b845-d1e5cc309c28",
                "0c98c7d6-77cc-4a77-a71e-94a1b14834f2",
                "683b958d-28c7-4e29-b471-2d5e7191248c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4300,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "88107389-25f4-4a09-a06e-35c25ab69c9d",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.depositWithdrawFixture)();\n[[user, User], [depositor, Depositor], [withdrawer, Withdrawer]] = f.users;",
              "err": {},
              "uuid": "b8d15b6d-9332-40e0-a264-2dcd5474a4c1",
              "parentUUID": "88107389-25f4-4a09-a06e-35c25ab69c9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40eba8f8-64c6-419c-a0fd-3a1abe79c8fb",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 500,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _lib.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nconst depositAmount = collateralAmount.div(2);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAssets(user.address)).to.include(f.KrAssetCollateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(user.address, f.KrAssetCollateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "f781fb0c-1f09-4d8c-8e43-2001022578b1",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _lib.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(User.depositCollateral(user.address, f.KrAssetCollateral.address, 9e11.toString())).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "1b5d528d-32ee-4420-91c7-6930555d1ef5",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Account has deposit entry\nconst depositedCollateralAssetsAfter = await _optimizations.default.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _optimizations.default.getAccountCollateralAmount(depositor.address, f.Collateral.address)).to.equal(f.initialDeposits);\n// Kresko's balance has increased\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Account's balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await f.Collateral.balanceOf(depositor.address))).to.equal((0, _lib.fromBig)(f.initialBalance) - (0, _lib.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "cccd8d22-ec22-4e9c-804b-371aff7340dd",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 388,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral, from depositor -> user.\nawait (0, _chai.expect)(Depositor.depositCollateral(user.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Confirm the depositor's wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await f.Collateral.balanceOf(depositor.address);\n(0, _chai.expect)((0, _lib.fromBig)(depositorBalanceAfter)).to.equal((0, _lib.fromBig)(f.initialBalance) - (0, _lib.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "4fe609a7-c60f-494f-80fe-0ddc22efe6b7",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 387,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(depositor.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.add(f.initialDeposits));",
                      "err": {},
                      "uuid": "bb333e31-c047-4333-9910-baaeae19813c",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 290,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nawait f.Collateral2.setBalance(depositor, f.initialBalance, _hardhat.default.Diamond.address);\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral2.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral2.address\n]);",
                      "err": {},
                      "uuid": "9bf82953-5805-48c4-974a-0b5740f2b9d2",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 101,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralDeposited\");\n(0, _chai.expect)(event.account).to.equal(depositor.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                      "err": {},
                      "uuid": "87821b5b-4aaa-4264-aedc-666ecc99be58",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 93,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, \"0x0000000000000000000000000000000000000001\", f.initialDeposits)).to.be.revertedWith(_errors.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "7ba8a7f1-c1a3-4c38-9d1d-3c3c0f8b54aa",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 95,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "7f09ba63-33cd-48d4-a8f8-d1aa565db24f",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 261,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer , devTwo , extOne  } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositor).depositCollateral(depositor.address, f.Collateral.contract.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "c9ef9314-0a2f-4706-b87e-cd2f37f0abdc",
                      "parentUUID": "edbc7277-f9ce-4dc1-9924-b097eab00613",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f781fb0c-1f09-4d8c-8e43-2001022578b1",
                    "1b5d528d-32ee-4420-91c7-6930555d1ef5",
                    "cccd8d22-ec22-4e9c-804b-371aff7340dd",
                    "4fe609a7-c60f-494f-80fe-0ddc22efe6b7",
                    "bb333e31-c047-4333-9910-baaeae19813c",
                    "9bf82953-5805-48c4-974a-0b5740f2b9d2",
                    "87821b5b-4aaa-4264-aedc-666ecc99be58",
                    "7ba8a7f1-c1a3-4c38-9d1d-3c3c0f8b54aa",
                    "7f09ba63-33cd-48d4-a8f8-d1aa565db24f",
                    "c9ef9314-0a2f-4706-b87e-cd2f37f0abdc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2321,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "071bae06-f852-408c-8c9a-637cd89dda2d",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "9e8e2af6-706b-4f04-9bfb-4f5cf165edc7",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 752,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "739b0e28-f0de-45ab-aa09-2853f6dbf8de",
                          "parentUUID": "9e8e2af6-706b-4f04-9bfb-4f5cf165edc7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 473,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits.sub(amountDeposited));",
                          "err": {},
                          "uuid": "a93d8076-6440-4dff-8163-9bc84ff68403",
                          "parentUUID": "9e8e2af6-706b-4f04-9bfb-4f5cf165edc7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 666,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.grantRole(_testutils.Role.MANAGER, user.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, user.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(f.initialDeposits));",
                          "err": {},
                          "uuid": "5a8b8ec1-da80-46bd-81ad-445eee4ef2e7",
                          "parentUUID": "9e8e2af6-706b-4f04-9bfb-4f5cf165edc7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 280,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralWithdrawn\");\n(0, _chai.expect)(event.account).to.equal(withdrawer.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "bbb6b1a6-eccd-444e-b6a7-13cbf4fcc890",
                          "parentUUID": "9e8e2af6-706b-4f04-9bfb-4f5cf165edc7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 110,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${user.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "e0029df5-0daa-49ce-a2d6-9d1ceff597c9",
                          "parentUUID": "9e8e2af6-706b-4f04-9bfb-4f5cf165edc7",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "2bf349a3-0060-4409-95d2-10f7909ab4c2",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 376,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne mints some kr assets\nthis.mintAmount = (0, _lib.toBig)(100);\nawait Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _optimizations.default.getMinCollateralRatio();",
                              "err": {},
                              "uuid": "fa82ab56-e859-4e85-bbf7-15704734497e",
                              "parentUUID": "2bf349a3-0060-4409-95d2-10f7909ab4c2",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 1487,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _lib.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst [accMinCollateralValue, accCollateralValue, withdrawnCollateralValue] = await Promise.all([\n    _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr),\n    _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address),\n    _hardhat.default.Diamond.getCollateralAmountToValue(f.Collateral.address, withdrawAmount, false).then(([value])=>value)\n]);\n(0, _chai.expect)(accCollateralValue.sub(withdrawnCollateralValue).gte(accMinCollateralValue)).to.be.true;\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _optimizations.default.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst withdrawerBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(withdrawerBalance).to.equal(withdrawAmount);\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "f9642d29-9beb-4045-bf76-3a75b8022325",
                              "parentUUID": "2bf349a3-0060-4409-95d2-10f7909ab4c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 447,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const randomUser = _hardhat.default.users.userFour;\nawait f.Collateral.setBalance(randomUser, _ethers.BigNumber.from(0));\nawait f.Collateral.setBalance(randomUser, (0, _lib.toBig)(1000));\nawait f.Collateral.contract.connect(randomUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(1000),\n    user: randomUser\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(1010),\n    user: randomUser\n});\n(0, _chai.expect)(await f.Collateral.balanceOf(randomUser.address)).to.equal((0, _lib.toBig)(1000));",
                              "err": {},
                              "uuid": "0a308d2e-f376-4532-a083-54718adc7fc5",
                              "parentUUID": "2bf349a3-0060-4409-95d2-10f7909ab4c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 97,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, 0, withdrawAmount)).to.be.revertedWith(_errors.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "625bed59-cf08-49a0-bf97-df13243215f9",
                              "parentUUID": "2bf349a3-0060-4409-95d2-10f7909ab4c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 1115,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = f.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.Collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "6804b9e2-4032-4c09-ae9e-5876303db29b",
                              "parentUUID": "2bf349a3-0060-4409-95d2-10f7909ab4c2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 97,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 1)).to.be.revertedWith(_errors.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "da33a8c5-e5f4-49aa-9a96-db9db2e4c4e4",
                              "parentUUID": "2bf349a3-0060-4409-95d2-10f7909ab4c2",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "f9642d29-9beb-4045-bf76-3a75b8022325",
                            "0a308d2e-f376-4532-a083-54718adc7fc5",
                            "625bed59-cf08-49a0-bf97-df13243215f9",
                            "6804b9e2-4032-4c09-ae9e-5876303db29b",
                            "da33a8c5-e5f4-49aa-9a96-db9db2e4c4e4"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 3243,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 60000
                        }
                      ],
                      "passes": [
                        "739b0e28-f0de-45ab-aa09-2853f6dbf8de",
                        "a93d8076-6440-4dff-8163-9bc84ff68403",
                        "5a8b8ec1-da80-46bd-81ad-445eee4ef2e7",
                        "bbb6b1a6-eccd-444e-b6a7-13cbf4fcc890",
                        "e0029df5-0daa-49ce-a2d6-9d1ceff597c9"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2281,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "ccc5c52e-dddd-4fb2-b1e6-f2c75deda973",
                  "title": "#deposit - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase \"before each\" hook in \"#deposit - rebase\"",
                      "timedOut": false,
                      "duration": 558,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setBalance(user, f.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// Allowance for Kresko\nawait f.KrAssetCollateral.contract.setVariable(\"_allowances\", {\n    [user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait User.depositCollateral(user.address, f.Collateral.address, f.initialDeposits);\n// Mint some krAssets\nawait User.mintKreskoAsset(user.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await User.getAccountDebtAmount(user.address, f.KrAssetCollateral.address);",
                      "err": {},
                      "uuid": "379bd3f3-046b-44fe-96ae-dfb955b1dbde",
                      "parentUUID": "ccc5c52e-dddd-4fb2-b1e6-f2c75deda973",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "5efde1a1-72ce-43d6-9e23-4ba88d28499d",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 311,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "edddf54e-bf23-45c5-b015-74df8ed45b5e",
                          "parentUUID": "5efde1a1-72ce-43d6-9e23-4ba88d28499d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 309,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "0a14beca-9764-4236-bd3e-d52138b17f06",
                          "parentUUID": "5efde1a1-72ce-43d6-9e23-4ba88d28499d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 484,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "65faca53-1f14-440c-9b7f-638f28f73b4a",
                          "parentUUID": "5efde1a1-72ce-43d6-9e23-4ba88d28499d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 335,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "97fefd78-bfab-4923-9e9f-dd4f9fb50eac",
                          "parentUUID": "5efde1a1-72ce-43d6-9e23-4ba88d28499d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 409,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "0c9dc596-3d09-4ae3-9f27-8211d2cc7317",
                          "parentUUID": "5efde1a1-72ce-43d6-9e23-4ba88d28499d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 583,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "9190e15e-175d-4adc-be73-0b2844fd2078",
                          "parentUUID": "5efde1a1-72ce-43d6-9e23-4ba88d28499d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "edddf54e-bf23-45c5-b015-74df8ed45b5e",
                        "0a14beca-9764-4236-bd3e-d52138b17f06",
                        "65faca53-1f14-440c-9b7f-638f28f73b4a",
                        "97fefd78-bfab-4923-9e9f-dd4f9fb50eac",
                        "0c9dc596-3d09-4ae3-9f27-8211d2cc7317",
                        "9190e15e-175d-4adc-be73-0b2844fd2078"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2431,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "2a70f7eb-d1a0-4d7f-a504-b0a4f095cba5",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 664,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "49d9c176-4b92-4645-9c96-e3f66876a6b9",
                          "parentUUID": "2a70f7eb-d1a0-4d7f-a504-b0a4f095cba5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 842,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "2a783c21-251b-41cc-a76c-bf50eff2c61e",
                          "parentUUID": "2a70f7eb-d1a0-4d7f-a504-b0a4f095cba5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 497,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "0ec2a753-b56f-4289-bbb5-e2643bccff96",
                          "parentUUID": "2a70f7eb-d1a0-4d7f-a504-b0a4f095cba5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 660,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "7fcc9a74-fb0a-49c8-beda-e49fb47d5d2d",
                          "parentUUID": "2a70f7eb-d1a0-4d7f-a504-b0a4f095cba5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 955,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, fullDepositAmount, false);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "abbedbe6-f18b-4b06-94dc-9c6e14c35ae6",
                          "parentUUID": "2a70f7eb-d1a0-4d7f-a504-b0a4f095cba5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1125,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, fullDepositAmount, false);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "4a254e24-cf87-4b31-b417-c587ca337812",
                          "parentUUID": "2a70f7eb-d1a0-4d7f-a504-b0a4f095cba5",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "49d9c176-4b92-4645-9c96-e3f66876a6b9",
                        "2a783c21-251b-41cc-a76c-bf50eff2c61e",
                        "0ec2a753-b56f-4289-bbb5-e2643bccff96",
                        "7fcc9a74-fb0a-49c8-beda-e49fb47d5d2d",
                        "abbedbe6-f18b-4b06-94dc-9c6e14c35ae6",
                        "4a254e24-cf87-4b31-b417-c587ca337812"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 4743,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "761280e3-2ae7-44c2-a98b-c30876e699f4",
                  "title": "#withdraw - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase \"before each\" hook in \"#withdraw - rebase\"",
                      "timedOut": false,
                      "duration": 375,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await _optimizations.default.getAccountDebtAmount(withdrawer.address, f.KrAssetCollateral);",
                      "err": {},
                      "uuid": "d727f16b-1a0e-4d9d-ae94-3fda39e3fcf0",
                      "parentUUID": "761280e3-2ae7-44c2-a98b-c30876e699f4",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 786,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "466d3b24-e12d-4186-bb69-65d998e4eb81",
                          "parentUUID": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 787,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "f2a9153a-f641-4b2b-8747-4e05412511a6",
                          "parentUUID": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 1002,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "bad3bc43-2882-4291-9976-9cfa12b6aa07",
                          "parentUUID": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after a negative rebase",
                          "timedOut": false,
                          "duration": 772,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "ad152133-79af-445a-8da4-808ec93dbccb",
                          "parentUUID": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 915,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "7befdb27-c8df-408a-b48f-0b46b3e532c1",
                          "parentUUID": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 948,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "1ffcb6bd-bdb4-4dca-bea4-4356b9f498bb",
                          "parentUUID": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 594,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await f.Collateral.contract.balanceOf(withdrawer.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.Collateral.address));\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "71cfbf67-f3c5-476f-9516-54cf9edda677",
                          "parentUUID": "d227d5a0-e564-4fe0-8e51-59c45a283f6e",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "466d3b24-e12d-4186-bb69-65d998e4eb81",
                        "f2a9153a-f641-4b2b-8747-4e05412511a6",
                        "bad3bc43-2882-4291-9976-9cfa12b6aa07",
                        "ad152133-79af-445a-8da4-808ec93dbccb",
                        "7befdb27-c8df-408a-b48f-0b46b3e532c1",
                        "1ffcb6bd-bdb4-4dca-bea4-4356b9f498bb",
                        "71cfbf67-f3c5-476f-9516-54cf9edda677"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5804,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 1006,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "7064bfb6-e512-472e-a7af-8770b3376c15",
                          "parentUUID": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 765,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "fac25f42-243f-4978-bfa2-76a956116193",
                          "parentUUID": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 940,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "78f9b560-3d43-41e3-9456-51e4a7a783c9",
                          "parentUUID": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 760,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "35cd2969-2e65-4f79-ad9b-317a2cff229c",
                          "parentUUID": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 1249,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "edd17cd3-f5eb-42cd-a188-1cf635712cb0",
                          "parentUUID": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1422,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "a896b810-102e-4493-9747-2d008c7df5d3",
                          "parentUUID": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 1857,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.Collateral.address);\nconst [withdrawValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.Collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.bignumber.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "a6bdecbc-63ce-468b-ae87-fbb1add4e628",
                          "parentUUID": "cf4ff5bb-40bd-4646-8d70-97c44852f21f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "7064bfb6-e512-472e-a7af-8770b3376c15",
                        "fac25f42-243f-4978-bfa2-76a956116193",
                        "78f9b560-3d43-41e3-9456-51e4a7a783c9",
                        "35cd2969-2e65-4f79-ad9b-317a2cff229c",
                        "edd17cd3-f5eb-42cd-a188-1cf635712cb0",
                        "a896b810-102e-4493-9747-2d008c7df5d3",
                        "a6bdecbc-63ce-468b-ae87-fbb1add4e628"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 7999,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "924bda5e-c42a-49dc-ada0-42c5dd918abf",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.liquidationsFixture)();\n[[user1, User], [user2], [user3], [user4], [user5], [liquidator, Liquidator], [liquidatorTwo, LiquidatorTwo]] = f.users;\nf.reset();",
              "err": {},
              "uuid": "78af7b4a-2f58-4466-ba06-dd4551c1726c",
              "parentUUID": "924bda5e-c42a-49dc-ada0-42c5dd918abf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "41f4678e-4628-46e6-b026-c23dce01a2e0",
              "title": "#isAccountLiquidatable",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify accounts below their liquidation threshold",
                  "fullTitle": "Minter - Liquidations #isAccountLiquidatable should identify accounts below their liquidation threshold",
                  "timedOut": false,
                  "duration": 1206,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [cr, minCollateralUSD, initialCanLiquidate] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address),\n    hre.Diamond.getAccountMinCollateralAtRatio(user1.address, hre.Diamond.getLiquidationThreshold()),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(cr).to.be.equal(1.5);\n(0, _chai.expect)(f.initialDeposits.mul(10).gt(minCollateralUSD));\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.equal(true);",
                  "err": {},
                  "uuid": "d41f2729-e9e8-4ca7-8c9e-30666ab49435",
                  "parentUUID": "41f4678e-4628-46e6-b026-c23dce01a2e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d41f2729-e9e8-4ca7-8c9e-30666ab49435"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "ee9e467e-0aea-42ef-8591-43a5197de81d",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 1",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 1",
                  "timedOut": false,
                  "duration": 1864,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "f.Collateral.setPrice(7.5);\nconst [crAfter, isLiquidatableAfter, MLV, MLVCalc] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address),\n    (0, _liquidations.getExpectedMaxLiq)(user1, f.KrAsset, f.Collateral)\n]);\n(0, _chai.expect)(crAfter).to.be.equal(1.125);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(MLVCalc).to.be.closeTo(MLV, USD_DELTA);",
                  "err": {},
                  "uuid": "ad2268aa-7c59-4f97-87a9-3f9d1ac9bf14",
                  "parentUUID": "ee9e467e-0aea-42ef-8591-43a5197de81d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 1795,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateCollateralFactor(f.Collateral.address, (0, _lib.toBig)(0.25));\nawait (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: f.initialDeposits.div(2),\n    asset: f.Collateral2\n});\nconst expectedCR = 1.125;\nconst [crAfter, isLiquidatableAfter, MLVAfterC1, MLVAfterC2] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral2.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(crAfter).to.be.closeTo(expectedCR, CR_DELTA);\n(0, _chai.expect)(MLVAfterC2.gt(MLVAfterC1)).to.be.true;\n        // await liquidate(user1, f.KrAsset, f.Collateral);\n        // expect(await getCR(user1.address)).to.be.gt(1.4);",
                  "err": {},
                  "uuid": "28dc2e88-bbc7-499a-812c-95ca15086428",
                  "parentUUID": "ee9e467e-0aea-42ef-8591-43a5197de81d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 3360,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _lib.toBig)(0.1, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.true;\nconst [expectedMaxLiq, maxLiq, expectedMaxLiq8Dec, maxLiq8Dec] = await Promise.all([\n    (0, _liquidations.getExpectedMaxLiq)(user1, f.KrAsset, f.Collateral),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address),\n    (0, _liquidations.getExpectedMaxLiq)(user1, f.KrAsset, f.Collateral8Dec),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(expectedMaxLiq.gt(0)).to.be.true;\n(0, _chai.expect)(expectedMaxLiq8Dec.gt(0)).to.be.true;\n(0, _chai.expect)(expectedMaxLiq).to.be.closeTo(maxLiq, USD_DELTA);\n(0, _chai.expect)(expectedMaxLiq8Dec).to.be.closeTo(maxLiq8Dec, USD_DELTA);\n(0, _chai.expect)(expectedMaxLiq8Dec).lt(expectedMaxLiq);",
                  "err": {},
                  "uuid": "03af467c-211b-499b-bb9f-f1c58b5d5320",
                  "parentUUID": "ee9e467e-0aea-42ef-8591-43a5197de81d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad2268aa-7c59-4f97-87a9-3f9d1ac9bf14",
                "28dc2e88-bbc7-499a-812c-95ca15086428",
                "03af467c-211b-499b-bb9f-f1c58b5d5320"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7019,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "0e975de2-54d5-4b54-98bd-0510bd841eca",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(7.5);",
                      "err": {},
                      "uuid": "614d3feb-8a44-44f9-b88b-7772a4cc79e1",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 872,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\nconst userOneDebtBefore = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst liquidatorBalanceBefore = await f.Collateral.balanceOf(liquidator.address);\nconst liquidatorBalanceKrBefore = await f.KrAsset.balanceOf(liquidator.address);\nconst kreskoBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxRepayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _lib.toBig)(11, 8));\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, maxRepayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), false);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst userOneDebtAfterLiquidation = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebtAfterLiquidation.eq(userOneDebtBefore.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst userOneCollateralAfterLiquidation = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\n(0, _chai.expect)(userOneCollateralAfterLiquidation.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\n(0, _chai.expect)(await f.KrAsset.balanceOf(liquidator.address)).eq(liquidatorBalanceKrBefore.sub(maxRepayAmount));\n// Confirm that userTwo has received some collateral from the contract\n(0, _chai.expect)(await f.Collateral.balanceOf(liquidator.address)).gt(liquidatorBalanceBefore);\n// Confirm that Kresko contract's collateral balance has decreased.\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).lt(kreskoBalanceBefore);",
                      "err": {},
                      "uuid": "c8cc4edd-bb67-4e19-9011-fcdc27b6d994",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with a single CDP",
                      "timedOut": false,
                      "duration": 1719,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _lib.toBig)(11, 8));\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), false);\n(0, _chai.expect)(await (0, _liquidations.getCR)(user1.address, true)).to.be.closeTo(await _optimizations.default.getMaxLiquidationRatio(), (0, _lib.toBig)(CR_DELTA));\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "23eb41dc-f81d-4e37-af54-8985ef373e75",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with multiple CDPs",
                      "timedOut": false,
                      "duration": 2930,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _lib.toBig)(10, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(5);\nf.Collateral8Dec.setPrice(6);\nawait hre.Diamond.updateCollateralFactor(f.Collateral.address, (0, _lib.toBig)(0.975));\nawait hre.Diamond.updateKFactor(f.KrAsset.address, (0, _lib.toBig)(1.05));\nawait (0, _liquidations.liquidate)(user1, f.KrAsset, f.Collateral8Dec);\nconst [crAfter, isLiquidatableAfter] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address, true),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.false;\n(0, _chai.expect)(crAfter).to.be.closeTo(await _optimizations.default.getMaxLiquidationRatio(), (0, _lib.toBig)(CR_DELTA));",
                      "err": {},
                      "uuid": "afca0d58-6b06-4757-a547-f80180274862",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 773,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _lib.toBig)(11));\nconst tx = await Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), false);\nconst event = await (0, _lib.getNamedEvent)(tx, \"LiquidationOccurred\");\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);",
                      "err": {},
                      "uuid": "c1054c41-c92a-49b8-b5de-d3f9bf5c0fff",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 482,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(10);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "78004f16-a998-4a37-8f0a-cdbc9e623a1c",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "d9a04708-1c03-4224-ba64-4d1aea2e272c",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 410,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _lib.toBig)(1));\n// Liquidation should fail\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "e44bba61-cc29-4962-abe9-dc987dd3a315",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 1786,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _lib.toBig)(2, 8),\n    asset: f.Collateral8Dec\n});\nconst allowedRepaymentValue = await hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address);\nconst allowedRepaymentAmount = allowedRepaymentValue.wadDiv((0, _lib.toBig)(11, 8));\nconst overflowRepayment = allowedRepaymentAmount.add((0, _lib.toBig)(1));\nconst tx = await Liquidator.liquidate(user1.address, f.KrAsset.address, overflowRepayment, f.Collateral.address, 0, 0, false);\nconst event = await (0, _lib.getNamedEvent)(tx, \"LiquidationOccurred\");\nconst assetInfo = await f.Collateral.kresko();\nconst expectedSeizedCollateralAmount = allowedRepaymentValue.wadMul(_ethers.BigNumber.from(assetInfo.liquidationIncentive)).wadDiv(await f.Collateral.getPrice());\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.args.repayAmount).to.not.equal(overflowRepayment);\n(0, _chai.expect)(event.args.repayAmount).to.equal(allowedRepaymentAmount);\n(0, _chai.expect)(event.args.collateralSent).to.be.equal(expectedSeizedCollateralAmount);",
                      "err": {},
                      "uuid": "da566c28-e95d-4f60-a853-1143bdaa487a",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 1410,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(f.Collateral.deployArgs.price);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getMinCollateralRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getLiquidationThreshold());\nf.Collateral.setPrice(9.9);\nconst accountCollateralValue = await hre.Diamond.getAccountCollateralValue(user1.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "f4638d22-02c2-4083-af0e-0d927fe28143",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator token approval for Kresko Assets",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without liquidator token approval for Kresko Assets",
                      "timedOut": false,
                      "duration": 855,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(0);\nconst repayAmount = (0, _lib.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(user2.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "7bcf4678-9727-436c-9b81-5717c48c0ed4",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 849,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = (0, _lib.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait f.KrAsset.contract.setVariable(\"_allowances\", {\n    [liquidatorTwo.address]: {\n        [hre.Diamond.address]: repayAmount\n    }\n});\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "d5c3baa9-bc69-4d0f-8cd9-38c11b4f0d31",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 240,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)(User.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "17551666-d6b2-4586-85dd-2a642316e8ba",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow seized amount to underflow without liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow seized amount to underflow without liquidators permission",
                      "timedOut": false,
                      "duration": 1217,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(6);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(user1, f.KrAsset, f.Collateral);\nconst allowSeizeUnderflow = false;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, liqAmount, f.Collateral.address, 0, 0, allowSeizeUnderflow)).to.be.revertedWith(_errors.Error.SEIZED_COLLATERAL_UNDERFLOW);",
                      "err": {},
                      "uuid": "98149148-aea7-4e6b-8405-a0e91fa43ac5",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow seized amount to underflow with liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow seized amount to underflow with liquidators permission",
                      "timedOut": false,
                      "duration": 1135,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(6);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(user1, f.KrAsset, f.Collateral);\nconst allowSeizeUnderflow = true;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, liqAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), allowSeizeUnderflow)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "898a6269-5afa-4c84-b177-c956f6081e37",
                      "parentUUID": "60ee8245-0938-4e24-a749-11ab2e7ed19e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c8cc4edd-bb67-4e19-9011-fcdc27b6d994",
                    "23eb41dc-f81d-4e37-af54-8985ef373e75",
                    "afca0d58-6b06-4757-a547-f80180274862",
                    "c1054c41-c92a-49b8-b5de-d3f9bf5c0fff",
                    "78004f16-a998-4a37-8f0a-cdbc9e623a1c",
                    "d9a04708-1c03-4224-ba64-4d1aea2e272c",
                    "e44bba61-cc29-4962-abe9-dc987dd3a315",
                    "da566c28-e95d-4f60-a853-1143bdaa487a",
                    "f4638d22-02c2-4083-af0e-0d927fe28143",
                    "7bcf4678-9727-436c-9b81-5717c48c0ed4",
                    "d5c3baa9-bc69-4d0f-8cd9-38c11b4f0d31",
                    "17551666-d6b2-4586-85dd-2a642316e8ba",
                    "98149148-aea7-4e6b-8405-a0e91fa43ac5",
                    "898a6269-5afa-4c84-b177-c956f6081e37"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14772,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "b3858f8f-6949-4a41-a882-ba1957238e25",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.resetRebasing();",
                      "err": {},
                      "uuid": "6a3aaf85-4e67-4ea4-bd06-b863564dfa99",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should setup correct",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should setup correct",
                      "timedOut": false,
                      "duration": 1406,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [mcr, cr, cr2, liquidatable] = await Promise.all([\n    _optimizations.default.getMinCollateralRatio(),\n    (0, _liquidations.getCR)(user3.address),\n    (0, _liquidations.getCR)(user4.address),\n    hre.Diamond.getAccountLiquidatable(user3.address)\n]);\nconst mcrDecimal = (0, _lib.fromBig)(mcr, 18);\n(0, _chai.expect)(cr).to.closeTo(mcrDecimal, 0.001);\n(0, _chai.expect)(cr2).to.closeTo(mcrDecimal, 0.001);\n(0, _chai.expect)(liquidatable).to.be.false;",
                      "err": {},
                      "uuid": "be18318a-cff8-4ce9-839f-660c94424c5a",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 293,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "93705759-54a4-4de1-a5ea-f5138ace8a42",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 288,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "7fe4b5a1-88d7-4aa5-a5d9-d0fa11f2bae3",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 3145,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true);\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "ce51ea5e-7442-4cb1-b7e9-a8495b0e7388",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 2757,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.KrAsset.setPrice(rebasePrice + 1);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "e7d424f9-3571-48f3-90c2-e37d538c2da0",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 1315,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nconst MAGIC_NUMBER = _ethers.BigNumber.from(\"1869158877653366666667\"); // repay amount to bring user3 debt under 1e12\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, MAGIC_NUMBER, hre.Diamond.address);\nawait Liquidator.liquidate(user3.address, f.KrAssetCollateral.address, MAGIC_NUMBER, f.KrAssetCollateral.address, _optimizations.default.getAccountMintIndex(user3.address, f.KrAssetCollateral.address), _optimizations.default.getAccountDepositIndex(user3.address, f.KrAssetCollateral.address), false);\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "3d33e7ff-69c1-43d9-98f6-6d5959801756",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 5937,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user4.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(user4.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(user5.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid * denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "06f90968-c858-48fe-9408-b13186e9e252",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 6247,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user4.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(user4.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(user5.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid / denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "1864e14e-bd9a-4fd8-bf6d-c41a1948d1df",
                      "parentUUID": "b3858f8f-6949-4a41-a882-ba1957238e25",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "be18318a-cff8-4ce9-839f-660c94424c5a",
                    "93705759-54a4-4de1-a5ea-f5138ace8a42",
                    "7fe4b5a1-88d7-4aa5-a5d9-d0fa11f2bae3",
                    "ce51ea5e-7442-4cb1-b7e9-a8495b0e7388",
                    "e7d424f9-3571-48f3-90c2-e37d538c2da0",
                    "3d33e7ff-69c1-43d9-98f6-6d5959801756",
                    "06f90968-c858-48fe-9408-b13186e9e252",
                    "1864e14e-bd9a-4fd8-bf6d-c41a1948d1df"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 21388,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "4f56edeb-329b-4e9f-aeb1-dd48a9dfde15",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.mintRepayFixture)();\n[[user1, User1], [user2, User2]] = f.users;\nf.reset();",
              "err": {},
              "uuid": "04486930-f027-412d-a7b9-66d7ac1450f3",
              "parentUUID": "4f56edeb-329b-4e9f-aeb1-dd48a9dfde15",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "938db152-5f7c-48d8-af4b-24807bceff0b",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 674,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(f.initialMintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "8384cebd-29b6-42f9-bb9d-7416189d57bf",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 1424,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "91255297-2105-40c8-acf0-1101fbdf6883",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 854,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(20);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset2.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset2);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset2.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await f.KrAsset2.contract.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "bbea743b-10a4-496f-a323-9c4f84a63253",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 659,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _lib.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hre.Diamond.getMinDebtValue();\n(0, _chai.expect)((0, _lib.fromBig)(mintAmountUSDValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "c68c5771-a395-45ec-a9a3-2c4bc1bf47c0",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 654,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_testutils.Role.MANAGER, user2.address);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _lib.toBig)(1);\nawait User2.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userTwoBalanceAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userTwoBalanceAfter).to.equal(mintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);",
                      "err": {},
                      "uuid": "ae5e2799-5749-4c13-81f4-0a4ae6c3f768",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 382,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"KreskoAssetMinted\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount);",
                      "err": {},
                      "uuid": "f0686e06-9cd4-4a12-9c63-cb3963ac884b",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(User1.mintKreskoAsset(user2.address, f.KrAsset.address, (0, _lib.toBig)(1))).to.be.revertedWith(`AccessControl: account ${user1.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "d8a2acaf-4149-4281-945c-2711e3efec52",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 380,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currMinimumDebtValue = await _optimizations.default.getMinDebtValue();\nconst mintAmount = currMinimumDebtValue.div(_testutils.TEN_USD).sub(1);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "27daa706-c387-42dd-a0b3-254ba9c018a5",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 93,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, \"0x0000000000000000000000000000000000000002\", (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "2efc1ee7-9800-423d-bf68-8f461501cce8",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 285,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both f.Collateral and f.KrAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, _lib.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, _lib.toBig)(mcrAmount + 1);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "2623970c-b324-4ff7-90e3-3db6d8a458f1",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 464,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait f.Collateral.setBalance(user1, (0, _lib.toBig)(100000000));\nawait (0, _chai.expect)(User1.depositCollateral(user1.address, f.Collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await hre.Diamond.getKreskoAsset(f.KrAsset.address);\nconst overSupplyLimit = (0, _lib.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, (0, _lib.toBig)(overSupplyLimit))).to.be.revertedWith(_errors.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "c36165b0-266b-452d-9982-c9e486d2d2c0",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "27539719-1212-454d-83d1-126afb175822",
                      "parentUUID": "583a33e1-27a5-4b5d-93f7-8dbedaa7ab84",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8384cebd-29b6-42f9-bb9d-7416189d57bf",
                    "91255297-2105-40c8-acf0-1101fbdf6883",
                    "bbea743b-10a4-496f-a323-9c4f84a63253",
                    "c68c5771-a395-45ec-a9a3-2c4bc1bf47c0",
                    "ae5e2799-5749-4c13-81f4-0a4ae6c3f768",
                    "f0686e06-9cd4-4a12-9c63-cb3963ac884b",
                    "d8a2acaf-4149-4281-945c-2711e3efec52",
                    "27daa706-c387-42dd-a0b3-254ba9c018a5",
                    "2efc1ee7-9800-423d-bf68-8f461501cce8",
                    "2623970c-b324-4ff7-90e3-3db6d8a458f1",
                    "c36165b0-266b-452d-9982-c9e486d2d2c0"
                  ],
                  "failures": [],
                  "pending": [
                    "27539719-1212-454d-83d1-126afb175822"
                  ],
                  "skipped": [],
                  "duration": 5975,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "f55504f8-e841-4321-b9f6-27c404e691cb",
                  "title": "#mint - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "f6e13ddb-acae-49c5-824a-37321173f16e",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 486,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "fe18f213-a80a-471f-b2aa-6d0bfb644307",
                          "parentUUID": "f6e13ddb-acae-49c5-824a-37321173f16e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 486,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "c10021ec-4b02-4ed3-a573-17b26f891e20",
                          "parentUUID": "f6e13ddb-acae-49c5-824a-37321173f16e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 486,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "6b13e351-b98b-4e7e-a8f3-1ab1ecc0759f",
                          "parentUUID": "f6e13ddb-acae-49c5-824a-37321173f16e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 654,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "7aff2d5e-afc3-4c31-9a3b-4bb2ee2653b6",
                          "parentUUID": "f6e13ddb-acae-49c5-824a-37321173f16e",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "fe18f213-a80a-471f-b2aa-6d0bfb644307",
                        "c10021ec-4b02-4ed3-a573-17b26f891e20",
                        "6b13e351-b98b-4e7e-a8f3-1ab1ecc0759f",
                        "7aff2d5e-afc3-4c31-9a3b-4bb2ee2653b6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2112,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "971ed663-af6e-4489-b342-745e5a261592",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 768,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "586c78fe-ba38-4a2a-a594-1901343d9311",
                          "parentUUID": "971ed663-af6e-4489-b342-745e5a261592",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 767,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "a88a3472-e7ea-4a93-b585-defe86b3af1c",
                          "parentUUID": "971ed663-af6e-4489-b342-745e5a261592",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 760,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice, 8) / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "534b8553-beb8-4070-a2d1-7f3cfed83cd2",
                          "parentUUID": "971ed663-af6e-4489-b342-745e5a261592",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 958,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "f20c0bb8-33b7-40f0-b689-579f856569fc",
                          "parentUUID": "971ed663-af6e-4489-b342-745e5a261592",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "586c78fe-ba38-4a2a-a594-1901343d9311",
                        "a88a3472-e7ea-4a93-b585-defe86b3af1c",
                        "534b8553-beb8-4070-a2d1-7f3cfed83cd2",
                        "f20c0bb8-33b7-40f0-b689-579f856569fc"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3253,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "d9302a43-ff9e-4c4e-9922-2f3152e116cc",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 1814,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.bignumber.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.bignumber.equal(valueBeforeRebase);\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await f.KrAsset.contract.balanceOf(user1.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, f.KrAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "c1e1422a-6109-4573-8a0c-318001429f31",
                          "parentUUID": "d9302a43-ff9e-4c4e-9922-2f3152e116cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1982,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, f.KrAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, f.KrAsset));\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "dc98ed6e-0d5c-4f48-8d60-e065e21d25f3",
                          "parentUUID": "d9302a43-ff9e-4c4e-9922-2f3152e116cc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c1e1422a-6109-4573-8a0c-318001429f31",
                        "dc98ed6e-0d5c-4f48-8d60-e065e21d25f3"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3796,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 378,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);",
                      "err": {},
                      "uuid": "351c5528-0ea1-496b-ba11-f4f6695404f7",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 382,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(f.initialMintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userDebt).to.closeTo(f.initialMintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "03b0b710-c5c7-41d8-b2b4-f07ec229b62f",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "121b803d-23c6-45ce-9125-63b4d77dd817",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 677,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_testutils.Role.MANAGER, user2.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nconst userOneBalanceBefore = await f.KrAsset.balanceOf(user1.address);\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, _chai.expect)(User2.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userOneBalance).to.equal(userOneBalanceBefore, \"userOneBalance\");\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await f.KrAsset.balanceOf(user2.address);\n(0, _chai.expect)(userThreeBalance).to.equal(f.initialMintAmount.sub(burnAmount), \"userThreeBalance\");\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount), \"totalSupplyAfter\");\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user2.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n], \"mintedKreskoAssetsAfter\");\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebt).to.equal(f.initialMintAmount.sub(burnAmount));",
                      "err": {},
                      "uuid": "e7533805-699a-46a9-8f1a-370b32c685c7",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "547e3b5e-3b14-46f0-8a33-c7ca61ace25e",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 384,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await f.KrAsset.balanceOf(user1.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst minDebtValue = (0, _lib.fromBig)(await _optimizations.default.getMinDebtValue(), 8);\nconst oraclePrice = f.KrAsset.deployArgs.price;\nconst burnAmount = (0, _lib.toBig)((0, _lib.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "bbf7d820-3726-438b-b114-0190065149e3",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 409,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"KreskoAssetBurned\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount.div(5));",
                      "err": {},
                      "uuid": "ce468030-123d-43ca-9c1e-19af03074852",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 846,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = f.initialMintAmount.add(secondMintAmount);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "37629e98-2a43-43cf-87c5-0b3261212f4c",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(_errors.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "5d905037-cd95-4655-bd5e-c26ea6253095",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 103,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User2.burnKreskoAsset(user1.address, f.KrAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${user2.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "3248e702-002f-432c-8572-406abc974bcb",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 220,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst burnAmount = debt.add((0, _lib.toBig)(1));\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "9d4f906c-6ac0-49d0-9002-bc9b9a73e945",
                      "parentUUID": "d03456aa-cb38-4d3f-b50e-6af6689de84b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "de3cf92d-043c-4869-bbe2-c4bf39cf36a2",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 1181,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, _lib.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nawait f.KrAsset.update({\n    ..._testutils.defaultKrAssetArgs,\n    openFee\n});\nconst mintAmount = (0, _lib.toBig)(1);\nconst mintValue = mintAmount.mul(_testutils.TEN_USD);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(_testutils.TEN_USD);\n// Get the balances prior to the fee being charged.\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Mint Kresko asset\nconst tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"OpenFeePaid\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await hre.Diamond.previewFee(user1.address, f.KrAsset.address, mintAmount, _testutils.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, _chai.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "3d19ca64-22e8-49de-b649-6883875b9978",
                          "parentUUID": "de3cf92d-043c-4869-bbe2-c4bf39cf36a2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "3d19ca64-22e8-49de-b649-6883875b9978"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1181,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "fd88b81e-cb03-4c59-8a9d-4ec53bad72a8",
                      "title": "Protocol Close Fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 480,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _lib.toBig)(1);\nconst burnValue = burnAmount.mul(_testutils.TEN_USD);\nconst closeFee = (0, _lib.toBig)(f.KrAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(f.Collateral.deployArgs.price);\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "205ca021-3c9f-4e7a-bf69-c97d080d7cbf",
                          "parentUUID": "fd88b81e-cb03-4c59-8a9d-4ec53bad72a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 1430,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * f.KrAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * _testutils.TEN_USD * f.KrAsset.deployArgs.closeFee, 8);\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmount)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmountRebase)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "cab635b4-aed5-46d9-9da0-a47636539ee0",
                          "parentUUID": "fd88b81e-cb03-4c59-8a9d-4ec53bad72a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 1251,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * f.KrAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * _testutils.TEN_USD * f.KrAsset.deployArgs.closeFee, 8);\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmount)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _lib.fromBig)(await f.KrAsset.getPrice(), 8) * denominator;\nf.KrAsset.setPrice(priceAfter);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmountRebase)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "41a9314f-1465-43e1-8efc-d89528c4ce78",
                          "parentUUID": "fd88b81e-cb03-4c59-8a9d-4ec53bad72a8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "205ca021-3c9f-4e7a-bf69-c97d080d7cbf",
                        "cab635b4-aed5-46d9-9da0-a47636539ee0",
                        "41a9314f-1465-43e1-8efc-d89528c4ce78"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3161,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [
                    "03b0b710-c5c7-41d8-b2b4-f07ec229b62f",
                    "e7533805-699a-46a9-8f1a-370b32c685c7",
                    "bbf7d820-3726-438b-b114-0190065149e3",
                    "ce468030-123d-43ca-9c1e-19af03074852",
                    "37629e98-2a43-43cf-87c5-0b3261212f4c",
                    "5d905037-cd95-4655-bd5e-c26ea6253095",
                    "3248e702-002f-432c-8572-406abc974bcb",
                    "9d4f906c-6ac0-49d0-9002-bc9b9a73e945"
                  ],
                  "failures": [],
                  "pending": [
                    "121b803d-23c6-45ce-9125-63b4d77dd817",
                    "547e3b5e-3b14-46f0-8a33-c7ca61ace25e"
                  ],
                  "skipped": [],
                  "duration": 3115,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "a6988a10-a871-4bac-854d-51729a7d107f",
                  "title": "#burn - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase \"before each\" hook in \"#burn - rebase\"",
                      "timedOut": false,
                      "duration": 421,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: f.KrAsset,\n    amount: mintAmount,\n    user: user1\n});",
                      "err": {},
                      "uuid": "cf2ce84a-c659-45ba-ace3-fc6d2acc6dbe",
                      "parentUUID": "a6988a10-a871-4bac-854d-51729a7d107f",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "30c4f912-19f3-45e7-a63c-a5779c01648d",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 767,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(0);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(0);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(f.initialMintAmount); // WEI",
                          "err": {},
                          "uuid": "531a4c01-7654-480c-b21f-f0b52d467a32",
                          "parentUUID": "30c4f912-19f3-45e7-a63c-a5779c01648d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 599,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "6fc99e7e-54a0-43f7-826d-c1634c7ab1ac",
                          "parentUUID": "30c4f912-19f3-45e7-a63c-a5779c01648d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 597,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await f.KrAsset.contract.balanceOf(user1.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _lib.toBig)(expectedBalanceAfterBurn * denominator).add(f.initialMintAmount));",
                          "err": {},
                          "uuid": "892d96e4-8831-4c4c-a92c-86dca8e718ee",
                          "parentUUID": "30c4f912-19f3-45e7-a63c-a5779c01648d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 767,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "41aaf9d9-ed01-4d35-bdb0-1612c3ec7fc7",
                          "parentUUID": "30c4f912-19f3-45e7-a63c-a5779c01648d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "531a4c01-7654-480c-b21f-f0b52d467a32",
                        "6fc99e7e-54a0-43f7-826d-c1634c7ab1ac",
                        "892d96e4-8831-4c4c-a92c-86dca8e718ee",
                        "41aaf9d9-ed01-4d35-bdb0-1612c3ec7fc7"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2730,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "3631d464-70cc-4cb4-8a62-4ffa14fb4f2e",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 670,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "b6d0f1e9-9f08-4795-a1f5-138a1025d49f",
                          "parentUUID": "3631d464-70cc-4cb4-8a62-4ffa14fb4f2e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 1143,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(f.KrAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "4d1d4374-d6c2-4eab-820a-ea94d1a287ef",
                          "parentUUID": "3631d464-70cc-4cb4-8a62-4ffa14fb4f2e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 667,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "1e821c8e-ad34-49fd-b61f-6002325312aa",
                          "parentUUID": "3631d464-70cc-4cb4-8a62-4ffa14fb4f2e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 1253,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "86a4c1b4-2114-433c-8578-dc28468850a7",
                          "parentUUID": "3631d464-70cc-4cb4-8a62-4ffa14fb4f2e",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b6d0f1e9-9f08-4795-a1f5-138a1025d49f",
                        "4d1d4374-d6c2-4eab-820a-ea94d1a287ef",
                        "1e821c8e-ad34-49fd-b61f-6002325312aa",
                        "86a4c1b4-2114-433c-8578-dc28468850a7"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3733,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "f235215e-cd3b-40e7-9e52-d2d02533f405",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.defaultFixture)();\n[, , [user]] = f.users;",
              "err": {},
              "uuid": "e40c8c3f-d513-4276-bcfd-0b224eb024d6",
              "parentUUID": "f235215e-cd3b-40e7-9e52-d2d02533f405",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7dbbc099-111d-4302-a459-4dc1ada9394f",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "e406b2e1-b00e-4dc0-b020-cc7b99fcba27",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw withdraw correct amount",
                      "timedOut": false,
                      "duration": 411,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nawait (0, _chai.expect)(f.Receiver.testWithdrawalAmount(f.Collateral.address, withdrawalAmount)).to.not.be.revertedWith(\"wront amount received\");\n(0, _chai.expect)(await f.Collateral.balanceOf(f.Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "2aef81e6-0288-47fd-b56d-14fe14eabfc6",
                      "parentUUID": "e406b2e1-b00e-4dc0-b020-cc7b99fcba27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 872,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst balKreskoBefore = await f.Collateral.contract.balanceOf(hre.Diamond.address);\nawait Receiver.test(f.Collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(f.Collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(user.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await f.Collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "eabee98e-23ce-4890-9784-90a4d9c076aa",
                      "parentUUID": "e406b2e1-b00e-4dc0-b020-cc7b99fcba27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 1937,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(f.Collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user.address)).to.be.closeTo(15e17.toString(), 1e10.toString());\nawait (0, _chai.expect)(Receiver.test(f.Collateral.address, 10e15.toString())).to.be.reverted;",
                      "err": {},
                      "uuid": "d0c26cd3-1891-4ae8-afea-eaaf9ff10129",
                      "parentUUID": "e406b2e1-b00e-4dc0-b020-cc7b99fcba27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 669,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nawait Receiver.testRedeposit(f.Collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await f.Collateral.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await f.Collateral.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "a1c86a2e-4733-4aad-bb7c-aca7c8082cdf",
                      "parentUUID": "e406b2e1-b00e-4dc0-b020-cc7b99fcba27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 425,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nf.Collateral2.setPrice(10);\nawait f.Collateral2.setBalance(user, f.depositAmount);\nawait f.Collateral2.contract.setVariable(\"_allowances\", {\n    [user.address]: {\n        [hre.Diamond.address]: f.depositAmount,\n        [Receiver.address]: f.depositAmount\n    }\n});\nawait Receiver.testDepositAlternate(f.Collateral.address, deposits, f.Collateral2.address);\nconst secondCollateralDeposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral2.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "d6654f02-6984-43a9-943e-db005fb9aef0",
                      "parentUUID": "e406b2e1-b00e-4dc0-b020-cc7b99fcba27",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2aef81e6-0288-47fd-b56d-14fe14eabfc6",
                    "eabee98e-23ce-4890-9784-90a4d9c076aa",
                    "d0c26cd3-1891-4ae8-afea-eaaf9ff10129",
                    "a1c86a2e-4733-4aad-bb7c-aca7c8082cdf",
                    "d6654f02-6984-43a9-943e-db005fb9aef0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4314,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "cdf3a436-4027-470c-b8a6-4a21bc5da00a",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 0)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 0)).to.be.revertedWith(Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "61b05396-dfd6-47de-bb36-6ec561ed7a6a",
                      "parentUUID": "cdf3a436-4027-470c-b8a6-4a21bc5da00a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 222,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.revokeRole(_testutils.Role.MANAGER, f.Receiver.address);\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 10000)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 10000)).to.be.revertedWith(\n            //     `AccessControl: account ${f.Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`,\n            // );",
                      "err": {},
                      "uuid": "77c935dd-bb48-4765-8bc0-6189efc9d648",
                      "parentUUID": "cdf3a436-4027-470c-b8a6-4a21bc5da00a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 882,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "30833739-eea3-4603-b56b-76c18f2b1e79",
                      "parentUUID": "cdf3a436-4027-470c-b8a6-4a21bc5da00a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 926,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "4ec05c96-442a-4f61-89a2-c26a6437e4e2",
                      "parentUUID": "cdf3a436-4027-470c-b8a6-4a21bc5da00a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "61b05396-dfd6-47de-bb36-6ec561ed7a6a",
                    "77c935dd-bb48-4765-8bc0-6189efc9d648",
                    "30833739-eea3-4603-b56b-76c18f2b1e79",
                    "4ec05c96-442a-4f61-89a2-c26a6437e4e2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2144,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "a5d89c19-6613-4ed9-a9db-4ce775bc17fb",
          "title": "Oracles",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-oracles.ts",
          "file": "/src/test/oracle/00-oracles.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Oracles\"",
              "fullTitle": "Oracles \"before each\" hook in \"Oracles\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.defaultFixture)();\n// Deploy one price feed\n[, [user]] = f.users;\nthis.deployer = await hre.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await hre.ethers.getNamedSigner(\"userOne\");\nmockSequencerUptimeFeed = await (await hre.ethers.getContractFactory(\"MockSequencerUptimeFeed\")).deploy();\nf.Collateral.setPrice(10);",
              "err": {},
              "uuid": "e2a03542-8740-45e5-9130-da2509da9d11",
              "parentUUID": "a5d89c19-6613-4ed9-a9db-4ce775bc17fb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cd0a46d9-a646-490e-a07e-452d17fc27fa",
              "title": "Redstone",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-oracles.ts",
              "file": "/src/test/oracle/00-oracles.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct setup",
                  "fullTitle": "Oracles Redstone should have correct setup",
                  "timedOut": false,
                  "duration": 192,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check initial conditions\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralValue(user.address)).to.equal((0, _lib.toBig)(10000, 8), \"collateral value should be $10\");",
                  "err": {},
                  "uuid": "2a0c1833-b392-496f-92f4-ddf1c798c269",
                  "parentUUID": "cd0a46d9-a646-490e-a07e-452d17fc27fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Oracles Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nf.Collateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _lib.toBig)(redstoneCollateralPrice, 8)), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "f58e7184-c382-447d-ab21-894b0bf03532",
                  "parentUUID": "cd0a46d9-a646-490e-a07e-452d17fc27fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get primary price when price +- oracleDeviationPct of reference price ",
                  "fullTitle": "Oracles Redstone should get primary price when price +- oracleDeviationPct of reference price ",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.Collateral.setOracleOrder([\n    _oracles.OracleType.Redstone,\n    _oracles.OracleType.Chainlink\n]);\n/// set chainlink price to 12\nf.Collateral.setPrice(12);\n/// set redstone price to 11\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _lib.toBig)(redstoneCollateralPrice, 8)), \"collateral value should be $11\");",
                  "err": {},
                  "uuid": "dd25cfc7-a3eb-44b1-ac66-c38643ba60a8",
                  "parentUUID": "cd0a46d9-a646-490e-a07e-452d17fc27fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Oracles Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nf.Collateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n// should revert if price deviates more than oracleDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountCollateralValue(user.address)).to.be.revertedWith(_test.Error.ORACLE_PRICE_UNSTABLE);\nf.Collateral.setPrice(10);",
                  "err": {},
                  "uuid": "b4d23dfe-b5ed-44a2-907c-174dcc2bf97e",
                  "parentUUID": "cd0a46d9-a646-490e-a07e-452d17fc27fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return redstone price if sequencer is down",
                  "fullTitle": "Oracles Redstone should return redstone price if sequencer is down",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 5\nf.Collateral.setPrice(5);\nconst redstoneCollateralPrice = 200;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n/// set sequencer uptime feed address\nawait redstoneDiamond.updateSequencerUptimeFeed(mockSequencerUptimeFeed.address);\n// should return redstone price if sequencer is down\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(user.address)).to.be.equal(f.depositAmount.wadMul((0, _lib.toBig)(redstoneCollateralPrice, 8)), \"collateral value should be $200\");\nf.Collateral.setPrice(10);",
                  "err": {},
                  "uuid": "0044ad70-3f42-4bd7-8eb6-31e3967f8c9a",
                  "parentUUID": "cd0a46d9-a646-490e-a07e-452d17fc27fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a0c1833-b392-496f-92f4-ddf1c798c269",
                "f58e7184-c382-447d-ab21-894b0bf03532",
                "dd25cfc7-a3eb-44b1-ac66-c38643ba60a8",
                "b4d23dfe-b5ed-44a2-907c-174dcc2bf97e",
                "0044ad70-3f42-4bd7-8eb6-31e3967f8c9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 862,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "b22768ad-d5a6-4281-8d53-1cc89a26cba8",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.defaultFixture)();\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer , devTwo , extOne , extTwo , devOne  } = await hre.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
              "uuid": "a28b5633-5b71-413e-b1a4-82ffe99f0602",
              "parentUUID": "b22768ad-d5a6-4281-8d53-1cc89a26cba8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4aa42e95-532e-4901-8065-7dfb40e21a83",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"setSafetyStateSet\", [\n    true\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst safetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "cfbc96c1-010b-4105-9805-fc1e059b0a78",
                  "parentUUID": "4aa42e95-532e-4901-8065-7dfb40e21a83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfbc96c1-010b-4105-9805-fc1e059b0a78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 214,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "169e96d7-d90f-402f-b746-b31eb1af1177",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "e8d50db5-ee9a-4308-a43f-ef4d8517b39f",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "d9c4c5ad-2155-4850-a7ae-3419d77c2099",
                      "parentUUID": "e8d50db5-ee9a-4308-a43f-ef4d8517b39f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "d804ff01-7a82-42b3-b487-f872611f8a56",
                      "parentUUID": "e8d50db5-ee9a-4308-a43f-ef4d8517b39f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 125,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "bfda075e-3947-4398-83c3-f1bda18c6290",
                      "parentUUID": "e8d50db5-ee9a-4308-a43f-ef4d8517b39f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 325,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.revertedWith(\"\");\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "a2ba582f-4fa9-432b-975f-9d486a4c79bd",
                      "parentUUID": "e8d50db5-ee9a-4308-a43f-ef4d8517b39f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d9c4c5ad-2155-4850-a7ae-3419d77c2099",
                    "d804ff01-7a82-42b3-b487-f872611f8a56",
                    "bfda075e-3947-4398-83c3-f1bda18c6290",
                    "a2ba582f-4fa9-432b-975f-9d486a4c79bd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 688,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "ab8f45df-7448-46b9-8508-143c48650876",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 139,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "9c4dcd11-d16d-4b8a-8f2e-a30883dfccee",
                      "parentUUID": "ab8f45df-7448-46b9-8508-143c48650876",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 125,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.KrAsset.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), f.KrAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "1c7ecb4d-76eb-4ee2-a497-f908b65bc843",
                      "parentUUID": "ab8f45df-7448-46b9-8508-143c48650876",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 123,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hre.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        randomAddr\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n])).to.be.revertedWith(\"\");\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "0f5fa58f-b21c-4d84-9f75-fdbecaf2138c",
                      "parentUUID": "ab8f45df-7448-46b9-8508-143c48650876",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9c4dcd11-d16d-4b8a-8f2e-a30883dfccee",
                    "1c7ecb4d-76eb-4ee2-a497-f908b65bc843",
                    "0f5fa58f-b21c-4d84-9f75-fdbecaf2138c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 387,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "980864d8-0509-4f29-b0fe-ae3a6ac4da2c",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 124,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "ce7fcf6c-54d3-42ff-817f-47ae631464f3",
                      "parentUUID": "980864d8-0509-4f29-b0fe-ae3a6ac4da2c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed",
                      "timedOut": false,
                      "duration": 132,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await hre.ethers.provider.getBlockNumber();\nconst blockBefore = await hre.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, _chai.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait hre.ethers.provider.send(\"evm_increaseTime\", [\n    sevenDays\n]);\nawait hre.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await hre.ethers.provider.getBlockNumber();\nconst blockAfter = await hre.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, _chai.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, _chai.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, _chai.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n            // NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "f34fe627-4c82-434d-a6bb-1f83f999a85d",
                      "parentUUID": "980864d8-0509-4f29-b0fe-ae3a6ac4da2c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ce7fcf6c-54d3-42ff-817f-47ae631464f3",
                    "f34fe627-4c82-434d-a6bb-1f83f999a85d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 256,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "ed8540d4-ff2f-4322-8deb-d71cdf45c271",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 452,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "2c5efbd9-7839-4041-ac0e-4eb1e7130654",
                      "parentUUID": "ed8540d4-ff2f-4322-8deb-d71cdf45c271",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 243,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "c944e797-741c-415e-9c39-192a1da17990",
                      "parentUUID": "ed8540d4-ff2f-4322-8deb-d71cdf45c271",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 249,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "bf9158e8-228f-4192-abe3-16ca1650b002",
                      "parentUUID": "ed8540d4-ff2f-4322-8deb-d71cdf45c271",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 444,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "0bffc78b-b04b-419e-89ff-7661a50f75c4",
                      "parentUUID": "ed8540d4-ff2f-4322-8deb-d71cdf45c271",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 251,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "bfd9c024-9b6e-4873-9d12-84e57c19254a",
                      "parentUUID": "ed8540d4-ff2f-4322-8deb-d71cdf45c271",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2c5efbd9-7839-4041-ac0e-4eb1e7130654",
                    "c944e797-741c-415e-9c39-192a1da17990",
                    "bf9158e8-228f-4192-abe3-16ca1650b002",
                    "0bffc78b-b04b-419e-89ff-7661a50f75c4",
                    "bfd9c024-9b6e-4873-9d12-84e57c19254a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1639,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "6651df4f-7fcc-4069-b518-04d8793854b7",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"SafetyStateChange\");\n(0, _chai.expect)(event.action).to.equal(_testutils.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(f.Collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(hre.ethers.utils.keccak256(hre.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "6deb8cc5-5183-4c82-a2ac-689368729dae",
                      "parentUUID": "6651df4f-7fcc-4069-b518-04d8793854b7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6deb8cc5-5183-4c82-a2ac-689368729dae"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 28,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "73cb752d-b8f9-4eae-b54f-267ef9b0f202",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.scdpFixture)({\n    krAssets: createAssets,\n    collaterals: createCollaterals,\n    swapKISSConfig,\n    defaultCollateralConfig,\n    defaultKrAssetConfig,\n    swapKrAssetConfig\n});\n[[swapper, KreskoSwapper], [depositor, KreskoDepositor], [depositor2, KreskoDepositor2], [, KreskoLiquidator]] = f.users;",
              "err": {},
              "uuid": "4045be2e-3370-4e10-a7c5-34709b381fa9",
              "parentUUID": "73cb752d-b8f9-4eae-b54f-267ef9b0f202",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6d144f65-f62f-4559-9ed0-e942594974a6",
              "title": "#Test",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Test\"",
                  "fullTitle": "SCDP #Test \"before each\" hook in \"#Test\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.reset();",
                  "err": {},
                  "uuid": "fd519b16-a412-4641-9cc5-fb20e9a1addf",
                  "parentUUID": "6d144f65-f62f-4559-9ed0-e942594974a6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                  "title": "#Configuration",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be initialized correctly",
                      "fullTitle": "SCDP #Test #Configuration should be initialized correctly",
                      "timedOut": false,
                      "duration": 1388,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { args  } = await (0, _shared.getSCDPInitializer)(_hardhat.default);\nconst configuration = await _hardhat.default.Diamond.getCurrentParametersSCDP();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.lt).to.equal(args.lt);\n(0, _chai.expect)(configuration.mcr).to.equal(args.mcr);\nconst collaterals = await _hardhat.default.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst depositsEnabled = await Promise.all([\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset2.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(depositsEnabled).to.deep.equal([\n    true,\n    true,\n    false,\n    false,\n    false\n]);\nconst depositAssets = await _hardhat.default.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral8Dec.address\n]);\nconst assetsEnabled = await Promise.all([\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset2.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(assetsEnabled).to.deep.equal([\n    true,\n    true,\n    true,\n    true,\n    true\n]);",
                      "err": {},
                      "uuid": "b38aae46-8b74-4efe-bf1e-6f577f998bc2",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to whitelist new deposit asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to whitelist new deposit asset",
                      "timedOut": false,
                      "duration": 304,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nconst collateral = await _hardhat.default.Diamond.getCollateralSCDP(f.KISS.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.KISS.contract.decimals());\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(defaultCollateralConfig.depositLimit);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(true);",
                      "err": {},
                      "uuid": "0c2aa4cd-59cc-4b70-9e16-c7d77212c80b",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to update deposit limit of asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to update deposit limit of asset",
                      "timedOut": false,
                      "duration": 200,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.updateDepositLimitSCDP(f.Collateral.address, 1);\nconst collateral = await _hardhat.default.Diamond.getCollateralSCDP(f.Collateral.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.Collateral.contract.decimals());\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(1);",
                      "err": {},
                      "uuid": "04061950-86ae-44af-84d1-ac76a3111a3f",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable a deposit asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable a deposit asset",
                      "timedOut": false,
                      "duration": 493,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.disableAssetsSCDP([\n    f.Collateral.address\n], true);\nconst collaterals = await _hardhat.default.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.Collateral.address);\nconst depositAssets = await _hardhat.default.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                      "err": {},
                      "uuid": "72990893-cb1a-4b5a-b674-c0b320c61ac1",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable and enable a collateral asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable and enable a collateral asset",
                      "timedOut": false,
                      "duration": 1245,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.disableAssetsSCDP([\n    f.Collateral.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait _hardhat.default.Diamond.enableAssetsSCDP([\n    f.Collateral.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait _hardhat.default.Diamond.enableAssetsSCDP([\n    f.Collateral.address\n], true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);",
                      "err": {},
                      "uuid": "98c3d3d2-daa8-4a78-ab68-8bd13b701f4f",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to remove a collateral asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to remove a collateral asset",
                      "timedOut": false,
                      "duration": 393,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.removeCollateralsSCDP([\n    f.Collateral.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(collaterals).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                      "err": {},
                      "uuid": "f3a41b1c-db50-47d8-a39b-775f7e55fd94",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to add whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to add whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 197,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const assetInfo = await _hardhat.default.Diamond.getKreskoAssetSCDP(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.openFee).to.equal(swapKrAssetConfig.openFee);\n(0, _chai.expect)(assetInfo.closeFee).to.equal(swapKrAssetConfig.closeFee);\n(0, _chai.expect)(assetInfo.liquidationIncentive).to.equal(swapKrAssetConfig.liquidationIncentive);\n(0, _chai.expect)(assetInfo.protocolFee).to.equal(swapKrAssetConfig.protocolFee);\n(0, _chai.expect)(assetInfo.supplyLimit).to.equal(swapKrAssetConfig.supplyLimit);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(true);",
                      "err": {},
                      "uuid": "a7c4a329-0b34-4036-9c09-e09cd7b8e889",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to update a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to update a whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 588,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const update = {\n    openFee: (0, _lib.toBig)(0.05),\n    closeFee: (0, _lib.toBig)(0.05),\n    liquidationIncentive: (0, _lib.toBig)(1.06),\n    protocolFee: (0, _lib.toBig)(0.4),\n    supplyLimit: (0, _lib.toBig)(50000)\n};\nawait _hardhat.default.Diamond.updateKrAssetSCDP(f.KrAsset.address, update);\nconst assetInfo = await _hardhat.default.Diamond.getKreskoAssetSCDP(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.openFee).to.equal(update.openFee);\n(0, _chai.expect)(assetInfo.closeFee).to.equal(update.closeFee);\n(0, _chai.expect)(assetInfo.protocolFee).to.equal(update.protocolFee);\n(0, _chai.expect)(assetInfo.liquidationIncentive).to.equal(update.liquidationIncentive);\n(0, _chai.expect)(assetInfo.supplyLimit).to.equal(update.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include(f.KrAsset.address);\nconst collaterals = await _hardhat.default.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.KrAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
                      "uuid": "01fe1b55-5c68-4be0-ac0b-b3aebacd371b",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable a whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 293,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KrAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
                      "uuid": "8b7b2ce5-8cb0-453d-a52b-59f7b810b0e1",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to remove a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to remove a whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 393,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.removeKrAssetsSCDP([\n    f.KrAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.not.include(f.KrAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
                      "uuid": "8e4a9db5-389c-466a-a1ff-fb8ab74d3316",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable and enable a collateral asset that is also a kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable and enable a collateral asset that is also a kresko asset",
                      "timedOut": false,
                      "duration": 1286,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KISS.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.not.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KISS.address);\nawait _hardhat.default.Diamond.enableAssetsSCDP([\n    f.KISS.address\n], true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KISS.address);",
                      "err": {},
                      "uuid": "8defc9a1-ce2c-49e0-ad60-b125ec0afe29",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to enable and disable swap pairs",
                      "fullTitle": "SCDP #Test #Configuration should be able to enable and disable swap pairs",
                      "timedOut": false,
                      "duration": 583,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapPairsEnabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: true\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: false\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(false);",
                      "err": {},
                      "uuid": "43cb6fa4-6c22-49df-8c5b-9da184755e65",
                      "parentUUID": "a021d364-6607-44fa-9bbb-a84d77ac8459",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b38aae46-8b74-4efe-bf1e-6f577f998bc2",
                    "0c2aa4cd-59cc-4b70-9e16-c7d77212c80b",
                    "04061950-86ae-44af-84d1-ac76a3111a3f",
                    "72990893-cb1a-4b5a-b674-c0b320c61ac1",
                    "98c3d3d2-daa8-4a78-ab68-8bd13b701f4f",
                    "f3a41b1c-db50-47d8-a39b-775f7e55fd94",
                    "a7c4a329-0b34-4036-9c09-e09cd7b8e889",
                    "01fe1b55-5c68-4be0-ac0b-b3aebacd371b",
                    "8b7b2ce5-8cb0-453d-a52b-59f7b810b0e1",
                    "8e4a9db5-389c-466a-a1ff-fb8ab74d3316",
                    "8defc9a1-ce2c-49e0-ad60-b125ec0afe29",
                    "43cb6fa4-6c22-49df-8c5b-9da184755e65"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7363,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "6bc7f692-fee0-439d-94cd-d376d5708796",
                  "title": "#Deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to deposit collateral, calculate correct deposit values",
                      "fullTitle": "SCDP #Test #Deposit should be able to deposit collateral, calculate correct deposit values",
                      "timedOut": false,
                      "duration": 5736,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nawait Promise.all(f.usersArr.map((user)=>{\n    return (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user).depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n}));\nconst [userInfos, statistics, assetInfo] = await Promise.all([\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((user)=>user.address), [\n        f.Collateral.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\nfor (const userInfo of userInfos){\n    const balance = await f.Collateral.balanceOf(userInfo.account);\n    (0, _chai.expect)(balance).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmountWithFees).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.totalDepositValueWithFees).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].depositValueWithFees).to.equal(expectedValueUnadjusted);\n}\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValue).to.equal(0);\n// Adjusted\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(expectedValueAdjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValueAdjusted).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.effectiveDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.cr).to.equal(0);",
                      "err": {},
                      "uuid": "7f4f6ac7-2720-4215-b288-70d2ba7147be",
                      "parentUUID": "6bc7f692-fee0-439d-94cd-d376d5708796",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to deposit multiple collaterals, calculate correct deposit values",
                      "fullTitle": "SCDP #Test #Deposit should be able to deposit multiple collaterals, calculate correct deposit values",
                      "timedOut": false,
                      "duration": 5820,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const User = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    return Promise.all([\n        User.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        User.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec);\n    (0, _chai.expect)(userInfo.deposits[1].depositValue).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n}\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfos[1].depositAmount).to.equal(depositAmount8Dec.mul(f.usersArr.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(f.usersArr.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(f.usersArr.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.equal(valueTotalAdjusted8Dec);\n(0, _chai.expect)(globals.collateralValueAdjusted).to.equal(valueAdjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(f.usersArr.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(f.usersArr.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(globals.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
                      "uuid": "a60ebacc-9878-4d8c-b9e1-261cc0853620",
                      "parentUUID": "6bc7f692-fee0-439d-94cd-d376d5708796",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7f4f6ac7-2720-4215-b288-70d2ba7147be",
                    "a60ebacc-9878-4d8c-b9e1-261cc0853620"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11556,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "d8ac888c-2b51-4584-8805-a36a09d6a01a",
                  "title": "#Withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Withdraw\"",
                      "fullTitle": "SCDP #Test #Withdraw \"before each\" hook in \"#Withdraw\"",
                      "timedOut": false,
                      "duration": 689,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user);\n    await Promise.all([\n        UserKresko.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));",
                      "err": {},
                      "uuid": "a2a3b1f6-61c8-4836-8df6-ed6eaca97d84",
                      "parentUUID": "d8ac888c-2b51-4584-8805-a36a09d6a01a",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to withdraw full collateral of multiple assets",
                      "fullTitle": "SCDP #Test #Withdraw should be able to withdraw full collateral of multiple assets",
                      "timedOut": false,
                      "duration": 10987,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(0);\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(await f.Collateral.balanceOf(userInfo.account)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmountWithFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmountWithFees).to.equal(0);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(0);\n}\nfor (const assetInfo of assetInfos){\n    (0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n    (0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n    (0, _chai.expect)(assetInfo.swapDeposits).to.equal(0);\n}\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
                      "uuid": "db51b67b-8aac-4b82-94d6-f1b09c399809",
                      "parentUUID": "d8ac888c-2b51-4584-8805-a36a09d6a01a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw partial collateral of multiple assets",
                      "fullTitle": "SCDP #Test #Withdraw should be able to withdraw partial collateral of multiple assets",
                      "timedOut": false,
                      "duration": 10577,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const partialWithdraw = depositAmount18Dec.div(f.usersArr.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(f.usersArr.length);\nconst expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice * 1 * depositAmount, 8).mul(200).div(300); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8).mul(200).div(300); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, partialWithdraw),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, partialWithdraw8Dec)\n    ]);\n}));\nconst [collateralBalanceAfter, collateral8DecBalanceAfter, globals, assetInfos, userInfos] = await Promise.all([\n    f.Collateral.balanceOf(_hardhat.default.Diamond.address),\n    f.Collateral8Dec.balanceOf(_hardhat.default.Diamond.address),\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ])\n]);\nfor (const userInfo of userInfos){\n    const [balance18Dec, balance8Dec] = await Promise.all([\n        f.Collateral.balanceOf(userInfo.account),\n        f.Collateral8Dec.balanceOf(userInfo.account)\n    ]);\n    (0, _chai.expect)(balance18Dec).to.equal(partialWithdraw);\n    (0, _chai.expect)(balance8Dec).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[0].depositAmountWithFees).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.deposits[1].depositAmountWithFees).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.totalDepositValue).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(collateralBalanceAfter).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(collateral8DecBalanceAfter).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositAmount).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(assetInfos[1].depositAmount).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositValue).to.closeTo(expectedValueUnadjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.closeTo(expectedValueAdjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValue).to.closeTo(expectedValueUnadjusted8Dec.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.closeTo(expectedValueAdjusted8Dec.mul(f.usersArr.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(f.usersArr.length).add(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(globals.collateralValue).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
                      "uuid": "97c513f7-0d57-4c35-98e9-3c018bbae3bc",
                      "parentUUID": "d8ac888c-2b51-4584-8805-a36a09d6a01a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "db51b67b-8aac-4b82-94d6-f1b09c399809",
                    "97c513f7-0d57-4c35-98e9-3c018bbae3bc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 21564,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "28d6087d-6838-48a8-b1eb-8aca7d415031",
                  "title": "#Fee Distribution",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Fee Distribution\"",
                      "fullTitle": "SCDP #Test #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                      "timedOut": false,
                      "duration": 41,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "incomeCumulator = _hardhat.default.users.admin;\nIncomeCumulator = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, incomeCumulator);\nawait f.Collateral.setBalance(incomeCumulator, depositAmount18Dec.mul(f.usersArr.length), _hardhat.default.Diamond.address);",
                      "err": {},
                      "uuid": "4c169d41-7a32-4178-8600-ae331b909078",
                      "parentUUID": "28d6087d-6838-48a8-b1eb-8aca7d415031",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to cumulate fees into deposits",
                      "fullTitle": "SCDP #Test #Fee Distribution should be able to cumulate fees into deposits",
                      "timedOut": false,
                      "duration": 17627,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const fees = depositAmount18Dec.mul(f.usersArr.length);\nconst expectedValueNoFees = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\n// deposit some\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(_hardhat.default.Diamond, signer).depositSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\n// cumulate some income\nawait IncomeCumulator.cumulateIncomeSCDP(f.Collateral.address, fees);\n// check that the fees are cumulated\nfor (const data of (await _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.deposits[0].depositValueWithFees).to.equal(expectedValueFees);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.totalDepositValueWithFees).to.equal(expectedValueFees);\n}\n// withdraw principal\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(_hardhat.default.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\nfor (const user of (await _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(user.account);\n    (0, _chai.expect)(user.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(user.deposits[0].depositValueWithFees).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalDepositValueWithFees).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec);\n}\nconst [assetInfo, stats, balance] = await Promise.all([\n    _hardhat.default.Diamond.getAssetInfoSCDP(f.Collateral.address),\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    f.Collateral.balanceOf(_hardhat.default.Diamond.address)\n]);\n(0, _chai.expect)(balance).to.equal(fees);\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(0);\n(0, _chai.expect)(stats.collateralValue).to.equal(0);\n// Withdraw fees\nawait Promise.all(f.usersArr.map((signer)=>{\n    return (0, _redstone.wrapKresko)(_hardhat.default.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec);\n}));\nfor (const data of (await _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(data.account);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(data.deposits[0].depositValueWithFees).to.equal(0);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(data.totalDepositValueWithFees).to.equal(0);\n}\n// nothing left in protocol.\nconst [colalteralBalanceKresko, assetInfoFinal] = await Promise.all([\n    f.Collateral.balanceOf(_hardhat.default.Diamond.address),\n    _hardhat.default.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\n(0, _chai.expect)(colalteralBalanceKresko).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValueAdjusted).to.equal(0);",
                      "err": {},
                      "uuid": "d21dc99d-ebb3-415b-b0b2-671c8501c91d",
                      "parentUUID": "28d6087d-6838-48a8-b1eb-8aca7d415031",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d21dc99d-ebb3-415b-b0b2-671c8501c91d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 17627,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "7c98c685-872c-42a3-b69a-70206a4906db",
                  "title": "#Swap",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Swap\"",
                      "fullTitle": "SCDP #Test #Swap \"before each\" hook in \"#Swap\"",
                      "timedOut": false,
                      "duration": 378,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// mint some f.KISS for users\nawait _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _lib.toBig)(1000000))));\nawait f.KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait f.KISS.setBalance(depositor, (0, _lib.toBig)(10000));\nawait KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, depositAmount18Dec);",
                      "err": {},
                      "uuid": "90c30623-b393-4e09-9cd0-9589226ed410",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should have collateral in pool",
                      "fullTitle": "SCDP #Test #Swap should have collateral in pool",
                      "timedOut": false,
                      "duration": 1213,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const value = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(value.collateralValue).to.equal((0, _lib.toBig)(depositAmount, 8));\n(0, _chai.expect)(value.debtValue).to.equal(0);\n(0, _chai.expect)(value.cr).to.equal(0);",
                      "err": {},
                      "uuid": "ef9c86ef-35a7-4d8e-a19e-255fc54a5bff",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to preview a swap",
                      "fullTitle": "SCDP #Test #Swap should be able to preview a swap",
                      "timedOut": false,
                      "duration": 299,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD);\nconst assetInPrice = (0, _lib.toBig)(ONE_USD, 8);\nconst assetOutPrice = (0, _lib.toBig)(KreskoAsset2Price, 8);\nconst feePercentage = (0, _lib.toBig)(0.015 + 0.025);\nconst feePercentageProtocol = (0, _lib.toBig)(0.5);\nconst expectedTotalFee = swapAmount.wadMul(feePercentage);\nconst expectedProtocolFee = expectedTotalFee.wadMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(assetInPrice).wadDiv(assetOutPrice);\nconst [amountOut, feeAmount, feeAmountProtocol] = await _hardhat.default.Diamond.previewSwapSCDP(f.KISS.address, f.KrAsset2.address, (0, _lib.toBig)(1));\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                      "err": {},
                      "uuid": "bc05f63f-b080-4b58-b687-059ea4782886",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt == 0 | swap collateral == 0 upgraded",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt == 0 | swap collateral == 0 upgraded",
                      "timedOut": false,
                      "duration": 4713,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOut = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\nconst [KR2Balance, KISSBalance, swapperInfo, assetInfos, global] = await Promise.all([\n    f.KrAsset2.balanceOf(swapper.address),\n    f.KISS.balanceOf(swapper.address),\n    _hardhat.default.Diamond.getAccountInfoSCDP(swapper.address, [\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(KR2Balance).to.equal(expectedAmountOut);\n(0, _chai.expect)(KISSBalance).to.equal((0, _lib.toBig)(10000).sub(swapAmount));\n(0, _chai.expect)(swapperInfo.deposits[0].depositValue).to.equal(0);\n(0, _chai.expect)(swapperInfo.deposits[1].depositValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal((0, _lib.toBig)(0.96));\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal((0, _lib.toBig)(0.0096));\nconst expectedDepositValue = (0, _lib.toBig)(depositAmount + 0.96, 8);\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(global.collateralValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(global.debtValue).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(global.cr).to.equal(expectedDepositValue.wadDiv((0, _lib.toBig)(0.96, 8)));",
                      "err": {},
                      "uuid": "be5da7f7-6afc-49aa-a709-14a161917d33",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                      "timedOut": false,
                      "duration": 7183,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountAsset = (0, _lib.toBig)(0.96); // $96\nconst expectedKissOut = (0, _lib.toBig)(92.16); // $100 * 0.96 = $96\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: f.KISS,\n    amount: (0, _lib.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: f.KrAsset2,\n    amount: (0, _lib.toBig)(0.1)\n});\nconst globalBefore = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(globalBefore.collateralValue).to.equal(initialDepositValue);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountAsset, 0);\nconst [event, assetInfos] = await Promise.all([\n    (0, _lib.getNamedEvent)(tx, \"Swap\"),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ])\n]);\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(initialDepositValue);\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\nconst global = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(1000, 8));\n(0, _chai.expect)(global.debtValue).to.equal(0);\n(0, _chai.expect)(global.cr).to.equal(0);",
                      "err": {},
                      "uuid": "0038fa6b-ebb7-4834-9918-d014ab60abcb",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                      "timedOut": false,
                      "duration": 5528,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst assetInfoKISS = await _hardhat.default.Diamond.getAssetInfoSCDP(f.KISS.address);\n(0, _chai.expect)(assetInfoKISS.depositValue).to.equal((0, _lib.toBig)(depositAmount + 0.96, 8));\nconst expectedSwapDeposits = (0, _lib.toBig)(0.96);\n(0, _chai.expect)(assetInfoKISS.swapDeposits).to.equal(expectedSwapDeposits);\nconst swapAmountSecond = (0, _lib.toBig)(0.009); // this is $0.90, so less than $0.96 since we want to ensure shared debt > assetsIn | swap collateral > assetsOut\nconst expectedKissOut = (0, _lib.toBig)(0.864); // 0.9 - (0.9 * 0.04) = 0.864\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountSecond, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountSecond);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst [depositValueKR2, depositValueKISS, assetInfos, globals] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueSCDP(swapper.address, f.KrAsset2.address),\n    KreskoSwapper.getAccountDepositValueSCDP(swapper.address, f.KISS.address),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(depositValueKR2).to.equal(0);\n(0, _chai.expect)(depositValueKISS).to.equal(0);\nconst expectedSwapDepositsAfter = expectedSwapDeposits.sub((0, _lib.toBig)(0.9));\nconst expectedSwapDepositsValue = expectedSwapDepositsAfter.wadMul(assetInfoKISS.assetPrice);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(expectedSwapDepositsAfter);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal((0, _lib.toBig)(depositAmount, 8).add(expectedSwapDepositsValue));\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(expectedSwapDepositsValue);\nconst expectedDebtAfter = expectedSwapDepositsValue.wadDiv(await f.KrAsset2.getPrice());\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(expectedDebtAfter);\nconst expectedCollateralValue = (0, _lib.toBig)(depositAmount + 0.06, 8);\n(0, _chai.expect)(globals.collateralValue).to.equal(expectedCollateralValue); // swap deposits + collateral deposited\n(0, _chai.expect)(globals.debtValue).to.equal(0.06e8); //\n(0, _chai.expect)(globals.cr).to.equal(expectedCollateralValue.wadDiv((0, _lib.toBig)(0.06, 8)));",
                      "err": {},
                      "uuid": "02cb3e96-3e80-46e7-be3b-7e4b02b6de5b",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                      "timedOut": false,
                      "duration": 8422,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmountKiss = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountKrAsset = (0, _lib.toBig)(2); // $200\nconst swapValue = 200;\nconst expectedKissOut = (0, _lib.toBig)(192); // $200 * 0.96 = $192\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: f.KISS,\n    amount: (0, _lib.toBig)(400)\n});\nconst ICDPMintAmount = (0, _lib.toBig)(1.04);\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: f.KrAsset2,\n    amount: ICDPMintAmount\n});\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmountKiss, 0);\nconst stats = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(await KreskoSwapper.getSwapDepositsSCDP(f.KISS.address)).to.equal((0, _lib.toBig)(96));\n(0, _chai.expect)(stats.collateralValue).to.be.eq((0, _lib.toBig)(depositAmount + 96, 8));\n// the swap that matters, here user has 0.96 (previous swap) + 1.04 (mint). expecting 192 kiss from swap.\nconst [expectedAmountOut] = await KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmountKrAsset);\n(0, _chai.expect)(expectedAmountOut).to.equal(expectedKissOut);\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst assetInfos = await _hardhat.default.Diamond.getAssetInfosSCDP([\n    f.KISS.address,\n    f.KrAsset2.address\n]);\n// f.KISS deposits sent in swap\nconst acocuntPrincipalDepositsKISS = await KreskoSwapper.getAccountDepositSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0); // half of 2 krAsset\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(acocuntPrincipalDepositsKISS);\n// KrAsset debt is cleared\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\n// f.KISS debt is issued\nconst expectedKissDebtValue = (0, _lib.toBig)(swapValue - 96, 8);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal((0, _lib.toBig)(swapValue - 96));\n// krAsset swap deposits\nconst expectedSwapDepositValue = (0, _lib.toBig)(swapValue - 96, 8);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal((0, _lib.toBig)(2 - 0.96));\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedSwapDepositValue); // asset price is $100\nconst global = await _hardhat.default.Diamond.getStatisticsSCDP();\nconst expectedCollateralValue = (0, _lib.toBig)(1000, 8).add(expectedSwapDepositValue);\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedKissDebtValue));",
                      "err": {},
                      "uuid": "aa592542-dca2-4ba3-a2ea-38c06e5eab73",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cumulates fees on swap",
                      "fullTitle": "SCDP #Test #Swap cumulates fees on swap",
                      "timedOut": false,
                      "duration": 6768,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const depositAmountNew = (0, _lib.toBig)(10000 - depositAmount);\nawait f.KISS.setBalance(depositor, depositAmountNew);\nawait KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, depositAmountNew);\nconst swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst balFeesBefore = await KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst balFeesAfterFirst = await KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(balFeesAfterFirst).to.gt(balFeesBefore);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, f.KrAsset2.balanceOf(swapper.address), 0);\nconst balFeesAfterSecond = await KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(balFeesAfterSecond).to.gt(balFeesAfterFirst);\nconst feesBefore = await KreskoSwapper.getAccountDepositFeesGainedSCDP(depositor.address, f.KISS.address);\nawait KreskoDepositor.withdrawSCDP(depositor.address, f.KISS.address, feesBefore);\nconst [feesAfterThird, feesAfter] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address),\n    KreskoSwapper.getAccountDepositFeesGainedSCDP(depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(feesBefore).to.eq(feesAfter);\n(0, _chai.expect)(feesAfterThird).to.eq(10000e8);\nawait KreskoDepositor.withdrawSCDP(depositor.address, f.KISS.address, (0, _lib.toBig)(10000));\nconst [depositsAfterFourth, feesAfterFourth] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueSCDP(depositor.address, f.KISS.address),\n    KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(depositsAfterFourth).to.eq(0);\n(0, _chai.expect)(feesAfterFourth).to.eq(0);",
                      "err": {},
                      "uuid": "a5ba3291-2e8e-4f0a-9628-02191ede3470",
                      "parentUUID": "7c98c685-872c-42a3-b69a-70206a4906db",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ef9c86ef-35a7-4d8e-a19e-255fc54a5bff",
                    "bc05f63f-b080-4b58-b687-059ea4782886",
                    "be5da7f7-6afc-49aa-a709-14a161917d33",
                    "0038fa6b-ebb7-4834-9918-d014ab60abcb",
                    "02cb3e96-3e80-46e7-be3b-7e4b02b6de5b",
                    "aa592542-dca2-4ba3-a2ea-38c06e5eab73",
                    "a5ba3291-2e8e-4f0a-9628-02191ede3470"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 34126,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "bbe63da9-45eb-44c0-a1b8-ae390fe5aec2",
                  "title": "#Liquidations",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Liquidations\"",
                      "fullTitle": "SCDP #Test #Liquidations \"before each\" hook in \"#Liquidations\"",
                      "timedOut": false,
                      "duration": 421,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address,\n    f.KrAsset2.address\n], [\n    defaultCollateralConfig,\n    defaultCollateralConfig\n]);\nfor (const signer of f.usersArr){\n    await f.Collateral.setBalance(signer, (0, _lib.toBig)(1000000));\n}\nawait f.KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait f.KISS.setBalance(depositor2, (0, _lib.toBig)(10000));\nawait Promise.all([\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec),\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral8Dec.address, depositAmount8Dec),\n    KreskoDepositor2.depositSCDP(depositor2.address, f.KISS.address, depositAmount18Dec)\n]);",
                      "err": {},
                      "uuid": "bccaa8a2-5b8f-4376-81d1-5e59b858888d",
                      "parentUUID": "bbe63da9-45eb-44c0-a1b8-ae390fe5aec2",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify if the pool is not underwater",
                      "fullTitle": "SCDP #Test #Liquidations should identify if the pool is not underwater",
                      "timedOut": false,
                      "duration": 2705,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getLiquidatableSCDP()).to.be.false;",
                      "err": {},
                      "uuid": "04662389-3da0-4262-ba86-f3a180bd89b2",
                      "parentUUID": "bbe63da9-45eb-44c0-a1b8-ae390fe5aec2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert liquidations if the pool is not underwater",
                      "fullTitle": "SCDP #Test #Liquidations should revert liquidations if the pool is not underwater",
                      "timedOut": false,
                      "duration": 3659,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getLiquidatableSCDP()).to.be.false;\nawait f.KrAsset2.setBalance(_hardhat.default.users.liquidator, (0, _lib.toBig)(1000000));\nawait (0, _chai.expect)(KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, (0, _lib.toBig)(7.7), f.Collateral8Dec.address)).to.be.revertedWith(\"not-liquidatable\");",
                      "err": {},
                      "uuid": "9f87304d-b9f2-41bd-bad6-80931fa7e24f",
                      "parentUUID": "bbe63da9-45eb-44c0-a1b8-ae390fe5aec2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should identify if the pool is underwater",
                      "fullTitle": "SCDP #Test #Liquidations should identify if the pool is underwater",
                      "timedOut": false,
                      "duration": 3966,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nf.Collateral.setPrice(collateralPrice / 1000);\nf.Collateral8Dec.setPrice(collateralPrice / 1000);\nconst [stats, params, liquidatable] = await Promise.all([\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getCurrentParametersSCDP(),\n    _hardhat.default.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(stats.cr).to.be.lt(params.lt);\n(0, _chai.expect)(liquidatable).to.be.true;",
                      "err": {},
                      "uuid": "3dc5edb1-7c58-423d-91be-f437762ea5c9",
                      "parentUUID": "bbe63da9-45eb-44c0-a1b8-ae390fe5aec2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidating the underwater pool",
                      "fullTitle": "SCDP #Test #Liquidations should allow liquidating the underwater pool",
                      "timedOut": false,
                      "duration": 13114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nf.KrAsset2.setPrice(newKreskoAssetPrice);\nconst [scdpParams, maxLiquidatable, krAssetPrice, statsBefore] = await Promise.all([\n    _hardhat.default.Diamond.getCurrentParametersSCDP(),\n    _hardhat.default.Diamond.getMaxLiqValueSCDP(f.KrAsset2.address, f.Collateral8Dec.address),\n    f.KrAsset2.getPrice(),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\nconst repayAmount = maxLiquidatable.wadDiv(krAssetPrice);\nawait f.KrAsset2.setBalance(_hardhat.default.users.liquidator, repayAmount.add(1e18.toString()));\n(0, _chai.expect)(statsBefore.cr).to.lt(scdpParams.lt);\nconst tx = await KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address);\nconst [statsAfter, liquidatableAfter] = await Promise.all([\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getLiquidatableSCDP()\n]);\n// console.log(\"liq\", (await tx.wait()).gasUsed.toString());\n(0, _chai.expect)(statsAfter.cr).to.gt(scdpParams.lt);\n(0, _chai.expect)(liquidatableAfter).to.equal(false);\nawait (0, _chai.expect)(KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address)).to.be.revertedWith(\"not-liquidatable\");\nconst event = await (0, _lib.getNamedEvent)(tx, \"SCDPLiquidationOccured\");\nconst expectedSeizeAmount = repayAmount.wadMul((0, _lib.toBig)(newKreskoAssetPrice, 8)).wadMul((0, _lib.toBig)(1.05)).wadDiv((0, _lib.toBig)(collateralPrice, 8)).div(10 ** 10);\n(0, _chai.expect)(event.args.liquidator).to.eq(_hardhat.default.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(f.Collateral8Dec.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(f.KrAsset2.address);\nconst expectedDepositsAfter = depositAmount8Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(expectedDepositsAfter).to.be.lt(depositAmount8Dec);\nconst [principalDeposits, depositsWithFees, params] = await Promise.all([\n    _hardhat.default.Diamond.getAccountDepositSCDP(depositor.address, f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getAccountDepositWithFeesSCDP(depositor.address, f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getCurrentParametersSCDP()\n]);\n(0, _chai.expect)(principalDeposits).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(depositsWithFees).to.eq(expectedDepositsAfter);\nawait KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec.mul(10));\nconst stats = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(stats.cr).to.gt(params.mcr);\nawait (0, _chai.expect)(KreskoDepositor.withdrawSCDP(depositor.address, f.Collateral8Dec.address, expectedDepositsAfter)).to.not.be.reverted;\nconst [principalEnd, depositsWithFeesEnd] = await Promise.all([\n    _hardhat.default.Diamond.getAccountDepositSCDP(depositor.address, f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getAccountDepositWithFeesSCDP(depositor.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(principalEnd).to.eq(0);\n(0, _chai.expect)(depositsWithFeesEnd).to.eq(0);",
                      "err": {},
                      "uuid": "9ca7a99f-1a96-427f-8fbc-b494f37c7eef",
                      "parentUUID": "bbe63da9-45eb-44c0-a1b8-ae390fe5aec2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "04662389-3da0-4262-ba86-f3a180bd89b2",
                    "9f87304d-b9f2-41bd-bad6-80931fa7e24f",
                    "3dc5edb1-7c58-423d-91be-f437762ea5c9",
                    "9ca7a99f-1a96-427f-8fbc-b494f37c7eef"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 23444,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                  "title": "#Error",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Error\"",
                      "fullTitle": "SCDP #Test #Error \"before each\" hook in \"#Error\"",
                      "timedOut": false,
                      "duration": 315,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _lib.toBig)(1000000))));\nawait f.KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait f.KISS.setBalance(depositor, _hardhat.ethers.BigNumber.from(1));\nawait _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait Promise.all([\n    KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, 1),\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec)\n]);",
                      "err": {},
                      "uuid": "1829b975-cfad-49ee-beb8-c5f9f55cf0d8",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert depositing unsupported tokens",
                      "fullTitle": "SCDP #Test #Error should revert depositing unsupported tokens",
                      "timedOut": false,
                      "duration": 155,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [UnsupportedToken] = await _hardhat.default.deploy(\"MockERC20\", {\n    args: [\n        \"UnsupportedToken\",\n        \"UnsupportedToken\",\n        18,\n        (0, _lib.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst { deployer  } = await _hardhat.default.getNamedAccounts();\nawait (0, _chai.expect)(_hardhat.default.Diamond.depositSCDP(deployer, UnsupportedToken.address, 1)).to.be.revertedWith(\"deposit-not-enabled\");",
                      "err": {},
                      "uuid": "8086ebdd-dbf4-4d05-9bbf-de4d490abaa6",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawing without deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawing without deposits",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(KreskoSwapper.withdrawSCDP(depositor.address, f.Collateral.address, 1)).to.be.revertedWith(\"withdrawal-violation\");",
                      "err": {},
                      "uuid": "85132aa2-89d2-48e6-bc83-778a576f0a54",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals below MCR",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals below MCR",
                      "timedOut": false,
                      "duration": 2797,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(1000); // $1000\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0); // generate debt\nconst deposits = await KreskoSwapper.getAccountDepositSCDP(depositor.address, f.Collateral.address);\nawait (0, _chai.expect)(KreskoDepositor.withdrawSCDP(depositor.address, f.Collateral.address, deposits)).to.be.revertedWith(\"withdraw-mcr-violation\");",
                      "err": {},
                      "uuid": "249899c5-31fb-4bf7-8c2e-9017f5e26085",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals of swap owned collateral deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals of swap owned collateral deposits",
                      "timedOut": false,
                      "duration": 1745,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nconst deposits = await KreskoSwapper.getSwapDepositsSCDP(f.KrAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(KreskoSwapper.withdrawSCDP(swapper.address, f.KrAsset2.address, deposits)).to.be.revertedWith(\"withdrawal-violation\");",
                      "err": {},
                      "uuid": "7a50d926-e7d0-427c-91ba-2da17eec13c8",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping with price below minAmountOut",
                      "fullTitle": "SCDP #Test #Error should revert swapping with price below minAmountOut",
                      "timedOut": false,
                      "duration": 1033,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nconst [amountOut] = await KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWith(\"swap-slippage\");",
                      "err": {},
                      "uuid": "9951e189-75e7-4b66-b5ac-23438471c352",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping unsupported route",
                      "fullTitle": "SCDP #Test #Error should revert swapping unsupported route",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.Collateral.address, swapAmount, 0)).to.be.revertedWith(\"swap-disabled\");",
                      "err": {},
                      "uuid": "59f488ed-0991-4471-87dc-3e5e515e82cb",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping if asset in is disabled",
                      "fullTitle": "SCDP #Test #Error should revert swapping if asset in is disabled",
                      "timedOut": false,
                      "duration": 199,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset2.address\n], false);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0)).to.be.revertedWith(\"asset-in-disabled\");",
                      "err": {},
                      "uuid": "b24537bb-99fb-46bf-9bde-7e5500ad93b7",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping if asset out is disabled",
                      "fullTitle": "SCDP #Test #Error should revert swapping if asset out is disabled",
                      "timedOut": false,
                      "duration": 198,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset2.address\n], false);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                      "err": {},
                      "uuid": "dea0bade-69df-4d12-9018-f549630a1b4f",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping causes CDP to go below MCR",
                      "fullTitle": "SCDP #Test #Error should revert swapping causes CDP to go below MCR",
                      "timedOut": false,
                      "duration": 1610,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1500000);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nconst tx = KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nawait (0, _chai.expect)(tx).to.be.revertedWith(\"swap-mcr-violation\");",
                      "err": {},
                      "uuid": "617cb24f-d1d1-4887-a0a0-427b2628ff01",
                      "parentUUID": "7ea51d3c-8881-4156-8d91-63f0c9cc6166",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8086ebdd-dbf4-4d05-9bbf-de4d490abaa6",
                    "85132aa2-89d2-48e6-bc83-778a576f0a54",
                    "249899c5-31fb-4bf7-8c2e-9017f5e26085",
                    "7a50d926-e7d0-427c-91ba-2da17eec13c8",
                    "9951e189-75e7-4b66-b5ac-23438471c352",
                    "59f488ed-0991-4471-87dc-3e5e515e82cb",
                    "b24537bb-99fb-46bf-9bde-7e5500ad93b7",
                    "dea0bade-69df-4d12-9018-f549630a1b4f",
                    "617cb24f-d1d1-4887-a0a0-427b2628ff01"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7933,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}