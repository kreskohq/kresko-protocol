{
  "stats": {
    "suites": 86,
    "tests": 265,
    "passes": 247,
    "pending": 18,
    "failures": 0,
    "start": "2023-08-29T23:28:52.756Z",
    "end": "2023-08-29T23:39:08.761Z",
    "duration": 616005,
    "testsRegistered": 265,
    "passPercent": 100,
    "pendingPercent": 6.7924528301886795,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dab82976-6eb7-4008-a271-dc5ba2db7338",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "88a82b5d-9c7e-46f9-9739-2072d6186b3f",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "5f5d0423-ea50-46cc-bd03-255b395fdaec",
              "parentUUID": "88a82b5d-9c7e-46f9-9739-2072d6186b3f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 7112,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "user = _hardhat.default.users.testUserSeven;\noracleDecimals = await _hardhat.default.Diamond.extOracleDecimals();\nKreskoAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"KreskoAssetPrice10USD\",\n    price: collateralPrice,\n    symbol: \"KreskoAssetPrice10USD\",\n    closeFee: 0.1,\n    openFee: 0.1,\n    marketOpen: true,\n    factor: 2,\n    supplyLimit: 10\n});\nCollateralAsset = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral18Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 18\n});\nCollateralAsset8Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral8Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 8\n});\nCollateralAsset21Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral21Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 21\n});\nawait CollateralAsset.setBalance(user, (0, _lib.toBig)(startingBalance));\nawait CollateralAsset8Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 8));\nawait CollateralAsset21Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 21));\nawait CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset21Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);",
              "err": {},
              "uuid": "de4a8bf5-e58d-49b7-b731-6be574374b01",
              "parentUUID": "88a82b5d-9c7e-46f9-9739-2072d6186b3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b734450-5902-4c48-b836-1b512e8d6313",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "6b33c26c-44de-4e7e-aae8-9c045e4c71ec",
                  "parentUUID": "6b734450-5902-4c48-b836-1b512e8d6313",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "3ccc1917-791c-49cc-9163-ddb4dca50451",
                  "parentUUID": "6b734450-5902-4c48-b836-1b512e8d6313",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "f779e3fc-545e-48b9-8348-733f166fcfce",
                  "parentUUID": "6b734450-5902-4c48-b836-1b512e8d6313",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, (0, _lib.toBig)(10));\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, (0, _lib.toBig)(10, 8));\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, (0, _lib.toBig)(10, 21));\nconst expectedDepositValue = (0, _lib.toBig)(150, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "9a189de2-49ab-430b-b7da-ad086d85e562",
                  "parentUUID": "6b734450-5902-4c48-b836-1b512e8d6313",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b33c26c-44de-4e7e-aae8-9c045e4c71ec",
                "3ccc1917-791c-49cc-9163-ddb4dca50451",
                "f779e3fc-545e-48b9-8348-733f166fcfce",
                "9a189de2-49ab-430b-b7da-ad086d85e562"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 361,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "6154840f-eb75-455a-9567-0ee4e749609d",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance));",
                  "err": {},
                  "uuid": "933ecbca-3144-446c-833f-678a0d8037a9",
                  "parentUUID": "6154840f-eb75-455a-9567-0ee4e749609d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 136,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset8Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset8Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 8));",
                  "err": {},
                  "uuid": "f0c10152-14f8-4b0a-aa29-019116204eb6",
                  "parentUUID": "6154840f-eb75-455a-9567-0ee4e749609d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 138,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset21Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset21Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 21));",
                  "err": {},
                  "uuid": "2fdff86d-0bd4-4b01-aaee-36d3c3c15b28",
                  "parentUUID": "6154840f-eb75-455a-9567-0ee4e749609d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "933ecbca-3144-446c-833f-678a0d8037a9",
                "f0c10152-14f8-4b0a-aa29-019116204eb6",
                "2fdff86d-0bd4-4b01-aaee-36d3c3c15b28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 408,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "2016cc33-77e5-4f01-9921-ff6116df516d",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 381,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "1353dfba-8fdb-4313-85c9-018db4718a44",
                  "parentUUID": "2016cc33-77e5-4f01-9921-ff6116df516d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 382,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "abb673d2-d1c7-4747-a624-6a56559d6fdd",
                  "parentUUID": "2016cc33-77e5-4f01-9921-ff6116df516d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 405,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "6e86475a-079e-4c57-a0ff-bcdf8e602e31",
                  "parentUUID": "2016cc33-77e5-4f01-9921-ff6116df516d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1353dfba-8fdb-4313-85c9-018db4718a44",
                "abb673d2-d1c7-4747-a624-6a56559d6fdd",
                "6e86475a-079e-4c57-a0ff-bcdf8e602e31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1168,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4b2fee73-668b-4615-ada0-a09506c5ffbf",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "16eba65d-668b-4d7a-a9aa-9c60cbb370fb",
              "parentUUID": "4b2fee73-668b-4615-ada0-a09506c5ffbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8211e3f3-2238-44b8-b829-722a725674cd",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "9edaad4f-cfd0-44b9-9b10-680bcd8dd4be",
                  "parentUUID": "8211e3f3-2238-44b8-b829-722a725674cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = this.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "717b1758-4143-407b-8f1d-4430ec00efaa",
                  "parentUUID": "8211e3f3-2238-44b8-b829-722a725674cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "e8822904-10c8-4441-bf7a-34af2d1b64a3",
                  "parentUUID": "8211e3f3-2238-44b8-b829-722a725674cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9edaad4f-cfd0-44b9-9b10-680bcd8dd4be",
                "717b1758-4143-407b-8f1d-4430ec00efaa",
                "e8822904-10c8-4441-bf7a-34af2d1b64a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "18a69e1d-590f-4ea0-b33a-99de8459f45b",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f0efe5b0-0864-49bf-bce4-6d0ab07cf527",
              "parentUUID": "18a69e1d-590f-4ea0-b33a-99de8459f45b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "95bdb71a-bcfd-4fb5-8cc7-23c20f1e809c",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.addr.deployer);",
                  "err": {},
                  "uuid": "6914abf1-6d8e-45c1-9f66-22fd8df60acf",
                  "parentUUID": "95bdb71a-bcfd-4fb5-8cc7-23c20f1e809c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "9f3e5fc0-d4da-4036-9d31-6c3c364c07dc",
                  "parentUUID": "95bdb71a-bcfd-4fb5-8cc7-23c20f1e809c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "338c9cef-057b-41a0-8c5f-dc3b31e056d5",
                  "parentUUID": "95bdb71a-bcfd-4fb5-8cc7-23c20f1e809c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "48063ecb-4b64-444a-a646-105c60a88380",
                  "parentUUID": "95bdb71a-bcfd-4fb5-8cc7-23c20f1e809c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6914abf1-6d8e-45c1-9f66-22fd8df60acf",
                "9f3e5fc0-d4da-4036-9d31-6c3c364c07dc",
                "338c9cef-057b-41a0-8c5f-dc3b31e056d5",
                "48063ecb-4b64-444a-a646-105c60a88380"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 143,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b1e971c4-2745-4540-ae1d-70e982b5c953",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "fa9f1bd2-f9f2-49cf-be55-890fbe73a66d",
              "parentUUID": "b1e971c4-2745-4540-ae1d-70e982b5c953",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "036f358d-32d1-45c6-902c-989b684fc24a",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 831,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = _hardhat.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await _hardhat.default.Diamond.hasRole(TEST_OPERATOR_ROLE, _hardhat.default.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await _hardhat.default.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], _hardhat.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(_hardhat.default.addr.userOne);",
                  "err": {},
                  "uuid": "75cc8bfd-4b37-46cc-ba2b-352bea816e38",
                  "parentUUID": "036f358d-32d1-45c6-902c-989b684fc24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 532,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: _hardhat.default.addr.userOne\n});\nconst facetsBefore = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: \"SmockFacet\"\n});\nconst facetsAfter = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "52055d05-0c67-4719-9e34-069afed2742b",
                  "parentUUID": "036f358d-32d1-45c6-902c-989b684fc24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await _hardhat.default.Diamond.facetAddress(signature);\nconst functions = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: _hardhat.default.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await _hardhat.default.ethers.getContractAt(\"AuthEvent\", _hardhat.default.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(_hardhat.default.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner , newOwner  } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(_hardhat.default.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "b4c8de66-163d-4eaa-b400-1a8fd77dcc80",
                  "parentUUID": "036f358d-32d1-45c6-902c-989b684fc24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 260,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await _hardhat.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await _hardhat.default.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\"\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await _hardhat.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await _hardhat.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).acceptOwnership());\nconst currentOwner = await _hardhat.default.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "b9876241-90eb-4e24-b8ac-2486d8f1c631",
                  "parentUUID": "036f358d-32d1-45c6-902c-989b684fc24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 762,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait _hardhat.default.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "e3e5c4e4-776e-47e4-8b5f-66ccfcb45db3",
                  "parentUUID": "036f358d-32d1-45c6-902c-989b684fc24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 1549,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await _hardhat.default.ethers.getContractAt(\"SmockFacet\", _hardhat.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait _hardhat.default.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await _hardhat.default.ethers.getContractAt(\"SmockFacet2\", _hardhat.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "d84d4bd3-5e67-4309-a8ef-2bb6bfb85dcb",
                  "parentUUID": "036f358d-32d1-45c6-902c-989b684fc24a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75cc8bfd-4b37-46cc-ba2b-352bea816e38",
                "52055d05-0c67-4719-9e34-069afed2742b",
                "b4c8de66-163d-4eaa-b400-1a8fd77dcc80",
                "b9876241-90eb-4e24-b8ac-2486d8f1c631",
                "e3e5c4e4-776e-47e4-8b5f-66ccfcb45db3",
                "d84d4bd3-5e67-4309-a8ef-2bb6bfb85dcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "54fb8035-1529-4091-b83f-b1d5983442ba",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "867fdfce-2e21-4653-b140-be7612c0954e",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4b0d9e44-3867-4569-9747-a4bd39c49539",
                  "parentUUID": "867fdfce-2e21-4653-b140-be7612c0954e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "4b0d9e44-3867-4569-9747-a4bd39c49539"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "06351445-9ac5-487b-bdc2-df2f6ad4f697",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8e733ab2-611c-400e-a9aa-8f641990305a",
                  "parentUUID": "06351445-9ac5-487b-bdc2-df2f6ad4f697",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "8e733ab2-611c-400e-a9aa-8f641990305a"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "28e36dd8-7b8d-437a-b555-7a74268cc9cd",
              "title": "#facet-upgrade-16-05-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works",
                  "fullTitle": "Forking #facet-upgrade-16-05-2023 works",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fe7b6f8b-a59a-493f-aafb-e0fe5faf0c8e",
                  "parentUUID": "28e36dd8-7b8d-437a-b555-7a74268cc9cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "fe7b6f8b-a59a-493f-aafb-e0fe5faf0c8e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "85f8805c-77ef-401e-85f0-f3f941db2ae1",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "47221f7c-b223-45f1-b74c-3000ce00c98f",
              "parentUUID": "85f8805c-77ef-401e-85f0-f3f941db2ae1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "75779eb0-cf30-45ce-ad0f-13fe0458ad4d",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "03e1fe88-bb94-4383-aa59-f45ed97a94f5",
                  "parentUUID": "75779eb0-cf30-45ce-ad0f-13fe0458ad4d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "70240d84-bc3c-4d64-904e-66e496dce2e0",
                  "parentUUID": "75779eb0-cf30-45ce-ad0f-13fe0458ad4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetImpl.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "058f5475-7345-4018-b889-ecfc2629bf71",
                  "parentUUID": "75779eb0-cf30-45ce-ad0f-13fe0458ad4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await KreskoAsset.kresko()).to.equal(_hardhat.default.Diamond.address);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(\"64000000000000000000\");\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "a9f42702-3f57-41f1-99a7-52db0b9c76b8",
                  "parentUUID": "75779eb0-cf30-45ce-ad0f-13fe0458ad4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "4d40079c-b032-4ad9-bee5-13f571c1c123",
                  "parentUUID": "75779eb0-cf30-45ce-ad0f-13fe0458ad4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70240d84-bc3c-4d64-904e-66e496dce2e0",
                "058f5475-7345-4018-b889-ecfc2629bf71",
                "a9f42702-3f57-41f1-99a7-52db0b9c76b8",
                "4d40079c-b032-4ad9-bee5-13f571c1c123"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "c174ced4-7f20-4431-90ca-6c8f7ff4b398",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = _hardhat.default.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "bbe4c0a1-f012-445a-afaa-20576258021f",
                  "parentUUID": "c174ced4-7f20-4431-90ca-6c8f7ff4b398",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "1303b483-b050-44ec-991b-b17d09097cef",
                  "parentUUID": "c174ced4-7f20-4431-90ca-6c8f7ff4b398",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(_shared.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "4bef294f-4db9-4227-9cc4-37b282c13a42",
                  "parentUUID": "c174ced4-7f20-4431-90ca-6c8f7ff4b398",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "69f297c6-91be-4cbf-89e7-ac183bc65404",
                  "parentUUID": "c174ced4-7f20-4431-90ca-6c8f7ff4b398",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(_shared.anchorTokenPrefix + symbol);\n(0, _chai.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"64000000000000000000\");\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "07069dfc-c5d8-496f-89ad-2643fabc87f4",
                  "parentUUID": "c174ced4-7f20-4431-90ca-6c8f7ff4b398",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1303b483-b050-44ec-991b-b17d09097cef",
                "4bef294f-4db9-4227-9cc4-37b282c13a42",
                "69f297c6-91be-4cbf-89e7-ac183bc65404",
                "07069dfc-c5d8-496f-89ad-2643fabc87f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "16466a37-f2e0-4b66-8620-edb4cf9c0cbd",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "a38d9c10-93c6-4f10-a0da-cd4d43e56c02",
              "parentUUID": "16466a37-f2e0-4b66-8620-edb4cf9c0cbd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = _hardhat.default.users.deployer;\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(_test.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "d63766fd-7945-4084-92f8-9cb44446bbd9",
              "parentUUID": "16466a37-f2e0-4b66-8620-edb4cf9c0cbd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "88bfc71c-dfe6-46bf-8816-a9e07ca63f08",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "e1f4a6e1-eb82-4bd9-8092-40fb209db284",
                  "parentUUID": "88bfc71c-dfe6-46bf-8816-a9e07ca63f08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "2bca7d05-f3cd-4910-b10c-246544e1772c",
                  "parentUUID": "88bfc71c-dfe6-46bf-8816-a9e07ca63f08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "1e515bff-c20b-4137-b967-310872bc7d7d",
                  "parentUUID": "88bfc71c-dfe6-46bf-8816-a9e07ca63f08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.renounceRole(_test.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "7a6b089f-202c-4cd9-9366-8e44d40e266c",
                  "parentUUID": "88bfc71c-dfe6-46bf-8816-a9e07ca63f08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1f4a6e1-eb82-4bd9-8092-40fb209db284",
                "2bca7d05-f3cd-4910-b10c-246544e1772c",
                "1e515bff-c20b-4137-b967-310872bc7d7d",
                "7a6b089f-202c-4cd9-9366-8e44d40e266c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 153,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b31546c5-d51d-41e3-bd1a-82df72318659",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "f9f297b9-5dcf-4e21-90fb-fc03a5f9dd69",
                  "parentUUID": "b31546c5-d51d-41e3-bd1a-82df72318659",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "5c11fc40-0fde-43ee-ac36-2fc78f7a5ad8",
                  "parentUUID": "b31546c5-d51d-41e3-bd1a-82df72318659",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(_hardhat.default.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "9297bea7-802b-4718-b6fd-d31ff4c7024a",
                  "parentUUID": "b31546c5-d51d-41e3-bd1a-82df72318659",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "3f29b756-ee3d-4e1a-ba8a-4aa2cab18d15",
                  "parentUUID": "b31546c5-d51d-41e3-bd1a-82df72318659",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userTwo).burn(_hardhat.default.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "cced88c9-d395-4487-8598-141485e6a5b8",
                  "parentUUID": "b31546c5-d51d-41e3-bd1a-82df72318659",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c11fc40-0fde-43ee-ac36-2fc78f7a5ad8",
                "9297bea7-802b-4718-b6fd-d31ff4c7024a",
                "3f29b756-ee3d-4e1a-ba8a-4aa2cab18d15",
                "cced88c9-d395-4487-8598-141485e6a5b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e4ae6c37-32cb-4686-9e64-42ee4ae2c9e7",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "1355c25e-9e0c-4db9-8415-3d3b9916e347",
              "parentUUID": "e4ae6c37-32cb-4686-9e64-42ee4ae2c9e7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "9b54f798-3d93-48aa-a03d-c151458e1954",
              "parentUUID": "e4ae6c37-32cb-4686-9e64-42ee4ae2c9e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6be0c507-00fc-4bdf-bf8f-ab417c6887b5",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "0f1eb744-9d07-4923-b411-f20d566c70dc",
                  "parentUUID": "6be0c507-00fc-4bdf-bf8f-ab417c6887b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "bdae7346-5ed1-41a4-9da1-303e3a208c39",
                  "parentUUID": "6be0c507-00fc-4bdf-bf8f-ab417c6887b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "8115e13d-2cba-40ba-93ce-b6211b2b331f",
                  "parentUUID": "6be0c507-00fc-4bdf-bf8f-ab417c6887b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "9537f19f-1262-422d-90e2-6911176df6c5",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                      "err": {},
                      "uuid": "ba4e3083-9c9b-4d8b-9f7f-50c5fc3d5333",
                      "parentUUID": "9537f19f-1262-422d-90e2-6911176df6c5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "543bc2fb-e63b-46d4-9da5-d2667c5d4785",
                      "parentUUID": "9537f19f-1262-422d-90e2-6911176df6c5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 33,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "3d994727-c1e2-481f-b8e1-43b74004f38e",
                      "parentUUID": "9537f19f-1262-422d-90e2-6911176df6c5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 31,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "f3f4aaa3-b95d-49fe-a8f6-d904b2194eac",
                      "parentUUID": "9537f19f-1262-422d-90e2-6911176df6c5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "952bec07-f8c9-4fa2-ad41-953ef5288b19",
                      "parentUUID": "9537f19f-1262-422d-90e2-6911176df6c5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "f564d582-115a-4927-943d-d09a05c28b86",
                      "parentUUID": "9537f19f-1262-422d-90e2-6911176df6c5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "eded0bc3-a4c9-4dc1-97c4-989abcad0bc3",
                      "parentUUID": "9537f19f-1262-422d-90e2-6911176df6c5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ba4e3083-9c9b-4d8b-9f7f-50c5fc3d5333",
                    "543bc2fb-e63b-46d4-9da5-d2667c5d4785",
                    "3d994727-c1e2-481f-b8e1-43b74004f38e",
                    "f3f4aaa3-b95d-49fe-a8f6-d904b2194eac",
                    "952bec07-f8c9-4fa2-ad41-953ef5288b19",
                    "f564d582-115a-4927-943d-d09a05c28b86",
                    "eded0bc3-a4c9-4dc1-97c4-989abcad0bc3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 194,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "8c5fb0f1-5ef9-4281-9305-5b2fca6444e7",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "2d6f8674-3692-4824-b621-dd07898905ba",
                      "parentUUID": "8c5fb0f1-5ef9-4281-9305-5b2fca6444e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 51,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "c4ef9686-e318-4a8f-9b37-e2d87551cd9a",
                      "parentUUID": "8c5fb0f1-5ef9-4281-9305-5b2fca6444e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "04a658aa-5068-4a4f-a0b3-b68f5943b4c7",
                      "parentUUID": "8c5fb0f1-5ef9-4281-9305-5b2fca6444e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 118,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "63b333b5-7872-4dc8-90c2-8f5af445cff4",
                      "parentUUID": "8c5fb0f1-5ef9-4281-9305-5b2fca6444e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 113,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "cd0ad117-11ee-472e-8b57-9e99d9fad803",
                      "parentUUID": "8c5fb0f1-5ef9-4281-9305-5b2fca6444e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "f38e23b9-7ae4-447a-ad4f-cdbb5ff832b7",
                      "parentUUID": "8c5fb0f1-5ef9-4281-9305-5b2fca6444e7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2d6f8674-3692-4824-b621-dd07898905ba",
                    "c4ef9686-e318-4a8f-9b37-e2d87551cd9a",
                    "04a658aa-5068-4a4f-a0b3-b68f5943b4c7",
                    "63b333b5-7872-4dc8-90c2-8f5af445cff4",
                    "cd0ad117-11ee-472e-8b57-9e99d9fad803",
                    "f38e23b9-7ae4-447a-ad4f-cdbb5ff832b7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 556,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "0f1eb744-9d07-4923-b411-f20d566c70dc",
                "bdae7346-5ed1-41a4-9da1-303e3a208c39",
                "8115e13d-2cba-40ba-93ce-b6211b2b331f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "5c6bbe40-0a25-4287-92ae-dadaf857dcc3",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "9a2ef35f-90a5-4fa9-927b-d66bc6b0893d",
              "parentUUID": "5c6bbe40-0a25-4287-92ae-dadaf857dcc3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const asset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "2aed24a0-591c-4ccd-9274-773eaefe5c16",
              "parentUUID": "5c6bbe40-0a25-4287-92ae-dadaf857dcc3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1a1fb14d-c55a-429c-9784-a505b37d9065",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount.add(_test.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "6bbbd298-da68-4d09-a8a5-7b02a2835c38",
                  "parentUUID": "1a1fb14d-c55a-429c-9784-a505b37d9065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "dc787688-27cc-43be-a366-cea8545a3b93",
                  "parentUUID": "1a1fb14d-c55a-429c-9784-a505b37d9065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "57e811e5-d72c-4dcb-bfde-6088debbfbfa",
                  "parentUUID": "1a1fb14d-c55a-429c-9784-a505b37d9065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3e0fdeeb-278f-4928-a687-3b1008416c35",
                  "parentUUID": "1a1fb14d-c55a-429c-9784-a505b37d9065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "909b8557-047a-4c89-801e-7ab1fe141cc7",
                  "parentUUID": "1a1fb14d-c55a-429c-9784-a505b37d9065",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "3582f2a1-59ba-4f23-9c54-2c89a238274a",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "03adacbd-6b74-4fd9-b210-186e2cd8de80",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "70df6e7e-ca11-41ee-94be-392267b29bfb",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d50d1779-9b7a-4208-b88e-453ab5607861",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "5f25f491-b6fb-4ed8-a4a7-592479586ae5",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b7d1ef5e-0646-4cbd-b155-d950fa9ce0ee",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0fee4e23-cedf-401f-90a7-aa8f65da4897",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d5147ce3-38dc-470e-8a73-26dfc84e2615",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "89ecfb7a-155f-4d9b-a85d-e0057f3d7082",
                          "parentUUID": "20a22a68-70e6-4702-b80c-5ae6d0ac9029",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "03adacbd-6b74-4fd9-b210-186e2cd8de80",
                        "70df6e7e-ca11-41ee-94be-392267b29bfb",
                        "d50d1779-9b7a-4208-b88e-453ab5607861",
                        "5f25f491-b6fb-4ed8-a4a7-592479586ae5",
                        "b7d1ef5e-0646-4cbd-b155-d950fa9ce0ee",
                        "0fee4e23-cedf-401f-90a7-aa8f65da4897",
                        "d5147ce3-38dc-470e-8a73-26dfc84e2615",
                        "89ecfb7a-155f-4d9b-a85d-e0057f3d7082"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "6bbbd298-da68-4d09-a8a5-7b02a2835c38"
              ],
              "failures": [],
              "pending": [
                "dc787688-27cc-43be-a366-cea8545a3b93",
                "57e811e5-d72c-4dcb-bfde-6088debbfbfa",
                "3e0fdeeb-278f-4928-a687-3b1008416c35",
                "909b8557-047a-4c89-801e-7ab1fe141cc7"
              ],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "51a95073-eca7-4231-a8b5-947fded6843b",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "44f4cc7d-65b8-48fb-ae95-43de1f3df716",
              "parentUUID": "51a95073-eca7-4231-a8b5-947fded6843b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 54,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === \"krETH\").contract;\nconst KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nconst Pair = await (await _hardhat.default.getContractOrFork(\"UniswapV2Factory\")).getPair(KreskoAsset.address, KISS.address);\n// address of KISS-krETH pool\nthis.pool = await _hardhat.ethers.getContractAt(\"UniswapV2Pair\", Pair);\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, _hardhat.default.addr.deployer);",
              "err": {},
              "uuid": "d8d99289-613f-4a14-8d40-a265b0e121bd",
              "parentUUID": "51a95073-eca7-4231-a8b5-947fded6843b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst beforeTotalSupply = await KreskoAsset.totalSupply();\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.mint(_hardhat.default.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\n(0, _chai.expect)(await KreskoAsset.balanceOf(_hardhat.default.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(beforeTotalSupply.add(_test.defaultMintAmount).mul(denominator));\n(0, _chai.expect)(afterReserve0).to.equal(beforeReserve0);\n(0, _chai.expect)(afterReserve1).to.equal(beforeReserve1);\n(0, _chai.expect)(beforeTimestamp).to.equal(afterTimestamp);",
              "err": {},
              "uuid": "b87e62b6-b702-4f6d-a78f-07f42a5dc36f",
              "parentUUID": "51a95073-eca7-4231-a8b5-947fded6843b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, [\n    this.pool.address\n]);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\nif (beforeReserve0.eq(afterReserve0)) {\n    (0, _chai.expect)(afterReserve1).to.equal(beforeReserve1.mul(denominator));\n} else {\n    (0, _chai.expect)(afterReserve0).to.equal(beforeReserve0.mul(denominator));\n}\n(0, _chai.expect)(afterTimestamp).to.gt(beforeTimestamp);",
              "err": {},
              "uuid": "e0585ee4-d94b-44fa-9255-cc9ae242b510",
              "parentUUID": "51a95073-eca7-4231-a8b5-947fded6843b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b87e62b6-b702-4f6d-a78f-07f42a5dc36f",
            "e0585ee4-d94b-44fa-9255-cc9ae242b510"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "2aec4ea5-ef2a-4824-a931-935d2924186b",
          "title": "Minter - Init",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d4c6b585-7298-4b40-b824-c8bd3d9f2f09",
              "parentUUID": "2aec4ea5-ef2a-4824-a931-935d2924186b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8c16b3d7-6b63-4d86-b263-503cafb8f134",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst { args  } = await (0, _shared.getMinterInitializer)(_hardhat.default);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.SAFETY_COUNCIL, _hardhat.default.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.feeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await _hardhat.default.Diamond.liquidationIncentiveMultiplier()).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumCollateralizationRatio()).to.equal(args.minimumCollateralizationRatio);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumDebtValue()).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "668a7c39-b2a4-444a-8e32-65ff2bd8c137",
                  "parentUUID": "8c16b3d7-6b63-4d86-b263-503cafb8f134",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst initializer = await (0, _shared.getMinterInitializer)(_hardhat.default);\nconst initializerContract = await _hardhat.default.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, _chai.expect)(_hardhat.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "1bbde628-0d9b-41a7-a271-e5391c9319f6",
                  "parentUUID": "8c16b3d7-6b63-4d86-b263-503cafb8f134",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await _hardhat.default.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._shared.minterFacets,\n    ..._shared.diamondFacets,\n    ..._shared.scdpFacets\n].map(async (name)=>{\n    const deployment = await _hardhat.default.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "245588d2-decc-476e-8d07-9b1028d20628",
                  "parentUUID": "8c16b3d7-6b63-4d86-b263-503cafb8f134",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "668a7c39-b2a4-444a-8e32-65ff2bd8c137",
                "1bbde628-0d9b-41a7-a271-e5391c9319f6",
                "245588d2-decc-476e-8d07-9b1028d20628"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 278,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4061ce00-f1b9-4fe3-98fe-68be43605165",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f96b59ee-08ad-4596-992e-f7ed4cd9ed14",
              "parentUUID": "4061ce00-f1b9-4fe3-98fe-68be43605165",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0f13ead2-f249-43e3-b6a6-639287b86a51",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer);\nconst update = (0, _test.getNewMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(update.MLM)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(update.oracleDeviationPct)).to.not.be.reverted;\nconst { minimumCollateralizationRatio , minimumDebtValue , feeRecipient , oracleDeviationPct  } = await hre.Diamond.getAllParams();\n(0, _chai.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio);\n(0, _chai.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue);\n(0, _chai.expect)(update.feeRecipient).to.equal(feeRecipient);\n(0, _chai.expect)(update.oracleDeviationPct).to.equal(oracleDeviationPct);",
                  "err": {},
                  "uuid": "03d30c32-d42c-4af5-88ff-593989b0935e",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 1339,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)(_test.defaultCollateralArgs);\n(0, _chai.expect)(await hre.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(contract.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)(Number(oraclePrice)).to.equal((0, _lib.toBig)(_test.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "f910d1ab-c583-4a6f-98f6-1dabd45c0160",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 2517,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , kresko  } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(await hre.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, _chai.expect)(values.exists).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal((0, _lib.toBig)(_test.defaultKrAssetArgs.factor));\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_test.defaultKrAssetArgs.price);\n(0, _chai.expect)((0, _lib.fromBig)(values.supplyLimit)).to.equal(_test.defaultKrAssetArgs.supplyLimit);\n(0, _chai.expect)((0, _lib.fromBig)(values.closeFee)).to.equal(_test.defaultKrAssetArgs.closeFee);\n(0, _chai.expect)((0, _lib.fromBig)(values.openFee)).to.equal(_test.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "1c32e8d3-e45c-474b-a836-138e1a575165",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "f459b046-490a-4fd4-a176-72340e8597c1",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidatable multiplier",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidatable multiplier",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.maxLiquidationMultiplier();\nconst newMLM = (0, _lib.toBig)(1.0002);\n(0, _chai.expect)(currentMLM.eq(newMLM)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(newMLM)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.maxLiquidationMultiplier()).eq(newMLM)).to.be.true;",
                  "err": {},
                  "uuid": "54a6c4ce-1ac1-4a0e-8af0-535a4b8f1d0a",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update oracle deviation pct",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentODPCT = await hre.Diamond.oracleDeviationPct();\nconst newODPCT = (0, _lib.toBig)(0.3);\n(0, _chai.expect)(currentODPCT.eq(newODPCT)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newODPCT)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.oracleDeviationPct()).eq(newODPCT)).to.be.true;",
                  "err": {},
                  "uuid": "970872c6-465d-4ad6-8753-6daded0d2485",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 2451,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _krassets.addMockKreskoAsset)();\nconst oldRatio = (await hre.Diamond.kreskoAsset(contract.address)).kFactor;\nconst newRatio = (0, _lib.toBig)(1.2);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.kreskoAsset(contract.address)).kFactor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "db149cf4-83d7-42b4-93d5-8d458ee530aa",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 1683,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)();\nconst oldRatio = (await hre.Diamond.collateralAsset(contract.address)).factor;\nconst newRatio = (0, _lib.toBig)(0.9);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.collateralAsset(contract.address)).factor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "cb7e7552-e447-45e3-b8e2-9d298c78cdaf",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 3028,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , anchor , priceFeed  } = await (0, _krassets.addMockKreskoAsset)();\nconst oracleAnswer = (0, _lib.fromBig)((await priceFeed.latestRoundData())[1], 8);\nconst kreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, _chai.expect)(oracleAnswer).to.equal(_test.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, _lib.toBig)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, _lib.toBig)(0.02),\n    openFee: (0, _lib.toBig)(0.02)\n};\nconst [MockFeed] = await (0, _oracle.getMockOracles)(update.price);\nawait (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateKreskoAsset(contract.address, await (0, _krassets.getKrAssetConfig)(contract, anchor.address, update.factor, MockFeed.address, (0, _lib.toBig)(update.supplyLimit), update.closeFee, update.openFee));\nconst newValues = await hre.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = (0, _lib.fromBig)((await MockFeed.latestRoundData())[1], 8);\nconst newKreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(newValues.exists).to.equal(true);\n(0, _chai.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, _chai.expect)((0, _lib.fromBig)(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "684601a9-fc0b-4323-9b45-30bc0871c784",
                  "parentUUID": "0f13ead2-f249-43e3-b6a6-639287b86a51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03d30c32-d42c-4af5-88ff-593989b0935e",
                "f910d1ab-c583-4a6f-98f6-1dabd45c0160",
                "1c32e8d3-e45c-474b-a836-138e1a575165",
                "f459b046-490a-4fd4-a176-72340e8597c1",
                "54a6c4ce-1ac1-4a0e-8af0-535a4b8f1d0a",
                "970872c6-465d-4ad6-8753-6daded0d2485",
                "db149cf4-83d7-42b4-93d5-8d458ee530aa",
                "cb7e7552-e447-45e3-b8e2-9d298c78cdaf",
                "684601a9-fc0b-4323-9b45-30bc0871c784"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11299,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "68fe2a46-0e76-4d1d-a7f3-bf459dfdd042",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e1f0b0e5-eef9-4e6e-9706-41757f50f575",
              "parentUUID": "68fe2a46-0e76-4d1d-a7f3-bf459dfdd042",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.depositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(10000)\n};",
              "err": {},
              "uuid": "035d673e-eb10-4945-8f7c-c3744bd1fcd8",
              "parentUUID": "68fe2a46-0e76-4d1d-a7f3-bf459dfdd042",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "79886f37-94e7-4430-a9cf-ee28e56d1e3a",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "59e075fe-5d67-4411-b257-e34f7e28156b",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert if withdrawing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if withdrawing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 2653,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const arbitraryUser = _hardhat.default.users.testUserSeven;\nconst collateralAmount = (0, _lib.toBig)(100);\nconst newKrAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krTSLA\",\n    symbol: \"krTSLA\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000\n});\nawait newKrAsset.setBalance(arbitraryUser, collateralAmount);\nawait newKrAsset.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: collateralAmount.mul(4)\n    }\n});\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(newKrAsset.address, await (0, _collaterals.getCollateralConfig)(newKrAsset.contract, newKrAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), newKrAsset.priceFeed.address));\nconst depositAmount = collateralAmount.div(2);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, newKrAsset.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait newKrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositedCollateralAssets(arbitraryUser.address)).to.deep.equal([\n    newKrAsset.address\n]);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, newKrAsset.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "1a65fc8f-46ad-444e-9fa4-bd7e50e65e86",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 2471,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const arbitraryUser = _hardhat.default.users.testUserSeven;\nconst collateralAmount = (0, _lib.toBig)(100);\nconst newKrAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krTSLA\",\n    symbol: \"krTSLA\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000\n});\nawait newKrAsset.setBalance(arbitraryUser, collateralAmount);\nawait newKrAsset.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: collateralAmount.mul(4)\n    }\n});\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(newKrAsset.address, await (0, _collaterals.getCollateralConfig)(newKrAsset.contract, newKrAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), newKrAsset.priceFeed.address));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, newKrAsset.address, 9e11.toString())).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "fba35428-1bcf-4ac6-bca1-0c6ce106add8",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address))).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "a0db1510-7d67-48d5-ae2c-5c05d9026e5c",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 92,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)((0, _lib.fromBig)(depositorBalanceAfter)).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "7ecea749-19d3-4bee-bcb4-3b1a1f530b12",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "8c0edbe9-0993-4727-af76-b46c5f8c2656",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 1717,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"Collateral18Dec\",\n    price: _testutils.defaultOraclePrice,\n    factor: 1,\n    decimals: _testutils.defaultDecimals\n};\nconst { contract , mocks  } = await (0, _collaterals.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Deposit batch of first collateral type\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address,\n    contract.address\n]);",
                      "err": {},
                      "uuid": "7c9bdf26-141a-424f-9e40-376ca528df50",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 31,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralDeposited\");\n(0, _chai.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "53ea9130-17a6-4b4c-bc0c-f3dc7e5cae9b",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(_errors.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "12d936e8-d92c-4e85-9a3e-a5dbc2744685",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "58637124-b2e4-4438-a1f2-5e14acc9d4c3",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 89,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer , devTwo , extOne  } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "683af917-3c34-48b9-a366-fb184b5c866a",
                      "parentUUID": "59e075fe-5d67-4411-b257-e34f7e28156b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1a65fc8f-46ad-444e-9fa4-bd7e50e65e86",
                    "fba35428-1bcf-4ac6-bca1-0c6ce106add8",
                    "a0db1510-7d67-48d5-ae2c-5c05d9026e5c",
                    "7ecea749-19d3-4bee-bcb4-3b1a1f530b12",
                    "8c0edbe9-0993-4727-af76-b46c5f8c2656",
                    "7c9bdf26-141a-424f-9e40-376ca528df50",
                    "53ea9130-17a6-4b4c-bc0c-f3dc7e5cae9b",
                    "12d936e8-d92c-4e85-9a3e-a5dbc2744685",
                    "58637124-b2e4-4438-a1f2-5e14acc9d4c3",
                    "683af917-3c34-48b9-a366-fb184b5c866a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7292,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "838d0f7f-f471-480a-8966-0c23c1d47685",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 30,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "0e07e14c-7f73-4fce-9f03-0bed9748f9ad",
                      "parentUUID": "838d0f7f-f471-480a-8966-0c23c1d47685",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "d718ecdc-b492-463d-8b8e-c4baefc9fc1c",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 133,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "fedd56b1-596a-4d2c-b799-816a0e5e9b07",
                          "parentUUID": "d718ecdc-b492-463d-8b8e-c4baefc9fc1c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 118,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "c6a63ef0-04c4-49b0-a811-53272d10d688",
                          "parentUUID": "d718ecdc-b492-463d-8b8e-c4baefc9fc1c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 156,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "12ad4f24-13b7-4c6b-976e-79745169ae99",
                          "parentUUID": "d718ecdc-b492-463d-8b8e-c4baefc9fc1c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 71,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralWithdrawn\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "1ee299ba-b7e1-4026-92a6-b90cb0316632",
                          "parentUUID": "d718ecdc-b492-463d-8b8e-c4baefc9fc1c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 41,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "589e09fd-6d99-4b70-8721-5c0cf97d1c32",
                          "parentUUID": "d718ecdc-b492-463d-8b8e-c4baefc9fc1c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "852a8d38-5fb5-400a-8969-96919ccc6165",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 136,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, _lib.toBig)(100);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _hardhat.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "8b57a7fd-93b6-4a4a-9795-183e615536d9",
                              "parentUUID": "852a8d38-5fb5-400a-8969-96919ccc6165",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 340,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _lib.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).gte(accountMinCollateralValue)).to.be.true;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "300446e4-3526-44bb-920b-92c851853463",
                              "parentUUID": "852a8d38-5fb5-400a-8969-96919ccc6165",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 164,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = _hardhat.default.users.userFour;\nawait this.collateral.setBalance(user, _ethers.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, _lib.toBig)(1000));\nawait this.collateral.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1000),\n    user\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1010),\n    user\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, _lib.toBig)(1000));",
                              "err": {},
                              "uuid": "6238817d-0594-4632-a2e4-ee118a1d7873",
                              "parentUUID": "852a8d38-5fb5-400a-8969-96919ccc6165",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 28,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(_errors.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "d04161c4-7e12-42d5-8bef-cb34d07f9395",
                              "parentUUID": "852a8d38-5fb5-400a-8969-96919ccc6165",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 211,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "583f0200-fb53-4a99-98d8-68db054e00a8",
                              "parentUUID": "852a8d38-5fb5-400a-8969-96919ccc6165",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 24,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(_errors.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "17dde7e8-c80d-4dec-bc69-6809ca17dbed",
                              "parentUUID": "852a8d38-5fb5-400a-8969-96919ccc6165",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "300446e4-3526-44bb-920b-92c851853463",
                            "6238817d-0594-4632-a2e4-ee118a1d7873",
                            "d04161c4-7e12-42d5-8bef-cb34d07f9395",
                            "583f0200-fb53-4a99-98d8-68db054e00a8",
                            "17dde7e8-c80d-4dec-bc69-6809ca17dbed"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 767,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "fedd56b1-596a-4d2c-b799-816a0e5e9b07",
                        "c6a63ef0-04c4-49b0-a811-53272d10d688",
                        "12ad4f24-13b7-4c6b-976e-79745169ae99",
                        "1ee299ba-b7e1-4026-92a6-b90cb0316632",
                        "589e09fd-6d99-4b70-8721-5c0cf97d1c32"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 519,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "dd501287-8ad1-474c-a4f8-f8fbc6023f84",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 246,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "d53297fa-9e16-4512-aa61-899b6518cbae",
                      "parentUUID": "dd501287-8ad1-474c-a4f8-f8fbc6023f84",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "7b5e676d-be25-4e32-8a94-33bd539a5727",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 104,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "f21e19d7-b4f8-4fee-a687-386982e4f7b9",
                          "parentUUID": "7b5e676d-be25-4e32-8a94-33bd539a5727",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 106,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "59624931-a32e-42c6-9b72-57670eaa22bb",
                          "parentUUID": "7b5e676d-be25-4e32-8a94-33bd539a5727",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 117,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "d37c93be-a3c5-42ee-be1d-4ffed374ed43",
                          "parentUUID": "7b5e676d-be25-4e32-8a94-33bd539a5727",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 116,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "d12a37e3-a594-49ec-a5e7-470c04307a06",
                          "parentUUID": "7b5e676d-be25-4e32-8a94-33bd539a5727",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 148,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "9a9bf206-7a9f-48ec-ab3f-256509e896bd",
                          "parentUUID": "7b5e676d-be25-4e32-8a94-33bd539a5727",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 156,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "3033cee1-c398-4316-abef-e8047670ef66",
                          "parentUUID": "7b5e676d-be25-4e32-8a94-33bd539a5727",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f21e19d7-b4f8-4fee-a687-386982e4f7b9",
                        "59624931-a32e-42c6-9b72-57670eaa22bb",
                        "d37c93be-a3c5-42ee-be1d-4ffed374ed43",
                        "d12a37e3-a594-49ec-a5e7-470c04307a06",
                        "9a9bf206-7a9f-48ec-ab3f-256509e896bd",
                        "3033cee1-c398-4316-abef-e8047670ef66"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 747,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "cad2f5a0-3db8-48f1-8907-b66305f663cb",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 191,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "0aba5cb6-d32e-4879-ba08-7e0c653c53e5",
                          "parentUUID": "cad2f5a0-3db8-48f1-8907-b66305f663cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 186,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "17c0dcd8-2ca9-48e2-ae6f-dad6e5c3e3d6",
                          "parentUUID": "cad2f5a0-3db8-48f1-8907-b66305f663cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 136,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "46f2fb6b-b13d-4ba8-b32d-04ad9c321981",
                          "parentUUID": "cad2f5a0-3db8-48f1-8907-b66305f663cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 132,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "d9c137bc-55c9-4d84-a58b-b636ab02ebd1",
                          "parentUUID": "cad2f5a0-3db8-48f1-8907-b66305f663cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 263,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "705d18ba-b3ee-4dde-aa92-a7ad6efc650c",
                          "parentUUID": "cad2f5a0-3db8-48f1-8907-b66305f663cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 788,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "eebea1a6-081d-4cdf-83e5-d5a18bb8978b",
                          "parentUUID": "cad2f5a0-3db8-48f1-8907-b66305f663cb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0aba5cb6-d32e-4879-ba08-7e0c653c53e5",
                        "17c0dcd8-2ca9-48e2-ae6f-dad6e5c3e3d6",
                        "46f2fb6b-b13d-4ba8-b32d-04ad9c321981",
                        "d9c137bc-55c9-4d84-a58b-b636ab02ebd1",
                        "705d18ba-b3ee-4dde-aa92-a7ad6efc650c",
                        "eebea1a6-081d-4cdf-83e5-d5a18bb8978b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1696,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "e5424527-ed55-4829-9a36-445b5f57918c",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 245,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "9ba20653-9658-4ce8-90ba-00c5ec3dedbf",
                      "parentUUID": "e5424527-ed55-4829-9a36-445b5f57918c",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 369,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "e2f3858e-e397-4036-8dc6-cf22355100f2",
                          "parentUUID": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 265,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "72444b36-2601-40e1-b6f9-c6ad3f1391b0",
                          "parentUUID": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 295,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "473ed65e-ed7a-477f-bf2f-0052391af507",
                          "parentUUID": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 280,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "b1771260-403c-43a8-bb86-740a4ed8684a",
                          "parentUUID": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 325,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "e904a2a3-8e23-4085-8d0b-fd22648c2c65",
                          "parentUUID": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 351,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "112a777c-572a-437c-87cf-996c27ab0ac1",
                          "parentUUID": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 640,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "943bb9ad-5f77-49b0-9a36-a29f1afcca28",
                          "parentUUID": "5e3b20fe-7c85-471c-85a3-d6490b5ebf94",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e2f3858e-e397-4036-8dc6-cf22355100f2",
                        "72444b36-2601-40e1-b6f9-c6ad3f1391b0",
                        "473ed65e-ed7a-477f-bf2f-0052391af507",
                        "b1771260-403c-43a8-bb86-740a4ed8684a",
                        "e904a2a3-8e23-4085-8d0b-fd22648c2c65",
                        "112a777c-572a-437c-87cf-996c27ab0ac1",
                        "943bb9ad-5f77-49b0-9a36-a29f1afcca28"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2525,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "7faee636-64c2-47f3-8a38-d26b371b7033",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 249,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "3c846130-8377-4a22-ba71-4b76d80731ab",
                          "parentUUID": "7faee636-64c2-47f3-8a38-d26b371b7033",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 269,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "edd4f7f5-7913-44d6-bb55-ecc092dd3478",
                          "parentUUID": "7faee636-64c2-47f3-8a38-d26b371b7033",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 256,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "326967ea-a6b4-4d49-8bd8-4bed816deb8b",
                          "parentUUID": "7faee636-64c2-47f3-8a38-d26b371b7033",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 253,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "e9f77f15-a9e0-43ca-91d9-832611fc0cf6",
                          "parentUUID": "7faee636-64c2-47f3-8a38-d26b371b7033",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 391,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "39f731dc-5e89-4ab6-ba02-e81bb8a49f34",
                          "parentUUID": "7faee636-64c2-47f3-8a38-d26b371b7033",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 788,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "59ea48c0-f969-42f7-848a-08a0acf637c8",
                          "parentUUID": "7faee636-64c2-47f3-8a38-d26b371b7033",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 444,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.bignumber.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "fe481ab5-d239-466d-b38d-6bf19906598f",
                          "parentUUID": "7faee636-64c2-47f3-8a38-d26b371b7033",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "3c846130-8377-4a22-ba71-4b76d80731ab",
                        "edd4f7f5-7913-44d6-bb55-ecc092dd3478",
                        "326967ea-a6b4-4d49-8bd8-4bed816deb8b",
                        "e9f77f15-a9e0-43ca-91d9-832611fc0cf6",
                        "39f731dc-5e89-4ab6-ba02-e81bb8a49f34",
                        "59ea48c0-f969-42f7-848a-08a0acf637c8",
                        "fe481ab5-d239-466d-b38d-6bf19906598f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2650,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4f962cf8-057d-4f90-ab69-dfab47fa7d3d",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ba175278-b54e-46a6-8579-9a880eef7fc0",
              "parentUUID": "4f962cf8-057d-4f90-ab69-dfab47fa7d3d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 276,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18\n};\nthis.collateral = hre.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: _testutils.defaultOpenFee\n};\nthis.krAsset = hre.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, hre.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle));\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hre.users.liquidator, (0, _lib.toBig)(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.liquidator.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(100000000)\n    }\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hre.users.userOne, (0, _lib.toBig)(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(this.defaultDepositAmount)\n    }\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral\n});\n// Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset\n});",
              "err": {},
              "uuid": "26390050-b6db-432b-acf9-779e1d71efc9",
              "parentUUID": "4f962cf8-057d-4f90-ab69-dfab47fa7d3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "881fa6e9-4712-47f8-bffb-d0fdf8332568",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 1648,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmountBig18 = (0, _lib.toBig)(this.defaultDepositAmount * 100);\nconst depositAmountBig8 = (0, _lib.toBig)(this.defaultDepositAmount * 100, 8);\nuser = hre.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hre.users.userOne, depositAmountBig18);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig18\n    }\n});\nnewCollateral = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    decimals: 8,\n    price: 10,\n    factor: 0.9\n});\nawait newCollateral.setBalance(hre.users.userOne, depositAmountBig8);\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig8\n    }\n});",
                  "err": {},
                  "uuid": "6fd03015-80c8-46b3-b266-69ec8718bd9a",
                  "parentUUID": "881fa6e9-4712-47f8-bffb-d0fdf8332568",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 1",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 1",
                  "timedOut": false,
                  "duration": 761,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [deposits, borrows] = [\n    (0, _lib.toBig)(20),\n    (0, _lib.toBig)(10)\n];\nawait this.collateral.setBalance(hre.users.userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.false;\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(2);\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(1);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(hre.users.userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalc = await (0, _liquidations.getExpectedMaxLiq)(hre.users.userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalc).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "a43cf1e5-2f14-48aa-b60e-a6a6a9fcf246",
                  "parentUUID": "881fa6e9-4712-47f8-bffb-d0fdf8332568",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 5338,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateMinimumDebtValue(0);\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(10)\n];\nconst borrows = (0, _lib.toBig)(10);\nconst collateralPrice = 10;\nthis.collateral.setPrice(collateralPrice);\nconst collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral18Dec\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nawait this.collateral.setBalance(userThree, deposits1);\nawait collateral2.setBalance(userThree, deposits2);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits2,\n    asset: collateral2\n});\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits1,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nconst cr = await (0, _liquidations.getCR)(userThree.address);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n(0, _chai.expect)(cr).to.be.equal(2);\nawait this.collateral.update({\n    factor: 0.25,\n    name: \"updated\"\n});\nthis.collateral.setPrice(5);\nconst expectedCR = 1.125;\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(expectedCR, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nconst maxLiquidatableValueC1 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalcC1 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalcC1).to.be.closeTo(maxLiquidatableValueC1, USD_DELTA);\nconst maxLiquidatableValueC2 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, collateral2.address);\nconst MLCalcC2 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(MLCalcC2).to.be.closeTo(maxLiquidatableValueC2, USD_DELTA);\n(0, _chai.expect)(maxLiquidatableValueC2.gt(maxLiquidatableValueC1)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                  "err": {},
                  "uuid": "dfbc3e39-0afc-4d10-9fdd-e3dba44e1950",
                  "parentUUID": "881fa6e9-4712-47f8-bffb-d0fdf8332568",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with single market cdp",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with single market cdp",
                  "timedOut": false,
                  "duration": 404,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nthis.collateral.setPrice(collateralPriceAfter * 0.7);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "25029f06-c42c-45fd-a33f-f6d20f342e02",
                  "parentUUID": "881fa6e9-4712-47f8-bffb-d0fdf8332568",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 877,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: (0, _lib.toBig)(0.1, 8),\n    asset: newCollateral\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, newCollateral);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, newCollateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral).to.be.closeTo(maxLiquidatableValueNewCollateral, USD_DELTA);",
                  "err": {},
                  "uuid": "60674814-ae05-4c07-b0b5-d1ea80731027",
                  "parentUUID": "881fa6e9-4712-47f8-bffb-d0fdf8332568",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a43cf1e5-2f14-48aa-b60e-a6a6a9fcf246",
                "dfbc3e39-0afc-4d10-9fdd-e3dba44e1950",
                "25029f06-c42c-45fd-a33f-f6d20f342e02",
                "60674814-ae05-4c07-b0b5-d1ea80731027"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7380,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "65f9724c-f127-41b5-b2f9-d3fa863c2a77",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c25143b8-7690-42aa-bd68-0e6196139768",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 235,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\n(0, _chai.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price > (0, _lib.fromBig)(minCollateralUSD, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)((0, _lib.fromBig)(newCollateralOraclePrice, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "9552d86e-9f3a-4137-95b5-dd3f07728db4",
                      "parentUUID": "c25143b8-7690-42aa-bd68-0e6196139768",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9552d86e-9f3a-4137-95b5-dd3f07728db4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 235,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hre.users.userTwo.address]: (0, _lib.toBig)(10000)\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "5f7a4f0a-9b2b-4808-90df-21c1bdbc4979",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 481,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = (0, _lib.toBig)(Number(maxLiq.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "3e19d7f3-301e-4278-8545-48023fa5da67",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to LT with a single CDP",
                      "timedOut": false,
                      "duration": 1257,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\nthis.collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\nconst MLM = (0, _lib.fromBig)(await hre.Diamond.maxLiquidationMultiplier(), 18);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4 * MLM, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "1e3d7a64-5970-46f5-b0f1-4122848cffd5",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to LT with multiple CDPs",
                      "timedOut": false,
                      "duration": 4320,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(5)\n];\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait Promise.all([\n    await this.collateral.setBalance(userThree, deposits1),\n    await collateral2.setBalance(userThree, deposits2),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits1,\n        asset: this.collateral\n    }),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits2,\n        asset: collateral2\n    }),\n    await (0, _krassets.mintKrAsset)({\n        user: userThree,\n        amount: borrows,\n        asset: this.krAsset\n    })\n]);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n// seemingly random order of updates to test that the liquidation works regardless\nthis.collateral.setPrice(6.25);\nawait collateral2.update({\n    factor: 0.975,\n    name: \"updated\"\n});\nawait this.krAsset.update({\n    factor: 1.05,\n    name: \"updated\",\n    closeFee: 0.02,\n    openFee: 0,\n    supplyLimit: 1000000\n});\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.05);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral, true);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4, CR_DELTA);\n            // expect(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "6731aff1-0227-4ff8-a826-8ca214173c2e",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 410,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst collateralIndex = await hre.Diamond.getDepositedCollateralAssetIndex(hre.users.userOne.address, this.collateral.address);\nawait this.krAsset.update({\n    name: \"jesus\",\n    factor: 1.5,\n    supplyLimit: 10000000,\n    closeFee: 0.05,\n    openFee: 0\n});\nconst mintedKreskoAssetIndex = await hre.Diamond.getMintedKreskoAssetsIndex(hre.users.userOne.address, this.krAsset.address);\nconst maxLiqValue = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst repayAmount = maxLiqValue.wadDiv(await this.krAsset.getPrice());\nconst tx = await (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, collateralIndex, false);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"LiquidationOccurred\");\n(0, _chai.expect)(event.account).to.equal(hre.users.userOne.address);\n(0, _chai.expect)(event.liquidator).to.equal(hre.users.userTwo.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "cc45af50-a4f5-4271-ab4c-c610820d8902",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 235,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(currUserOneCollateralAmount) * newCollateralPrice > (0, _lib.fromBig)(minimumCollateralUSDValueRequired, 8));\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "df109ad8-886a-40dd-bcbb-f9dca241d371",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "af5a06a8-ccd7-4e8f-98b5-cee51538787a",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 122,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _lib.toBig)(1));\n// Liquidation should fail\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "2edca6f9-c921-4919-83f7-3af40c303cca",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 357,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidationUSD = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst repaymentAmount = maxLiquidationUSD.add(1e9.toString()).wadDiv(await this.krAsset.getPrice());\n// Ensure liquidation cannot happen\nconst tx = await (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0, false);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"LiquidationOccurred\");\nconst assetInfo = await this.collateral.kresko();\nconst expectedSeizedCollateralAmount = maxLiquidationUSD.wadMul(_ethers.BigNumber.from(assetInfo.liquidationIncentive)).wadDiv(await this.collateral.getPrice());\n(0, _chai.expect)(event.account).to.equal(hre.users.userOne.address);\n(0, _chai.expect)(event.liquidator).to.equal(hre.users.userTwo.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.repayAmount).to.not.equal(repaymentAmount);\n(0, _chai.expect)(event.repayAmount).to.be.closeTo(maxLiquidationUSD.wadDiv(await this.krAsset.getPrice()), 1e12);\n(0, _chai.expect)(event.collateralSent).to.be.closeTo(expectedSeizedCollateralAmount, 1e12);",
                      "err": {},
                      "uuid": "ea4590fa-79af-46df-bd20-8d65c8c0c461",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 315,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hre.Diamond.getAccountCollateralValue(hre.users.userOne.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "ae40f332-0de4-4960-8ab4-8f5c52402322",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 221,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "4ab75ef7-8a92-4d9b-8879-aa3ba24a0df8",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 234,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(hre.users.userTwo).approve(hre.Diamond.address, repayAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "78e95d3a-2c54-45b4-a974-7cfaab6804f6",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "d21b02dc-508a-4a4f-8ab6-81233a237d44",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow seized amount to underflow without liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow seized amount to underflow without liquidators permission",
                      "timedOut": false,
                      "duration": 1613,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nthis.collateral.setPrice(2.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait this.collateral.setBalance(hre.users.liquidator, deposits.mul(1000));\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userThree, this.krAsset, this.collateral);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    amount: deposits.mul(1000),\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.liquidator,\n    amount: liqAmount,\n    asset: this.krAsset\n});\nconst allowSeizeUnderflow = false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userThree.address, this.krAsset.address, liqAmount, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userThree.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userThree.address, this.collateral.address), allowSeizeUnderflow)).to.be.revertedWith(_errors.Error.SEIZED_COLLATERAL_UNDERFLOW);",
                      "err": {},
                      "uuid": "1f5ba08c-0973-4e4d-a87e-ae89c3dfe217",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow seized amount to underflow with liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow seized amount to underflow with liquidators permission",
                      "timedOut": false,
                      "duration": 1565,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nthis.collateral.setPrice(2.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait this.collateral.setBalance(hre.users.liquidator, deposits.mul(1000));\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userThree, this.krAsset, this.collateral);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    amount: deposits.mul(1000),\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.liquidator,\n    amount: liqAmount,\n    asset: this.krAsset\n});\nconst allowSeizeUnderflow = true;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userThree.address, this.krAsset.address, liqAmount, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userThree.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userThree.address, this.collateral.address), allowSeizeUnderflow)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "f3922e2d-b7c6-4b7d-a955-ff4b113942f6",
                      "parentUUID": "8b076b81-905e-490e-9dd8-66f26d9a7d29",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3e19d7f3-301e-4278-8545-48023fa5da67",
                    "1e3d7a64-5970-46f5-b0f1-4122848cffd5",
                    "6731aff1-0227-4ff8-a826-8ca214173c2e",
                    "cc45af50-a4f5-4271-ab4c-c610820d8902",
                    "df109ad8-886a-40dd-bcbb-f9dca241d371",
                    "af5a06a8-ccd7-4e8f-98b5-cee51538787a",
                    "2edca6f9-c921-4919-83f7-3af40c303cca",
                    "ea4590fa-79af-46df-bd20-8d65c8c0c461",
                    "ae40f332-0de4-4960-8ab4-8f5c52402322",
                    "4ab75ef7-8a92-4d9b-8879-aa3ba24a0df8",
                    "78e95d3a-2c54-45b4-a974-7cfaab6804f6",
                    "d21b02dc-508a-4a4f-8ab6-81233a237d44",
                    "1f5ba08c-0973-4e4d-a87e-ae89c3dfe217",
                    "f3922e2d-b7c6-4b7d-a955-ff4b113942f6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11179,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "96418e5d-994e-4687-8124-2b2ec75234bc",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 1866,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hre.users.testUserEight;\nuserToLiquidateTwo = hre.users.testUserNine;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits\n});\nawait (0, _testutils.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _testutils.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nconst mcr = (0, _lib.fromBig)(await hre.Diamond.minimumCollateralizationRatio(), 8);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidate.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidateTwo.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "c4b8b784-addc-4015-9400-d97a571c2db6",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 253,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "bd151ee2-52f0-4a67-9edf-00cb127d7494",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 256,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "2a813249-cf2d-4c60-b9cc-f296f62dfca4",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 1126,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "f98fb557-a5cf-4776-ae61-5d7eb7b0da5f",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 1545,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "e8698405-f91f-4342-8c4e-7fb0b6091b02",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 3986,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 10;\nawait this.collateral.setBalance(userToLiquidate, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).depositCollateral(userToLiquidate.address, this.collateral.address, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).mintKreskoAsset(userToLiquidate.address, (await (0, _krassets.addMockKreskoAsset)()).address, (0, _lib.toBig)(65));\nthis.krAsset.setPrice(newPrice);\nconst deposits = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\nconst debt = await hre.Diamond.kreskoAssetDebt(userToLiquidate.address, this.krAsset.address);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userToLiquidate, this.krAsset, this.krAsset);\n(0, _chai.expect)(deposits).to.equal(liqAmount);\n(0, _chai.expect)(debt).to.gte(liqAmount);\nawait this.krAsset.setBalance(hre.users.liquidator, debt);\nconst assetInfoCollateral = await hre.Diamond.collateralAsset(this.krAsset.address);\nconst assetInfoKr = await hre.Diamond.kreskoAsset(this.krAsset.address);\nconst liquidationAmount = liqAmount.add(\"263684912200000000\").wadDiv(assetInfoCollateral.liquidationIncentive).wadMul(_ethers.BigNumber.from(_lib.WAD).sub(assetInfoKr.closeFee)).add(_lib.WAD);\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, liquidationAmount, this.krAsset.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.krAsset.address), false);\nconst depositsAfter = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "d97666e5-0320-4472-9675-85d114510963",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals to 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals to 0",
                      "timedOut": false,
                      "duration": 3565,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 10;\nawait this.collateral.setBalance(userToLiquidate, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).depositCollateral(userToLiquidate.address, this.collateral.address, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).mintKreskoAsset(userToLiquidate.address, (await (0, _krassets.addMockKreskoAsset)()).address, (0, _lib.toBig)(65));\nthis.krAsset.setPrice(newPrice);\nconst deposits = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\nconst debt = await hre.Diamond.kreskoAssetDebt(userToLiquidate.address, this.krAsset.address);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userToLiquidate, this.krAsset, this.krAsset);\n(0, _chai.expect)(deposits).to.equal(liqAmount);\n(0, _chai.expect)(debt).to.gte(liqAmount);\nawait this.krAsset.setBalance(hre.users.liquidator, debt);\nconst assetInfoCollateral = await hre.Diamond.collateralAsset(this.krAsset.address);\nconst assetInfoKr = await hre.Diamond.kreskoAsset(this.krAsset.address);\nconst liquidationAmount = liqAmount.add(\"263684912400000000\").wadDiv(assetInfoCollateral.liquidationIncentive).wadMul(_ethers.BigNumber.from(_lib.WAD).sub(assetInfoKr.closeFee)).add(_lib.WAD);\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, liquidationAmount, this.krAsset.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.krAsset.address), false);\nconst depositsAfter = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\n(0, _chai.expect)(depositsAfter).to.equal(0);",
                      "err": {},
                      "uuid": "07dca76e-99e9-475a-9abf-5baddc5d7fee",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 6183,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "727ea99b-e96c-44b7-8d36-95e23acfc5c8",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 6461,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "ab9ab63c-ea7f-47b9-9591-40ead07fb79a",
                      "parentUUID": "96418e5d-994e-4687-8124-2b2ec75234bc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bd151ee2-52f0-4a67-9edf-00cb127d7494",
                    "2a813249-cf2d-4c60-b9cc-f296f62dfca4",
                    "f98fb557-a5cf-4776-ae61-5d7eb7b0da5f",
                    "e8698405-f91f-4342-8c4e-7fb0b6091b02",
                    "d97666e5-0320-4472-9675-85d114510963",
                    "07dca76e-99e9-475a-9abf-5baddc5d7fee",
                    "727ea99b-e96c-44b7-8d36-95e23acfc5c8",
                    "ab9ab63c-ea7f-47b9-9591-40ead07fb79a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 23375,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ddd76946-bce8-4096-be67-11e7069786bb",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 111,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "1eb220b2-11b5-4da4-92e9-c0284611bd6f",
              "parentUUID": "ddd76946-bce8-4096-be67-11e7069786bb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 260,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\n// Load account with collateral\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.setBalance(_hardhat.default.users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, _collaterals.depositCollateral)({\n    amount: 10000,\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral\n});",
              "err": {},
              "uuid": "88a03b08-ee3e-49a7-a248-ee1fb7f05bf5",
              "parentUUID": "ddd76946-bce8-4096-be67-11e7069786bb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a94dc49-b54c-43ee-b701-35e7ae992654",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "957ac054-6619-429e-876f-84d8ae69801b",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 183,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "b9ab3889-3a7f-4c5a-ac5f-143a34d0f562",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 375,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(50);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(50);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "0754c040-5c8e-460c-9996-2375adbe2073",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 2802,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: 0\n};\nconst { contract: secondKreskoAsset  } = await (0, _krassets.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(20);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address,\n    secondKreskoAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, secondKreskoAsset.address);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "00c8230f-07cd-466b-b01a-766b27798669",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 217,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _lib.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)((0, _lib.fromBig)(mintAmountUSDValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "8901b4b6-6c4c-4900-b407-83815fbef462",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 205,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "0073ad58-cb08-41ca-9785-0f607aa0a782",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 112,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, _lib.toBig)(500);\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetMinted\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "9197138e-5311-4403-b231-589e910a7bfd",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(1);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "6e525dda-fcc8-4132-8667-e62ba0e4506b",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 187,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "7e27e99a-3181-4091-a591-5eb5d51de51f",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "00131564-0481-4c29-aed8-fa5c69f99792",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 90,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, _lib.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, _lib.toBig)(mcrAmount + 1);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "5ac7e355-6d91-4232-a5e4-d57ad69966b5",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).depositCollateral(_hardhat.default.users.userOne.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await _hardhat.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, _lib.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(overSupplyLimit))).to.be.revertedWith(_errors.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "4e63d27b-1eee-4bff-89ba-cad08d35c19f",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "d1f5d143-a8d8-4a7e-94de-345dcd186aea",
                      "parentUUID": "957ac054-6619-429e-876f-84d8ae69801b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b9ab3889-3a7f-4c5a-ac5f-143a34d0f562",
                    "0754c040-5c8e-460c-9996-2375adbe2073",
                    "00c8230f-07cd-466b-b01a-766b27798669",
                    "8901b4b6-6c4c-4900-b407-83815fbef462",
                    "0073ad58-cb08-41ca-9785-0f607aa0a782",
                    "9197138e-5311-4403-b231-589e910a7bfd",
                    "6e525dda-fcc8-4132-8667-e62ba0e4506b",
                    "7e27e99a-3181-4091-a591-5eb5d51de51f",
                    "00131564-0481-4c29-aed8-fa5c69f99792",
                    "5ac7e355-6d91-4232-a5e4-d57ad69966b5",
                    "4e63d27b-1eee-4bff-89ba-cad08d35c19f"
                  ],
                  "failures": [],
                  "pending": [
                    "d1f5d143-a8d8-4a7e-94de-345dcd186aea"
                  ],
                  "skipped": [],
                  "duration": 4333,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "9377a938-4abc-43d7-9e50-225dda1398a7",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "6bc2a769-4d1c-41ae-af76-f164b4b5c065",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 143,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "a331f0ec-b0e5-4237-aebf-a7fec820a5db",
                          "parentUUID": "6bc2a769-4d1c-41ae-af76-f164b4b5c065",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 149,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "56d0816e-52c8-4a91-b8f6-5a1b719c775f",
                          "parentUUID": "6bc2a769-4d1c-41ae-af76-f164b4b5c065",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 151,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "be965ecf-77d0-4e13-b55a-a5c0215d10ba",
                          "parentUUID": "6bc2a769-4d1c-41ae-af76-f164b4b5c065",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 144,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "52186fe4-0af7-448f-bf22-43d62b5d2e74",
                          "parentUUID": "6bc2a769-4d1c-41ae-af76-f164b4b5c065",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a331f0ec-b0e5-4237-aebf-a7fec820a5db",
                        "56d0816e-52c8-4a91-b8f6-5a1b719c775f",
                        "be965ecf-77d0-4e13-b55a-a5c0215d10ba",
                        "52186fe4-0af7-448f-bf22-43d62b5d2e74"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 587,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "6870d1f7-b9d6-4683-b336-b2f4968133d7",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 204,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "6ce7b3a9-f0e3-412a-93b1-2d1d4e7feea7",
                          "parentUUID": "6870d1f7-b9d6-4683-b336-b2f4968133d7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 205,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "14b8a77a-3ef8-43d2-8f7c-34b2d98824bd",
                          "parentUUID": "6870d1f7-b9d6-4683-b336-b2f4968133d7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 197,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "c963c4a4-cae5-4047-9c48-e20d6a19cfa0",
                          "parentUUID": "6870d1f7-b9d6-4683-b336-b2f4968133d7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 193,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "10801948-d3fa-42fd-a009-0d788ff01e14",
                          "parentUUID": "6870d1f7-b9d6-4683-b336-b2f4968133d7",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "6ce7b3a9-f0e3-412a-93b1-2d1d4e7feea7",
                        "14b8a77a-3ef8-43d2-8f7c-34b2d98824bd",
                        "c963c4a4-cae5-4047-9c48-e20d6a19cfa0",
                        "10801948-d3fa-42fd-a009-0d788ff01e14"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 799,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "0f61ed28-15f4-4cf7-9b9a-d520fb5abba0",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 457,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(valueBeforeRebase);\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "c9853362-713c-4375-ac49-a2160bdedfc5",
                          "parentUUID": "0f61ed28-15f4-4cf7-9b9a-d520fb5abba0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 457,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, this.krAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "c50bc5fc-4cf7-47ee-9c38-c42e34765e42",
                          "parentUUID": "0f61ed28-15f4-4cf7-9b9a-d520fb5abba0",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c9853362-713c-4375-ac49-a2160bdedfc5",
                        "c50bc5fc-4cf7-47ee-9c38-c42e34765e42"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 914,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 272,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, _lib.toBig)(20);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userThree.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userThree.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.users.userThree.address)).to.equal(this.initialBalance);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).depositCollateral(_hardhat.default.users.userThree.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "39884e07-0a35-40fc-9195-49a0e6b43ec9",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 173,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "79dc459f-d3db-42bc-bf49-08dff85d8c08",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "770cc0c1-0079-45f7-93eb-8af930c64c96",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 216,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userThree.address);\n(0, _chai.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "c45f5ef9-7b31-4d91-8cda-47feab229001",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "cde0cfb4-e7ed-44f4-a5e7-30a5b4bc9351",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 216,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, _lib.fromBig)(await _hardhat.default.Diamond.minimumDebtValue(), 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = (0, _lib.toBig)((0, _lib.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "fd679ed7-6443-47fb-9fc9-5b75bf703518",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetBurned\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "20a47efb-2e67-4a16-8693-8d1868dd8f2a",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 248,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "25e6b389-6152-4857-8a7f-e66884957370",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(_errors.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "4d0f7e95-6985-4dd1-bf5c-c47ecc2f90cb",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "86e68934-eeb6-46e2-b424-9064651afd24",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add((0, _lib.toBig)(1));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "8661c00e-74cc-4a03-8b22-a7340f8051e8",
                      "parentUUID": "06aaeb86-9f07-42a8-9955-a7f11e69ca11",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "4fb3c330-04a2-43e4-8c79-36a7580e93dd",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 391,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, _lib.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._testutils.defaultKrAssetArgs,\n    openFee\n});\nconst mintAmount = (0, _lib.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"OpenFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await _hardhat.default.Diamond.calcExpectedFee(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount, _testutils.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, _chai.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "566cee49-45c6-4a93-ab61-c8db4251b6db",
                          "parentUUID": "4fb3c330-04a2-43e4-8c79-36a7580e93dd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "566cee49-45c6-4a93-ab61-c8db4251b6db"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 391,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "958121ed-5eb2-401c-870d-e6c2e8eb0526",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 195,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _lib.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, _lib.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "bddfa987-d1c5-4a8d-acf2-e4f42bcdb702",
                          "parentUUID": "958121ed-5eb2-401c-870d-e6c2e8eb0526",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 728,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "880b1181-2a53-4ca2-966f-c6d477f30397",
                          "parentUUID": "958121ed-5eb2-401c-870d-e6c2e8eb0526",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 1128,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "1d4fac4d-16e3-40e4-8f19-ea7668449753",
                          "parentUUID": "958121ed-5eb2-401c-870d-e6c2e8eb0526",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "bddfa987-d1c5-4a8d-acf2-e4f42bcdb702",
                        "880b1181-2a53-4ca2-966f-c6d477f30397",
                        "1d4fac4d-16e3-40e4-8f19-ea7668449753"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2051,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "79dc459f-d3db-42bc-bf49-08dff85d8c08",
                    "c45f5ef9-7b31-4d91-8cda-47feab229001",
                    "fd679ed7-6443-47fb-9fc9-5b75bf703518",
                    "20a47efb-2e67-4a16-8693-8d1868dd8f2a",
                    "25e6b389-6152-4857-8a7f-e66884957370",
                    "4d0f7e95-6985-4dd1-bf5c-c47ecc2f90cb",
                    "86e68934-eeb6-46e2-b424-9064651afd24",
                    "8661c00e-74cc-4a03-8b22-a7340f8051e8"
                  ],
                  "failures": [],
                  "pending": [
                    "770cc0c1-0079-45f7-93eb-8af930c64c96",
                    "cde0cfb4-e7ed-44f4-a5e7-30a5b4bc9351"
                  ],
                  "skipped": [],
                  "duration": 1109,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d401056a-256b-4f75-ba66-b967eebe1662",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 255,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmountInt,\n    user: _hardhat.default.users.userOne\n});",
                      "err": {},
                      "uuid": "b1858362-9982-4369-9c83-e386c0036418",
                      "parentUUID": "d401056a-256b-4f75-ba66-b967eebe1662",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "880863f9-6e3f-4d55-b043-35aba7a7c3ab",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 188,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.closeTo((0, _lib.toBig)(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "19e99b07-5a8f-46b6-9c88-229ad36e2f25",
                          "parentUUID": "880863f9-6e3f-4d55-b043-35aba7a7c3ab",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 196,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "1bccd8fe-b931-415e-b093-980488a946a8",
                          "parentUUID": "880863f9-6e3f-4d55-b043-35aba7a7c3ab",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 188,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _lib.toBig)(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "89377d1f-bcc9-4d0d-ad86-e4f14e8c5625",
                          "parentUUID": "880863f9-6e3f-4d55-b043-35aba7a7c3ab",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 194,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "ca346308-f2e9-4e9a-9c76-fd59e6167c87",
                          "parentUUID": "880863f9-6e3f-4d55-b043-35aba7a7c3ab",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "19e99b07-5a8f-46b6-9c88-229ad36e2f25",
                        "1bccd8fe-b931-415e-b093-980488a946a8",
                        "89377d1f-bcc9-4d0d-ad86-e4f14e8c5625",
                        "ca346308-f2e9-4e9a-9c76-fd59e6167c87"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 766,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "953ff271-4e72-45f8-b7c6-31ecf36853bd",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 202,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "a579b058-df06-4da0-839c-b158204239a2",
                          "parentUUID": "953ff271-4e72-45f8-b7c6-31ecf36853bd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 344,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "edc06143-814b-41bc-8f7d-853e57e81f9b",
                          "parentUUID": "953ff271-4e72-45f8-b7c6-31ecf36853bd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 194,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "25f2b10e-2fb2-4f00-a8b6-933a5feb07b8",
                          "parentUUID": "953ff271-4e72-45f8-b7c6-31ecf36853bd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 299,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "610af3df-da0e-4c37-80c8-b56f3215da14",
                          "parentUUID": "953ff271-4e72-45f8-b7c6-31ecf36853bd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a579b058-df06-4da0-839c-b158204239a2",
                        "edc06143-814b-41bc-8f7d-853e57e81f9b",
                        "25f2b10e-2fb2-4f00-a8b6-933a5feb07b8",
                        "610af3df-da0e-4c37-80c8-b56f3215da14"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1039,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ab723c2b-5e7a-4334-9163-a21def861e8f",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "1c324f43-8dcf-4007-ab67-4525586af0a9",
              "parentUUID": "ab723c2b-5e7a-4334-9163-a21def861e8f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 4345,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.secondCollateral = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    price: 1,\n    factor: 1,\n    decimals: 18\n});\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nconst krAssetArgs = {\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    price: 10,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: 0,\n    openFee: 0\n};\nthis.krAsset = await (0, _krassets.addMockKreskoAsset)(krAssetArgs);\nthis.initialBalance = (0, _lib.toBig)(1000000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userFive.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userFive.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.users.userFive.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: _hardhat.default.users.userFive,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(100000)\n};\nthis.mintArgs = {\n    user: _hardhat.default.users.userFive,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(2000)\n};\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userFive).depositCollateral(_hardhat.default.users.userFive.address, this.depositArgs.asset.address, this.depositArgs.amount);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userFive).mintKreskoAsset(_hardhat.default.users.userFive.address, this.mintArgs.asset.address, this.mintArgs.amount);",
              "err": {},
              "uuid": "ce3db858-5356-408e-89dc-25586e8ea8b6",
              "parentUUID": "ab723c2b-5e7a-4334-9163-a21def861e8f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "999bd3fb-4e51-4f43-9283-7d362365fb60",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6fa7bbf7-a5df-4d07-adc1-68a4d27a8f46",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should withdraw correct amount",
                      "timedOut": false,
                      "duration": 973,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nconst Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.testWithdrawalAmount(this.collateral.address, withdrawalAmount)).to.not.be.revertedWith(\"wront amount received\");\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "c5b3690e-3aaf-4c11-9de1-5e8ed5b98ea8",
                      "parentUUID": "6fa7bbf7-a5df-4d07-adc1-68a4d27a8f46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 1006,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst balKreskoBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nawait Receiver.test(this.collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(this.collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(_hardhat.default.users.userFive.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "766559ad-a4cd-4512-9b29-502a3cf14276",
                      "parentUUID": "6fa7bbf7-a5df-4d07-adc1-68a4d27a8f46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 1331,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(this.collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralRatio(_hardhat.default.users.userFive.address)).to.be.closeTo(15e17.toString(), 1e10.toString());\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 10e15.toString())).to.be.reverted;",
                      "err": {},
                      "uuid": "3eba582f-a867-4e71-ab73-55eacbbdfc7a",
                      "parentUUID": "6fa7bbf7-a5df-4d07-adc1-68a4d27a8f46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 1014,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nawait Receiver.testRedeposit(this.collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "fe068191-50db-4a9f-b32c-ca53ce13cd5a",
                      "parentUUID": "6fa7bbf7-a5df-4d07-adc1-68a4d27a8f46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 1028,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nawait this.secondCollateral.setPrice((0, _lib.fromBig)(await this.collateral.getPrice(), 8));\nawait this.secondCollateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userFive.address]: this.initialBalance\n});\nawait this.secondCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userFive.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance,\n        [Receiver.address]: this.initialBalance\n    }\n});\nawait Receiver.testDepositAlternate(this.collateral.address, deposits, this.secondCollateral.address);\nconst secondCollateralDeposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.secondCollateral.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "76ef3deb-ffb5-4413-aef2-e76a926f8545",
                      "parentUUID": "6fa7bbf7-a5df-4d07-adc1-68a4d27a8f46",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c5b3690e-3aaf-4c11-9de1-5e8ed5b98ea8",
                    "766559ad-a4cd-4512-9b29-502a3cf14276",
                    "3eba582f-a867-4e71-ab73-55eacbbdfc7a",
                    "fe068191-50db-4a9f-b32c-ca53ce13cd5a",
                    "76ef3deb-ffb5-4413-aef2-e76a926f8545"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5352,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "48072524-20ee-454b-8aad-5527e76f9921",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 869,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 0)).to.be.revertedWith(_testutils.Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "f159268c-2a52-4412-b70f-253803a7fbe8",
                      "parentUUID": "48072524-20ee-454b-8aad-5527e76f9921",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 838,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond, false), _hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 1)).to.be.revertedWith(`AccessControl: account ${Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "32332c03-a1ad-4cb1-8a06-e412b95c3e78",
                      "parentUUID": "48072524-20ee-454b-8aad-5527e76f9921",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 1099,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "a22d03f1-e428-4bfb-a578-483e455a0789",
                      "parentUUID": "48072524-20ee-454b-8aad-5527e76f9921",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 1101,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(this.collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "ccf368b5-a921-4934-a070-97b72cee9498",
                      "parentUUID": "48072524-20ee-454b-8aad-5527e76f9921",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f159268c-2a52-4412-b70f-253803a7fbe8",
                    "32332c03-a1ad-4cb1-8a06-e412b95c3e78",
                    "a22d03f1-e428-4bfb-a578-483e455a0789",
                    "ccf368b5-a921-4934-a070-97b72cee9498"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3907,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "11e7c7ac-b73c-4229-b058-0d74c35df68c",
          "title": "Redstone",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-redstone.ts",
          "file": "/src/test/oracle/00-redstone.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Redstone\"",
              "fullTitle": "Redstone \"before each\" hook in \"Redstone\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ea133281-14e7-4048-b881-a2508a8104b2",
              "parentUUID": "11e7c7ac-b73c-4229-b058-0d74c35df68c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Redstone\"",
              "fullTitle": "Redstone \"before each\" hook in \"Redstone\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nthis.deployer = await _hardhat.default.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await _hardhat.default.ethers.getNamedSigner(\"userOne\");",
              "err": {},
              "uuid": "b734562e-fa1d-4130-af42-9ffb8d7db2ce",
              "parentUUID": "11e7c7ac-b73c-4229-b058-0d74c35df68c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a2437fe7-7532-48fc-90b5-2c78c5ad9ca4",
              "title": "Redstone",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-redstone.ts",
              "file": "/src/test/oracle/00-redstone.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Redstone\"",
                  "fullTitle": "Redstone Redstone \"before each\" hook in \"Redstone\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ethers  } = _hardhat.default;\nredstoneCollateral = this.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\n/// set initial collateral price\nredstoneCollateral.setPrice(10);\nconst initialBalance = (0, _lib.toBig)(100000);\nawait redstoneCollateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: initialBalance\n});\nawait redstoneCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: initialBalance\n    }\n});\nconst MockSequencerUptimeFeed = await ethers.getContractFactory(\"MockSequencerUptimeFeed\");\nmockSequencerUptimeFeed = await MockSequencerUptimeFeed.deploy();\nthis.depositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: redstoneCollateral,\n    amount: (0, _lib.toBig)(1)\n};\nawait _hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, redstoneCollateral.address, this.depositArgs.amount);\n// check initial conditions\n(0, _chai.expect)(await redstoneCollateral.getPrice()).to.equal((0, _lib.toBig)(10, 8), \"collateral price should be $10\");\n// As redstone price is 0, will use chainlink price = 10\n// so collateral value = $10 * 1 = $10\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(10, 8), \"collateral value should be $10\");",
                  "err": {},
                  "uuid": "16f5d345-f150-42f7-b7d6-1eb5da5b7ba5",
                  "parentUUID": "a2437fe7-7532-48fc-90b5-2c78c5ad9ca4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Redstone Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nredstoneCollateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// so collateral value = $20 * 1 = $20\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(redstoneCollateralPrice, 8), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "afae2c76-2405-484b-86fe-b8b88b1ff632",
                  "parentUUID": "a2437fe7-7532-48fc-90b5-2c78c5ad9ca4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get chainlink price when price +- oracleDeviationPct of redstone price ",
                  "fullTitle": "Redstone Redstone should get chainlink price when price +- oracleDeviationPct of redstone price ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 12\nredstoneCollateral.setPrice(12);\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// so collateral value = $12 * 1 = $12\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(12, 8), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "ac528233-7cd9-4623-acb3-7f174df7c5fb",
                  "parentUUID": "a2437fe7-7532-48fc-90b5-2c78c5ad9ca4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Redstone Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nredstoneCollateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// should revert if price deviates more than oracleDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.be.revertedWith(_test.Error.ORACLE_PRICE_UNSTABLE);\nredstoneCollateral.setPrice(10);",
                  "err": {},
                  "uuid": "78bed150-e065-4e3c-9bfb-380f9f1146c4",
                  "parentUUID": "a2437fe7-7532-48fc-90b5-2c78c5ad9ca4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return redstone price if sequencer is down",
                  "fullTitle": "Redstone Redstone should return redstone price if sequencer is down",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 5\nredstoneCollateral.setPrice(5);\nconst redstoneCollateralPrice = 200;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n/// set sequencer uptime feed address\nawait redstoneDiamond.updateSequencerUptimeFeed(mockSequencerUptimeFeed.address);\n// should return redstone price if sequencer is down\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.be.equal((0, _lib.toBig)(redstoneCollateralPrice, 8), \"collateral value should be $200\");\nredstoneCollateral.setPrice(10);",
                  "err": {},
                  "uuid": "36e179a7-2e82-44a5-b4c2-f30dd9583489",
                  "parentUUID": "a2437fe7-7532-48fc-90b5-2c78c5ad9ca4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afae2c76-2405-484b-86fe-b8b88b1ff632",
                "ac528233-7cd9-4623-acb3-7f174df7c5fb",
                "78bed150-e065-4e3c-9bfb-380f9f1146c4",
                "36e179a7-2e82-44a5-b4c2-f30dd9583489"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f7ae9b65-803d-499a-b3c9-33a27a4cc952",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ef2bdd9c-434e-436a-a354-f38ed8ba08d3",
              "parentUUID": "f7ae9b65-803d-499a-b3c9-33a27a4cc952",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = _hardhat.default.collaterals.find((asset)=>asset.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer , devTwo , extOne , extTwo , devOne  } = await _hardhat.default.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
              "uuid": "a48221b2-cf49-4246-bcc2-10496f97dad0",
              "parentUUID": "f7ae9b65-803d-499a-b3c9-33a27a4cc952",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0f3028a-87a0-4b11-959f-54083ab7dda1",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await _hardhat.default.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"setSafetyStateSet\", [\n    true\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst safetyState = await _hardhat.default.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "59d44851-bd8b-4799-89fa-e4611a52fcef",
                  "parentUUID": "d0f3028a-87a0-4b11-959f-54083ab7dda1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59d44851-bd8b-4799-89fa-e4611a52fcef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "7ff07be2-a9b1-4225-b72d-b2932193a4fe",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "042ce835-ed42-42e7-ab24-f416446c9864",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "092e65e4-9c54-4188-ab75-acf08c0c8046",
                      "parentUUID": "042ce835-ed42-42e7-ab24-f416446c9864",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "63694f1d-7cb1-410e-9361-9da2ac3e5d67",
                      "parentUUID": "042ce835-ed42-42e7-ab24-f416446c9864",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "6957ff1d-d854-4c0b-bf92-bc2715fab74b",
                      "parentUUID": "042ce835-ed42-42e7-ab24-f416446c9864",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "d739e32e-ad19-40a6-b29a-601f000cfa14",
                      "parentUUID": "042ce835-ed42-42e7-ab24-f416446c9864",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "092e65e4-9c54-4188-ab75-acf08c0c8046",
                    "63694f1d-7cb1-410e-9361-9da2ac3e5d67",
                    "6957ff1d-d854-4c0b-bf92-bc2715fab74b",
                    "d739e32e-ad19-40a6-b29a-601f000cfa14"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 229,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "a00fc49d-d141-4ea9-b879-601a1464acd6",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "e7292ff7-b88f-4ad9-bdfd-c6cd65d57d53",
                      "parentUUID": "a00fc49d-d141-4ea9-b879-601a1464acd6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.krAsset.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.krAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "189cdc23-7121-4d83-bb31-2473ef15a8c4",
                      "parentUUID": "a00fc49d-d141-4ea9-b879-601a1464acd6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = _hardhat.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        randomAddr\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "e5f23e0b-581a-4ef5-a94b-94ab1c5bc72f",
                      "parentUUID": "a00fc49d-d141-4ea9-b879-601a1464acd6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e7292ff7-b88f-4ad9-bdfd-c6cd65d57d53",
                    "189cdc23-7121-4d83-bb31-2473ef15a8c4",
                    "e5f23e0b-581a-4ef5-a94b-94ab1c5bc72f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 190,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "5bafb7b0-3c56-435f-b242-7bc4b782e738",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "c76d2f9c-05c8-4d14-9aef-44d090c751b6",
                      "parentUUID": "5bafb7b0-3c56-435f-b242-7bc4b782e738",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockBefore = await _hardhat.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, _chai.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait _hardhat.default.ethers.provider.send(\"evm_increaseTime\", [\n    sevenDays\n]);\nawait _hardhat.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockAfter = await _hardhat.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, _chai.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, _chai.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, _chai.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n            // NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "c564f0fd-7657-4a98-8e79-c44e783d284d",
                      "parentUUID": "5bafb7b0-3c56-435f-b242-7bc4b782e738",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c76d2f9c-05c8-4d14-9aef-44d090c751b6",
                    "c564f0fd-7657-4a98-8e79-c44e783d284d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 124,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "cb3d92b8-9de2-425c-ba5d-ce8ab4379614",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 117,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "820d3256-b1a8-44cf-a7dc-6f0feb7e2a06",
                      "parentUUID": "cb3d92b8-9de2-425c-ba5d-ce8ab4379614",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 118,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "51921e59-93ad-4635-b803-dbd68c1f19b7",
                      "parentUUID": "cb3d92b8-9de2-425c-ba5d-ce8ab4379614",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "cdc10d30-518f-4ee2-972e-663a2b56f9c8",
                      "parentUUID": "cb3d92b8-9de2-425c-ba5d-ce8ab4379614",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "96e4a261-32c4-4c0a-94f2-0a73db85a7bc",
                      "parentUUID": "cb3d92b8-9de2-425c-ba5d-ce8ab4379614",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "de97b37e-6c99-4b29-85a4-b62bff89f416",
                      "parentUUID": "cb3d92b8-9de2-425c-ba5d-ce8ab4379614",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "820d3256-b1a8-44cf-a7dc-6f0feb7e2a06",
                    "51921e59-93ad-4635-b803-dbd68c1f19b7",
                    "cdc10d30-518f-4ee2-972e-663a2b56f9c8",
                    "96e4a261-32c4-4c0a-94f2-0a73db85a7bc",
                    "de97b37e-6c99-4b29-85a4-b62bff89f416"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 595,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "b087e407-780d-4808-83c3-9b5c63cc5966",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"SafetyStateChange\");\n(0, _chai.expect)(event.action).to.equal(_testutils.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(_hardhat.default.ethers.utils.keccak256(_hardhat.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "443fbc2f-3461-45e1-9286-92a945e1b0b3",
                      "parentUUID": "b087e407-780d-4808-83c3-9b5c63cc5966",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "443fbc2f-3461-45e1-9286-92a945e1b0b3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 41,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "dc84bacf-3c2d-45d4-b6d2-0f6d49666322",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 38,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    await _hardhatnetworkhelpers.time.increase(3602);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "6bb2d533-265d-48c8-ade8-2bf806c61d1b",
              "parentUUID": "dc84bacf-3c2d-45d4-b6d2-0f6d49666322",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 6626,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = [\n    _hardhat.default.users.testUserFive,\n    _hardhat.default.users.testUserSix,\n    _hardhat.default.users.testUserSeven\n];\n[KreskoAsset, CollateralAsset, CollateralAsset8Dec] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice10USD\",\n        price: collateralPrice,\n        symbol: \"KreskoAssetPrice10USD\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1.25,\n        supplyLimit: 100000\n    }, true),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral18Dec\",\n        price: collateralPrice,\n        factor: 1,\n        decimals: 18\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral8Dec\",\n        price: collateralPrice,\n        factor: 0.8,\n        decimals: 8\n    })\n]);\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, depositAmount18Dec),\n        await CollateralAsset8Dec.setBalance(user, depositAmount8Dec),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}",
              "err": {},
              "uuid": "d5c5426f-5f91-42bf-84db-28543707b403",
              "parentUUID": "dc84bacf-3c2d-45d4-b6d2-0f6d49666322",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d84c52ee-19d0-4b51-ac65-542086992702",
              "title": "#Configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be initialized with correct params",
                  "fullTitle": "SCDP #Configuration should be initialized with correct params",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { args  } = await (0, _shared.getSCDPInitializer)(_hardhat.default);\nconst configuration = await _hardhat.default.Diamond.getSCDPConfig();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.lt).to.equal(args.lt);\n(0, _chai.expect)(configuration.mcr).to.equal(args.mcr);",
                  "err": {},
                  "uuid": "795786e5-4830-4689-936d-70dd77a79d8d",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted collateral",
                  "fullTitle": "SCDP #Configuration should be able to add whitelisted collateral",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal(configuration.liquidationIncentive);\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(configuration.depositLimit);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPAssetEnabled(CollateralAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "33629139-4de2-421e-ab65-3432dcffaa26",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted collateral",
                  "fullTitle": "SCDP #Configuration should be able to update a whitelisted collateral",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.updatePoolCollateral(CollateralAsset.address, (0, _lib.toBig)(1.05), 1);\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal((0, _lib.toBig)(1.05));\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(1);",
                  "err": {},
                  "uuid": "d323c1c2-7a6d-4b19-b3db-4b8722879e80",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted collateral asset",
                  "fullTitle": "SCDP #Configuration should be able to disable a whitelisted collateral asset",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPAssetEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "96412052-43d3-4a09-a4c8-53fba18436f2",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a collateral asset",
                  "fullTitle": "SCDP #Configuration should be able to remove a collateral asset",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPAssetEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "a277d588-9147-4f71-bd53-8ca85c832047",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to add whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(configuration.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(configuration.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(configuration.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(configuration.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPAssetEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "a6b04de1-dfca-4d3f-af43-5dd4088f154f",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to update a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst update = {\n    openFee: (0, _lib.toBig)(0.05),\n    closeFee: (0, _lib.toBig)(0.05),\n    protocolFee: (0, _lib.toBig)(0.4),\n    supplyLimit: (0, _lib.toBig)(50000)\n};\nawait _hardhat.default.Diamond.updatePoolKrAsset(KreskoAsset.address, update);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(update.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(update.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(update.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(update.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPAssetEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "edbb4a40-ec50-4844-bffc-b3aa2fec8610",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to disable a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPAssetEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "0c30288d-df6b-4cec-ab8e-727b520de2f3",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to remove a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPAssetEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "d7fd1fc2-d324-46cb-ae72-f71f259f1178",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to enable and disable swap pairs",
                  "fullTitle": "SCDP #Configuration should be able to enable and disable swap pairs",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapPairsEnabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: true\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: false\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSCDPSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "0e83842b-f9de-4020-9100-87ae52b3e9d1",
                  "parentUUID": "d84c52ee-19d0-4b51-ac65-542086992702",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "795786e5-4830-4689-936d-70dd77a79d8d",
                "33629139-4de2-421e-ab65-3432dcffaa26",
                "d323c1c2-7a6d-4b19-b3db-4b8722879e80",
                "96412052-43d3-4a09-a4c8-53fba18436f2",
                "a277d588-9147-4f71-bd53-8ca85c832047",
                "a6b04de1-dfca-4d3f-af43-5dd4088f154f",
                "edbb4a40-ec50-4844-bffc-b3aa2fec8610",
                "0c30288d-df6b-4cec-ab8e-727b520de2f3",
                "d7fd1fc2-d324-46cb-ae72-f71f259f1178",
                "0e83842b-f9de-4020-9100-87ae52b3e9d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1197,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "46e08df7-f0d3-4f21-a143-6eb4b3473199",
              "title": "#Deposit",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Deposit\"",
                  "fullTitle": "SCDP #Deposit \"before each\" hook in \"#Deposit\"",
                  "timedOut": false,
                  "duration": 191,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 8,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "9a5eabe3-d307-4501-9b77-6449e3637870",
                  "parentUUID": "46e08df7-f0d3-4f21-a143-6eb4b3473199",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "SCDP #Deposit should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 1555,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    // Unadjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    // Adjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n// Unadjusted\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);\n// Adjusted\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "b3334051-b075-4ff4-93c5-5cb0e6251f88",
                  "parentUUID": "46e08df7-f0d3-4f21-a143-6eb4b3473199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "SCDP #Deposit should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 2216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec);\n    // WITHOUT_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n    // WITH_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(expectedValueAdjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.add(expectedValueAdjusted8Dec));\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.mul(users.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(users.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(users.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(valueTotalAdjusted8Dec);\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(valueAdjusted);\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(users.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(users.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted8Dec);\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "31b51bdf-3d45-412c-abad-d112ba19f7a2",
                  "parentUUID": "46e08df7-f0d3-4f21-a143-6eb4b3473199",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3334051-b075-4ff4-93c5-5cb0e6251f88",
                "31b51bdf-3d45-412c-abad-d112ba19f7a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3771,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "468bc085-b2da-43fc-b4c4-6d51a67e6cbd",
              "title": "#Withdraw",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Withdraw\"",
                  "fullTitle": "SCDP #Withdraw \"before each\" hook in \"#Withdraw\"",
                  "timedOut": false,
                  "duration": 197,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "9c92fb53-23f9-4c5f-8615-4a381b9270eb",
                  "parentUUID": "468bc085-b2da-43fc-b4c4-6d51a67e6cbd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to withdraw full collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw full collateral of multiple assets",
                  "timedOut": false,
                  "duration": 2434,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(Kresko.address)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.equal(0);\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "b3593674-4a7f-4360-a5d9-bd7eca2e07eb",
                  "parentUUID": "468bc085-b2da-43fc-b4c4-6d51a67e6cbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw partial collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw partial collateral of multiple assets",
                  "timedOut": false,
                  "duration": 2522,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const partialWithdraw = depositAmount18Dec.div(users.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(users.length);\nconst expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice * 1 * depositAmount, 8).mul(200).div(300); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8).mul(200).div(300); // cfactor = 0.8\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, partialWithdraw);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, partialWithdraw8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(partialWithdraw);\n    (0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(user.address)).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.closeTo(expectedValueAdjusted.add(expectedValueAdjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(_hardhat.default.Diamond.address)).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.closeTo(expectedValueUnadjusted.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.closeTo(expectedValueAdjusted.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.closeTo(expectedValueUnadjusted8Dec.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.closeTo(expectedValueAdjusted8Dec.mul(users.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(users.length).add(expectedValueUnadjusted.mul(users.length));\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "183cc036-a62c-4c62-ac98-d8b226eb1eaf",
                  "parentUUID": "468bc085-b2da-43fc-b4c4-6d51a67e6cbd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3593674-4a7f-4360-a5d9-bd7eca2e07eb",
                "183cc036-a62c-4c62-ac98-d8b226eb1eaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4956,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "bd2864a8-04a5-401f-8f2c-e918cd900895",
              "title": "#Fee Distribution",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Fee Distribution\"",
                  "fullTitle": "SCDP #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                  "timedOut": false,
                  "duration": 230,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "incomeCumulator = _hardhat.default.users.admin;\nawait CollateralAsset.setBalance(incomeCumulator, depositAmount18Dec.mul(users.length));\nawait CollateralAsset.contract.connect(incomeCumulator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 8,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "b94b632f-40cf-4ce8-87fa-491d576bfc68",
                  "parentUUID": "bd2864a8-04a5-401f-8f2c-e918cd900895",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to cumulate fees into deposits",
                  "fullTitle": "SCDP #Fee Distribution should be able to cumulate fees into deposits",
                  "timedOut": false,
                  "duration": 4430,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fees = depositAmount18Dec.mul(users.length);\nconst expectedValueNoFees = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, incomeCumulator).cumulateIncome(CollateralAsset.address, fees);\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees); // fees for single asset\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(expectedValueNoFees); // fees\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees); // fees\n    // withdraw principal\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n}\n// expect protocol to have no collateral here, only fees left.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(fees);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(global.collateralValue).to.equal(0);\n// withdraw fees\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    // fees in user wallet\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    // nothing left in protocol for user\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n// nothing left in protocol.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);",
                  "err": {},
                  "uuid": "f7a000ce-9184-4361-823c-386ba53d5c2e",
                  "parentUUID": "bd2864a8-04a5-401f-8f2c-e918cd900895",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7a000ce-9184-4361-823c-386ba53d5c2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4430,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "a9b46922-4588-4aab-8641-1451cfcebad1",
              "title": "#Swap",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Swap\"",
                  "fullTitle": "SCDP #Swap \"before each\" hook in \"#Swap\"",
                  "timedOut": false,
                  "duration": 5116,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000));\n    await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.setBalance(swapper, (0, _lib.toBig)(10000));\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "3e84a2ef-677d-4884-935b-739f98dc4187",
                  "parentUUID": "a9b46922-4588-4aab-8641-1451cfcebad1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have collateral in pool",
                  "fullTitle": "SCDP #Swap should have collateral in pool",
                  "timedOut": false,
                  "duration": 368,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = await _hardhat.default.Diamond.getPoolStats(false);\n(0, _chai.expect)(value.collateralValue).to.equal((0, _lib.toBig)(10000, 8));\n(0, _chai.expect)(value.debtValue).to.equal(0);\n(0, _chai.expect)(value.cr).to.equal(0);",
                  "err": {},
                  "uuid": "5ecf2075-22cf-4957-a0ab-32c11483f05c",
                  "parentUUID": "a9b46922-4588-4aab-8641-1451cfcebad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to preview a swap",
                  "fullTitle": "SCDP #Swap should be able to preview a swap",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD);\nconst assetInPrice = (0, _lib.toBig)(ONE_USD, 8);\nconst assetOutPrice = (0, _lib.toBig)(KreskoAsset2Price, 8);\nconst feePercentage = (0, _lib.toBig)(0.015 + 0.025);\nconst feePercentageProtocol = (0, _lib.toBig)(0.5);\nconst expectedTotalFee = swapAmount.wadMul(feePercentage);\nconst expectedProtocolFee = expectedTotalFee.wadMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(assetInPrice).wadDiv(assetOutPrice);\nconst [amountOut, feeAmount, feeAmountProtocol] = await _hardhat.default.Diamond.previewSwap(KISS.address, KreskoAsset2.address, (0, _lib.toBig)(1));\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                  "err": {},
                  "uuid": "98837b84-2d51-43b0-b197-1e1a04f4596e",
                  "parentUUID": "a9b46922-4588-4aab-8641-1451cfcebad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == 0 | swap collateral == 0",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == 0 | swap collateral == 0",
                  "timedOut": false,
                  "duration": 1617,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOut = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nconst tx = await Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(await KreskoAsset2.contract.balanceOf(swapper.address)).to.equal(expectedAmountOut);\n(0, _chai.expect)(await KISS.contract.balanceOf(swapper.address)).to.equal((0, _lib.toBig)(10000).sub(swapAmount));\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal((0, _lib.toBig)(0.96));\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal((0, _lib.toBig)(0.0096));\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(10000.96, 8));\n(0, _chai.expect)(global.debtValue).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(global.cr).to.equal((0, _lib.toBig)(10000.96, 8).wadDiv((0, _lib.toBig)(0.96, 8)));",
                  "err": {},
                  "uuid": "a7133a02-8d5d-4ee6-935c-54f788ad586e",
                  "parentUUID": "a9b46922-4588-4aab-8641-1451cfcebad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "timedOut": false,
                  "duration": 2759,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountAsset = (0, _lib.toBig)(1); // $100\nconst expectedKissOut = (0, _lib.toBig)(96); // $100 * 0.96 = $96\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: KISS,\n    amount: (0, _lib.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: KreskoAsset2,\n    amount: (0, _lib.toBig)(0.1)\n});\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmountAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal(0);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n// back to starting point\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(10000, 8));\n(0, _chai.expect)(global.debtValue).to.equal(0);\n(0, _chai.expect)(global.cr).to.equal(0);",
                  "err": {},
                  "uuid": "c5924d9f-740f-4388-9c8f-487fc197c171",
                  "parentUUID": "a9b46922-4588-4aab-8641-1451cfcebad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                  "timedOut": false,
                  "duration": 2635,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOutAsset = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst expectedSecondFeeValue = (0, _lib.toBig)(0.96, 8).wadMul((0, _lib.toBig)(0.04)); // $0.96 * 4% = $0.0384\nconst expectedSecondFeeKISS = (0, _lib.toBig)(0.96).wadMul((0, _lib.toBig)(0.04)); // 0.96 * 4% = 0.0384\nconst expectedAmountOutKISS = (0, _lib.toBig)(0.96).sub(expectedSecondFeeKISS); // = 0.9216\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, expectedAmountOutAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(expectedAmountOutAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOutKISS);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(expectedSecondFeeKISS);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(expectedSecondFeeValue);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal(expectedSecondFeeValue);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal(expectedSecondFeeKISS.wadDiv((0, _lib.toBig)(KreskoAsset2Price)));\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\nconst expectedCollateralValue = (0, _lib.toBig)(10000, 8).add(expectedSecondFeeValue);\nconst expectedDebtValue = expectedSecondFeeValue;\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedDebtValue);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedDebtValue));",
                  "err": {},
                  "uuid": "f4be6387-ab8a-4c90-9ac0-bad53485f232",
                  "parentUUID": "a9b46922-4588-4aab-8641-1451cfcebad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                  "timedOut": false,
                  "duration": 3888,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmountKiss = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountKrAsset = (0, _lib.toBig)(2); // $200\nconst expectedKissOut = (0, _lib.toBig)(192); // $200 * 0.96 = $192\nconst expectedDebtKiss = (0, _lib.toBig)(96); // 192 required out - 96 in collateral from first swap = 96 new debt\nconst expectedDebtValueKiss = (0, _lib.toBig)(96, 8); // $192 - $96 = $96\nconst expectedCollateralKrAssetValue = (0, _lib.toBig)(96, 8); // $192 swapped in after fees, $96 in debt = $96 to swap owned collateral\nconst expectedCollateralKrAsset = (0, _lib.toBig)(0.96); // $192 swapped in after fees, $96 in debt = $96 to swap owned collateral\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: KISS,\n    amount: (0, _lib.toBig)(400)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: KreskoAsset2,\n    amount: (0, _lib.toBig)(1.04)\n});\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmountKiss, 0);\nconst stats = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(stats.collateralValue).to.be.gt((0, _lib.toBig)(10000, 8));\n// the swap that matters, here user has 0.96 krAsset in wallet, 1.04 minted. swaps expecting 192 kiss after fees.\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n// KISS deposits sent in swap\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(0);\n// KrAsset debt is cleared\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal(0);\n// KISS debt is issued\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KISS.address, true)).to.equal(expectedDebtValueKiss);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KISS.address)).to.equal(expectedDebtKiss);\n// krAsset collateral deposits added after debt cleared in swap\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KreskoAsset2.address)).to.equal(expectedCollateralKrAsset);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KreskoAsset2.address, true)).to.equal(expectedCollateralKrAssetValue);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\nconst expectedCollateralValue = (0, _lib.toBig)(10000, 8).add(expectedCollateralKrAssetValue);\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedDebtValueKiss);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedDebtValueKiss));",
                  "err": {},
                  "uuid": "573cca6b-39ae-40f8-bb1d-93d9fefc9383",
                  "parentUUID": "a9b46922-4588-4aab-8641-1451cfcebad1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ecf2075-22cf-4957-a0ab-32c11483f05c",
                "98837b84-2d51-43b0-b197-1e1a04f4596e",
                "a7133a02-8d5d-4ee6-935c-54f788ad586e",
                "c5924d9f-740f-4388-9c8f-487fc197c171",
                "f4be6387-ab8a-4c90-9ac0-bad53485f232",
                "573cca6b-39ae-40f8-bb1d-93d9fefc9383"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11370,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "e7367e2c-56c6-4f67-881a-dfda0a60c14f",
              "title": "#Liquidations",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Liquidations\"",
                  "fullTitle": "SCDP #Liquidations \"before each\" hook in \"#Liquidations\"",
                  "timedOut": false,
                  "duration": 5445,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000)),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}\nawait KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait Promise.all([\n    (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec),\n    (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset8Dec.address, depositAmount8Dec)\n]);\nCollateralAsset.setPrice(collateralPrice);",
                  "err": {},
                  "uuid": "780071bc-227e-45e2-b3e7-ffb8b083caf7",
                  "parentUUID": "e7367e2c-56c6-4f67-881a-dfda0a60c14f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is not underwater",
                  "timedOut": false,
                  "duration": 1385,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.false;",
                  "err": {},
                  "uuid": "4c836226-e68d-42b8-8b8b-75dd22f773cf",
                  "parentUUID": "e7367e2c-56c6-4f67-881a-dfda0a60c14f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert liquidations if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should revert liquidations if the pool is not underwater",
                  "timedOut": false,
                  "duration": 2070,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.false;\nconst KreskoLiquidator = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.liquidator);\nawait KreskoAsset2.setBalance(_hardhat.default.users.liquidator, (0, _lib.toBig)(1000000));\nawait (0, _chai.expect)(KreskoLiquidator.poolLiquidate(KreskoAsset2.address, (0, _lib.toBig)(7.7), CollateralAsset8Dec.address)).to.be.revertedWith(\"not-liquidatable\");",
                  "err": {},
                  "uuid": "aa5f9621-990e-439c-b2e5-44ab2d5c1212",
                  "parentUUID": "e7367e2c-56c6-4f67-881a-dfda0a60c14f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify if the pool is underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is underwater",
                  "timedOut": false,
                  "duration": 2297,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nCollateralAsset.setPrice(collateralPrice / 1000);\nCollateralAsset8Dec.setPrice(collateralPrice / 1000);\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.be.lt((await _hardhat.default.Diamond.getSCDPConfig()).lt);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.true;",
                  "err": {},
                  "uuid": "1100e7c3-1570-4ddf-8fe7-c5a9a4102e59",
                  "parentUUID": "e7367e2c-56c6-4f67-881a-dfda0a60c14f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow liquidating the underwater pool",
                  "fullTitle": "SCDP #Liquidations should allow liquidating the underwater pool",
                  "timedOut": false,
                  "duration": 6061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nKreskoAsset2.setPrice(newKreskoAssetPrice);\nconst KreskoLiquidator = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.liquidator);\nconst repayAmount = (await _hardhat.default.Diamond.getMaxLiquidation(_hardhat.default.ethers.constants.AddressZero, KreskoAsset2.address, CollateralAsset.address)).wadDiv(await KreskoAsset2.getPrice());\nawait KreskoAsset2.setBalance(_hardhat.default.users.liquidator, repayAmount.add(1e18.toString()));\nconst tx = await KreskoLiquidator.poolLiquidate(KreskoAsset2.address, repayAmount, CollateralAsset.address);\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.gt((await _hardhat.default.Diamond.getSCDPConfig()).lt);\n(0, _chai.expect)(await KreskoLiquidator.poolIsLiquidatable()).to.equal(false);\nawait (0, _chai.expect)(KreskoLiquidator.poolLiquidate(KreskoAsset2.address, repayAmount, CollateralAsset8Dec.address)).to.be.revertedWith(\"not-liquidatable\");\nconst event = await (0, _lib.getNamedEvent)(tx, \"CollateralPoolLiquidationOccured\");\nconst expectedSeizeAmount = repayAmount.wadMul((0, _lib.toBig)(newKreskoAssetPrice, 8)).wadMul((0, _lib.toBig)(1.05)).wadDiv((0, _lib.toBig)(collateralPrice, 8));\n(0, _chai.expect)(event.args.liquidator).to.eq(_hardhat.default.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(CollateralAsset.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(KreskoAsset2.address);\nconst expectedDepositsAfter = depositAmount18Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address)).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountDepositsWithFees(depositor.address, CollateralAsset.address)).to.eq(expectedDepositsAfter);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, users[2]).poolDeposit(users[2].address, CollateralAsset.address, depositAmount18Dec.mul(10));\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.gt((await _hardhat.default.Diamond.getSCDPConfig()).mcr);\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolWithdraw(depositor.address, CollateralAsset.address, expectedDepositsAfter)).to.not.be.reverted;\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address)).to.eq(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountDepositsWithFees(depositor.address, CollateralAsset.address)).to.eq(0);",
                  "err": {},
                  "uuid": "381b25bb-e74c-4918-af27-d128ddc7ce89",
                  "parentUUID": "e7367e2c-56c6-4f67-881a-dfda0a60c14f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c836226-e68d-42b8-8b8b-75dd22f773cf",
                "aa5f9621-990e-439c-b2e5-44ab2d5c1212",
                "1100e7c3-1570-4ddf-8fe7-c5a9a4102e59",
                "381b25bb-e74c-4918-af27-d128ddc7ce89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11813,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "795cdfa7-12df-4308-95fb-6ccea97c9690",
              "title": "#Error",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Error\"",
                  "fullTitle": "SCDP #Error \"before each\" hook in \"#Error\"",
                  "timedOut": false,
                  "duration": 6147,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000));\n    await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.setBalance(swapper, (0, _lib.toBig)(10000));\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "728ed652-6929-49e0-8111-98d9e70fe04a",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert depositing unsupported tokens",
                  "fullTitle": "SCDP #Error should revert depositing unsupported tokens",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [UnsupportedToken] = await _hardhat.default.deploy(\"MockERC20\", {\n    args: [\n        \"UnsupportedToken\",\n        \"UnsupportedToken\",\n        18,\n        (0, _lib.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst { deployer  } = await _hardhat.default.getNamedAccounts();\nawait (0, _chai.expect)(_hardhat.default.Diamond.poolDeposit(deployer, UnsupportedToken.address, 1)).to.be.revertedWith(\"asset-disabled\");",
                  "err": {},
                  "uuid": "9e20bfb3-b947-4c00-98b0-77c6de0eaf89",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing without deposits",
                  "fullTitle": "SCDP #Error should revert withdrawing without deposits",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KreskoUserNoDeposits = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(KreskoUserNoDeposits.poolWithdraw(depositor.address, CollateralAsset.address, 1)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "029f880e-aae6-4052-b0be-a963b232ca7a",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals below MCR",
                  "fullTitle": "SCDP #Error should revert withdrawals below MCR",
                  "timedOut": false,
                  "duration": 1815,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(1000); // $1000\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0); // generate debt\nconst deposits = await Kresko.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address);\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolWithdraw(depositor.address, CollateralAsset.address, deposits)).to.be.revertedWith(\"withdraw-mcr-violation\");",
                  "err": {},
                  "uuid": "08e44c15-a8d2-45ab-ac3f-7b04eec7a541",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals of swap owned collateral deposits",
                  "fullTitle": "SCDP #Error should revert withdrawals of swap owned collateral deposits",
                  "timedOut": false,
                  "duration": 1383,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0);\nconst deposits = await Kresko.getPoolSwapDeposits(KreskoAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(Kresko.poolWithdraw(swapper.address, KreskoAsset2.address, deposits)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "9cf7880d-d3b9-4565-a3d2-dae03b00ab2e",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping with price below minAmountOut",
                  "fullTitle": "SCDP #Error should revert swapping with price below minAmountOut",
                  "timedOut": false,
                  "duration": 871,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nconst [amountOut] = await Kresko.previewSwap(KreskoAsset2.address, KISS.address, swapAmount);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWith(\"swap-slippage\");",
                  "err": {},
                  "uuid": "6611b55a-810f-48e4-bf48-470382036493",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping unsupported route",
                  "fullTitle": "SCDP #Error should revert swapping unsupported route",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, CollateralAsset.address, swapAmount, 0)).to.be.revertedWith(\"swap-disabled\");",
                  "err": {},
                  "uuid": "48ad565b-6ac8-4d05-8def-7efc87a32f3b",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset in is disabled",
                  "fullTitle": "SCDP #Error should revert swapping if asset in is disabled",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"asset-in-disabled\");",
                  "err": {},
                  "uuid": "6088e172-2535-4007-8d1f-6e809362a3d2",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset out is disabled",
                  "fullTitle": "SCDP #Error should revert swapping if asset out is disabled",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                  "err": {},
                  "uuid": "475345fb-b4ea-43c9-95fc-1336cbf19222",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping causes CDP to go below MCR",
                  "fullTitle": "SCDP #Error should revert swapping causes CDP to go below MCR",
                  "timedOut": false,
                  "duration": 1442,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1000000);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"swap-mcr-violation\");",
                  "err": {},
                  "uuid": "3ed6f2a0-cfd7-4c53-b30c-869b02e14971",
                  "parentUUID": "795cdfa7-12df-4308-95fb-6ccea97c9690",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e20bfb3-b947-4c00-98b0-77c6de0eaf89",
                "029f880e-aae6-4052-b0be-a963b232ca7a",
                "08e44c15-a8d2-45ab-ac3f-7b04eec7a541",
                "9cf7880d-d3b9-4565-a3d2-dae03b00ab2e",
                "6611b55a-810f-48e4-bf48-470382036493",
                "48ad565b-6ac8-4d05-8def-7efc87a32f3b",
                "6088e172-2535-4007-8d1f-6e809362a3d2",
                "475345fb-b4ea-43c9-95fc-1336cbf19222",
                "3ed6f2a0-cfd7-4c53-b30c-869b02e14971"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6032,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}