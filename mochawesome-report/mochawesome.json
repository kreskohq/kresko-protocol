{
  "stats": {
    "suites": 87,
    "tests": 268,
    "passes": 246,
    "pending": 22,
    "failures": 0,
    "start": "2023-09-24T18:57:20.514Z",
    "end": "2023-09-24T19:02:30.616Z",
    "duration": 310102,
    "testsRegistered": 268,
    "passPercent": 100,
    "pendingPercent": 8.208955223880597,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "74889ff7-2bea-46b1-8534-e3983424ec00",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4d6629e4-9697-4f58-8832-ca86ffea1fca",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.assetValuesFixture)();\nf.user = hre.users.testUserSeven;\nUser = (0, _redstone.wrapKresko)(hre.Diamond, f.user);",
              "err": {},
              "uuid": "880f8cde-010a-4281-9ae9-c0c85e78e732",
              "parentUUID": "4d6629e4-9697-4f58-8832-ca86ffea1fca",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d9541b99-b953-4e28-b864-15ffd79e7583",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 301,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nconst expectedDepositValue = (0, _lib.toBig)(50, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "b6158435-b5bd-4556-8abf-c92b1b2d10ca",
                  "parentUUID": "d9541b99-b953-4e28-b864-15ffd79e7583",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 302,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nconst expectedDepositValue = (0, _lib.toBig)(50, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "29c8c491-98f7-4ca4-b185-65d8910b1637",
                  "parentUUID": "d9541b99-b953-4e28-b864-15ffd79e7583",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 294,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nconst expectedDepositValue = (0, _lib.toBig)(50, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "024b9c48-9840-4f06-b953-c3d57357bc6f",
                  "parentUUID": "d9541b99-b953-4e28-b864-15ffd79e7583",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 682,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.depositCollateral(f.user.address, f.CollateralAsset.address, (0, _lib.toBig)(10));\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, (0, _lib.toBig)(10, 8));\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, (0, _lib.toBig)(10, 21));\nconst expectedDepositValue = (0, _lib.toBig)(150, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "b7396bf7-8c6b-40f0-82d8-13aaf5140e03",
                  "parentUUID": "d9541b99-b953-4e28-b864-15ffd79e7583",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6158435-b5bd-4556-8abf-c92b1b2d10ca",
                "29c8c491-98f7-4ca4-b185-65d8910b1637",
                "024b9c48-9840-4f06-b953-c3d57357bc6f",
                "b7396bf7-8c6b-40f0-82d8-13aaf5140e03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1579,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "d20fe3e1-692f-4471-bac3-6b3a6d9fde00",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 481,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(f.startingBalance));",
                  "err": {},
                  "uuid": "6cc3d443-6e90-4f94-a8fc-a54a5b268f3a",
                  "parentUUID": "d20fe3e1-692f-4471-bac3-6b3a6d9fde00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 482,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset8Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset8Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(f.startingBalance, 8));",
                  "err": {},
                  "uuid": "1f5a5f82-6ebd-4e03-a767-385ec8576f5e",
                  "parentUUID": "d20fe3e1-692f-4471-bac3-6b3a6d9fde00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 483,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset21Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset21Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(f.startingBalance, 21));",
                  "err": {},
                  "uuid": "a8be2669-3572-40d2-94bd-99e255d0958b",
                  "parentUUID": "d20fe3e1-692f-4471-bac3-6b3a6d9fde00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6cc3d443-6e90-4f94-a8fc-a54a5b268f3a",
                "1f5a5f82-6ebd-4e03-a767-385ec8576f5e",
                "a8be2669-3572-40d2-94bd-99e255d0958b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1446,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "29df70d6-510a-44cd-8684-f74a1a6d4a60",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 1861,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, f.extOracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getDebtAmountToValue(f.KreskoAsset.address, mintAmount, true);\nconst kFactor = (await hre.Diamond.getKreskoAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(f.user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "b0005543-263c-472b-9b58-405a5934c674",
                  "parentUUID": "29df70d6-510a-44cd-8684-f74a1a6d4a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 1847,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, f.extOracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getDebtAmountToValue(f.KreskoAsset.address, mintAmount, true);\nconst kFactor = (await hre.Diamond.getKreskoAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(f.user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "09676cc7-255b-4d7e-87f5-fa02696e8a91",
                  "parentUUID": "29df70d6-510a-44cd-8684-f74a1a6d4a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 1670,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, f.extOracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, f.extOracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getDebtAmountToValue(f.KreskoAsset.address, mintAmount, true);\nconst kFactor = (await hre.Diamond.getKreskoAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(f.user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "b0144644-5de3-4923-bb1d-e9618f25bced",
                  "parentUUID": "29df70d6-510a-44cd-8684-f74a1a6d4a60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0005543-263c-472b-9b58-405a5934c674",
                "09676cc7-255b-4d7e-87f5-fa02696e8a91",
                "b0144644-5de3-4923-bb1d-e9618f25bced"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5378,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "ed5f86d9-1ac0-4369-90e7-b15fdbecf39e",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "33c55d07-4259-4b0a-bf0f-14a029b8192b",
              "parentUUID": "ed5f86d9-1ac0-4369-90e7-b15fdbecf39e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "face8010-0230-4dea-b2b5-51812f1c0d7e",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 289,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "bc172927-82ea-4070-ba3f-b3b08e38b70d",
                  "parentUUID": "face8010-0230-4dea-b2b5-51812f1c0d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = f.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "a811f059-9acd-4044-b059-9643f46b54b5",
                  "parentUUID": "face8010-0230-4dea-b2b5-51812f1c0d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = f.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "8db92394-4938-4189-ac49-979e81886c92",
                  "parentUUID": "face8010-0230-4dea-b2b5-51812f1c0d7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc172927-82ea-4070-ba3f-b3b08e38b70d",
                "a811f059-9acd-4044-b059-9643f46b54b5",
                "8db92394-4938-4189-ac49-979e81886c92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 548,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "2e0097af-d606-4817-ae2f-7cf2d58b0db3",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _test.diamondFixture)();",
              "err": {},
              "uuid": "726fb786-79aa-4347-a003-1cc32e494085",
              "parentUUID": "2e0097af-d606-4817-ae2f-7cf2d58b0db3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4900005d-146b-4425-b9d4-c981d9f44776",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.owner()).to.equal(hre.addr.deployer);",
                  "err": {},
                  "uuid": "c181f061-69f0-4fbc-80b7-77292b6996d4",
                  "parentUUID": "4900005d-146b-4425-b9d4-c981d9f44776",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.ADMIN, hre.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "e0720e9c-3a15-4cf7-8c8c-234f1b093bb5",
                  "parentUUID": "4900005d-146b-4425-b9d4-c981d9f44776",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 198,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await hre.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "75574ab7-2a8c-4fd0-b814-bfae5fa89b07",
                  "parentUUID": "4900005d-146b-4425-b9d4-c981d9f44776",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 330,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _test.wrapContractWithSigner)(hre.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await hre.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "994496fb-b1ab-4aad-9e6b-1ae3bd067a62",
                  "parentUUID": "4900005d-146b-4425-b9d4-c981d9f44776",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c181f061-69f0-4fbc-80b7-77292b6996d4",
                "e0720e9c-3a15-4cf7-8c8c-234f1b093bb5",
                "75574ab7-2a8c-4fd0-b814-bfae5fa89b07",
                "994496fb-b1ab-4aad-9e6b-1ae3bd067a62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 726,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "7b0cb8d8-9c9f-499a-bdae-b71ee5422a3b",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "7307561d-f042-4b2e-96b2-5abcdb00cb01",
              "parentUUID": "7b0cb8d8-9c9f-499a-bdae-b71ee5422a3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f3dc34ff-648d-4da9-b492-1e880aa1cc95",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 678,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy(\"SmockInit\");\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hre.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await hre.Diamond.hasRole(TEST_OPERATOR_ROLE, hre.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await hre.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], hre.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(hre.addr.userOne);",
                  "err": {},
                  "uuid": "52caacd3-6f89-48df-a4c6-a30a823ecb72",
                  "parentUUID": "f3dc34ff-648d-4da9-b492-1e880aa1cc95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 486,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: hre.addr.userOne\n});\nconst facetsBefore = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: \"SmockFacet\"\n});\nconst facetsAfter = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "af937af2-3098-4355-a3d0-94aa9aba8817",
                  "parentUUID": "f3dc34ff-648d-4da9-b492-1e880aa1cc95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.nonadmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hre.Diamond.facetAddress(signature);\nconst functions = await hre.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hre.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hre.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await hre.ethers.getContractAt(\"AuthEvent\", hre.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(hre.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner , newOwner  } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(hre.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "7b2e3fc0-a8a3-40b6-8e10-f886d7cb62dd",
                  "parentUUID": "f3dc34ff-648d-4da9-b492-1e880aa1cc95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 391,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.nonadmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hre.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hre.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\"\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hre.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hre.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).acceptOwnership());\nconst currentOwner = await hre.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "509152e0-9880-4725-af41-0a32d7524aae",
                  "parentUUID": "f3dc34ff-648d-4da9-b492-1e880aa1cc95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hre.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "fdcb5d12-ac08-4d56-9c7b-220b6df2841c",
                  "parentUUID": "f3dc34ff-648d-4da9-b492-1e880aa1cc95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 744,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy(\"SmockInit\");\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await hre.ethers.getContractAt(\"SmockFacet\", hre.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hre.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hre.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hre.ethers.getContractAt(\"SmockFacet2\", hre.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "3ad63c9a-ebf7-4c47-924f-9e616ca2cdd2",
                  "parentUUID": "f3dc34ff-648d-4da9-b492-1e880aa1cc95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52caacd3-6f89-48df-a4c6-a30a823ecb72",
                "af937af2-3098-4355-a3d0-94aa9aba8817",
                "7b2e3fc0-a8a3-40b6-8e10-f886d7cb62dd",
                "509152e0-9880-4725-af41-0a32d7524aae",
                "fdcb5d12-ac08-4d56-9c7b-220b6df2841c",
                "3ad63c9a-ebf7-4c47-924f-9e616ca2cdd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2796,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "bdf3c6ae-be47-4151-99fe-47c14a9e9a16",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "216a1ff2-4300-4369-977c-e21a2590605f",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "52364802-698c-4e4f-882a-0f823e490a8b",
                  "parentUUID": "216a1ff2-4300-4369-977c-e21a2590605f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "52364802-698c-4e4f-882a-0f823e490a8b"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c5c87500-9f2f-4c76-9591-224412db8e25",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "37408b17-97f7-4b7b-a451-965fe0e91815",
                  "parentUUID": "c5c87500-9f2f-4c76-9591-224412db8e25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "37408b17-97f7-4b7b-a451-965fe0e91815"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "66cc31ad-aacb-42d5-960f-1bf0d921f5dc",
              "title": "#facet-upgrade-16-05-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works",
                  "fullTitle": "Forking #facet-upgrade-16-05-2023 works",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c3013287-6873-42fb-a0bc-6822a7f2d761",
                  "parentUUID": "66cc31ad-aacb-42d5-960f-1bf0d921f5dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "c3013287-6873-42fb-a0bc-6822a7f2d761"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "6c2d80b9-0018-4b90-8dc8-2597ddf7220e",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e2836ec6-7919-4327-aa94-5fa3bba0d94e",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "f = await (0, _test.defaultFixture)();\nconst deployment = f.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "71fa91c2-9958-4ff5-94dc-25e09f327e0f",
                  "parentUUID": "e2836ec6-7919-4327-aa94-5fa3bba0d94e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, hre.addr.deployer, hre.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "9736f841-6475-4b0c-be0f-98eabc1faffe",
                  "parentUUID": "e2836ec6-7919-4327-aa94-5fa3bba0d94e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "331b2ed2-2903-4705-ab00-c1b668ae3384",
                  "parentUUID": "e2836ec6-7919-4327-aa94-5fa3bba0d94e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "80afa4bf-fb86-4770-9d57-696814d05db9",
                  "parentUUID": "e2836ec6-7919-4327-aa94-5fa3bba0d94e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "0134348a-defd-497e-bb6a-41a38de4561e",
                  "parentUUID": "e2836ec6-7919-4327-aa94-5fa3bba0d94e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9736f841-6475-4b0c-be0f-98eabc1faffe",
                "80afa4bf-fb86-4770-9d57-696814d05db9",
                "0134348a-defd-497e-bb6a-41a38de4561e"
              ],
              "failures": [],
              "pending": [
                "331b2ed2-2903-4705-ab00-c1b668ae3384"
              ],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "f2e8e758-05df-41f4-8de0-800d819d5333",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "563b1a52-ac5d-4aab-9f80-530431f7c9b7",
                  "parentUUID": "f2e8e758-05df-41f4-8de0-800d819d5333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(_shared.anchorTokenPrefix + symbol);\n(0, _chai.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "1a2105ec-eae3-4f78-b553-ebc82746ee1e",
                  "parentUUID": "f2e8e758-05df-41f4-8de0-800d819d5333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ec4a0d51-2b28-4584-b1d3-d3dbceafa210",
                  "parentUUID": "f2e8e758-05df-41f4-8de0-800d819d5333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);\nawait KreskoAssetAnchor.reinitializeERC20(name, symbol, 3);",
                  "err": {},
                  "uuid": "e49f1c68-b07c-4765-9ac5-243d0b8c69a0",
                  "parentUUID": "f2e8e758-05df-41f4-8de0-800d819d5333",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "563b1a52-ac5d-4aab-9f80-530431f7c9b7",
                "1a2105ec-eae3-4f78-b553-ebc82746ee1e",
                "e49f1c68-b07c-4765-9ac5-243d0b8c69a0"
              ],
              "failures": [],
              "pending": [
                "ec4a0d51-2b28-4584-b1d3-d3dbceafa210"
              ],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "77e7b6e7-fa67-40c5-b6fc-4ba810897d12",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset  } = await (0, _test.kreskoAssetFixture)());\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "66388f9a-16ff-4df6-9049-f9da951cd424",
              "parentUUID": "77e7b6e7-fa67-40c5-b6fc-4ba810897d12",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5f1719ff-9fa9-4f30-93df-6f9537720ee2",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "e7dc6dba-cf6b-4c04-9bc5-89f84798c649",
                  "parentUUID": "5f1719ff-9fa9-4f30-93df-6f9537720ee2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "f4ce012d-4063-4ca3-bc0e-bd2157abe0ff",
                  "parentUUID": "5f1719ff-9fa9-4f30-93df-6f9537720ee2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hre.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "76743473-cca7-42dc-9943-0ea2e4dc052e",
                  "parentUUID": "5f1719ff-9fa9-4f30-93df-6f9537720ee2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.renounceRole(_test.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hre.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "ff465078-1a2b-4440-a0f0-89f3f797faa0",
                  "parentUUID": "5f1719ff-9fa9-4f30-93df-6f9537720ee2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7dc6dba-cf6b-4c04-9bc5-89f84798c649",
                "f4ce012d-4063-4ca3-bc0e-bd2157abe0ff",
                "76743473-cca7-42dc-9943-0ea2e4dc052e",
                "ff465078-1a2b-4440-a0f0-89f3f797faa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c58f1312-504f-4119-aed9-12eea80d7eb7",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "20dcc37f-4685-4ef5-9e8f-0d5df96dbfbd",
                  "parentUUID": "c58f1312-504f-4119-aed9-12eea80d7eb7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "5cb3e020-9daa-4b8c-b67a-c9b8ad5c9734",
                  "parentUUID": "c58f1312-504f-4119-aed9-12eea80d7eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).approve(hre.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "61e13593-47f2-46d3-9f50-8327202f1472",
                  "parentUUID": "c58f1312-504f-4119-aed9-12eea80d7eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await KreskoAsset.balanceOf(hre.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "20534035-5dac-438a-bddb-44fb72ae1c86",
                  "parentUUID": "c58f1312-504f-4119-aed9-12eea80d7eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.connect(hre.users.userTwo).burn(hre.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hre.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "2cfd8d20-a24a-45b6-bcf5-3dac6e682113",
                  "parentUUID": "c58f1312-504f-4119-aed9-12eea80d7eb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5cb3e020-9daa-4b8c-b67a-c9b8ad5c9734",
                "61e13593-47f2-46d3-9f50-8327202f1472",
                "20534035-5dac-438a-bddb-44fb72ae1c86",
                "2cfd8d20-a24a-45b6-bcf5-3dac6e682113"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "ed2fb2f0-c54b-409c-9720-475d3ff29ab2",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset  } = await (0, _test.kreskoAssetFixture)());\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "929dd9d6-24c8-46b2-aa3d-4d8214a607dc",
              "parentUUID": "ed2fb2f0-c54b-409c-9720-475d3ff29ab2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "298be7cd-7fad-4c66-a8e3-3ce54cf9e070",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "a9d82e5f-33ef-462c-82d4-e88c534ade9b",
                  "parentUUID": "298be7cd-7fad-4c66-a8e3-3ce54cf9e070",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "901f08b6-357a-4e46-ad99-cd484337708a",
                  "parentUUID": "298be7cd-7fad-4c66-a8e3-3ce54cf9e070",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "e7eda50a-71b9-4cdc-b1b2-6e325fcd3a92",
                  "parentUUID": "298be7cd-7fad-4c66-a8e3-3ce54cf9e070",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                      "err": {},
                      "uuid": "f006e65e-e2b3-4208-9b70-f2a76e14630e",
                      "parentUUID": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "e7e3ce33-b98c-48fb-a37e-3de4dad2efb1",
                      "parentUUID": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "7ae7ca6b-09bf-4e03-a893-b8ccc7752c09",
                      "parentUUID": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "f3f5436b-bd18-4dc1-b538-deee7ac27ee1",
                      "parentUUID": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "8530cf7b-daf1-4de8-9ee7-db01f0e505d5",
                      "parentUUID": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "f4a9e006-d777-463c-90fe-27f436f0bffb",
                      "parentUUID": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "06b4bb26-b72f-460c-bc92-476fe000fd70",
                      "parentUUID": "de54db51-16ea-4907-a1eb-3a8f4787eea7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f006e65e-e2b3-4208-9b70-f2a76e14630e",
                    "e7e3ce33-b98c-48fb-a37e-3de4dad2efb1",
                    "7ae7ca6b-09bf-4e03-a893-b8ccc7752c09",
                    "f3f5436b-bd18-4dc1-b538-deee7ac27ee1",
                    "8530cf7b-daf1-4de8-9ee7-db01f0e505d5",
                    "f4a9e006-d777-463c-90fe-27f436f0bffb",
                    "06b4bb26-b72f-460c-bc92-476fe000fd70"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 95,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "4f9847b6-5f78-4ad4-90e0-963255c39963",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "e1be90ee-39d8-49ea-83bc-7c2d139b1011",
                      "parentUUID": "4f9847b6-5f78-4ad4-90e0-963255c39963",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "0364a32a-fb50-4807-b4d1-62ea322c90bd",
                      "parentUUID": "4f9847b6-5f78-4ad4-90e0-963255c39963",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "a7b30d14-a536-43db-b57c-b70426ba5624",
                      "parentUUID": "4f9847b6-5f78-4ad4-90e0-963255c39963",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "e9be272b-2812-4f0a-afec-b3d76466b723",
                      "parentUUID": "4f9847b6-5f78-4ad4-90e0-963255c39963",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "263626ef-13e0-484e-8149-4017229019bc",
                      "parentUUID": "4f9847b6-5f78-4ad4-90e0-963255c39963",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 39,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "cf486198-fd75-46be-b507-833c015764eb",
                      "parentUUID": "4f9847b6-5f78-4ad4-90e0-963255c39963",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e1be90ee-39d8-49ea-83bc-7c2d139b1011",
                    "0364a32a-fb50-4807-b4d1-62ea322c90bd",
                    "a7b30d14-a536-43db-b57c-b70426ba5624",
                    "e9be272b-2812-4f0a-afec-b3d76466b723",
                    "263626ef-13e0-484e-8149-4017229019bc",
                    "cf486198-fd75-46be-b507-833c015764eb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 203,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [
                "a9d82e5f-33ef-462c-82d4-e88c534ade9b",
                "901f08b6-357a-4e46-ad99-cd484337708a",
                "e7eda50a-71b9-4cdc-b1b2-6e325fcd3a92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "b1e44f21-a8d8-4c38-8856-185c4e019a02",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset , KreskoAssetAnchor  } = await (0, _test.kreskoAssetFixture)());\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "e6987947-ceb4-4b2b-bcf3-a848ff03c384",
              "parentUUID": "b1e44f21-a8d8-4c38-8856-185c4e019a02",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c467d3e8-3201-4f9b-99f7-b24595f566b7",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount.add(_test.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "1465270a-225d-4bd4-9859-b92fe47b8e1a",
                  "parentUUID": "c467d3e8-3201-4f9b-99f7-b24595f566b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "21d5df9d-53e5-4e92-9680-f447803be19e",
                  "parentUUID": "c467d3e8-3201-4f9b-99f7-b24595f566b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "cf0df0df-9e30-4220-bc8d-9bece8a8f14a",
                  "parentUUID": "c467d3e8-3201-4f9b-99f7-b24595f566b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "27fc88ae-5203-4c1c-a420-0ebf07a89fed",
                  "parentUUID": "c467d3e8-3201-4f9b-99f7-b24595f566b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "de43fdf7-ff54-433c-8b94-5a866beaca1d",
                  "parentUUID": "c467d3e8-3201-4f9b-99f7-b24595f566b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "837d812b-28eb-436d-a34f-8d10004c9865",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1c89646e-e223-428c-a09c-26e164cfff21",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "04207d89-9b60-4475-9444-e71dffd505f1",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "5a8572cc-87a6-4122-b9e0-323ca0356652",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "fd9a0229-fa2d-4f4c-aa41-74eff40f5a37",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "adda1bcd-b3e4-48cb-ab07-6dbd02bbcadc",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "666992e5-c086-4ad1-9278-2cefeff3bde2",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cec21941-1eae-4b01-85ce-b5e9c0c034ee",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d2d3df19-c50e-4802-b858-af020e41a911",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6b75068d-ad45-4980-8233-3b2a7af4cbc2",
                          "parentUUID": "1c89646e-e223-428c-a09c-26e164cfff21",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "04207d89-9b60-4475-9444-e71dffd505f1",
                        "5a8572cc-87a6-4122-b9e0-323ca0356652",
                        "fd9a0229-fa2d-4f4c-aa41-74eff40f5a37",
                        "adda1bcd-b3e4-48cb-ab07-6dbd02bbcadc",
                        "666992e5-c086-4ad1-9278-2cefeff3bde2",
                        "cec21941-1eae-4b01-85ce-b5e9c0c034ee",
                        "d2d3df19-c50e-4802-b858-af020e41a911",
                        "6b75068d-ad45-4980-8233-3b2a7af4cbc2"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [
                "1465270a-225d-4bd4-9859-b92fe47b8e1a"
              ],
              "failures": [],
              "pending": [
                "21d5df9d-53e5-4e92-9680-f447803be19e",
                "cf0df0df-9e30-4220-bc8d-9bece8a8f14a",
                "27fc88ae-5203-4c1c-a420-0ebf07a89fed",
                "de43fdf7-ff54-433c-8b94-5a866beaca1d"
              ],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "e4844293-ced9-4cc8-ad2e-37e99b332898",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "135401e5-de44-46a8-baa1-6a60518bf9a1",
              "parentUUID": "e4844293-ced9-4cc8-ad2e-37e99b332898",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e85d0370-76e1-49d8-b9f0-31bf3a9e2ca6",
              "parentUUID": "e4844293-ced9-4cc8-ad2e-37e99b332898",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "135401e5-de44-46a8-baa1-6a60518bf9a1",
            "e85d0370-76e1-49d8-b9f0-31bf3a9e2ca6"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "f7b37b1e-cd59-44e0-9c9b-f3bd75fc9c35",
          "title": "Minter - Init",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _test.defaultFixture)();",
              "err": {},
              "uuid": "de592efd-7986-47d1-b0e1-0281ac351ef9",
              "parentUUID": "f7b37b1e-cd59-44e0-9c9b-f3bd75fc9c35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7bcdd4cb-ceab-4f68-b891-ec0f4df2f452",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 592,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst { args  } = await (0, _shared.getMinterInitializer)(hre);\n(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.SAFETY_COUNCIL, hre.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getFeeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await hre.Diamond.getMinCollateralRatio()).to.equal(args.minCollateralRatio);\n(0, _chai.expect)(await hre.Diamond.getMinDebtValue()).to.equal(args.minDebtValue);",
                  "err": {},
                  "uuid": "bd6c2f2b-9ddc-4eb6-9a38-ae6e87180f04",
                  "parentUUID": "7bcdd4cb-ceab-4f68-b891-ec0f4df2f452",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst initializer = await (0, _shared.getMinterInitializer)(hre);\nconst initializerContract = await hre.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initializeMinter(initializer.args);\nawait (0, _chai.expect)(hre.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "548e4413-3069-4b86-a754-478d0d29ee25",
                  "parentUUID": "7bcdd4cb-ceab-4f68-b891-ec0f4df2f452",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hre.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._shared.minterFacets,\n    ..._shared.diamondFacets,\n    ..._shared.scdpFacets\n].map(async (name)=>{\n    const deployment = await hre.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "02a26b4d-1a52-402d-ba1d-1446f7827c32",
                  "parentUUID": "7bcdd4cb-ceab-4f68-b891-ec0f4df2f452",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd6c2f2b-9ddc-4eb6-9a38-ae6e87180f04",
                "548e4413-3069-4b86-a754-478d0d29ee25",
                "02a26b4d-1a52-402d-ba1d-1446f7827c32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 946,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "565b1d9b-0e76-42a9-8759-e27aaedb2767",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.defaultFixture)();",
              "err": {},
              "uuid": "64f576d1-0a04-4394-8bd2-9f8dbdc4571a",
              "parentUUID": "565b1d9b-0e76-42a9-8759-e27aaedb2767",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4081452e-1bc9-470f-a5db-c80ca186647d",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 705,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = (0, _test.getNewMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(hre.Diamond.updateMinCollateralRatio(update.minCollateralRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMinDebtValue(update.minDebtValue)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(update.MLR)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(update.oracleDeviationPct)).to.not.be.reverted;\nconst { minCollateralRatio , minDebtValue , feeRecipient , oracleDeviationPct  } = await hre.Diamond.getCurrentParameters();\n(0, _chai.expect)(update.minCollateralRatio.toBigInt()).to.equal(minCollateralRatio);\n(0, _chai.expect)(update.minDebtValue.toBigInt()).to.equal(minDebtValue);\n(0, _chai.expect)(update.feeRecipient).to.equal(feeRecipient);\n(0, _chai.expect)(update.oracleDeviationPct).to.equal(oracleDeviationPct);",
                  "err": {},
                  "uuid": "820850ca-c5e2-4e70-81b7-c877dfe06cc0",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 679,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)(_test.defaultCollateralArgs);\n(0, _chai.expect)(await hre.Diamond.getCollateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hre.Diamond.getCollateralAmountToValue(contract.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)(Number(oraclePrice)).to.equal((0, _lib.toBig)(_test.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "f08b5a1b-82e1-433b-ae49-dc160bd8ec0b",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 995,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , kresko  } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = (0, _lib.fromBig)(await hre.Diamond.getDebtAmountToValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(values.exists).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal((0, _lib.toBig)(_test.defaultKrAssetArgs.factor));\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_test.defaultKrAssetArgs.price);\n(0, _chai.expect)((0, _lib.fromBig)(values.supplyLimit)).to.equal(_test.defaultKrAssetArgs.supplyLimit);\n(0, _chai.expect)((0, _lib.fromBig)(values.closeFee)).to.equal(_test.defaultKrAssetArgs.closeFee);\n(0, _chai.expect)((0, _lib.fromBig)(values.openFee)).to.equal(_test.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "d74ae830-bfbc-463b-9039-a363e3417463",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 200,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.getExtOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "5c202653-532e-4de3-8c60-2d585b467555",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidation ratio",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidation ratio",
                  "timedOut": false,
                  "duration": 297,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.getMaxLiquidationRatio();\nconst newMLR = (0, _lib.toBig)(1.42);\n(0, _chai.expect)(currentMLM.eq(newMLR)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(newMLR)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getMaxLiquidationRatio()).eq(newMLR)).to.be.true;",
                  "err": {},
                  "uuid": "3ca69418-b6b3-47cd-8dc1-ce28f5511bb3",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update oracle deviation pct",
                  "timedOut": false,
                  "duration": 297,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentODPCT = await hre.Diamond.getOracleDeviationPct();\nconst newODPCT = (0, _lib.toBig)(0.3);\n(0, _chai.expect)(currentODPCT.eq(newODPCT)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newODPCT)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getOracleDeviationPct()).eq(newODPCT)).to.be.true;",
                  "err": {},
                  "uuid": "6ffff673-d0b3-431b-9822-cf6cbc025aa4",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getKreskoAsset(f.KrAsset.address)).kFactor;\nconst newRatio = (0, _lib.toBig)(1.2);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(f.KrAsset.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getKreskoAsset(f.KrAsset.address)).kFactor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "126c778f-9526-4546-a4ea-9c653eaeb8a1",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 301,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getCollateralAsset(f.Collateral.address)).factor;\nconst newRatio = (0, _lib.toBig)(0.9);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCollateralFactor(f.Collateral.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getCollateralAsset(f.Collateral.address)).factor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "74359b48-8284-44ca-a1a0-b30d358aee46",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 645,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oracleAnswer = (0, _lib.fromBig)((await f.KrAsset.priceFeed.latestRoundData())[1], 8);\nconst kreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, _chai.expect)(oracleAnswer).to.equal(_test.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, _lib.toBig)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, _lib.toBig)(0.02),\n    openFee: (0, _lib.toBig)(0.02)\n};\nconst FakeFeed = await (0, _oracle.getFakeOracle)(update.price);\nawait (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateKreskoAsset(f.KrAsset.address, ...await (0, _krassets.getKrAssetConfig)(f.KrAsset.contract, f.KrAsset.anchor.address, update.factor, (0, _lib.toBig)(update.supplyLimit), update.closeFee, update.openFee, FakeFeed.address, \"MockKreskoAsset\", [\n    _oracles.OracleType.Chainlink,\n    _oracles.OracleType.Redstone\n]));\nconst newValues = await hre.Diamond.getKreskoAsset(f.KrAsset.address);\nconst updatedOracleAnswer = (0, _lib.fromBig)((await FakeFeed.latestRoundData())[1], 8);\nconst newKreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(newValues.exists).to.equal(true);\n(0, _chai.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, _chai.expect)((0, _lib.fromBig)(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "f1f45744-23ad-43a1-87ef-39b826a1b029",
                  "parentUUID": "4081452e-1bc9-470f-a5db-c80ca186647d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "820850ca-c5e2-4e70-81b7-c877dfe06cc0",
                "f08b5a1b-82e1-433b-ae49-dc160bd8ec0b",
                "d74ae830-bfbc-463b-9039-a363e3417463",
                "5c202653-532e-4de3-8c60-2d585b467555",
                "3ca69418-b6b3-47cd-8dc1-ce28f5511bb3",
                "6ffff673-d0b3-431b-9822-cf6cbc025aa4",
                "126c778f-9526-4546-a4ea-9c653eaeb8a1",
                "74359b48-8284-44ca-a1a0-b30d358aee46",
                "f1f45744-23ad-43a1-87ef-39b826a1b029"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4419,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "38121b8d-887f-4db3-892c-9b71dd7f528c",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.depositWithdrawFixture)();\n[[user, User], [depositor, Depositor], [withdrawer, Withdrawer]] = f.users;",
              "err": {},
              "uuid": "ca5803da-6746-4fd4-b674-a7981695730f",
              "parentUUID": "38121b8d-887f-4db3-892c-9b71dd7f528c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0663c5cd-bcbe-4855-ab07-885c5c53dc64",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "19b4f562-d876-426a-bd4f-41ea21703895",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 515,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _lib.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nconst depositAmount = collateralAmount.div(2);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAssets(user.address)).to.include(f.KrAssetCollateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(user.address, f.KrAssetCollateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "a26fee14-5f66-4020-826a-1ac0f006692b",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 111,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _lib.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(User.depositCollateral(user.address, f.KrAssetCollateral.address, 9e11.toString())).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "5bbd5828-47a5-4c30-83d2-220694d597d8",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 101,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Account has deposit entry\nconst depositedCollateralAssetsAfter = await _optimizations.default.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _optimizations.default.getAccountCollateralAmount(depositor.address, f.Collateral.address)).to.equal(f.initialDeposits);\n// Kresko's balance has increased\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Account's balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await f.Collateral.balanceOf(depositor.address))).to.equal((0, _lib.fromBig)(f.initialBalance) - (0, _lib.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "3ab5f37f-6bba-4c51-85ad-a1d8049d3c18",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 401,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral, from depositor -> user.\nawait (0, _chai.expect)(Depositor.depositCollateral(user.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Confirm the depositor's wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await f.Collateral.balanceOf(depositor.address);\n(0, _chai.expect)((0, _lib.fromBig)(depositorBalanceAfter)).to.equal((0, _lib.fromBig)(f.initialBalance) - (0, _lib.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "3ead69e9-30f9-4830-a1ed-e0df01561b64",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 398,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(depositor.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.add(f.initialDeposits));",
                      "err": {},
                      "uuid": "09ef1c17-1de6-4069-9044-a54a2a145da7",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 297,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nawait f.Collateral2.setBalance(depositor, f.initialBalance, _hardhat.default.Diamond.address);\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral2.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral2.address\n]);",
                      "err": {},
                      "uuid": "65ebf04d-7eec-4466-89a2-5a069d40e3b6",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 102,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralDeposited\");\n(0, _chai.expect)(event.account).to.equal(depositor.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                      "err": {},
                      "uuid": "ae837c38-5751-4ab7-b398-72ca5746216e",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 95,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, \"0x0000000000000000000000000000000000000001\", f.initialDeposits)).to.be.revertedWith(_errors.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "5e282bf6-e361-4846-a71b-54900c91f6b3",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 99,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "19bdd841-97b8-408a-996c-4b41dee9341d",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 270,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer , devTwo , extOne  } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositor).depositCollateral(depositor.address, f.Collateral.contract.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "416f52f8-6647-4859-b786-5a2ae2e7c008",
                      "parentUUID": "19b4f562-d876-426a-bd4f-41ea21703895",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a26fee14-5f66-4020-826a-1ac0f006692b",
                    "5bbd5828-47a5-4c30-83d2-220694d597d8",
                    "3ab5f37f-6bba-4c51-85ad-a1d8049d3c18",
                    "3ead69e9-30f9-4830-a1ed-e0df01561b64",
                    "09ef1c17-1de6-4069-9044-a54a2a145da7",
                    "65ebf04d-7eec-4466-89a2-5a069d40e3b6",
                    "ae837c38-5751-4ab7-b398-72ca5746216e",
                    "5e282bf6-e361-4846-a71b-54900c91f6b3",
                    "19bdd841-97b8-408a-996c-4b41dee9341d",
                    "416f52f8-6647-4859-b786-5a2ae2e7c008"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2389,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "2574c8e7-1658-4dd0-955a-1fa192cad425",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "065fca04-134c-402b-97ce-8c03dc15b683",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 591,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "58b1486d-b4ff-4b78-9636-e01685d01dc2",
                          "parentUUID": "065fca04-134c-402b-97ce-8c03dc15b683",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 664,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits.sub(amountDeposited));",
                          "err": {},
                          "uuid": "f17ee687-fb41-40ac-b75b-84e3a9db42b8",
                          "parentUUID": "065fca04-134c-402b-97ce-8c03dc15b683",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 688,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.grantRole(_testutils.Role.MANAGER, user.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, user.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(f.initialDeposits));",
                          "err": {},
                          "uuid": "d7a7430b-bc78-461a-9ff8-8fbc8584f650",
                          "parentUUID": "065fca04-134c-402b-97ce-8c03dc15b683",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 290,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralWithdrawn\");\n(0, _chai.expect)(event.account).to.equal(withdrawer.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "d8e63eed-f449-4e01-8f3b-9f3d9a7dbd8c",
                          "parentUUID": "065fca04-134c-402b-97ce-8c03dc15b683",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 114,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${user.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "0ccefa8e-e2fd-4ca5-bf53-dd0a190fcfca",
                          "parentUUID": "065fca04-134c-402b-97ce-8c03dc15b683",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "dc886e3e-10da-416b-a118-465b384d5f9d",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 383,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne mints some kr assets\nthis.mintAmount = (0, _lib.toBig)(100);\nawait Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _optimizations.default.getMinCollateralRatio();",
                              "err": {},
                              "uuid": "f5c6e131-047d-43c0-b274-cc0391947c53",
                              "parentUUID": "dc886e3e-10da-416b-a118-465b384d5f9d",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 1343,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _lib.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst [accMinCollateralValue, accCollateralValue, withdrawnCollateralValue] = await Promise.all([\n    _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr),\n    _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address),\n    _hardhat.default.Diamond.getCollateralAmountToValue(f.Collateral.address, withdrawAmount, false).then(([value])=>value)\n]);\n(0, _chai.expect)(accCollateralValue.sub(withdrawnCollateralValue).gte(accMinCollateralValue)).to.be.true;\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _optimizations.default.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst withdrawerBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(withdrawerBalance).to.equal(withdrawAmount);\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "6157f6fc-a9d9-4455-8b02-77672684d880",
                              "parentUUID": "dc886e3e-10da-416b-a118-465b384d5f9d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 462,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const randomUser = _hardhat.default.users.userFour;\nawait f.Collateral.setBalance(randomUser, _ethers.BigNumber.from(0));\nawait f.Collateral.setBalance(randomUser, (0, _lib.toBig)(1000));\nawait f.Collateral.contract.connect(randomUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(1000),\n    user: randomUser\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(1010),\n    user: randomUser\n});\n(0, _chai.expect)(await f.Collateral.balanceOf(randomUser.address)).to.equal((0, _lib.toBig)(1000));",
                              "err": {},
                              "uuid": "79388e74-d370-4746-beae-e604fdb99689",
                              "parentUUID": "dc886e3e-10da-416b-a118-465b384d5f9d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 99,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, 0, withdrawAmount)).to.be.revertedWith(_errors.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "40264a4d-fa38-4e28-87b7-e5da9db1993e",
                              "parentUUID": "dc886e3e-10da-416b-a118-465b384d5f9d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 1148,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = f.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.Collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "396e1a06-4946-4e4e-b984-96eabc0e70d5",
                              "parentUUID": "dc886e3e-10da-416b-a118-465b384d5f9d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 100,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 1)).to.be.revertedWith(_errors.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "9815108f-a5de-440a-a500-e47922dd0b6d",
                              "parentUUID": "dc886e3e-10da-416b-a118-465b384d5f9d",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "6157f6fc-a9d9-4455-8b02-77672684d880",
                            "79388e74-d370-4746-beae-e604fdb99689",
                            "40264a4d-fa38-4e28-87b7-e5da9db1993e",
                            "396e1a06-4946-4e4e-b984-96eabc0e70d5",
                            "9815108f-a5de-440a-a500-e47922dd0b6d"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 3152,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 60000
                        }
                      ],
                      "passes": [
                        "58b1486d-b4ff-4b78-9636-e01685d01dc2",
                        "f17ee687-fb41-40ac-b75b-84e3a9db42b8",
                        "d7a7430b-bc78-461a-9ff8-8fbc8584f650",
                        "d8e63eed-f449-4e01-8f3b-9f3d9a7dbd8c",
                        "0ccefa8e-e2fd-4ca5-bf53-dd0a190fcfca"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2347,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "5a2bfe36-ea8d-4d07-a9bc-fecbebf71916",
                  "title": "#deposit - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase \"before each\" hook in \"#deposit - rebase\"",
                      "timedOut": false,
                      "duration": 580,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setBalance(user, f.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// Allowance for Kresko\nawait f.KrAssetCollateral.contract.setVariable(\"_allowances\", {\n    [user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait User.depositCollateral(user.address, f.Collateral.address, f.initialDeposits);\n// Mint some krAssets\nawait User.mintKreskoAsset(user.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await User.getAccountDebtAmount(user.address, f.KrAssetCollateral.address);",
                      "err": {},
                      "uuid": "0e9d61c1-97db-4717-9532-9af3bf434000",
                      "parentUUID": "5a2bfe36-ea8d-4d07-a9bc-fecbebf71916",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "441e0968-486e-4fa2-b387-a1fa1c0af9dc",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 322,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "c83f5621-cf3e-4757-81cf-4576300d6b97",
                          "parentUUID": "441e0968-486e-4fa2-b387-a1fa1c0af9dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 320,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "057f1b41-572e-4da5-a4e6-348207e17480",
                          "parentUUID": "441e0968-486e-4fa2-b387-a1fa1c0af9dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 499,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "b7a3d9cd-4922-4c87-8b6b-18882b72f0ac",
                          "parentUUID": "441e0968-486e-4fa2-b387-a1fa1c0af9dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 318,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "78c63966-4b51-4609-9a01-c632ad616abb",
                          "parentUUID": "441e0968-486e-4fa2-b387-a1fa1c0af9dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 424,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "9e1519d8-7e7e-491b-9968-b2e885deaf73",
                          "parentUUID": "441e0968-486e-4fa2-b387-a1fa1c0af9dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 605,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "e4b30391-a710-43f1-940a-1a6289521785",
                          "parentUUID": "441e0968-486e-4fa2-b387-a1fa1c0af9dc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c83f5621-cf3e-4757-81cf-4576300d6b97",
                        "057f1b41-572e-4da5-a4e6-348207e17480",
                        "b7a3d9cd-4922-4c87-8b6b-18882b72f0ac",
                        "78c63966-4b51-4609-9a01-c632ad616abb",
                        "9e1519d8-7e7e-491b-9968-b2e885deaf73",
                        "e4b30391-a710-43f1-940a-1a6289521785"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2488,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "5b739bd8-5c27-4102-9ab8-884fc2a512cb",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 692,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "383c9f07-8edd-459e-ada6-2a80b78c83d3",
                          "parentUUID": "5b739bd8-5c27-4102-9ab8-884fc2a512cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 867,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "cb94b54a-cabc-4e3a-8728-79b3aa758833",
                          "parentUUID": "5b739bd8-5c27-4102-9ab8-884fc2a512cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 496,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "d814305e-4bc7-492d-9149-f07fd7154549",
                          "parentUUID": "5b739bd8-5c27-4102-9ab8-884fc2a512cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 678,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "7085d3b6-f7fa-4cfe-84a0-0e1409d1fe9e",
                          "parentUUID": "5b739bd8-5c27-4102-9ab8-884fc2a512cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 987,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, fullDepositAmount, false);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "1dfb52ed-7307-4e17-adc0-c27c17ce8770",
                          "parentUUID": "5b739bd8-5c27-4102-9ab8-884fc2a512cb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1169,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.KrAssetCollateral.address, fullDepositAmount, false);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "482008a8-078b-4794-8a9b-5146ded968cd",
                          "parentUUID": "5b739bd8-5c27-4102-9ab8-884fc2a512cb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "383c9f07-8edd-459e-ada6-2a80b78c83d3",
                        "cb94b54a-cabc-4e3a-8728-79b3aa758833",
                        "d814305e-4bc7-492d-9149-f07fd7154549",
                        "7085d3b6-f7fa-4cfe-84a0-0e1409d1fe9e",
                        "1dfb52ed-7307-4e17-adc0-c27c17ce8770",
                        "482008a8-078b-4794-8a9b-5146ded968cd"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 4889,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "dab09f5a-115a-4f7d-8443-c6c3dc85b8d9",
                  "title": "#withdraw - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase \"before each\" hook in \"#withdraw - rebase\"",
                      "timedOut": false,
                      "duration": 384,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await _optimizations.default.getAccountDebtAmount(withdrawer.address, f.KrAssetCollateral);",
                      "err": {},
                      "uuid": "61e35e3b-15f7-4a76-8554-3f1df92b9263",
                      "parentUUID": "dab09f5a-115a-4f7d-8443-c6c3dc85b8d9",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 808,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "5abd9c73-2ed7-4c51-a327-87dd6afd927d",
                          "parentUUID": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 801,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "e5be61d4-f4e2-4f1f-8d8b-2be565c65785",
                          "parentUUID": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 974,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "c22055af-815f-457e-8406-9f7742d5219c",
                          "parentUUID": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after a negative rebase",
                          "timedOut": false,
                          "duration": 796,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "7661bdc8-83bd-4ab5-be74-e1f2288d49e1",
                          "parentUUID": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 906,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "8c37b10b-be1e-42ce-8e1c-35be44acfd93",
                          "parentUUID": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 944,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "34c53037-4582-4cdd-92ad-5aa630e8eec0",
                          "parentUUID": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 595,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await f.Collateral.contract.balanceOf(withdrawer.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.Collateral.address));\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "50299679-840d-4ed3-a4f6-3e11f47ef4d6",
                          "parentUUID": "4d26fd87-19f2-4f7c-888d-fee74ba88c34",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5abd9c73-2ed7-4c51-a327-87dd6afd927d",
                        "e5be61d4-f4e2-4f1f-8d8b-2be565c65785",
                        "c22055af-815f-457e-8406-9f7742d5219c",
                        "7661bdc8-83bd-4ab5-be74-e1f2288d49e1",
                        "8c37b10b-be1e-42ce-8e1c-35be44acfd93",
                        "34c53037-4582-4cdd-92ad-5aa630e8eec0",
                        "50299679-840d-4ed3-a4f6-3e11f47ef4d6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 5824,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 982,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "57105755-31ac-4505-a4c7-9e2e1077d98a",
                          "parentUUID": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 790,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "8d09ea95-cfe2-4d45-9f0b-d1d65b4e6a3c",
                          "parentUUID": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 982,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "0057c1dc-a6b1-477c-b629-e8ad90ee9036",
                          "parentUUID": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 787,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "dc35b54f-1a86-4d8d-ba99-8e392f8935aa",
                          "parentUUID": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 1457,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "36caffae-9720-49c2-a268-21cf7d6defcb",
                          "parentUUID": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1475,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "94df48be-0601-4bc1-abec-ec83483d8b80",
                          "parentUUID": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 1917,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.Collateral.address);\nconst [withdrawValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(f.Collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountCollateralValue(withdrawer.address);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.bignumber.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "32832c0a-5ce5-4a37-b7ff-3b792e51ae4c",
                          "parentUUID": "c12dca12-6059-4a20-84c6-489f56eb4b5f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "57105755-31ac-4505-a4c7-9e2e1077d98a",
                        "8d09ea95-cfe2-4d45-9f0b-d1d65b4e6a3c",
                        "0057c1dc-a6b1-477c-b629-e8ad90ee9036",
                        "dc35b54f-1a86-4d8d-ba99-8e392f8935aa",
                        "36caffae-9720-49c2-a268-21cf7d6defcb",
                        "94df48be-0601-4bc1-abec-ec83483d8b80",
                        "32832c0a-5ce5-4a37-b7ff-3b792e51ae4c"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 8390,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "86799b4d-8b9f-4a3c-a7e4-728177a837df",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.liquidationsFixture)();\n[[user1, User], [user2], [user3], [user4], [user5], [liquidator, Liquidator], [liquidatorTwo, LiquidatorTwo]] = f.users;\nf.reset();",
              "err": {},
              "uuid": "d1b3ad16-ec11-401a-89c3-1b3626f53a93",
              "parentUUID": "86799b4d-8b9f-4a3c-a7e4-728177a837df",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac86025e-4393-49d8-a591-123c1d122e8b",
              "title": "#isAccountLiquidatable",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify accounts below their liquidation threshold",
                  "fullTitle": "Minter - Liquidations #isAccountLiquidatable should identify accounts below their liquidation threshold",
                  "timedOut": false,
                  "duration": 1248,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [cr, minCollateralUSD, initialCanLiquidate] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address),\n    hre.Diamond.getAccountMinCollateralAtRatio(user1.address, hre.Diamond.getLiquidationThreshold()),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(cr).to.be.equal(1.5);\n(0, _chai.expect)(f.initialDeposits.mul(10).gt(minCollateralUSD));\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.equal(true);",
                  "err": {},
                  "uuid": "d74e1e30-c0aa-4de0-bb5d-d22ad265f5e2",
                  "parentUUID": "ac86025e-4393-49d8-a591-123c1d122e8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d74e1e30-c0aa-4de0-bb5d-d22ad265f5e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1248,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "1d3137f5-39e4-4e63-8d6f-86e0d99ea8ae",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 1",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 1",
                  "timedOut": false,
                  "duration": 1916,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "f.Collateral.setPrice(7.5);\nconst [crAfter, isLiquidatableAfter, MLV, MLVCalc] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address),\n    (0, _liquidations.getExpectedMaxLiq)(user1, f.KrAsset, f.Collateral)\n]);\n(0, _chai.expect)(crAfter).to.be.equal(1.125);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(MLVCalc).to.be.closeTo(MLV, USD_DELTA);",
                  "err": {},
                  "uuid": "c697164f-bc94-4853-afd4-b6dcc41bde4e",
                  "parentUUID": "1d3137f5-39e4-4e63-8d6f-86e0d99ea8ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 2061,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateCollateralFactor(f.Collateral.address, (0, _lib.toBig)(0.25));\nawait (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: f.initialDeposits.div(2),\n    asset: f.Collateral2\n});\nconst expectedCR = 1.125;\nconst [crAfter, isLiquidatableAfter, MLVAfterC1, MLVAfterC2] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral2.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(crAfter).to.be.closeTo(expectedCR, CR_DELTA);\n(0, _chai.expect)(MLVAfterC2.gt(MLVAfterC1)).to.be.true;\n        // await liquidate(user1, f.KrAsset, f.Collateral);\n        // expect(await getCR(user1.address)).to.be.gt(1.4);",
                  "err": {},
                  "uuid": "0f6057d8-41e1-48aa-a130-b743f7e90418",
                  "parentUUID": "1d3137f5-39e4-4e63-8d6f-86e0d99ea8ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 3006,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _lib.toBig)(0.1, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.true;\nconst [expectedMaxLiq, maxLiq, expectedMaxLiq8Dec, maxLiq8Dec] = await Promise.all([\n    (0, _liquidations.getExpectedMaxLiq)(user1, f.KrAsset, f.Collateral),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address),\n    (0, _liquidations.getExpectedMaxLiq)(user1, f.KrAsset, f.Collateral8Dec),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(expectedMaxLiq.gt(0)).to.be.true;\n(0, _chai.expect)(expectedMaxLiq8Dec.gt(0)).to.be.true;\n(0, _chai.expect)(expectedMaxLiq).to.be.closeTo(maxLiq, USD_DELTA);\n(0, _chai.expect)(expectedMaxLiq8Dec).to.be.closeTo(maxLiq8Dec, USD_DELTA);\n(0, _chai.expect)(expectedMaxLiq8Dec).lt(expectedMaxLiq);",
                  "err": {},
                  "uuid": "5c384c67-e0a3-4535-ae50-6bb336507f1d",
                  "parentUUID": "1d3137f5-39e4-4e63-8d6f-86e0d99ea8ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c697164f-bc94-4853-afd4-b6dcc41bde4e",
                "0f6057d8-41e1-48aa-a130-b743f7e90418",
                "5c384c67-e0a3-4535-ae50-6bb336507f1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6983,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "3bdbfe63-c533-4384-b140-1c8ece64d762",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(7.5);",
                      "err": {},
                      "uuid": "8976c960-d382-4e7c-beb9-36798efe97fa",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 1056,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\nconst userOneDebtBefore = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst liquidatorBalanceBefore = await f.Collateral.balanceOf(liquidator.address);\nconst liquidatorBalanceKrBefore = await f.KrAsset.balanceOf(liquidator.address);\nconst kreskoBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxRepayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _lib.toBig)(11, 8));\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, maxRepayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), false);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst userOneDebtAfterLiquidation = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebtAfterLiquidation.eq(userOneDebtBefore.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst userOneCollateralAfterLiquidation = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\n(0, _chai.expect)(userOneCollateralAfterLiquidation.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\n(0, _chai.expect)(await f.KrAsset.balanceOf(liquidator.address)).eq(liquidatorBalanceKrBefore.sub(maxRepayAmount));\n// Confirm that userTwo has received some collateral from the contract\n(0, _chai.expect)(await f.Collateral.balanceOf(liquidator.address)).gt(liquidatorBalanceBefore);\n// Confirm that Kresko contract's collateral balance has decreased.\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).lt(kreskoBalanceBefore);",
                      "err": {},
                      "uuid": "a5157071-3e60-4f31-a663-a25697a85c54",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with a single CDP",
                      "timedOut": false,
                      "duration": 1734,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _lib.toBig)(11, 8));\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), false);\n(0, _chai.expect)(await (0, _liquidations.getCR)(user1.address, true)).to.be.closeTo(await _optimizations.default.getMaxLiquidationRatio(), (0, _lib.toBig)(CR_DELTA));\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "3b427b7f-6dfe-41fb-9353-2855a54ec0a1",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with multiple CDPs",
                      "timedOut": false,
                      "duration": 2878,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _lib.toBig)(10, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(5);\nf.Collateral8Dec.setPrice(6);\nawait hre.Diamond.updateCollateralFactor(f.Collateral.address, (0, _lib.toBig)(0.975));\nawait hre.Diamond.updateKFactor(f.KrAsset.address, (0, _lib.toBig)(1.05));\nawait (0, _liquidations.liquidate)(user1, f.KrAsset, f.Collateral8Dec);\nconst [crAfter, isLiquidatableAfter] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address, true),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.false;\n(0, _chai.expect)(crAfter).to.be.closeTo(await _optimizations.default.getMaxLiquidationRatio(), (0, _lib.toBig)(CR_DELTA));",
                      "err": {},
                      "uuid": "3d7b346e-f015-42a7-8760-e15890f565e0",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 772,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _lib.toBig)(11));\nconst tx = await Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), false);\nconst event = await (0, _lib.getNamedEvent)(tx, \"LiquidationOccurred\");\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);",
                      "err": {},
                      "uuid": "1936d8e1-b264-4b15-b330-af0cd2cf4b60",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 495,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(10);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "763dcce7-9de8-4505-8dc0-5ef58487a8aa",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "47b18d0a-89e3-45fa-b52c-469b09ec9e3c",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 386,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _lib.toBig)(1));\n// Liquidation should fail\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "98a288e7-5148-4e85-b014-b443b7e571f5",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 1781,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _lib.toBig)(2, 8),\n    asset: f.Collateral8Dec\n});\nconst allowedRepaymentValue = await hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address);\nconst allowedRepaymentAmount = allowedRepaymentValue.wadDiv((0, _lib.toBig)(11, 8));\nconst overflowRepayment = allowedRepaymentAmount.add((0, _lib.toBig)(1));\nconst tx = await Liquidator.liquidate(user1.address, f.KrAsset.address, overflowRepayment, f.Collateral.address, 0, 0, false);\nconst event = await (0, _lib.getNamedEvent)(tx, \"LiquidationOccurred\");\nconst assetInfo = await f.Collateral.kresko();\nconst expectedSeizedCollateralAmount = allowedRepaymentValue.wadMul(_ethers.BigNumber.from(assetInfo.liquidationIncentive)).wadDiv(await f.Collateral.getPrice());\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.args.repayAmount).to.not.equal(overflowRepayment);\n(0, _chai.expect)(event.args.repayAmount).to.equal(allowedRepaymentAmount);\n(0, _chai.expect)(event.args.collateralSent).to.be.equal(expectedSeizedCollateralAmount);",
                      "err": {},
                      "uuid": "63fae101-60c7-4ad1-844c-d35ef7e42669",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 1344,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(f.Collateral.deployArgs.price);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getMinCollateralRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getLiquidationThreshold());\nf.Collateral.setPrice(9.9);\nconst accountCollateralValue = await hre.Diamond.getAccountCollateralValue(user1.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "a0324b66-460a-4cd6-b646-93416f411383",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator token approval for Kresko Assets",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without liquidator token approval for Kresko Assets",
                      "timedOut": false,
                      "duration": 866,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(0);\nconst repayAmount = (0, _lib.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(user2.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "d4b9cd49-61fc-477e-a731-4970d14fa7fa",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 1054,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = (0, _lib.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait f.KrAsset.contract.setVariable(\"_allowances\", {\n    [liquidatorTwo.address]: {\n        [hre.Diamond.address]: repayAmount\n    }\n});\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "f0bded77-ec7c-42a2-8b03-b3235b636f7f",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)(User.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "bfe664b0-91ff-4b2a-8c55-14dc61ccfcff",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow seized amount to underflow without liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow seized amount to underflow without liquidators permission",
                      "timedOut": false,
                      "duration": 1166,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(6);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(user1, f.KrAsset, f.Collateral);\nconst allowSeizeUnderflow = false;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, liqAmount, f.Collateral.address, 0, 0, allowSeizeUnderflow)).to.be.revertedWith(_errors.Error.SEIZED_COLLATERAL_UNDERFLOW);",
                      "err": {},
                      "uuid": "ef63069d-0487-4748-93fc-66f12995f5cf",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow seized amount to underflow with liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow seized amount to underflow with liquidators permission",
                      "timedOut": false,
                      "duration": 1366,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(6);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(user1, f.KrAsset, f.Collateral);\nconst allowSeizeUnderflow = true;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, liqAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), allowSeizeUnderflow)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "c308d4f9-f41a-4ebd-b5c3-c2564d024208",
                      "parentUUID": "5f9f41ef-840c-4d35-8a0e-d6fc58057bca",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a5157071-3e60-4f31-a663-a25697a85c54",
                    "3b427b7f-6dfe-41fb-9353-2855a54ec0a1",
                    "3d7b346e-f015-42a7-8760-e15890f565e0",
                    "1936d8e1-b264-4b15-b330-af0cd2cf4b60",
                    "763dcce7-9de8-4505-8dc0-5ef58487a8aa",
                    "47b18d0a-89e3-45fa-b52c-469b09ec9e3c",
                    "98a288e7-5148-4e85-b014-b443b7e571f5",
                    "63fae101-60c7-4ad1-844c-d35ef7e42669",
                    "a0324b66-460a-4cd6-b646-93416f411383",
                    "d4b9cd49-61fc-477e-a731-4970d14fa7fa",
                    "f0bded77-ec7c-42a2-8b03-b3235b636f7f",
                    "bfe664b0-91ff-4b2a-8c55-14dc61ccfcff",
                    "ef63069d-0487-4748-93fc-66f12995f5cf",
                    "c308d4f9-f41a-4ebd-b5c3-c2564d024208"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 15093,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.resetRebasing();",
                      "err": {},
                      "uuid": "987747a8-0dc3-44cd-9495-580f42601272",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should setup correct",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should setup correct",
                      "timedOut": false,
                      "duration": 1248,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [mcr, cr, cr2, liquidatable] = await Promise.all([\n    _optimizations.default.getMinCollateralRatio(),\n    (0, _liquidations.getCR)(user3.address),\n    (0, _liquidations.getCR)(user4.address),\n    hre.Diamond.getAccountLiquidatable(user3.address)\n]);\nconst mcrDecimal = (0, _lib.fromBig)(mcr, 18);\n(0, _chai.expect)(cr).to.closeTo(mcrDecimal, 0.001);\n(0, _chai.expect)(cr2).to.closeTo(mcrDecimal, 0.001);\n(0, _chai.expect)(liquidatable).to.be.false;",
                      "err": {},
                      "uuid": "8a03aef9-3feb-412b-ad51-f67deacfc55f",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 297,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "812affdd-f424-4dac-af8c-0dced0335581",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 297,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "f833fd71-975a-460e-a98c-7e31c3126c16",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 3230,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true);\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "e9b84dcc-7ae1-4346-a9bf-198bc6f003c0",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 2658,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.KrAsset.setPrice(rebasePrice + 1);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "b95548fe-010b-4bb4-8c9a-5a3d4350912d",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 1339,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nconst MAGIC_NUMBER = _ethers.BigNumber.from(\"1869158877653366666667\"); // repay amount to bring user3 debt under 1e12\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, MAGIC_NUMBER, hre.Diamond.address);\nawait Liquidator.liquidate(user3.address, f.KrAssetCollateral.address, MAGIC_NUMBER, f.KrAssetCollateral.address, _optimizations.default.getAccountMintIndex(user3.address, f.KrAssetCollateral.address), _optimizations.default.getAccountDepositIndex(user3.address, f.KrAssetCollateral.address), false);\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "b4d96794-03d2-4921-9464-4dfbad7a54ab",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 6056,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user4.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(user4.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(user5.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid * denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "d5b7d98c-bd90-4d40-8916-d579b5b149e4",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 6435,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user4.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(user4.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(user5.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid / denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "8837a959-a947-4ef2-ac42-8c3521bc770f",
                      "parentUUID": "d093d48c-f2b3-418e-9aca-c18923c5ae23",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8a03aef9-3feb-412b-ad51-f67deacfc55f",
                    "812affdd-f424-4dac-af8c-0dced0335581",
                    "f833fd71-975a-460e-a98c-7e31c3126c16",
                    "e9b84dcc-7ae1-4346-a9bf-198bc6f003c0",
                    "b95548fe-010b-4bb4-8c9a-5a3d4350912d",
                    "b4d96794-03d2-4921-9464-4dfbad7a54ab",
                    "d5b7d98c-bd90-4d40-8916-d579b5b149e4",
                    "8837a959-a947-4ef2-ac42-8c3521bc770f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 21560,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "4b82c59f-15b3-44de-a405-7dcceaefc64b",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.mintRepayFixture)();\n[[user1, User1], [user2, User2]] = f.users;\nf.reset();",
              "err": {},
              "uuid": "4c4b2357-ec0d-4a3f-9f02-3a49035579aa",
              "parentUUID": "4b82c59f-15b3-44de-a405-7dcceaefc64b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "357a49b2-57ce-47a0-a344-54891594cf20",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "90738b66-3947-40dc-8730-22fc587ccea9",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 693,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(f.initialMintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "2b855a25-5870-46b8-9b58-c7c753d993d4",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 1453,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "630fb527-11cb-497b-9c50-c9fd9813f086",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 871,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(20);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset2.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset2);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset2.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await f.KrAsset2.contract.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "6e9f0260-9f02-4720-ac0e-0bc158f91f8d",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 857,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _lib.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hre.Diamond.getMinDebtValue();\n(0, _chai.expect)((0, _lib.fromBig)(mintAmountUSDValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "8d9fed78-2ac9-48cb-aa69-8e8b0c74a1e3",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 493,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_testutils.Role.MANAGER, user2.address);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _lib.toBig)(1);\nawait User2.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userTwoBalanceAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userTwoBalanceAfter).to.equal(mintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);",
                      "err": {},
                      "uuid": "d632166f-6fb3-457a-92eb-6fdae00cfd09",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 393,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"KreskoAssetMinted\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount);",
                      "err": {},
                      "uuid": "48bfad1f-6b81-4b9c-92ad-c0e5a3794f75",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(User1.mintKreskoAsset(user2.address, f.KrAsset.address, (0, _lib.toBig)(1))).to.be.revertedWith(`AccessControl: account ${user1.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "27f2c90e-8323-4d60-ab68-7cd8385a667e",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 392,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currMinimumDebtValue = await _optimizations.default.getMinDebtValue();\nconst mintAmount = currMinimumDebtValue.div(_testutils.TEN_USD).sub(1);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "a6bea3d0-e55c-4350-85c3-0738cf6c3070",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 96,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, \"0x0000000000000000000000000000000000000002\", (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "3764cac8-bfaf-4ef7-9dcb-7437e15a0622",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 293,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both f.Collateral and f.KrAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, _lib.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, _lib.toBig)(mcrAmount + 1);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "6721f714-1920-4e1e-a2bc-92c7344fc05e",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 298,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait f.Collateral.setBalance(user1, (0, _lib.toBig)(100000000));\nawait (0, _chai.expect)(User1.depositCollateral(user1.address, f.Collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await hre.Diamond.getKreskoAsset(f.KrAsset.address);\nconst overSupplyLimit = (0, _lib.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, (0, _lib.toBig)(overSupplyLimit))).to.be.revertedWith(_errors.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "4ac297cd-3995-49f8-bc14-28dc94ab6137",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "1900e177-c1e9-4daa-ac34-8d92b3374862",
                      "parentUUID": "90738b66-3947-40dc-8730-22fc587ccea9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2b855a25-5870-46b8-9b58-c7c753d993d4",
                    "630fb527-11cb-497b-9c50-c9fd9813f086",
                    "6e9f0260-9f02-4720-ac0e-0bc158f91f8d",
                    "8d9fed78-2ac9-48cb-aa69-8e8b0c74a1e3",
                    "d632166f-6fb3-457a-92eb-6fdae00cfd09",
                    "48bfad1f-6b81-4b9c-92ad-c0e5a3794f75",
                    "27f2c90e-8323-4d60-ab68-7cd8385a667e",
                    "a6bea3d0-e55c-4350-85c3-0738cf6c3070",
                    "3764cac8-bfaf-4ef7-9dcb-7437e15a0622",
                    "6721f714-1920-4e1e-a2bc-92c7344fc05e",
                    "4ac297cd-3995-49f8-bc14-28dc94ab6137"
                  ],
                  "failures": [],
                  "pending": [
                    "1900e177-c1e9-4daa-ac34-8d92b3374862"
                  ],
                  "skipped": [],
                  "duration": 5947,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "fc80f9bb-31c7-43e1-96b6-615075eadfa3",
                  "title": "#mint - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "57c3943f-bec3-4b31-9190-cfa5f6834e34",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 496,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "bedb2bac-f642-427c-8b36-7c1be11ea383",
                          "parentUUID": "57c3943f-bec3-4b31-9190-cfa5f6834e34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 673,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "b454d11a-2a87-4b4a-8cea-cc51c01b138b",
                          "parentUUID": "57c3943f-bec3-4b31-9190-cfa5f6834e34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 498,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "1bd456e6-d7dd-4bbd-8b67-d30654ac6f3b",
                          "parentUUID": "57c3943f-bec3-4b31-9190-cfa5f6834e34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 497,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "533cf0eb-2b13-464b-94f8-f70cabeef334",
                          "parentUUID": "57c3943f-bec3-4b31-9190-cfa5f6834e34",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "bedb2bac-f642-427c-8b36-7c1be11ea383",
                        "b454d11a-2a87-4b4a-8cea-cc51c01b138b",
                        "1bd456e6-d7dd-4bbd-8b67-d30654ac6f3b",
                        "533cf0eb-2b13-464b-94f8-f70cabeef334"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2164,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "ef83162e-50b7-4699-a1d7-7d43bb325be8",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 785,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "10994454-1e7e-42c5-942b-4012bccb49a1",
                          "parentUUID": "ef83162e-50b7-4699-a1d7-7d43bb325be8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 976,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "92bae30d-9148-4808-b966-9b5eee3a7047",
                          "parentUUID": "ef83162e-50b7-4699-a1d7-7d43bb325be8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 778,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice, 8) / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "843fa320-1362-4683-b230-7c6b190831eb",
                          "parentUUID": "ef83162e-50b7-4699-a1d7-7d43bb325be8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 979,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "d50bad09-95bd-4d68-b56a-d3f0994e3473",
                          "parentUUID": "ef83162e-50b7-4699-a1d7-7d43bb325be8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "10994454-1e7e-42c5-942b-4012bccb49a1",
                        "92bae30d-9148-4808-b966-9b5eee3a7047",
                        "843fa320-1362-4683-b230-7c6b190831eb",
                        "d50bad09-95bd-4d68-b56a-d3f0994e3473"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3518,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "a673914e-96dc-4a7e-bdf8-3f2d6ccf7580",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 1860,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.bignumber.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.bignumber.equal(valueBeforeRebase);\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await f.KrAsset.contract.balanceOf(user1.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, f.KrAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "829c02ce-0ca2-4370-a390-fe619ac0596f",
                          "parentUUID": "a673914e-96dc-4a7e-bdf8-3f2d6ccf7580",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 2043,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, f.KrAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, f.KrAsset));\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "2b3aaf36-0fb1-4f1a-a844-db7f7e5ab355",
                          "parentUUID": "a673914e-96dc-4a7e-bdf8-3f2d6ccf7580",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "829c02ce-0ca2-4370-a390-fe619ac0596f",
                        "2b3aaf36-0fb1-4f1a-a844-db7f7e5ab355"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3903,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 581,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);",
                      "err": {},
                      "uuid": "a31502a8-463c-491d-9840-79f2cdb73131",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 394,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(f.initialMintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userDebt).to.closeTo(f.initialMintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "bd67d56b-2306-46a7-9ff3-44f6d2c67113",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "39f685f9-6f88-4c29-acf2-4b54c838eda7",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 501,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_testutils.Role.MANAGER, user2.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nconst userOneBalanceBefore = await f.KrAsset.balanceOf(user1.address);\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, _chai.expect)(User2.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userOneBalance).to.equal(userOneBalanceBefore, \"userOneBalance\");\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await f.KrAsset.balanceOf(user2.address);\n(0, _chai.expect)(userThreeBalance).to.equal(f.initialMintAmount.sub(burnAmount), \"userThreeBalance\");\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount), \"totalSupplyAfter\");\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user2.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n], \"mintedKreskoAssetsAfter\");\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebt).to.equal(f.initialMintAmount.sub(burnAmount));",
                      "err": {},
                      "uuid": "681c943f-0922-451f-9757-cbcfe6ff57e8",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "28b8823e-0d47-4f73-bbef-2ea833bdba48",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 393,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await f.KrAsset.balanceOf(user1.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst minDebtValue = (0, _lib.fromBig)(await _optimizations.default.getMinDebtValue(), 8);\nconst oraclePrice = f.KrAsset.deployArgs.price;\nconst burnAmount = (0, _lib.toBig)((0, _lib.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "96f1e565-19b4-47d9-818a-2746a74c150d",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 392,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"KreskoAssetBurned\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount.div(5));",
                      "err": {},
                      "uuid": "f2e7ce34-6aa4-49f4-917c-3b40acdd4b02",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 1062,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = f.initialMintAmount.add(secondMintAmount);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "cd8e1a51-c7e8-448c-99f1-30adf6ad5787",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(_errors.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "b636d68c-de83-4868-8e69-b086017df489",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 293,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User2.burnKreskoAsset(user1.address, f.KrAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${user2.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "0ef03bc9-bec8-4dba-8398-f6ab77c7d15b",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst burnAmount = debt.add((0, _lib.toBig)(1));\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "074ee3d5-4ed2-4eb1-83c2-e2421ceeaeb3",
                      "parentUUID": "70a6f3d3-1a06-42cb-b642-c04670d45a37",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "6dbc95f7-e77b-436c-be4e-181ae0d103b1",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 1400,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, _lib.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nawait f.KrAsset.update({\n    ..._testutils.defaultKrAssetArgs,\n    openFee\n});\nconst mintAmount = (0, _lib.toBig)(1);\nconst mintValue = mintAmount.mul(_testutils.TEN_USD);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(_testutils.TEN_USD);\n// Get the balances prior to the fee being charged.\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Mint Kresko asset\nconst tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"OpenFeePaid\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await hre.Diamond.previewFee(user1.address, f.KrAsset.address, mintAmount, _testutils.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, _chai.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "fc351dd6-8672-4882-9ab4-77f0baa67f35",
                          "parentUUID": "6dbc95f7-e77b-436c-be4e-181ae0d103b1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "fc351dd6-8672-4882-9ab4-77f0baa67f35"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1400,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "66149a97-27e7-46b5-aa98-2f7608e0bca7",
                      "title": "Protocol Close Fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 494,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _lib.toBig)(1);\nconst burnValue = burnAmount.mul(_testutils.TEN_USD);\nconst closeFee = (0, _lib.toBig)(f.KrAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(f.Collateral.deployArgs.price);\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "ed00add9-5966-4f91-ab21-65f3ce57637b",
                          "parentUUID": "66149a97-27e7-46b5-aa98-2f7608e0bca7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 1279,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * f.KrAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * _testutils.TEN_USD * f.KrAsset.deployArgs.closeFee, 8);\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmount)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmountRebase)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "7fbb99d8-c886-4b7f-86a2-1a3a3d74d284",
                          "parentUUID": "66149a97-27e7-46b5-aa98-2f7608e0bca7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 1272,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * f.KrAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * _testutils.TEN_USD * f.KrAsset.deployArgs.closeFee, 8);\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmount)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _lib.fromBig)(await f.KrAsset.getPrice(), 8) * denominator;\nf.KrAsset.setPrice(priceAfter);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _lib.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: (0, _lib.toBig)(burnAmountRebase)\n}), hre.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "1d622c19-b3f8-4d5c-81bf-2bd06d24f105",
                          "parentUUID": "66149a97-27e7-46b5-aa98-2f7608e0bca7",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ed00add9-5966-4f91-ab21-65f3ce57637b",
                        "7fbb99d8-c886-4b7f-86a2-1a3a3d74d284",
                        "1d622c19-b3f8-4d5c-81bf-2bd06d24f105"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 3045,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [
                    "bd67d56b-2306-46a7-9ff3-44f6d2c67113",
                    "681c943f-0922-451f-9757-cbcfe6ff57e8",
                    "96f1e565-19b4-47d9-818a-2746a74c150d",
                    "f2e7ce34-6aa4-49f4-917c-3b40acdd4b02",
                    "cd8e1a51-c7e8-448c-99f1-30adf6ad5787",
                    "b636d68c-de83-4868-8e69-b086017df489",
                    "0ef03bc9-bec8-4dba-8398-f6ab77c7d15b",
                    "074ee3d5-4ed2-4eb1-83c2-e2421ceeaeb3"
                  ],
                  "failures": [],
                  "pending": [
                    "39f685f9-6f88-4c29-acf2-4b54c838eda7",
                    "28b8823e-0d47-4f73-bbef-2ea833bdba48"
                  ],
                  "skipped": [],
                  "duration": 3229,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "ce31b22f-f28f-4d3d-b29b-8f51474c2168",
                  "title": "#burn - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase \"before each\" hook in \"#burn - rebase\"",
                      "timedOut": false,
                      "duration": 424,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: f.KrAsset,\n    amount: mintAmount,\n    user: user1\n});",
                      "err": {},
                      "uuid": "a9e562d7-cc52-49a2-838a-a305429a7a86",
                      "parentUUID": "ce31b22f-f28f-4d3d-b29b-8f51474c2168",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "ca74ef91-4009-4095-a785-3f9032cd9a87",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 607,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(0);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(0);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(f.initialMintAmount); // WEI",
                          "err": {},
                          "uuid": "9b4cda24-6c16-4e7b-b387-80818e381c02",
                          "parentUUID": "ca74ef91-4009-4095-a785-3f9032cd9a87",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 781,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "89026377-90f7-44e7-886c-46370ed4502f",
                          "parentUUID": "ca74ef91-4009-4095-a785-3f9032cd9a87",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 604,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await f.KrAsset.contract.balanceOf(user1.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _lib.toBig)(expectedBalanceAfterBurn * denominator).add(f.initialMintAmount));",
                          "err": {},
                          "uuid": "0254e9fd-68d1-44eb-9eda-32b6a988ca47",
                          "parentUUID": "ca74ef91-4009-4095-a785-3f9032cd9a87",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 606,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "af87de65-c1b5-4f41-88a8-3898d243ce15",
                          "parentUUID": "ca74ef91-4009-4095-a785-3f9032cd9a87",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "9b4cda24-6c16-4e7b-b387-80818e381c02",
                        "89026377-90f7-44e7-886c-46370ed4502f",
                        "0254e9fd-68d1-44eb-9eda-32b6a988ca47",
                        "af87de65-c1b5-4f41-88a8-3898d243ce15"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2598,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "a7054028-32e0-4102-b752-a65fae6edaf9",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 874,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "cf7efd05-4c74-4c38-92e0-61be73735ab8",
                          "parentUUID": "a7054028-32e0-4102-b752-a65fae6edaf9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 985,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(f.KrAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "337e1cdb-2a82-44b1-bb22-7ae08765e9c7",
                          "parentUUID": "a7054028-32e0-4102-b752-a65fae6edaf9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 874,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "9f284c96-f8be-46c2-b9a7-f43e3ec3b298",
                          "parentUUID": "a7054028-32e0-4102-b752-a65fae6edaf9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 1270,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, mintAmount, false);\nf.KrAsset.setPrice(_testutils.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getDebtAmountToValue(f.KrAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "f4dbe830-b5f2-481e-956d-48b79ec42d0f",
                          "parentUUID": "a7054028-32e0-4102-b752-a65fae6edaf9",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "cf7efd05-4c74-4c38-92e0-61be73735ab8",
                        "337e1cdb-2a82-44b1-bb22-7ae08765e9c7",
                        "9f284c96-f8be-46c2-b9a7-f43e3ec3b298",
                        "f4dbe830-b5f2-481e-956d-48b79ec42d0f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 4003,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "511832a6-ffc7-4c3b-9480-c01f77aa9235",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.defaultFixture)();\n[, , [user]] = f.users;",
              "err": {},
              "uuid": "16ac1b12-94d2-4327-bbd8-84c87b65b741",
              "parentUUID": "511832a6-ffc7-4c3b-9480-c01f77aa9235",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45b62c20-9002-4b19-a286-19cb4a85680b",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "cba8cc81-2284-4b34-9631-3a1bf329d2f6",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw withdraw correct amount",
                      "timedOut": false,
                      "duration": 401,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nawait (0, _chai.expect)(f.Receiver.testWithdrawalAmount(f.Collateral.address, withdrawalAmount)).to.not.be.revertedWith(\"wront amount received\");\n(0, _chai.expect)(await f.Collateral.balanceOf(f.Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "82f034d9-638e-4ec9-b73d-95b466e905bc",
                      "parentUUID": "cba8cc81-2284-4b34-9631-3a1bf329d2f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 890,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst balKreskoBefore = await f.Collateral.contract.balanceOf(hre.Diamond.address);\nawait Receiver.test(f.Collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(f.Collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(user.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await f.Collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "b4840b37-59b5-4f73-bfa3-9f2af1daf2b9",
                      "parentUUID": "cba8cc81-2284-4b34-9631-3a1bf329d2f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 1864,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(f.Collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user.address)).to.be.closeTo(15e17.toString(), 1e10.toString());\nawait (0, _chai.expect)(Receiver.test(f.Collateral.address, 10e15.toString())).to.be.reverted;",
                      "err": {},
                      "uuid": "8a7997bd-005e-4db9-8755-c324603611c5",
                      "parentUUID": "cba8cc81-2284-4b34-9631-3a1bf329d2f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 595,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nawait Receiver.testRedeposit(f.Collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await f.Collateral.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await f.Collateral.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "22fb972d-7d99-4ccc-a5d2-040f7d0b4f8e",
                      "parentUUID": "cba8cc81-2284-4b34-9631-3a1bf329d2f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 414,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nf.Collateral2.setPrice(10);\nawait f.Collateral2.setBalance(user, f.depositAmount);\nawait f.Collateral2.contract.setVariable(\"_allowances\", {\n    [user.address]: {\n        [hre.Diamond.address]: f.depositAmount,\n        [Receiver.address]: f.depositAmount\n    }\n});\nawait Receiver.testDepositAlternate(f.Collateral.address, deposits, f.Collateral2.address);\nconst secondCollateralDeposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral2.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "bb8ba325-4bcf-48b4-9a42-573b6baf302c",
                      "parentUUID": "cba8cc81-2284-4b34-9631-3a1bf329d2f6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "82f034d9-638e-4ec9-b73d-95b466e905bc",
                    "b4840b37-59b5-4f73-bfa3-9f2af1daf2b9",
                    "8a7997bd-005e-4db9-8755-c324603611c5",
                    "22fb972d-7d99-4ccc-a5d2-040f7d0b4f8e",
                    "bb8ba325-4bcf-48b4-9a42-573b6baf302c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4164,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "498b0018-3e62-45cf-bd04-569f46289466",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 0)).to.be.revertedWith(_testutils.Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "d236b378-017e-47b7-b29a-c5b4979c1690",
                      "parentUUID": "498b0018-3e62-45cf-bd04-569f46289466",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 224,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.revokeRole(_testutils.Role.MANAGER, f.Receiver.address);\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 10000)).to.be.revertedWith(`AccessControl: account ${f.Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "c1358fe3-95e6-4ddc-896a-26fb7e54735c",
                      "parentUUID": "498b0018-3e62-45cf-bd04-569f46289466",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 904,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "3fe0ef2a-3c3e-42fb-9da9-f445390eb727",
                      "parentUUID": "498b0018-3e62-45cf-bd04-569f46289466",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 906,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "6b4f57e8-1bcb-48dc-992a-f8fbb60e008c",
                      "parentUUID": "498b0018-3e62-45cf-bd04-569f46289466",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d236b378-017e-47b7-b29a-c5b4979c1690",
                    "c1358fe3-95e6-4ddc-896a-26fb7e54735c",
                    "3fe0ef2a-3c3e-42fb-9da9-f445390eb727",
                    "6b4f57e8-1bcb-48dc-992a-f8fbb60e008c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2148,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "9855da0a-a5f6-4dd2-96d2-79e4eb064e40",
          "title": "Oracles",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-oracles.ts",
          "file": "/src/test/oracle/00-oracles.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Oracles\"",
              "fullTitle": "Oracles \"before each\" hook in \"Oracles\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.defaultFixture)();\n// Deploy one price feed\n[, [user]] = f.users;\nthis.deployer = await hre.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await hre.ethers.getNamedSigner(\"userOne\");\nmockSequencerUptimeFeed = await (await hre.ethers.getContractFactory(\"MockSequencerUptimeFeed\")).deploy();\nf.Collateral.setPrice(10);",
              "err": {},
              "uuid": "07697150-3dcb-4218-ba13-23d6ffedcdf6",
              "parentUUID": "9855da0a-a5f6-4dd2-96d2-79e4eb064e40",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e721dd4-be03-40f4-9b0b-82a40958f773",
              "title": "Redstone",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-oracles.ts",
              "file": "/src/test/oracle/00-oracles.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct setup",
                  "fullTitle": "Oracles Redstone should have correct setup",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check initial conditions\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralValue(user.address)).to.equal((0, _lib.toBig)(10000, 8), \"collateral value should be $10\");",
                  "err": {},
                  "uuid": "f5e153ca-d5fa-427c-8d60-3b46c4eb8d89",
                  "parentUUID": "0e721dd4-be03-40f4-9b0b-82a40958f773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Oracles Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nf.Collateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _lib.toBig)(redstoneCollateralPrice, 8)), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "ed4c25cb-4e73-4a5c-8023-b8e1e7fa8c08",
                  "parentUUID": "0e721dd4-be03-40f4-9b0b-82a40958f773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get primary price when price +- oracleDeviationPct of reference price ",
                  "fullTitle": "Oracles Redstone should get primary price when price +- oracleDeviationPct of reference price ",
                  "timedOut": false,
                  "duration": 221,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.Collateral.setOracleOrder([\n    _oracles.OracleType.Redstone,\n    _oracles.OracleType.Chainlink\n]);\n/// set chainlink price to 12\nf.Collateral.setPrice(12);\n/// set redstone price to 11\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _lib.toBig)(redstoneCollateralPrice, 8)), \"collateral value should be $11\");",
                  "err": {},
                  "uuid": "9cec0d95-ab22-47f1-a420-d4d948eef0be",
                  "parentUUID": "0e721dd4-be03-40f4-9b0b-82a40958f773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Oracles Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nf.Collateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n// should revert if price deviates more than oracleDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountCollateralValue(user.address)).to.be.revertedWith(_test.Error.ORACLE_PRICE_UNSTABLE);\nf.Collateral.setPrice(10);",
                  "err": {},
                  "uuid": "dbe4f89e-46d1-4b56-b3f2-1403b2552e13",
                  "parentUUID": "0e721dd4-be03-40f4-9b0b-82a40958f773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return redstone price if sequencer is down",
                  "fullTitle": "Oracles Redstone should return redstone price if sequencer is down",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 5\nf.Collateral.setPrice(5);\nconst redstoneCollateralPrice = 200;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _test.defaultCollateralArgs.redstoneId,\n        value: redstoneCollateralPrice\n    }\n]);\n/// set sequencer uptime feed address\nawait redstoneDiamond.updateSequencerUptimeFeed(mockSequencerUptimeFeed.address);\n// should return redstone price if sequencer is down\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(user.address)).to.be.equal(f.depositAmount.wadMul((0, _lib.toBig)(redstoneCollateralPrice, 8)), \"collateral value should be $200\");\nf.Collateral.setPrice(10);",
                  "err": {},
                  "uuid": "a2e1cf9c-5aed-4762-8ec7-580ced874eb7",
                  "parentUUID": "0e721dd4-be03-40f4-9b0b-82a40958f773",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5e153ca-d5fa-427c-8d60-3b46c4eb8d89",
                "ed4c25cb-4e73-4a5c-8023-b8e1e7fa8c08",
                "9cec0d95-ab22-47f1-a420-d4d948eef0be",
                "dbe4f89e-46d1-4b56-b3f2-1403b2552e13",
                "a2e1cf9c-5aed-4762-8ec7-580ced874eb7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 884,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "5a3a5239-8b84-4b82-9467-8f5191b8a994",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _testutils.defaultFixture)();\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer , devTwo , extOne , extTwo , devOne  } = await hre.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
              "uuid": "f27111eb-2502-4d31-865d-79393dd0b400",
              "parentUUID": "5a3a5239-8b84-4b82-9467-8f5191b8a994",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16da7e3e-6fe0-4b2a-ad1a-1185e2263136",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"setSafetyStateSet\", [\n    true\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst safetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "87c314bd-0953-4d79-b22e-58a850b3a24f",
                  "parentUUID": "16da7e3e-6fe0-4b2a-ad1a-1185e2263136",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87c314bd-0953-4d79-b22e-58a850b3a24f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 219,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "f5dde034-dc22-4f18-afe1-101102f23e1b",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6fb9a418-00d1-4f00-bfc9-b7031ad5423d",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "19596b61-6c5a-445c-851f-a8270fb35e0e",
                      "parentUUID": "6fb9a418-00d1-4f00-bfc9-b7031ad5423d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 121,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "4133a76f-2377-4be6-9ff3-16072e03aada",
                      "parentUUID": "6fb9a418-00d1-4f00-bfc9-b7031ad5423d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "c427f42a-f5a3-4f1b-b2ce-ff3306053ca6",
                      "parentUUID": "6fb9a418-00d1-4f00-bfc9-b7031ad5423d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 118,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.revertedWith(\"\");\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "9ac7969a-87a2-40c4-839d-351fd2aedf53",
                      "parentUUID": "6fb9a418-00d1-4f00-bfc9-b7031ad5423d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "19596b61-6c5a-445c-851f-a8270fb35e0e",
                    "4133a76f-2377-4be6-9ff3-16072e03aada",
                    "c427f42a-f5a3-4f1b-b2ce-ff3306053ca6",
                    "9ac7969a-87a2-40c4-839d-351fd2aedf53"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 477,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "48fcde3f-964a-4791-ac0a-3dec61c98cf4",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 335,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "9787b1b9-6074-403b-a870-2f4b22699c60",
                      "parentUUID": "48fcde3f-964a-4791-ac0a-3dec61c98cf4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 139,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.KrAsset.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), f.KrAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "6c3f957b-50c2-45f8-956d-1eaf5389a1ca",
                      "parentUUID": "48fcde3f-964a-4791-ac0a-3dec61c98cf4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 123,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hre.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        randomAddr\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n])).to.be.revertedWith(\"\");\nconst isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "5659791e-84a4-48a1-8de0-bb7b257252af",
                      "parentUUID": "48fcde3f-964a-4791-ac0a-3dec61c98cf4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9787b1b9-6074-403b-a870-2f4b22699c60",
                    "6c3f957b-50c2-45f8-956d-1eaf5389a1ca",
                    "5659791e-84a4-48a1-8de0-bb7b257252af"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 597,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "cb5d1a83-2ffa-4314-bfd5-c7f8b4addc33",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 125,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "0df7f7f7-24fd-4dc3-8de9-3db22cfb19e2",
                      "parentUUID": "cb5d1a83-2ffa-4314-bfd5-c7f8b4addc33",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed",
                      "timedOut": false,
                      "duration": 129,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await hre.ethers.provider.getBlockNumber();\nconst blockBefore = await hre.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, _chai.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait hre.ethers.provider.send(\"evm_increaseTime\", [\n    sevenDays\n]);\nawait hre.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await hre.ethers.provider.getBlockNumber();\nconst blockAfter = await hre.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, _chai.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, _chai.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, _chai.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n            // NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "a59cb81b-7f7d-4e4a-8512-cec9ba4d971f",
                      "parentUUID": "cb5d1a83-2ffa-4314-bfd5-c7f8b4addc33",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0df7f7f7-24fd-4dc3-8de9-3db22cfb19e2",
                    "a59cb81b-7f7d-4e4a-8512-cec9ba4d971f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 254,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "365af11f-ba6b-4a2e-b415-9ecd27dc8bc9",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 473,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "926f9f9c-206e-42d4-98cf-443874d58f1d",
                      "parentUUID": "365af11f-ba6b-4a2e-b415-9ecd27dc8bc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 264,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "ef99d883-5e58-482d-a42d-c55e360119e4",
                      "parentUUID": "365af11f-ba6b-4a2e-b415-9ecd27dc8bc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 251,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "e5ac4457-7df6-4c60-8d1e-fb207019e6ab",
                      "parentUUID": "365af11f-ba6b-4a2e-b415-9ecd27dc8bc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 461,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "f9071460-fde8-4ece-aa31-767e86e07318",
                      "parentUUID": "365af11f-ba6b-4a2e-b415-9ecd27dc8bc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 265,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "43984563-802a-4e16-8716-f85c3d4fe0d7",
                      "parentUUID": "365af11f-ba6b-4a2e-b415-9ecd27dc8bc9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "926f9f9c-206e-42d4-98cf-443874d58f1d",
                    "ef99d883-5e58-482d-a42d-c55e360119e4",
                    "e5ac4457-7df6-4c60-8d1e-fb207019e6ab",
                    "f9071460-fde8-4ece-aa31-767e86e07318",
                    "43984563-802a-4e16-8716-f85c3d4fe0d7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1714,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "334422d9-20f4-4b32-9d3c-fb75232a47f1",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"SafetyStateChange\");\n(0, _chai.expect)(event.action).to.equal(_testutils.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(f.Collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(hre.ethers.utils.keccak256(hre.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "921d2b24-1123-48ea-a73c-61228bfe8265",
                      "parentUUID": "334422d9-20f4-4b32-9d3c-fb75232a47f1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "921d2b24-1123-48ea-a73c-61228bfe8265"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 30,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "3523e554-f23f-4d24-9607-d21fd6e61b86",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _test.scdpFixture)({\n    krAssets: createAssets,\n    collaterals: createCollaterals,\n    swapKISSConfig,\n    defaultCollateralConfig,\n    defaultKrAssetConfig,\n    swapKrAssetConfig\n});\n[[swapper, KreskoSwapper], [depositor, KreskoDepositor], [depositor2, KreskoDepositor2], [, KreskoLiquidator]] = f.users;",
              "err": {},
              "uuid": "1ffa1560-995b-45b5-955c-4a74a11804a6",
              "parentUUID": "3523e554-f23f-4d24-9607-d21fd6e61b86",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd9d6d7a-0ab7-4f58-abc7-16b59dad8199",
              "title": "#Test",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Test\"",
                  "fullTitle": "SCDP #Test \"before each\" hook in \"#Test\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.reset();",
                  "err": {},
                  "uuid": "1d4ef552-4d9e-4964-ad49-a813f3663a63",
                  "parentUUID": "bd9d6d7a-0ab7-4f58-abc7-16b59dad8199",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "126b5075-7617-4e83-81ed-47415cfde13b",
                  "title": "#Configuration",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be initialized correctly",
                      "fullTitle": "SCDP #Test #Configuration should be initialized correctly",
                      "timedOut": false,
                      "duration": 1411,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { args  } = await (0, _shared.getSCDPInitializer)(_hardhat.default);\nconst configuration = await _hardhat.default.Diamond.getCurrentParametersSCDP();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.lt).to.equal(args.lt);\n(0, _chai.expect)(configuration.mcr).to.equal(args.mcr);\nconst collaterals = await _hardhat.default.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst depositsEnabled = await Promise.all([\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset2.address),\n    _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(depositsEnabled).to.deep.equal([\n    true,\n    true,\n    false,\n    false,\n    false\n]);\nconst depositAssets = await _hardhat.default.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral8Dec.address\n]);\nconst assetsEnabled = await Promise.all([\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset2.address),\n    _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(assetsEnabled).to.deep.equal([\n    true,\n    true,\n    true,\n    true,\n    true\n]);",
                      "err": {},
                      "uuid": "704135d8-6cf8-4b34-b7ac-ff1b6922ef47",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to whitelist new deposit asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to whitelist new deposit asset",
                      "timedOut": false,
                      "duration": 314,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nconst collateral = await _hardhat.default.Diamond.getCollateralSCDP(f.KISS.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.KISS.contract.decimals());\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(defaultCollateralConfig.depositLimit);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(true);",
                      "err": {},
                      "uuid": "53f65bc0-ba60-4402-ab7a-1e198c98a06e",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to update deposit limit of asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to update deposit limit of asset",
                      "timedOut": false,
                      "duration": 210,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.updateDepositLimitSCDP(f.Collateral.address, 1);\nconst collateral = await _hardhat.default.Diamond.getCollateralSCDP(f.Collateral.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.Collateral.contract.decimals());\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(1);",
                      "err": {},
                      "uuid": "b8f54c17-075d-4139-9eed-42fef0ea6e2a",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable a deposit asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable a deposit asset",
                      "timedOut": false,
                      "duration": 508,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.disableAssetsSCDP([\n    f.Collateral.address\n], true);\nconst collaterals = await _hardhat.default.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.Collateral.address);\nconst depositAssets = await _hardhat.default.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                      "err": {},
                      "uuid": "fe38d4d8-f40a-429c-8738-541e2e58c3e3",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable and enable a collateral asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable and enable a collateral asset",
                      "timedOut": false,
                      "duration": 1220,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.disableAssetsSCDP([\n    f.Collateral.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait _hardhat.default.Diamond.enableAssetsSCDP([\n    f.Collateral.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait _hardhat.default.Diamond.enableAssetsSCDP([\n    f.Collateral.address\n], true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);",
                      "err": {},
                      "uuid": "5d499cd5-ed45-4183-b83f-aa8a7821bd42",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to remove a collateral asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to remove a collateral asset",
                      "timedOut": false,
                      "duration": 409,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.removeCollateralsSCDP([\n    f.Collateral.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(collaterals).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                      "err": {},
                      "uuid": "089c15ba-802a-4181-a5d0-017052e98161",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to add whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to add whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 200,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const assetInfo = await _hardhat.default.Diamond.getKreskoAssetSCDP(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.openFee).to.equal(swapKrAssetConfig.openFee);\n(0, _chai.expect)(assetInfo.closeFee).to.equal(swapKrAssetConfig.closeFee);\n(0, _chai.expect)(assetInfo.liquidationIncentive).to.equal(swapKrAssetConfig.liquidationIncentive);\n(0, _chai.expect)(assetInfo.protocolFee).to.equal(swapKrAssetConfig.protocolFee);\n(0, _chai.expect)(assetInfo.supplyLimit).to.equal(swapKrAssetConfig.supplyLimit);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(true);",
                      "err": {},
                      "uuid": "a259e9ef-324a-452b-a2dc-1a2e07720988",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to update a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to update a whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 598,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const update = {\n    openFee: (0, _lib.toBig)(0.05),\n    closeFee: (0, _lib.toBig)(0.05),\n    liquidationIncentive: (0, _lib.toBig)(1.06),\n    protocolFee: (0, _lib.toBig)(0.4),\n    supplyLimit: (0, _lib.toBig)(50000)\n};\nawait _hardhat.default.Diamond.updateKrAssetSCDP(f.KrAsset.address, update);\nconst assetInfo = await _hardhat.default.Diamond.getKreskoAssetSCDP(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.openFee).to.equal(update.openFee);\n(0, _chai.expect)(assetInfo.closeFee).to.equal(update.closeFee);\n(0, _chai.expect)(assetInfo.protocolFee).to.equal(update.protocolFee);\n(0, _chai.expect)(assetInfo.liquidationIncentive).to.equal(update.liquidationIncentive);\n(0, _chai.expect)(assetInfo.supplyLimit).to.equal(update.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include(f.KrAsset.address);\nconst collaterals = await _hardhat.default.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.KrAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
                      "uuid": "7860112f-2f0b-4813-8e1c-26bfcc41e67b",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable a whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 302,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KrAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
                      "uuid": "9c00e980-cd60-4593-89a3-05d67bda7e91",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to remove a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to remove a whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 403,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.removeKrAssetsSCDP([\n    f.KrAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.not.include(f.KrAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
                      "uuid": "63c2daba-136b-4d5c-b64e-ca7e4d3f7490",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable and enable a collateral asset that is also a kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable and enable a collateral asset that is also a kresko asset",
                      "timedOut": false,
                      "duration": 1311,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KISS.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.not.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KISS.address);\nawait _hardhat.default.Diamond.enableAssetsSCDP([\n    f.KISS.address\n], true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KISS.address);",
                      "err": {},
                      "uuid": "3f25a60f-c952-4a0d-ab59-97c6e8577efb",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to enable and disable swap pairs",
                      "fullTitle": "SCDP #Test #Configuration should be able to enable and disable swap pairs",
                      "timedOut": false,
                      "duration": 881,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapPairsEnabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: true\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: false\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(false);",
                      "err": {},
                      "uuid": "9d2f3279-104d-49f3-9578-8ccc8956654b",
                      "parentUUID": "126b5075-7617-4e83-81ed-47415cfde13b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "704135d8-6cf8-4b34-b7ac-ff1b6922ef47",
                    "53f65bc0-ba60-4402-ab7a-1e198c98a06e",
                    "b8f54c17-075d-4139-9eed-42fef0ea6e2a",
                    "fe38d4d8-f40a-429c-8738-541e2e58c3e3",
                    "5d499cd5-ed45-4183-b83f-aa8a7821bd42",
                    "089c15ba-802a-4181-a5d0-017052e98161",
                    "a259e9ef-324a-452b-a2dc-1a2e07720988",
                    "7860112f-2f0b-4813-8e1c-26bfcc41e67b",
                    "9c00e980-cd60-4593-89a3-05d67bda7e91",
                    "63c2daba-136b-4d5c-b64e-ca7e4d3f7490",
                    "3f25a60f-c952-4a0d-ab59-97c6e8577efb",
                    "9d2f3279-104d-49f3-9578-8ccc8956654b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7767,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "753b15b5-c4ff-4668-98a1-4823f115c53a",
                  "title": "#Deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to deposit collateral, calculate correct deposit values",
                      "fullTitle": "SCDP #Test #Deposit should be able to deposit collateral, calculate correct deposit values",
                      "timedOut": false,
                      "duration": 5800,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nawait Promise.all(f.usersArr.map((user)=>{\n    return (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user).depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n}));\nconst [userInfos, statistics, assetInfo] = await Promise.all([\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((user)=>user.address), [\n        f.Collateral.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\nfor (const userInfo of userInfos){\n    const balance = await f.Collateral.balanceOf(userInfo.account);\n    (0, _chai.expect)(balance).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmountWithFees).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.totalDepositValueWithFees).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].depositValueWithFees).to.equal(expectedValueUnadjusted);\n}\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValue).to.equal(0);\n// Adjusted\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(expectedValueAdjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValueAdjusted).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.effectiveDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.cr).to.equal(0);",
                      "err": {},
                      "uuid": "c380878b-e1c9-4827-ab14-2e8601265a36",
                      "parentUUID": "753b15b5-c4ff-4668-98a1-4823f115c53a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to deposit multiple collaterals, calculate correct deposit values",
                      "fullTitle": "SCDP #Test #Deposit should be able to deposit multiple collaterals, calculate correct deposit values",
                      "timedOut": false,
                      "duration": 5871,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const User = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    return Promise.all([\n        User.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        User.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec);\n    (0, _chai.expect)(userInfo.deposits[1].depositValue).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n}\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfos[1].depositAmount).to.equal(depositAmount8Dec.mul(f.usersArr.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(f.usersArr.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(f.usersArr.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.equal(valueTotalAdjusted8Dec);\n(0, _chai.expect)(globals.collateralValueAdjusted).to.equal(valueAdjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(f.usersArr.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(f.usersArr.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(globals.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
                      "uuid": "0ae07fe7-2979-446a-be1c-fe4f8298a28e",
                      "parentUUID": "753b15b5-c4ff-4668-98a1-4823f115c53a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c380878b-e1c9-4827-ab14-2e8601265a36",
                    "0ae07fe7-2979-446a-be1c-fe4f8298a28e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11671,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "ed96715a-f56a-4bfd-a617-5c9e704c1630",
                  "title": "#Withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Withdraw\"",
                      "fullTitle": "SCDP #Test #Withdraw \"before each\" hook in \"#Withdraw\"",
                      "timedOut": false,
                      "duration": 701,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user);\n    await Promise.all([\n        UserKresko.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));",
                      "err": {},
                      "uuid": "80dc209f-da9b-49ae-86a6-0b4a429f2f09",
                      "parentUUID": "ed96715a-f56a-4bfd-a617-5c9e704c1630",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to withdraw full collateral of multiple assets",
                      "fullTitle": "SCDP #Test #Withdraw should be able to withdraw full collateral of multiple assets",
                      "timedOut": false,
                      "duration": 10379,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(0);\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(await f.Collateral.balanceOf(userInfo.account)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmountWithFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmountWithFees).to.equal(0);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(0);\n}\nfor (const assetInfo of assetInfos){\n    (0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n    (0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n    (0, _chai.expect)(assetInfo.swapDeposits).to.equal(0);\n}\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
                      "uuid": "179e87a5-5ed9-40f9-bb07-73d66672bb85",
                      "parentUUID": "ed96715a-f56a-4bfd-a617-5c9e704c1630",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw partial collateral of multiple assets",
                      "fullTitle": "SCDP #Test #Withdraw should be able to withdraw partial collateral of multiple assets",
                      "timedOut": false,
                      "duration": 11114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const partialWithdraw = depositAmount18Dec.div(f.usersArr.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(f.usersArr.length);\nconst expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice * 1 * depositAmount, 8).mul(200).div(300); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8).mul(200).div(300); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, partialWithdraw),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, partialWithdraw8Dec)\n    ]);\n}));\nconst [collateralBalanceAfter, collateral8DecBalanceAfter, globals, assetInfos, userInfos] = await Promise.all([\n    f.Collateral.balanceOf(_hardhat.default.Diamond.address),\n    f.Collateral8Dec.balanceOf(_hardhat.default.Diamond.address),\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ])\n]);\nfor (const userInfo of userInfos){\n    const [balance18Dec, balance8Dec] = await Promise.all([\n        f.Collateral.balanceOf(userInfo.account),\n        f.Collateral8Dec.balanceOf(userInfo.account)\n    ]);\n    (0, _chai.expect)(balance18Dec).to.equal(partialWithdraw);\n    (0, _chai.expect)(balance8Dec).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[0].depositAmountWithFees).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.deposits[1].depositAmountWithFees).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.totalDepositValue).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(collateralBalanceAfter).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(collateral8DecBalanceAfter).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositAmount).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(assetInfos[1].depositAmount).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositValue).to.closeTo(expectedValueUnadjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.closeTo(expectedValueAdjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValue).to.closeTo(expectedValueUnadjusted8Dec.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.closeTo(expectedValueAdjusted8Dec.mul(f.usersArr.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(f.usersArr.length).add(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(globals.collateralValue).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
                      "uuid": "4644b48d-b940-48f6-a803-fc3c9a2a4bce",
                      "parentUUID": "ed96715a-f56a-4bfd-a617-5c9e704c1630",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "179e87a5-5ed9-40f9-bb07-73d66672bb85",
                    "4644b48d-b940-48f6-a803-fc3c9a2a4bce"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 21493,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "7d4da1b1-f4fd-4daa-bb1b-a2082e96826d",
                  "title": "#Fee Distribution",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Fee Distribution\"",
                      "fullTitle": "SCDP #Test #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                      "timedOut": false,
                      "duration": 93,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "incomeCumulator = _hardhat.default.users.admin;\nIncomeCumulator = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, incomeCumulator);\nawait f.Collateral.setBalance(incomeCumulator, depositAmount18Dec.mul(f.usersArr.length), _hardhat.default.Diamond.address);",
                      "err": {},
                      "uuid": "4b153157-7091-4099-9f6f-33df9f63bb0f",
                      "parentUUID": "7d4da1b1-f4fd-4daa-bb1b-a2082e96826d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to cumulate fees into deposits",
                      "fullTitle": "SCDP #Test #Fee Distribution should be able to cumulate fees into deposits",
                      "timedOut": false,
                      "duration": 18380,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const fees = depositAmount18Dec.mul(f.usersArr.length);\nconst expectedValueNoFees = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\n// deposit some\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(_hardhat.default.Diamond, signer).depositSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\n// cumulate some income\nawait IncomeCumulator.cumulateIncomeSCDP(f.Collateral.address, fees);\n// check that the fees are cumulated\nfor (const data of (await _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.deposits[0].depositValueWithFees).to.equal(expectedValueFees);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.totalDepositValueWithFees).to.equal(expectedValueFees);\n}\n// withdraw principal\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(_hardhat.default.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\nfor (const user of (await _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(user.account);\n    (0, _chai.expect)(user.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(user.deposits[0].depositValueWithFees).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalDepositValueWithFees).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec);\n}\nconst [assetInfo, stats, balance] = await Promise.all([\n    _hardhat.default.Diamond.getAssetInfoSCDP(f.Collateral.address),\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    f.Collateral.balanceOf(_hardhat.default.Diamond.address)\n]);\n(0, _chai.expect)(balance).to.equal(fees);\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(0);\n(0, _chai.expect)(stats.collateralValue).to.equal(0);\n// Withdraw fees\nawait Promise.all(f.usersArr.map((signer)=>{\n    return (0, _redstone.wrapKresko)(_hardhat.default.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec);\n}));\nfor (const data of (await _hardhat.default.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(data.account);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(data.deposits[0].depositValueWithFees).to.equal(0);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(data.totalDepositValueWithFees).to.equal(0);\n}\n// nothing left in protocol.\nconst [colalteralBalanceKresko, assetInfoFinal] = await Promise.all([\n    f.Collateral.balanceOf(_hardhat.default.Diamond.address),\n    _hardhat.default.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\n(0, _chai.expect)(colalteralBalanceKresko).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValueAdjusted).to.equal(0);",
                      "err": {},
                      "uuid": "515fbbf5-0839-4ca8-bf57-bec03b8296e7",
                      "parentUUID": "7d4da1b1-f4fd-4daa-bb1b-a2082e96826d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "515fbbf5-0839-4ca8-bf57-bec03b8296e7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 18380,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "207b8dd3-a203-4aab-8195-5781b1214a48",
                  "title": "#Swap",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Swap\"",
                      "fullTitle": "SCDP #Test #Swap \"before each\" hook in \"#Swap\"",
                      "timedOut": false,
                      "duration": 403,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// mint some f.KISS for users\nawait _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _lib.toBig)(1000000))));\nawait f.KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait f.KISS.setBalance(depositor, (0, _lib.toBig)(10000));\nawait KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, depositAmount18Dec);",
                      "err": {},
                      "uuid": "35ca2cb0-0d3e-4e73-98f5-11e00c23e437",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should have collateral in pool",
                      "fullTitle": "SCDP #Test #Swap should have collateral in pool",
                      "timedOut": false,
                      "duration": 1431,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const value = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(value.collateralValue).to.equal((0, _lib.toBig)(depositAmount, 8));\n(0, _chai.expect)(value.debtValue).to.equal(0);\n(0, _chai.expect)(value.cr).to.equal(0);",
                      "err": {},
                      "uuid": "60030901-81d7-4cbe-8fae-9cc7f607acab",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to preview a swap",
                      "fullTitle": "SCDP #Test #Swap should be able to preview a swap",
                      "timedOut": false,
                      "duration": 302,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD);\nconst assetInPrice = (0, _lib.toBig)(ONE_USD, 8);\nconst assetOutPrice = (0, _lib.toBig)(KreskoAsset2Price, 8);\nconst feePercentage = (0, _lib.toBig)(0.015 + 0.025);\nconst feePercentageProtocol = (0, _lib.toBig)(0.5);\nconst expectedTotalFee = swapAmount.wadMul(feePercentage);\nconst expectedProtocolFee = expectedTotalFee.wadMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(assetInPrice).wadDiv(assetOutPrice);\nconst [amountOut, feeAmount, feeAmountProtocol] = await _hardhat.default.Diamond.previewSwapSCDP(f.KISS.address, f.KrAsset2.address, (0, _lib.toBig)(1));\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                      "err": {},
                      "uuid": "0edf1665-f429-492b-ac7f-76298e79272d",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt == 0 | swap collateral == 0 upgraded",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt == 0 | swap collateral == 0 upgraded",
                      "timedOut": false,
                      "duration": 4553,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOut = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\nconst [KR2Balance, KISSBalance, swapperInfo, assetInfos, global] = await Promise.all([\n    f.KrAsset2.balanceOf(swapper.address),\n    f.KISS.balanceOf(swapper.address),\n    _hardhat.default.Diamond.getAccountInfoSCDP(swapper.address, [\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(KR2Balance).to.equal(expectedAmountOut);\n(0, _chai.expect)(KISSBalance).to.equal((0, _lib.toBig)(10000).sub(swapAmount));\n(0, _chai.expect)(swapperInfo.deposits[0].depositValue).to.equal(0);\n(0, _chai.expect)(swapperInfo.deposits[1].depositValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal((0, _lib.toBig)(0.96));\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal((0, _lib.toBig)(0.0096));\nconst expectedDepositValue = (0, _lib.toBig)(depositAmount + 0.96, 8);\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(global.collateralValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(global.debtValue).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(global.cr).to.equal(expectedDepositValue.wadDiv((0, _lib.toBig)(0.96, 8)));",
                      "err": {},
                      "uuid": "b5c014bf-7cf4-4b6c-bba9-993caabef741",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                      "timedOut": false,
                      "duration": 7255,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountAsset = (0, _lib.toBig)(0.96); // $96\nconst expectedKissOut = (0, _lib.toBig)(92.16); // $100 * 0.96 = $96\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: f.KISS,\n    amount: (0, _lib.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: f.KrAsset2,\n    amount: (0, _lib.toBig)(0.1)\n});\nconst globalBefore = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(globalBefore.collateralValue).to.equal(initialDepositValue);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountAsset, 0);\nconst [event, assetInfos] = await Promise.all([\n    (0, _lib.getNamedEvent)(tx, \"Swap\"),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ])\n]);\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(initialDepositValue);\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\nconst global = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(1000, 8));\n(0, _chai.expect)(global.debtValue).to.equal(0);\n(0, _chai.expect)(global.cr).to.equal(0);",
                      "err": {},
                      "uuid": "83db0dbe-16c0-4216-afd4-79b10bf5ba78",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                      "timedOut": false,
                      "duration": 5711,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst assetInfoKISS = await _hardhat.default.Diamond.getAssetInfoSCDP(f.KISS.address);\n(0, _chai.expect)(assetInfoKISS.depositValue).to.equal((0, _lib.toBig)(depositAmount + 0.96, 8));\nconst expectedSwapDeposits = (0, _lib.toBig)(0.96);\n(0, _chai.expect)(assetInfoKISS.swapDeposits).to.equal(expectedSwapDeposits);\nconst swapAmountSecond = (0, _lib.toBig)(0.009); // this is $0.90, so less than $0.96 since we want to ensure shared debt > assetsIn | swap collateral > assetsOut\nconst expectedKissOut = (0, _lib.toBig)(0.864); // 0.9 - (0.9 * 0.04) = 0.864\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountSecond, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountSecond);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst [depositValueKR2, depositValueKISS, assetInfos, globals] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueSCDP(swapper.address, f.KrAsset2.address),\n    KreskoSwapper.getAccountDepositValueSCDP(swapper.address, f.KISS.address),\n    _hardhat.default.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ]),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(depositValueKR2).to.equal(0);\n(0, _chai.expect)(depositValueKISS).to.equal(0);\nconst expectedSwapDepositsAfter = expectedSwapDeposits.sub((0, _lib.toBig)(0.9));\nconst expectedSwapDepositsValue = expectedSwapDepositsAfter.wadMul(assetInfoKISS.assetPrice);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(expectedSwapDepositsAfter);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal((0, _lib.toBig)(depositAmount, 8).add(expectedSwapDepositsValue));\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(expectedSwapDepositsValue);\nconst expectedDebtAfter = expectedSwapDepositsValue.wadDiv(await f.KrAsset2.getPrice());\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(expectedDebtAfter);\nconst expectedCollateralValue = (0, _lib.toBig)(depositAmount + 0.06, 8);\n(0, _chai.expect)(globals.collateralValue).to.equal(expectedCollateralValue); // swap deposits + collateral deposited\n(0, _chai.expect)(globals.debtValue).to.equal(0.06e8); //\n(0, _chai.expect)(globals.cr).to.equal(expectedCollateralValue.wadDiv((0, _lib.toBig)(0.06, 8)));",
                      "err": {},
                      "uuid": "44a121de-327d-46f9-85eb-3bc4c11e9193",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                      "timedOut": false,
                      "duration": 8214,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmountKiss = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountKrAsset = (0, _lib.toBig)(2); // $200\nconst swapValue = 200;\nconst expectedKissOut = (0, _lib.toBig)(192); // $200 * 0.96 = $192\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: f.KISS,\n    amount: (0, _lib.toBig)(400)\n});\nconst ICDPMintAmount = (0, _lib.toBig)(1.04);\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: f.KrAsset2,\n    amount: ICDPMintAmount\n});\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmountKiss, 0);\nconst stats = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(await KreskoSwapper.getSwapDepositsSCDP(f.KISS.address)).to.equal((0, _lib.toBig)(96));\n(0, _chai.expect)(stats.collateralValue).to.be.eq((0, _lib.toBig)(depositAmount + 96, 8));\n// the swap that matters, here user has 0.96 (previous swap) + 1.04 (mint). expecting 192 kiss from swap.\nconst [expectedAmountOut] = await KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmountKrAsset);\n(0, _chai.expect)(expectedAmountOut).to.equal(expectedKissOut);\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst assetInfos = await _hardhat.default.Diamond.getAssetInfosSCDP([\n    f.KISS.address,\n    f.KrAsset2.address\n]);\n// f.KISS deposits sent in swap\nconst acocuntPrincipalDepositsKISS = await KreskoSwapper.getAccountDepositSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0); // half of 2 krAsset\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(acocuntPrincipalDepositsKISS);\n// KrAsset debt is cleared\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\n// f.KISS debt is issued\nconst expectedKissDebtValue = (0, _lib.toBig)(swapValue - 96, 8);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal((0, _lib.toBig)(swapValue - 96));\n// krAsset swap deposits\nconst expectedSwapDepositValue = (0, _lib.toBig)(swapValue - 96, 8);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal((0, _lib.toBig)(2 - 0.96));\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedSwapDepositValue); // asset price is $100\nconst global = await _hardhat.default.Diamond.getStatisticsSCDP();\nconst expectedCollateralValue = (0, _lib.toBig)(1000, 8).add(expectedSwapDepositValue);\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedKissDebtValue));",
                      "err": {},
                      "uuid": "32429426-9ff0-48bf-b446-e7f564bdd23c",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cumulates fees on swap",
                      "fullTitle": "SCDP #Test #Swap cumulates fees on swap",
                      "timedOut": false,
                      "duration": 6669,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const depositAmountNew = (0, _lib.toBig)(10000 - depositAmount);\nawait f.KISS.setBalance(depositor, depositAmountNew);\nawait KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, depositAmountNew);\nconst swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst balFeesBefore = await KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst balFeesAfterFirst = await KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(balFeesAfterFirst).to.gt(balFeesBefore);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, f.KrAsset2.balanceOf(swapper.address), 0);\nconst balFeesAfterSecond = await KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(balFeesAfterSecond).to.gt(balFeesAfterFirst);\nconst feesBefore = await KreskoSwapper.getAccountDepositFeesGainedSCDP(depositor.address, f.KISS.address);\nawait KreskoDepositor.withdrawSCDP(depositor.address, f.KISS.address, feesBefore);\nconst [feesAfterThird, feesAfter] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address),\n    KreskoSwapper.getAccountDepositFeesGainedSCDP(depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(feesBefore).to.eq(feesAfter);\n(0, _chai.expect)(feesAfterThird).to.eq(10000e8);\nawait KreskoDepositor.withdrawSCDP(depositor.address, f.KISS.address, (0, _lib.toBig)(10000));\nconst [depositsAfterFourth, feesAfterFourth] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueSCDP(depositor.address, f.KISS.address),\n    KreskoSwapper.getAccountDepositValueWithFeesSCDP(depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(depositsAfterFourth).to.eq(0);\n(0, _chai.expect)(feesAfterFourth).to.eq(0);",
                      "err": {},
                      "uuid": "ff307c0b-c961-470a-a1bb-917fa090eff6",
                      "parentUUID": "207b8dd3-a203-4aab-8195-5781b1214a48",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "60030901-81d7-4cbe-8fae-9cc7f607acab",
                    "0edf1665-f429-492b-ac7f-76298e79272d",
                    "b5c014bf-7cf4-4b6c-bba9-993caabef741",
                    "83db0dbe-16c0-4216-afd4-79b10bf5ba78",
                    "44a121de-327d-46f9-85eb-3bc4c11e9193",
                    "32429426-9ff0-48bf-b446-e7f564bdd23c",
                    "ff307c0b-c961-470a-a1bb-917fa090eff6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 34135,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "95a90aba-c570-4ab5-841a-213922b29366",
                  "title": "#Liquidations",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Liquidations\"",
                      "fullTitle": "SCDP #Test #Liquidations \"before each\" hook in \"#Liquidations\"",
                      "timedOut": false,
                      "duration": 419,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address,\n    f.KrAsset2.address\n], [\n    defaultCollateralConfig,\n    defaultCollateralConfig\n]);\nfor (const signer of f.usersArr){\n    await f.Collateral.setBalance(signer, (0, _lib.toBig)(1000000));\n}\nawait f.KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait f.KISS.setBalance(depositor2, (0, _lib.toBig)(10000));\nawait Promise.all([\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec),\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral8Dec.address, depositAmount8Dec),\n    KreskoDepositor2.depositSCDP(depositor2.address, f.KISS.address, depositAmount18Dec)\n]);",
                      "err": {},
                      "uuid": "6c26d179-4cbf-4721-9251-b392f9a3d231",
                      "parentUUID": "95a90aba-c570-4ab5-841a-213922b29366",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify if the pool is not underwater",
                      "fullTitle": "SCDP #Test #Liquidations should identify if the pool is not underwater",
                      "timedOut": false,
                      "duration": 2687,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getLiquidatableSCDP()).to.be.false;",
                      "err": {},
                      "uuid": "14c61c4c-a595-411c-8ccf-3f7bf42e08a6",
                      "parentUUID": "95a90aba-c570-4ab5-841a-213922b29366",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert liquidations if the pool is not underwater",
                      "fullTitle": "SCDP #Test #Liquidations should revert liquidations if the pool is not underwater",
                      "timedOut": false,
                      "duration": 3611,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getLiquidatableSCDP()).to.be.false;\nawait f.KrAsset2.setBalance(_hardhat.default.users.liquidator, (0, _lib.toBig)(1000000));\nawait (0, _chai.expect)(KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, (0, _lib.toBig)(7.7), f.Collateral8Dec.address)).to.be.revertedWith(\"not-liquidatable\");",
                      "err": {},
                      "uuid": "05f01568-c696-4a1f-9856-374fba574a90",
                      "parentUUID": "95a90aba-c570-4ab5-841a-213922b29366",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should identify if the pool is underwater",
                      "fullTitle": "SCDP #Test #Liquidations should identify if the pool is underwater",
                      "timedOut": false,
                      "duration": 4043,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nf.Collateral.setPrice(collateralPrice / 1000);\nf.Collateral8Dec.setPrice(collateralPrice / 1000);\nconst [stats, params, liquidatable] = await Promise.all([\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getCurrentParametersSCDP(),\n    _hardhat.default.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(stats.cr).to.be.lt(params.lt);\n(0, _chai.expect)(liquidatable).to.be.true;",
                      "err": {},
                      "uuid": "b54bf8f4-13d8-4b08-b4f4-80a54a4355e8",
                      "parentUUID": "95a90aba-c570-4ab5-841a-213922b29366",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidating the underwater pool",
                      "fullTitle": "SCDP #Test #Liquidations should allow liquidating the underwater pool",
                      "timedOut": false,
                      "duration": 12884,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nf.KrAsset2.setPrice(newKreskoAssetPrice);\nconst [scdpParams, maxLiquidatable, krAssetPrice, statsBefore] = await Promise.all([\n    _hardhat.default.Diamond.getCurrentParametersSCDP(),\n    _hardhat.default.Diamond.getMaxLiqValueSCDP(f.KrAsset2.address, f.Collateral8Dec.address),\n    f.KrAsset2.getPrice(),\n    _hardhat.default.Diamond.getStatisticsSCDP()\n]);\nconst repayAmount = maxLiquidatable.wadDiv(krAssetPrice);\nawait f.KrAsset2.setBalance(_hardhat.default.users.liquidator, repayAmount.add(1e18.toString()));\n(0, _chai.expect)(statsBefore.cr).to.lt(scdpParams.lt);\nconst tx = await KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address);\nconst [statsAfter, liquidatableAfter] = await Promise.all([\n    _hardhat.default.Diamond.getStatisticsSCDP(),\n    _hardhat.default.Diamond.getLiquidatableSCDP()\n]);\n// console.log(\"liq\", (await tx.wait()).gasUsed.toString());\n(0, _chai.expect)(statsAfter.cr).to.gt(scdpParams.lt);\n(0, _chai.expect)(liquidatableAfter).to.equal(false);\nawait (0, _chai.expect)(KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address)).to.be.revertedWith(\"not-liquidatable\");\nconst event = await (0, _lib.getNamedEvent)(tx, \"SCDPLiquidationOccured\");\nconst expectedSeizeAmount = repayAmount.wadMul((0, _lib.toBig)(newKreskoAssetPrice, 8)).wadMul((0, _lib.toBig)(1.05)).wadDiv((0, _lib.toBig)(collateralPrice, 8)).div(10 ** 10);\n(0, _chai.expect)(event.args.liquidator).to.eq(_hardhat.default.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(f.Collateral8Dec.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(f.KrAsset2.address);\nconst expectedDepositsAfter = depositAmount8Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(expectedDepositsAfter).to.be.lt(depositAmount8Dec);\nconst [principalDeposits, depositsWithFees, params] = await Promise.all([\n    _hardhat.default.Diamond.getAccountDepositSCDP(depositor.address, f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getAccountDepositWithFeesSCDP(depositor.address, f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getCurrentParametersSCDP()\n]);\n(0, _chai.expect)(principalDeposits).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(depositsWithFees).to.eq(expectedDepositsAfter);\nawait KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec.mul(10));\nconst stats = await _hardhat.default.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(stats.cr).to.gt(params.mcr);\nawait (0, _chai.expect)(KreskoDepositor.withdrawSCDP(depositor.address, f.Collateral8Dec.address, expectedDepositsAfter)).to.not.be.reverted;\nconst [principalEnd, depositsWithFeesEnd] = await Promise.all([\n    _hardhat.default.Diamond.getAccountDepositSCDP(depositor.address, f.Collateral8Dec.address),\n    _hardhat.default.Diamond.getAccountDepositWithFeesSCDP(depositor.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(principalEnd).to.eq(0);\n(0, _chai.expect)(depositsWithFeesEnd).to.eq(0);",
                      "err": {},
                      "uuid": "981d2a31-c98e-43f6-9d3a-b1c4cb515726",
                      "parentUUID": "95a90aba-c570-4ab5-841a-213922b29366",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "14c61c4c-a595-411c-8ccf-3f7bf42e08a6",
                    "05f01568-c696-4a1f-9856-374fba574a90",
                    "b54bf8f4-13d8-4b08-b4f4-80a54a4355e8",
                    "981d2a31-c98e-43f6-9d3a-b1c4cb515726"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 23225,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "f09169f7-2831-45c4-b753-0cb36f982a11",
                  "title": "#Error",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Error\"",
                      "fullTitle": "SCDP #Test #Error \"before each\" hook in \"#Error\"",
                      "timedOut": false,
                      "duration": 313,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _lib.toBig)(1000000))));\nawait f.KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait f.KISS.setBalance(depositor, _hardhat.ethers.BigNumber.from(1));\nawait _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait Promise.all([\n    KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, 1),\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec)\n]);",
                      "err": {},
                      "uuid": "48c804e9-6a16-48fb-9798-4ff785ea87c3",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert depositing unsupported tokens",
                      "fullTitle": "SCDP #Test #Error should revert depositing unsupported tokens",
                      "timedOut": false,
                      "duration": 182,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [UnsupportedToken] = await _hardhat.default.deploy(\"MockERC20\", {\n    args: [\n        \"UnsupportedToken\",\n        \"UnsupportedToken\",\n        18,\n        (0, _lib.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst { deployer  } = await _hardhat.default.getNamedAccounts();\nawait (0, _chai.expect)(_hardhat.default.Diamond.depositSCDP(deployer, UnsupportedToken.address, 1)).to.be.revertedWith(\"deposit-not-enabled\");",
                      "err": {},
                      "uuid": "ce1b9c28-85c9-4968-9fb2-9bb9f9c0de04",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawing without deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawing without deposits",
                      "timedOut": false,
                      "duration": 101,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(KreskoSwapper.withdrawSCDP(depositor.address, f.Collateral.address, 1)).to.be.revertedWith(\"withdrawal-violation\");",
                      "err": {},
                      "uuid": "fd102abe-a0bd-4135-8983-a3c5c941e3eb",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals below MCR",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals below MCR",
                      "timedOut": false,
                      "duration": 3120,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(1000); // $1000\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0); // generate debt\nconst deposits = await KreskoSwapper.getAccountDepositSCDP(depositor.address, f.Collateral.address);\nawait (0, _chai.expect)(KreskoDepositor.withdrawSCDP(depositor.address, f.Collateral.address, deposits)).to.be.revertedWith(\"withdraw-mcr-violation\");",
                      "err": {},
                      "uuid": "e9c249d4-12e0-41ef-b80b-3044faaa9e40",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals of swap owned collateral deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals of swap owned collateral deposits",
                      "timedOut": false,
                      "duration": 1757,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nconst deposits = await KreskoSwapper.getSwapDepositsSCDP(f.KrAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(KreskoSwapper.withdrawSCDP(swapper.address, f.KrAsset2.address, deposits)).to.be.revertedWith(\"withdrawal-violation\");",
                      "err": {},
                      "uuid": "9fd992d4-cf83-46fb-8b77-5981a1e1fb13",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping with price below minAmountOut",
                      "fullTitle": "SCDP #Test #Error should revert swapping with price below minAmountOut",
                      "timedOut": false,
                      "duration": 1244,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nconst [amountOut] = await KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWith(\"swap-slippage\");",
                      "err": {},
                      "uuid": "23923a29-61c5-4eec-a480-d1518e993b3f",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping unsupported route",
                      "fullTitle": "SCDP #Test #Error should revert swapping unsupported route",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.Collateral.address, swapAmount, 0)).to.be.revertedWith(\"swap-disabled\");",
                      "err": {},
                      "uuid": "daa58495-3696-4eb7-980b-502f9957621f",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping if asset in is disabled",
                      "fullTitle": "SCDP #Test #Error should revert swapping if asset in is disabled",
                      "timedOut": false,
                      "duration": 201,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset2.address\n], false);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0)).to.be.revertedWith(\"asset-in-disabled\");",
                      "err": {},
                      "uuid": "0c61cb84-ccaa-4309-921e-c98805049b95",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping if asset out is disabled",
                      "fullTitle": "SCDP #Test #Error should revert swapping if asset out is disabled",
                      "timedOut": false,
                      "duration": 201,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset2.address\n], false);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                      "err": {},
                      "uuid": "c95b0f73-9853-45e7-8c2f-2de9669f420e",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping causes CDP to go below MCR",
                      "fullTitle": "SCDP #Test #Error should revert swapping causes CDP to go below MCR",
                      "timedOut": false,
                      "duration": 1789,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1500000);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nconst tx = KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nawait (0, _chai.expect)(tx).to.be.revertedWith(\"swap-mcr-violation\");",
                      "err": {},
                      "uuid": "cac60304-977b-4f22-801c-d00b5d1e36a9",
                      "parentUUID": "f09169f7-2831-45c4-b753-0cb36f982a11",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ce1b9c28-85c9-4968-9fb2-9bb9f9c0de04",
                    "fd102abe-a0bd-4135-8983-a3c5c941e3eb",
                    "e9c249d4-12e0-41ef-b80b-3044faaa9e40",
                    "9fd992d4-cf83-46fb-8b77-5981a1e1fb13",
                    "23923a29-61c5-4eec-a480-d1518e993b3f",
                    "daa58495-3696-4eb7-980b-502f9957621f",
                    "0c61cb84-ccaa-4309-921e-c98805049b95",
                    "c95b0f73-9853-45e7-8c2f-2de9669f420e",
                    "cac60304-977b-4f22-801c-d00b5d1e36a9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8692,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}