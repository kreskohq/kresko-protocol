{
  "stats": {
    "suites": 7,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-30T10:00:56.062Z",
    "end": "2023-09-30T10:00:58.602Z",
    "duration": 2540,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "272ebb08-7c37-45b2-9f56-d167ffd7692a",
      "title": "",
      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
      "file": "/src/test/krasset/02-krasset.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0737031b-8445-4b92-96cb-e142bd0b07a0",
          "title": "KreskoAsset",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 52,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy WETH\n[WETH] = await hre.deploy(\"WETH\", {\n    from: hre.addr.deployer\n});\n// Give WETH to deployer\nawait WETH.connect(hre.users.devOne).deposit({\n    value: (0, _lib.toBig)(100)\n});\n({ KreskoAsset , KreskoAssetAnchor  } = await (0, _test.kreskoAssetFixture)(WETH.address, await WETH.decimals()));\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);\n// set Kresko Anchor token address in KreskoAsset\nawait KreskoAsset.connect(hre.users.admin).setAnchorToken(KreskoAssetAnchor.address);\n// Approve WETH for KreskoAsset\nawait WETH.connect(hre.users.devOne).approve(KreskoAsset.address, hre.ethers.constants.MaxUint256);\n// Set fee recipient\nawait KreskoAsset.connect(hre.users.admin).setFeeRecipient(hre.addr.devTwo);",
              "err": {},
              "uuid": "5570dded-beed-4b21-8305-c5a165afb67b",
              "parentUUID": "0737031b-8445-4b92-96cb-e142bd0b07a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5588aadd-1f0e-4b51-a8ad-bcf9cf732069",
              "title": "#rebase",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "71d5c686-bc0a-45c8-b825-0eb94f40f15a",
                  "parentUUID": "5588aadd-1f0e-4b51-a8ad-bcf9cf732069",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "4b8b8913-8238-4136-869a-58592b5869d8",
                  "parentUUID": "5588aadd-1f0e-4b51-a8ad-bcf9cf732069",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "332cf16f-9765-4c80-b106-321e28a6e0d1",
                  "parentUUID": "5588aadd-1f0e-4b51-a8ad-bcf9cf732069",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                  "title": "#balance + supply",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                      "err": {},
                      "uuid": "cc521b37-c16d-4848-a872-016a3bd95404",
                      "parentUUID": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "22c43c03-94fd-419d-a215-7da2e0b6becf",
                      "parentUUID": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "7dbe8476-dffb-4650-b7cc-4ba6e1a5f30e",
                      "parentUUID": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "5f912f06-9a18-46c5-a106-ddcd18da9fed",
                      "parentUUID": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "c58c1891-c398-41d3-bfa4-8d43e8ae0a13",
                      "parentUUID": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "9a562196-be6c-415c-a8fa-43eb888cd7ae",
                      "parentUUID": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "b20bfc0a-944c-4cd6-b02e-9543d7274aa0",
                      "parentUUID": "b9f99d9c-1e3a-4559-9763-623fe7de1c7c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cc521b37-c16d-4848-a872-016a3bd95404",
                    "22c43c03-94fd-419d-a215-7da2e0b6becf",
                    "7dbe8476-dffb-4650-b7cc-4ba6e1a5f30e",
                    "5f912f06-9a18-46c5-a106-ddcd18da9fed",
                    "c58c1891-c398-41d3-bfa4-8d43e8ae0a13",
                    "9a562196-be6c-415c-a8fa-43eb888cd7ae",
                    "b20bfc0a-944c-4cd6-b02e-9543d7274aa0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 90,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "dcb9293d-eeb7-4582-a6d8-e9384f56c9c2",
                  "title": "#transfer",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "15ec94a9-a2a1-4fe8-a925-be2e1c86bed2",
                      "parentUUID": "dcb9293d-eeb7-4582-a6d8-e9384f56c9c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "0a375655-78db-4b49-bd42-71ff85e862a3",
                      "parentUUID": "dcb9293d-eeb7-4582-a6d8-e9384f56c9c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "4a77f6f8-b4c1-40f1-9b51-d743c09d550e",
                      "parentUUID": "dcb9293d-eeb7-4582-a6d8-e9384f56c9c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "86d1b14e-e9dd-45aa-8356-7473b68a7166",
                      "parentUUID": "dcb9293d-eeb7-4582-a6d8-e9384f56c9c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "8586e243-eeae-4c96-b57a-02f395af4fee",
                      "parentUUID": "dcb9293d-eeb7-4582-a6d8-e9384f56c9c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "56d28e15-d917-4b1c-ab24-391a5db1b048",
                      "parentUUID": "dcb9293d-eeb7-4582-a6d8-e9384f56c9c2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "15ec94a9-a2a1-4fe8-a925-be2e1c86bed2",
                    "0a375655-78db-4b49-bd42-71ff85e862a3",
                    "4a77f6f8-b4c1-40f1-9b51-d743c09d550e",
                    "86d1b14e-e9dd-45aa-8356-7473b68a7166",
                    "8586e243-eeae-4c96-b57a-02f395af4fee",
                    "56d28e15-d917-4b1c-ab24-391a5db1b048"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 192,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "71d5c686-bc0a-45c8-b825-0eb94f40f15a",
                "4b8b8913-8238-4136-869a-58592b5869d8",
                "332cf16f-9765-4c80-b106-321e28a6e0d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7b64c758-bf1a-4fa1-991c-a06bec98eff3",
              "title": "Deposit and Withdraw",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "636f06cb-d2a7-4292-9001-e65717b5445e",
                  "title": "Deposit",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "cannot deposit when paused",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit cannot deposit when paused",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).pause();\nawait (0, _chai.expect)(KreskoAsset.deposit(hre.addr.devOne, (0, _lib.toBig)(10))).to.be.revertedWith(\"Pausable: paused\");\nawait KreskoAsset.connect(hre.users.admin).unpause();",
                      "err": {},
                      "uuid": "a39be586-f75c-4b65-b771-22f52992587e",
                      "parentUUID": "636f06cb-d2a7-4292-9001-e65717b5445e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can deposit with token",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit can deposit with token",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.devOne).deposit(hre.addr.devOne, (0, _lib.toBig)(10));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.devOne)).to.equal((0, _lib.toBig)(10));",
                      "err": {},
                      "uuid": "93aa6839-1bc1-45c0-b29a-ac8ffb3f4c1b",
                      "parentUUID": "636f06cb-d2a7-4292-9001-e65717b5445e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot deposit native token if not enabled",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit cannot deposit native token if not enabled",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(10)\n})).to.be.reverted;",
                      "err": {},
                      "uuid": "7f515906-300a-4948-9ecc-b9b7022f5036",
                      "parentUUID": "636f06cb-d2a7-4292-9001-e65717b5445e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can deposit native token if enabled",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit can deposit native token if enabled",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nconst prevBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\nawait hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(10, 18)\n});\nconst currentBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\n(0, _chai.expect)(currentBalance.sub(prevBalance)).to.equal((0, _lib.toBig)(10));",
                      "err": {},
                      "uuid": "877f03f7-6ebd-4c1e-a88e-b857addda56f",
                      "parentUUID": "636f06cb-d2a7-4292-9001-e65717b5445e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "transfers the correct fees to feeRecipient",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit transfers the correct fees to feeRecipient",
                      "timedOut": false,
                      "duration": 128,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).setOpenFee((0, _lib.toBig)(1, 17));\nawait KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nlet prevBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst prevWETHBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\nawait KreskoAsset.connect(hre.users.devOne).deposit(hre.addr.devOne, (0, _lib.toBig)(10));\nlet currentBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst currentWETHBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _lib.toBig)(9));\n(0, _chai.expect)(currentWETHBalanceDevTwo.sub(prevWETHBalanceDevTwo)).to.equal((0, _lib.toBig)(1));\nprevBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst prevBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\nawait hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(10)\n});\ncurrentBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst currentBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _lib.toBig)(9));\n(0, _chai.expect)(currentBalanceDevTwo.sub(prevBalanceDevTwo)).to.equal((0, _lib.toBig)(1));\n// Set openfee to 0\nawait KreskoAsset.connect(hre.users.admin).setOpenFee(0);",
                      "err": {},
                      "uuid": "709afb95-6b94-4ac0-b3b4-c8fea46147d4",
                      "parentUUID": "636f06cb-d2a7-4292-9001-e65717b5445e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a39be586-f75c-4b65-b771-22f52992587e",
                    "93aa6839-1bc1-45c0-b29a-ac8ffb3f4c1b",
                    "7f515906-300a-4948-9ecc-b9b7022f5036",
                    "877f03f7-6ebd-4c1e-a88e-b857addda56f",
                    "709afb95-6b94-4ac0-b3b4-c8fea46147d4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 231,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "507ee92c-bc74-49cf-a472-09d37da239ab",
                  "title": "Withdraw",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Withdraw\"",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw \"before each\" hook in \"Withdraw\"",
                      "timedOut": false,
                      "duration": 87,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit some tokens here\nawait KreskoAsset.connect(hre.users.devOne).deposit(hre.addr.devOne, (0, _lib.toBig)(10));\nawait KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nawait hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(100)\n});",
                      "err": {},
                      "uuid": "117d127f-2868-440c-80a2-05152dc01f15",
                      "parentUUID": "507ee92c-bc74-49cf-a472-09d37da239ab",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "cannot withdraw when paused",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw cannot withdraw when paused",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).pause();\nawait (0, _chai.expect)(KreskoAsset.withdraw((0, _lib.toBig)(1), false)).to.be.revertedWith(\"Pausable: paused\");\nawait KreskoAsset.connect(hre.users.admin).unpause();",
                      "err": {},
                      "uuid": "f9d88a0d-8298-4fca-8296-1bde9a78d7c7",
                      "parentUUID": "507ee92c-bc74-49cf-a472-09d37da239ab",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can withdraw",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw can withdraw",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const prevBalance = await WETH.balanceOf(hre.addr.devOne);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(1), false);\nconst currentBalance = await WETH.balanceOf(hre.addr.devOne);\n(0, _chai.expect)(currentBalance.sub(prevBalance)).to.equal((0, _lib.toBig)(1));",
                      "err": {},
                      "uuid": "644bd774-6576-42c0-9629-bcdd90fa7846",
                      "parentUUID": "507ee92c-bc74-49cf-a472-09d37da239ab",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can withdraw native token if enabled",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw can withdraw native token if enabled",
                      "timedOut": false,
                      "duration": 17,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nconst prevBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(1), true);\nconst currentBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\n(0, _chai.expect)(prevBalance.sub(currentBalance)).to.equal((0, _lib.toBig)(1));",
                      "err": {},
                      "uuid": "5a60546a-ef7d-477d-884f-6270e500bcbd",
                      "parentUUID": "507ee92c-bc74-49cf-a472-09d37da239ab",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "transfers the correct fees to feeRecipient",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw transfers the correct fees to feeRecipient",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// set close fee to 10%\nawait KreskoAsset.connect(hre.users.admin).setCloseFee((0, _lib.toBig)(1, 17));\nconst prevBalanceDevOne = await WETH.balanceOf(hre.addr.devOne);\nlet prevBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(10), false);\nconst currentBalanceDevOne = await WETH.balanceOf(hre.addr.devOne);\nlet currentBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _lib.toBig)(9));\n(0, _chai.expect)(currentBalanceDevTwo.sub(prevBalanceDevTwo)).to.equal((0, _lib.toBig)(1));\n// Withdraw native token and check if fee is transferred\nprevBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(10), true);\ncurrentBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevTwo.sub(prevBalanceDevTwo)).to.equal((0, _lib.toBig)(1));",
                      "err": {},
                      "uuid": "8e74d4cf-b503-439f-b3c9-6856cad62f19",
                      "parentUUID": "507ee92c-bc74-49cf-a472-09d37da239ab",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f9d88a0d-8298-4fca-8296-1bde9a78d7c7",
                    "644bd774-6576-42c0-9629-bcdd90fa7846",
                    "5a60546a-ef7d-477d-884f-6270e500bcbd",
                    "8e74d4cf-b503-439f-b3c9-6856cad62f19"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 79,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}