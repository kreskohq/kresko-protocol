{
  "stats": {
    "suites": 86,
    "tests": 265,
    "passes": 247,
    "pending": 18,
    "failures": 0,
    "start": "2023-08-22T11:59:37.823Z",
    "end": "2023-08-22T12:09:06.731Z",
    "duration": 568908,
    "testsRegistered": 265,
    "passPercent": 100,
    "pendingPercent": 6.7924528301886795,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ceaa0210-f25f-4a80-8335-019b56c9ee8d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "16e253db-8bdf-4061-9cf8-2ea0047fe214",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "07e2aeba-bdc1-43a4-9d91-4476b7d2008f",
              "parentUUID": "16e253db-8bdf-4061-9cf8-2ea0047fe214",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 6212,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "user = _hardhat.default.users.testUserSeven;\noracleDecimals = await _hardhat.default.Diamond.extOracleDecimals();\nKreskoAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"KreskoAssetPrice10USD\",\n    price: collateralPrice,\n    symbol: \"KreskoAssetPrice10USD\",\n    closeFee: 0.1,\n    openFee: 0.1,\n    marketOpen: true,\n    factor: 2,\n    supplyLimit: 10\n});\nCollateralAsset = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral18Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 18\n});\nCollateralAsset8Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral8Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 8\n});\nCollateralAsset21Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral21Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 21\n});\nawait CollateralAsset.setBalance(user, (0, _lib.toBig)(startingBalance));\nawait CollateralAsset8Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 8));\nawait CollateralAsset21Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 21));\nawait CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset21Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);",
              "err": {},
              "uuid": "feaec818-eff0-45c6-b5b8-feedfe0ee6d7",
              "parentUUID": "16e253db-8bdf-4061-9cf8-2ea0047fe214",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45744826-77b6-42d2-a1e3-8bffd526737e",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "2a35cad2-58c4-4a16-aef4-fa269dc8e52b",
                  "parentUUID": "45744826-77b6-42d2-a1e3-8bffd526737e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "382964fd-a0f3-4987-a3ec-fc8598186610",
                  "parentUUID": "45744826-77b6-42d2-a1e3-8bffd526737e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "418c4ea4-f859-4b34-a1e4-af292692d4af",
                  "parentUUID": "45744826-77b6-42d2-a1e3-8bffd526737e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, (0, _lib.toBig)(10));\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, (0, _lib.toBig)(10, 8));\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, (0, _lib.toBig)(10, 21));\nconst expectedDepositValue = (0, _lib.toBig)(150, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "9ecc6f25-acd4-4ff8-bbfc-63753006b1d4",
                  "parentUUID": "45744826-77b6-42d2-a1e3-8bffd526737e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a35cad2-58c4-4a16-aef4-fa269dc8e52b",
                "382964fd-a0f3-4987-a3ec-fc8598186610",
                "418c4ea4-f859-4b34-a1e4-af292692d4af",
                "9ecc6f25-acd4-4ff8-bbfc-63753006b1d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 331,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "c8a361e6-6462-46fa-bd29-f909131c8ed7",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance));",
                  "err": {},
                  "uuid": "6ccb484a-096d-4ab6-a86a-6f08d9813c06",
                  "parentUUID": "c8a361e6-6462-46fa-bd29-f909131c8ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 133,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset8Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset8Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 8));",
                  "err": {},
                  "uuid": "20b5339c-6e4a-46a3-8f7e-a3a0184b5fa6",
                  "parentUUID": "c8a361e6-6462-46fa-bd29-f909131c8ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 142,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset21Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset21Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 21));",
                  "err": {},
                  "uuid": "2441f4ac-e324-4f3f-9824-f5707eed6363",
                  "parentUUID": "c8a361e6-6462-46fa-bd29-f909131c8ed7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ccb484a-096d-4ab6-a86a-6f08d9813c06",
                "20b5339c-6e4a-46a3-8f7e-a3a0184b5fa6",
                "2441f4ac-e324-4f3f-9824-f5707eed6363"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 406,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "f8eaca72-aa68-4eab-9ff5-abb78d0ceb71",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 369,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "4364f8d3-152d-4074-aff3-0abf56406584",
                  "parentUUID": "f8eaca72-aa68-4eab-9ff5-abb78d0ceb71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 380,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "96e7899d-e126-4147-9d65-709449f66b4f",
                  "parentUUID": "f8eaca72-aa68-4eab-9ff5-abb78d0ceb71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 392,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "cf1e5016-e4ca-46cb-9696-bff3a39baa07",
                  "parentUUID": "f8eaca72-aa68-4eab-9ff5-abb78d0ceb71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4364f8d3-152d-4074-aff3-0abf56406584",
                "96e7899d-e126-4147-9d65-709449f66b4f",
                "cf1e5016-e4ca-46cb-9696-bff3a39baa07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1141,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "787f3c24-1083-4a32-b331-da6ccb6bfa31",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "52003bd6-9b87-43c1-a5b2-cefeaaf35e79",
              "parentUUID": "787f3c24-1083-4a32-b331-da6ccb6bfa31",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "adc75de2-ef83-4389-b609-2bcbfd10970e",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "3a781cc3-71f1-4fd4-95e2-7c968f6d56f7",
                  "parentUUID": "adc75de2-ef83-4389-b609-2bcbfd10970e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = this.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "f50ef966-e16c-4e0f-9275-dff6cfb3cdfe",
                  "parentUUID": "adc75de2-ef83-4389-b609-2bcbfd10970e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "5d3f55c6-242b-4c33-8cff-cc5ad8e3992f",
                  "parentUUID": "adc75de2-ef83-4389-b609-2bcbfd10970e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a781cc3-71f1-4fd4-95e2-7c968f6d56f7",
                "f50ef966-e16c-4e0f-9275-dff6cfb3cdfe",
                "5d3f55c6-242b-4c33-8cff-cc5ad8e3992f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4e321f2f-ee24-4e42-9354-7df2fb746715",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "2e337cfd-850a-4147-bd8f-343afcae77d1",
              "parentUUID": "4e321f2f-ee24-4e42-9354-7df2fb746715",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dc24391c-b4cd-4354-b857-5804a5851f0b",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.addr.deployer);",
                  "err": {},
                  "uuid": "8624e47e-7e52-4bfd-afb6-dbd3d3a7faf8",
                  "parentUUID": "dc24391c-b4cd-4354-b857-5804a5851f0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "0762c1b2-e3c7-4a7c-8923-0d6d883d9e66",
                  "parentUUID": "dc24391c-b4cd-4354-b857-5804a5851f0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "fa13fd86-1c3c-428e-9209-42476bb92c4d",
                  "parentUUID": "dc24391c-b4cd-4354-b857-5804a5851f0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "94e9de19-b83d-4cb8-bf0e-b5aa02b2c680",
                  "parentUUID": "dc24391c-b4cd-4354-b857-5804a5851f0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8624e47e-7e52-4bfd-afb6-dbd3d3a7faf8",
                "0762c1b2-e3c7-4a7c-8923-0d6d883d9e66",
                "fa13fd86-1c3c-428e-9209-42476bb92c4d",
                "94e9de19-b83d-4cb8-bf0e-b5aa02b2c680"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 143,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "429aee5b-2539-4683-8eb0-8907f3f97e95",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d0db0767-acce-40bd-bd98-7c93dbda46db",
              "parentUUID": "429aee5b-2539-4683-8eb0-8907f3f97e95",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6bb1b36f-6d18-4c7f-9b22-edea8787b9ad",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 772,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = _hardhat.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await _hardhat.default.Diamond.hasRole(TEST_OPERATOR_ROLE, _hardhat.default.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await _hardhat.default.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], _hardhat.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(_hardhat.default.addr.userOne);",
                  "err": {},
                  "uuid": "c2187ec9-b002-4d7e-83c8-9cf1f178f912",
                  "parentUUID": "6bb1b36f-6d18-4c7f-9b22-edea8787b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 525,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: _hardhat.default.addr.userOne\n});\nconst facetsBefore = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: \"SmockFacet\"\n});\nconst facetsAfter = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "54bad606-e127-4007-90e9-846cb783e6e5",
                  "parentUUID": "6bb1b36f-6d18-4c7f-9b22-edea8787b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await _hardhat.default.Diamond.facetAddress(signature);\nconst functions = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: _hardhat.default.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await _hardhat.default.ethers.getContractAt(\"AuthEvent\", _hardhat.default.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(_hardhat.default.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner , newOwner  } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(_hardhat.default.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "df815920-a036-40ab-b622-ef05eae85be3",
                  "parentUUID": "6bb1b36f-6d18-4c7f-9b22-edea8787b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await _hardhat.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await _hardhat.default.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\"\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await _hardhat.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await _hardhat.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).acceptOwnership());\nconst currentOwner = await _hardhat.default.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "aa806213-a877-441f-9aab-f1cf1e27dc55",
                  "parentUUID": "6bb1b36f-6d18-4c7f-9b22-edea8787b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 724,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait _hardhat.default.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "c6c0536c-7b30-4bbc-939e-6935b4967024",
                  "parentUUID": "6bb1b36f-6d18-4c7f-9b22-edea8787b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 1517,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await _hardhat.default.ethers.getContractAt(\"SmockFacet\", _hardhat.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait _hardhat.default.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await _hardhat.default.ethers.getContractAt(\"SmockFacet2\", _hardhat.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "0b290a60-2b4d-4557-96f7-957fa76611ab",
                  "parentUUID": "6bb1b36f-6d18-4c7f-9b22-edea8787b9ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2187ec9-b002-4d7e-83c8-9cf1f178f912",
                "54bad606-e127-4007-90e9-846cb783e6e5",
                "df815920-a036-40ab-b622-ef05eae85be3",
                "aa806213-a877-441f-9aab-f1cf1e27dc55",
                "c6c0536c-7b30-4bbc-939e-6935b4967024",
                "0b290a60-2b4d-4557-96f7-957fa76611ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4000,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "032be77a-c641-42b0-a19b-4dca02fa544a",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "589a51ac-215d-43b0-beb1-5b76070bfc67",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8373ec81-cd8b-409c-8087-8cbc0143b1f6",
                  "parentUUID": "589a51ac-215d-43b0-beb1-5b76070bfc67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "8373ec81-cd8b-409c-8087-8cbc0143b1f6"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "9f974130-80da-432d-86da-f3f70e88e6af",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "de4dd402-9d75-4f6d-bdd3-0c2653c2ce19",
                  "parentUUID": "9f974130-80da-432d-86da-f3f70e88e6af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "de4dd402-9d75-4f6d-bdd3-0c2653c2ce19"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b923bb1c-cd5c-4b15-b470-a6b161540902",
              "title": "#facet-upgrade-16-05-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works",
                  "fullTitle": "Forking #facet-upgrade-16-05-2023 works",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e3e73c40-f57f-4159-9a3c-92688a837820",
                  "parentUUID": "b923bb1c-cd5c-4b15-b470-a6b161540902",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "e3e73c40-f57f-4159-9a3c-92688a837820"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7dbd3c8d-59b2-4e1a-8730-913279881913",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "8c84c6fb-20af-4863-90e5-25e73b1a5e49",
              "parentUUID": "7dbd3c8d-59b2-4e1a-8730-913279881913",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a391baf4-89da-4755-887c-ff667494759e",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "5617b660-9f57-426e-b4fb-b952f86f5b91",
                  "parentUUID": "a391baf4-89da-4755-887c-ff667494759e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "1f9ed3ee-29ff-4b95-bb2e-856860af301b",
                  "parentUUID": "a391baf4-89da-4755-887c-ff667494759e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetImpl.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "a2dc7315-f2ac-4031-85e2-92c567a97553",
                  "parentUUID": "a391baf4-89da-4755-887c-ff667494759e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await KreskoAsset.kresko()).to.equal(_hardhat.default.Diamond.address);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(\"64000000000000000000\");\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "89557d05-4b00-4d13-b409-e0a9f66239dd",
                  "parentUUID": "a391baf4-89da-4755-887c-ff667494759e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "3ecc8f1c-154a-4260-b677-d2ecd210b1ba",
                  "parentUUID": "a391baf4-89da-4755-887c-ff667494759e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f9ed3ee-29ff-4b95-bb2e-856860af301b",
                "a2dc7315-f2ac-4031-85e2-92c567a97553",
                "89557d05-4b00-4d13-b409-e0a9f66239dd",
                "3ecc8f1c-154a-4260-b677-d2ecd210b1ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "874dec77-84af-468f-b5dc-1170ebb101a0",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = _hardhat.default.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "c0493b3f-3545-4421-8b96-a56629970372",
                  "parentUUID": "874dec77-84af-468f-b5dc-1170ebb101a0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "4835a2a4-5512-4f91-abf1-8cd3dac2b665",
                  "parentUUID": "874dec77-84af-468f-b5dc-1170ebb101a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(_shared.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "d0577b1d-f2ac-44b5-9f3f-41dabd393fc8",
                  "parentUUID": "874dec77-84af-468f-b5dc-1170ebb101a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "430b8a5e-de38-4256-ae21-8002733f9128",
                  "parentUUID": "874dec77-84af-468f-b5dc-1170ebb101a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(_shared.anchorTokenPrefix + symbol);\n(0, _chai.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"64000000000000000000\");\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "eaac5782-4bc4-453a-bcbc-640fb21e02fe",
                  "parentUUID": "874dec77-84af-468f-b5dc-1170ebb101a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4835a2a4-5512-4f91-abf1-8cd3dac2b665",
                "d0577b1d-f2ac-44b5-9f3f-41dabd393fc8",
                "430b8a5e-de38-4256-ae21-8002733f9128",
                "eaac5782-4bc4-453a-bcbc-640fb21e02fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "994735ea-d19e-4866-98f4-56cdec41a1ec",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "65492be1-a490-4b3d-bcbb-d995f239e76d",
              "parentUUID": "994735ea-d19e-4866-98f4-56cdec41a1ec",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = _hardhat.default.users.deployer;\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(_test.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "fd6c4892-2ba9-47d3-9d58-ce2493ac42f1",
              "parentUUID": "994735ea-d19e-4866-98f4-56cdec41a1ec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dfd286d6-5df9-43e8-b9af-6fed927fb23f",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "8ebbbc4d-524d-4d21-99c1-e50610e94890",
                  "parentUUID": "dfd286d6-5df9-43e8-b9af-6fed927fb23f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "837eb5aa-b945-4721-bd75-76285de928de",
                  "parentUUID": "dfd286d6-5df9-43e8-b9af-6fed927fb23f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "d09d3186-9680-43c7-879b-2dcddba8854c",
                  "parentUUID": "dfd286d6-5df9-43e8-b9af-6fed927fb23f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.renounceRole(_test.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "f170dd81-c93f-4e65-a0fc-dab2b1d0b69b",
                  "parentUUID": "dfd286d6-5df9-43e8-b9af-6fed927fb23f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ebbbc4d-524d-4d21-99c1-e50610e94890",
                "837eb5aa-b945-4721-bd75-76285de928de",
                "d09d3186-9680-43c7-879b-2dcddba8854c",
                "f170dd81-c93f-4e65-a0fc-dab2b1d0b69b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "593c5c81-fbb0-41f7-a073-562014553a28",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "9089999f-01ed-436b-9d69-46cc3eda14b1",
                  "parentUUID": "593c5c81-fbb0-41f7-a073-562014553a28",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "f3d618f4-7b39-4b65-b82b-c8cd8d8f7c32",
                  "parentUUID": "593c5c81-fbb0-41f7-a073-562014553a28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(_hardhat.default.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "0086ff8d-294c-4bfb-8fc7-16195a6e3d3a",
                  "parentUUID": "593c5c81-fbb0-41f7-a073-562014553a28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "65b561b6-f786-4ecd-886c-ac7c6e7f19a6",
                  "parentUUID": "593c5c81-fbb0-41f7-a073-562014553a28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userTwo).burn(_hardhat.default.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "f7be52c6-79fc-421d-ada3-e42cf727e5da",
                  "parentUUID": "593c5c81-fbb0-41f7-a073-562014553a28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3d618f4-7b39-4b65-b82b-c8cd8d8f7c32",
                "0086ff8d-294c-4bfb-8fc7-16195a6e3d3a",
                "65b561b6-f786-4ecd-886c-ac7c6e7f19a6",
                "f7be52c6-79fc-421d-ada3-e42cf727e5da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8870a5db-c30e-477e-9abb-37a070a5535f",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "69bed06a-46bd-4f13-a65f-03dd4a1348a0",
              "parentUUID": "8870a5db-c30e-477e-9abb-37a070a5535f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "4f8da86f-faf7-40ac-a88d-66974cebc540",
              "parentUUID": "8870a5db-c30e-477e-9abb-37a070a5535f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e0d90961-139d-449f-aa97-4f98ceebc78d",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "df90b6f7-a958-49a7-96fd-eba9edac489e",
                  "parentUUID": "e0d90961-139d-449f-aa97-4f98ceebc78d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "58b35a00-8c60-4a60-9b0b-d8691aee677d",
                  "parentUUID": "e0d90961-139d-449f-aa97-4f98ceebc78d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "ac9825a0-8fe1-4e5c-a7e1-8a82f17b4cf9",
                  "parentUUID": "e0d90961-139d-449f-aa97-4f98ceebc78d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a30d7569-cac9-4bfb-a09c-e42061545012",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 17,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                      "err": {},
                      "uuid": "1e6139da-567c-4b09-8757-77546e088e3b",
                      "parentUUID": "a30d7569-cac9-4bfb-a09c-e42061545012",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "51fe2045-c786-44cf-9c56-c97d11dad289",
                      "parentUUID": "a30d7569-cac9-4bfb-a09c-e42061545012",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "99419ffa-3ac1-4ac2-a051-2a1b89e0fe03",
                      "parentUUID": "a30d7569-cac9-4bfb-a09c-e42061545012",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "386d2266-ba2a-4fb1-9b89-7008b0c72e32",
                      "parentUUID": "a30d7569-cac9-4bfb-a09c-e42061545012",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "ea93a1a7-718d-488f-abe0-980909e93ef6",
                      "parentUUID": "a30d7569-cac9-4bfb-a09c-e42061545012",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "3ffa8a6d-fc68-4f2b-923d-7a3b393e4b00",
                      "parentUUID": "a30d7569-cac9-4bfb-a09c-e42061545012",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "5f8a5d89-715b-47a7-a22d-09a7cde3b38e",
                      "parentUUID": "a30d7569-cac9-4bfb-a09c-e42061545012",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1e6139da-567c-4b09-8757-77546e088e3b",
                    "51fe2045-c786-44cf-9c56-c97d11dad289",
                    "99419ffa-3ac1-4ac2-a051-2a1b89e0fe03",
                    "386d2266-ba2a-4fb1-9b89-7008b0c72e32",
                    "ea93a1a7-718d-488f-abe0-980909e93ef6",
                    "3ffa8a6d-fc68-4f2b-923d-7a3b393e4b00",
                    "5f8a5d89-715b-47a7-a22d-09a7cde3b38e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 183,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "a1905cc9-13ea-425f-bf01-f5f751a2138d",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "b30fe931-2c5e-4250-96fe-0f807a066687",
                      "parentUUID": "a1905cc9-13ea-425f-bf01-f5f751a2138d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "0ab5764f-f97f-4d6e-b3d3-5fc45e04503f",
                      "parentUUID": "a1905cc9-13ea-425f-bf01-f5f751a2138d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "3ce1b6b6-52e8-4bb4-bf24-f005037fe959",
                      "parentUUID": "a1905cc9-13ea-425f-bf01-f5f751a2138d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "6038fcdb-e5c6-4fd6-9958-33f16a639d2c",
                      "parentUUID": "a1905cc9-13ea-425f-bf01-f5f751a2138d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 115,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "11015a72-95e7-406c-a2b0-c8b997d2e44f",
                      "parentUUID": "a1905cc9-13ea-425f-bf01-f5f751a2138d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 110,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "aaf970a5-e2d9-49b2-923c-26afc05e65d7",
                      "parentUUID": "a1905cc9-13ea-425f-bf01-f5f751a2138d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b30fe931-2c5e-4250-96fe-0f807a066687",
                    "0ab5764f-f97f-4d6e-b3d3-5fc45e04503f",
                    "3ce1b6b6-52e8-4bb4-bf24-f005037fe959",
                    "6038fcdb-e5c6-4fd6-9958-33f16a639d2c",
                    "11015a72-95e7-406c-a2b0-c8b997d2e44f",
                    "aaf970a5-e2d9-49b2-923c-26afc05e65d7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 547,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "df90b6f7-a958-49a7-96fd-eba9edac489e",
                "58b35a00-8c60-4a60-9b0b-d8691aee677d",
                "ac9825a0-8fe1-4e5c-a7e1-8a82f17b4cf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "08445c59-4bf7-49a6-b4b1-bd07090ce31b",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e9e49b7e-79b0-495a-9e63-ed217851ee97",
              "parentUUID": "08445c59-4bf7-49a6-b4b1-bd07090ce31b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const asset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "71c83655-1878-472c-b906-b6ac1fba1c37",
              "parentUUID": "08445c59-4bf7-49a6-b4b1-bd07090ce31b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4c908dac-a7e4-4471-9997-dd83278ee505",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount.add(_test.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "3d370609-906e-41eb-af2f-37474969f12c",
                  "parentUUID": "4c908dac-a7e4-4471-9997-dd83278ee505",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "25ae4876-db1f-4d3f-91a0-adcf4f7f4859",
                  "parentUUID": "4c908dac-a7e4-4471-9997-dd83278ee505",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4cbacc22-f4a8-4b78-be6c-739b5fb531f1",
                  "parentUUID": "4c908dac-a7e4-4471-9997-dd83278ee505",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "049a069d-03ef-43fd-8515-a51a240b3d6e",
                  "parentUUID": "4c908dac-a7e4-4471-9997-dd83278ee505",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0a54cec9-d997-495b-902d-e71a8f8a5a37",
                  "parentUUID": "4c908dac-a7e4-4471-9997-dd83278ee505",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "463613ee-e811-431f-be56-c70f3edf1f96",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a2cba70f-87d7-4227-a40a-ea2067d2ac98",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0457b9ff-ef9d-47fd-b5c3-d0a31bce2ec5",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d5afde15-d9db-48d3-91dd-f94113172e7a",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8a4dc8c8-c676-4419-91ae-207911ba796e",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a4b7b2f0-a2dd-4606-989c-e17b6867f930",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b7b94de8-3332-44c2-a97c-f8fea417da21",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "167314ea-03b2-4d96-800e-3a3de3a8bd6e",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "603d30d4-128a-47ea-8b90-0f0f3f4aea78",
                          "parentUUID": "bb072d3c-6c3f-483d-8b0b-e577b5a394ea",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "a2cba70f-87d7-4227-a40a-ea2067d2ac98",
                        "0457b9ff-ef9d-47fd-b5c3-d0a31bce2ec5",
                        "d5afde15-d9db-48d3-91dd-f94113172e7a",
                        "8a4dc8c8-c676-4419-91ae-207911ba796e",
                        "a4b7b2f0-a2dd-4606-989c-e17b6867f930",
                        "b7b94de8-3332-44c2-a97c-f8fea417da21",
                        "167314ea-03b2-4d96-800e-3a3de3a8bd6e",
                        "603d30d4-128a-47ea-8b90-0f0f3f4aea78"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "3d370609-906e-41eb-af2f-37474969f12c"
              ],
              "failures": [],
              "pending": [
                "25ae4876-db1f-4d3f-91a0-adcf4f7f4859",
                "4cbacc22-f4a8-4b78-be6c-739b5fb531f1",
                "049a069d-03ef-43fd-8515-a51a240b3d6e",
                "0a54cec9-d997-495b-902d-e71a8f8a5a37"
              ],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1ffc49d5-4f80-4d96-ba9d-b087527ab152",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f889b946-3e5b-4fe0-84d7-aa0204719fe0",
              "parentUUID": "1ffc49d5-4f80-4d96-ba9d-b087527ab152",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 53,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === \"krETH\").contract;\nconst KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nconst Pair = await (await _hardhat.default.getContractOrFork(\"UniswapV2Factory\")).getPair(KreskoAsset.address, KISS.address);\n// address of KISS-krETH pool\nthis.pool = await _hardhat.ethers.getContractAt(\"UniswapV2Pair\", Pair);\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, _hardhat.default.addr.deployer);",
              "err": {},
              "uuid": "9b1a7763-7915-49ae-93cc-87637a4ef915",
              "parentUUID": "1ffc49d5-4f80-4d96-ba9d-b087527ab152",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst beforeTotalSupply = await KreskoAsset.totalSupply();\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.mint(_hardhat.default.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\n(0, _chai.expect)(await KreskoAsset.balanceOf(_hardhat.default.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(beforeTotalSupply.add(_test.defaultMintAmount).mul(denominator));\n(0, _chai.expect)(afterReserve0).to.equal(beforeReserve0);\n(0, _chai.expect)(afterReserve1).to.equal(beforeReserve1);\n(0, _chai.expect)(beforeTimestamp).to.equal(afterTimestamp);",
              "err": {},
              "uuid": "6a1f67bd-afb6-42a3-b633-ef7778673aa2",
              "parentUUID": "1ffc49d5-4f80-4d96-ba9d-b087527ab152",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, [\n    this.pool.address\n]);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\nif (beforeReserve0.eq(afterReserve0)) {\n    (0, _chai.expect)(afterReserve1).to.equal(beforeReserve1.mul(denominator));\n} else {\n    (0, _chai.expect)(afterReserve0).to.equal(beforeReserve0.mul(denominator));\n}\n(0, _chai.expect)(afterTimestamp).to.gt(beforeTimestamp);",
              "err": {},
              "uuid": "6f3f6829-e060-4f7c-a4ea-03d1c690980d",
              "parentUUID": "1ffc49d5-4f80-4d96-ba9d-b087527ab152",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a1f67bd-afb6-42a3-b633-ef7778673aa2",
            "6f3f6829-e060-4f7c-a4ea-03d1c690980d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "24f2f0d6-ffb8-4491-9724-d6013b56345d",
          "title": "Minter - Init",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "b7c5baf1-612e-4104-9cb2-dd8c64d1e7d3",
              "parentUUID": "24f2f0d6-ffb8-4491-9724-d6013b56345d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "92dc9175-4f31-4bde-a870-8f3630006e0c",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst { args  } = await (0, _shared.getMinterInitializer)(_hardhat.default);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.SAFETY_COUNCIL, _hardhat.default.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.feeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await _hardhat.default.Diamond.liquidationIncentiveMultiplier()).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumCollateralizationRatio()).to.equal(args.minimumCollateralizationRatio);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumDebtValue()).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "ba2be7ac-c0fa-481e-ad0d-01f1b20cfbc2",
                  "parentUUID": "92dc9175-4f31-4bde-a870-8f3630006e0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst initializer = await (0, _shared.getMinterInitializer)(_hardhat.default);\nconst initializerContract = await _hardhat.default.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, _chai.expect)(_hardhat.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "2bad1635-ed5f-4034-840f-c7e6d1d9aca9",
                  "parentUUID": "92dc9175-4f31-4bde-a870-8f3630006e0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await _hardhat.default.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._shared.minterFacets,\n    ..._shared.diamondFacets,\n    ..._shared.scdpFacets\n].map(async (name)=>{\n    const deployment = await _hardhat.default.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "1cc066aa-bc5c-495f-a7e2-9f6618063e16",
                  "parentUUID": "92dc9175-4f31-4bde-a870-8f3630006e0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba2be7ac-c0fa-481e-ad0d-01f1b20cfbc2",
                "2bad1635-ed5f-4034-840f-c7e6d1d9aca9",
                "1cc066aa-bc5c-495f-a7e2-9f6618063e16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 282,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "fb12bcbb-01d2-4fec-ae37-84248c7af75b",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "fca7c867-5d70-4149-a0c7-174b69677fcc",
              "parentUUID": "fb12bcbb-01d2-4fec-ae37-84248c7af75b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer);\nconst update = (0, _test.getNewMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(update.MLM)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(update.oracleDeviationPct)).to.not.be.reverted;\nconst { minimumCollateralizationRatio , minimumDebtValue , feeRecipient , oracleDeviationPct  } = await hre.Diamond.getAllParams();\n(0, _chai.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio);\n(0, _chai.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue);\n(0, _chai.expect)(update.feeRecipient).to.equal(feeRecipient);\n(0, _chai.expect)(update.oracleDeviationPct).to.equal(oracleDeviationPct);",
                  "err": {},
                  "uuid": "807f0d3b-1de4-4303-b2d7-80b18cee3640",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 1622,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)(_test.defaultCollateralArgs);\n(0, _chai.expect)(await hre.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(contract.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)(Number(oraclePrice)).to.equal((0, _lib.toBig)(_test.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "d9826988-2cab-4a5f-a7c3-3ab677c84b46",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 2205,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , kresko  } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(await hre.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, _chai.expect)(values.exists).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal((0, _lib.toBig)(_test.defaultKrAssetArgs.factor));\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_test.defaultKrAssetArgs.price);\n(0, _chai.expect)((0, _lib.fromBig)(values.supplyLimit)).to.equal(_test.defaultKrAssetArgs.supplyLimit);\n(0, _chai.expect)((0, _lib.fromBig)(values.closeFee)).to.equal(_test.defaultKrAssetArgs.closeFee);\n(0, _chai.expect)((0, _lib.fromBig)(values.openFee)).to.equal(_test.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "9624f773-867b-419a-9b0c-1353f0b91eea",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "fd46d4dc-0d41-4d83-b42e-deb5c129d31b",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidatable multiplier",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidatable multiplier",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.maxLiquidationMultiplier();\nconst newMLM = (0, _lib.toBig)(1.0002);\n(0, _chai.expect)(currentMLM.eq(newMLM)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(newMLM)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.maxLiquidationMultiplier()).eq(newMLM)).to.be.true;",
                  "err": {},
                  "uuid": "26280bdd-c1d3-4b1d-8ebe-06a9dbfd6812",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update oracle deviation pct",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentODPCT = await hre.Diamond.oracleDeviationPct();\nconst newODPCT = (0, _lib.toBig)(0.3);\n(0, _chai.expect)(currentODPCT.eq(newODPCT)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newODPCT)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.oracleDeviationPct()).eq(newODPCT)).to.be.true;",
                  "err": {},
                  "uuid": "ab8276b8-67af-4e22-a29d-873874b737f9",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 2203,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _krassets.addMockKreskoAsset)();\nconst oldRatio = (await hre.Diamond.kreskoAsset(contract.address)).kFactor;\nconst newRatio = (0, _lib.toBig)(1.2);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.kreskoAsset(contract.address)).kFactor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "1f4ac1f0-88a6-40e0-a4f8-5ae1b31cf505",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 1466,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)();\nconst oldRatio = (await hre.Diamond.collateralAsset(contract.address)).factor;\nconst newRatio = (0, _lib.toBig)(0.9);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.collateralAsset(contract.address)).factor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "38eeec91-22df-4bdd-8271-67690a1f7911",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 2935,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , anchor , priceFeed  } = await (0, _krassets.addMockKreskoAsset)();\nconst oracleAnswer = (0, _lib.fromBig)((await priceFeed.latestRoundData())[1], 8);\nconst kreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, _chai.expect)(oracleAnswer).to.equal(_test.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, _lib.toBig)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, _lib.toBig)(0.02),\n    openFee: (0, _lib.toBig)(0.02)\n};\nconst [MockFeed] = await (0, _oracle.getMockOracles)(update.price);\nawait (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateKreskoAsset(contract.address, await (0, _krassets.getKrAssetConfig)(contract, anchor.address, update.factor, MockFeed.address, (0, _lib.toBig)(update.supplyLimit), update.closeFee, update.openFee));\nconst newValues = await hre.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = (0, _lib.fromBig)((await MockFeed.latestRoundData())[1], 8);\nconst newKreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(newValues.exists).to.equal(true);\n(0, _chai.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, _chai.expect)((0, _lib.fromBig)(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "a7fbef30-87f2-43de-aa99-2d1b2684f087",
                  "parentUUID": "a53af8cd-0851-4529-987a-d21ce3f9cab8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "807f0d3b-1de4-4303-b2d7-80b18cee3640",
                "d9826988-2cab-4a5f-a7c3-3ab677c84b46",
                "9624f773-867b-419a-9b0c-1353f0b91eea",
                "fd46d4dc-0d41-4d83-b42e-deb5c129d31b",
                "26280bdd-c1d3-4b1d-8ebe-06a9dbfd6812",
                "ab8276b8-67af-4e22-a29d-873874b737f9",
                "1f4ac1f0-88a6-40e0-a4f8-5ae1b31cf505",
                "38eeec91-22df-4bdd-8271-67690a1f7911",
                "a7fbef30-87f2-43de-aa99-2d1b2684f087"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10715,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ed95ddab-d09c-4886-b6bb-c44c2a97bc72",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "367075b1-a01a-4b3d-b2b0-b12721988c6f",
              "parentUUID": "ed95ddab-d09c-4886-b6bb-c44c2a97bc72",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.depositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(10000)\n};",
              "err": {},
              "uuid": "bef28529-747a-4f76-8ebc-c271854aca63",
              "parentUUID": "ed95ddab-d09c-4886-b6bb-c44c2a97bc72",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61745f06-b2b8-4794-b7fe-63bb3389523b",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert if withdrawing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if withdrawing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 2370,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const arbitraryUser = _hardhat.default.users.testUserSeven;\nconst collateralAmount = (0, _lib.toBig)(100);\nconst newKrAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krTSLA\",\n    symbol: \"krTSLA\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000\n});\nawait newKrAsset.setBalance(arbitraryUser, collateralAmount);\nawait newKrAsset.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: collateralAmount.mul(4)\n    }\n});\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(newKrAsset.address, await (0, _collaterals.getCollateralConfig)(newKrAsset.contract, newKrAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), newKrAsset.priceFeed.address));\nconst depositAmount = collateralAmount.div(2);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, newKrAsset.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait newKrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositedCollateralAssets(arbitraryUser.address)).to.deep.equal([\n    newKrAsset.address\n]);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, newKrAsset.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "3b8fa946-d02d-4be1-ae62-ee3e5da6112d",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 2263,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const arbitraryUser = _hardhat.default.users.testUserSeven;\nconst collateralAmount = (0, _lib.toBig)(100);\nconst newKrAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krTSLA\",\n    symbol: \"krTSLA\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000\n});\nawait newKrAsset.setBalance(arbitraryUser, collateralAmount);\nawait newKrAsset.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: collateralAmount.mul(4)\n    }\n});\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(newKrAsset.address, await (0, _collaterals.getCollateralConfig)(newKrAsset.contract, newKrAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), newKrAsset.priceFeed.address));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, newKrAsset.address, 9e11.toString())).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "16d5dd3a-352f-4031-a1bf-b84c4de3b575",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 92,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address))).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "ef304c9d-16a9-4666-b296-f73406848880",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 91,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)((0, _lib.fromBig)(depositorBalanceAfter)).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "3a95e073-4336-4d71-93c9-9ebda77e0ba7",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 95,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "2bebc71b-460f-46d8-9507-441f9aeeb3db",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 1476,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"Collateral18Dec\",\n    price: _testutils.defaultOraclePrice,\n    factor: 1,\n    decimals: _testutils.defaultDecimals\n};\nconst { contract , mocks  } = await (0, _collaterals.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Deposit batch of first collateral type\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address,\n    contract.address\n]);",
                      "err": {},
                      "uuid": "c4919e65-7f12-42d1-b469-3d50f80cdb26",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralDeposited\");\n(0, _chai.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "80d74fd3-df9a-45b7-a554-6d2d74217d26",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(_errors.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "51ef00bc-d0a7-4e08-8fbc-fedcd91c2c73",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "5f1f29ee-6de9-46b6-bee5-38f49d57a7e3",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 87,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer , devTwo , extOne  } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "83519dc1-7c6a-4be1-b1e6-01269ba31a1a",
                      "parentUUID": "e04dbfce-f627-4d72-8701-06c4ab271e5e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b8fa946-d02d-4be1-ae62-ee3e5da6112d",
                    "16d5dd3a-352f-4031-a1bf-b84c4de3b575",
                    "ef304c9d-16a9-4666-b296-f73406848880",
                    "3a95e073-4336-4d71-93c9-9ebda77e0ba7",
                    "2bebc71b-460f-46d8-9507-441f9aeeb3db",
                    "c4919e65-7f12-42d1-b469-3d50f80cdb26",
                    "80d74fd3-df9a-45b7-a554-6d2d74217d26",
                    "51ef00bc-d0a7-4e08-8fbc-fedcd91c2c73",
                    "5f1f29ee-6de9-46b6-bee5-38f49d57a7e3",
                    "83519dc1-7c6a-4be1-b1e6-01269ba31a1a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6555,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "4daa6643-69dc-4e9e-a932-39c89498ce5c",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 30,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "c974a0a9-e508-4297-84d9-c1140a5cae9a",
                      "parentUUID": "4daa6643-69dc-4e9e-a932-39c89498ce5c",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "34a4d3ed-4e9b-4b28-af5a-8405f1a3a4c1",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 133,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "f535d404-4a1f-474b-871d-16111e835647",
                          "parentUUID": "34a4d3ed-4e9b-4b28-af5a-8405f1a3a4c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 111,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "7063d994-3cbe-42d3-86ee-25386961cf58",
                          "parentUUID": "34a4d3ed-4e9b-4b28-af5a-8405f1a3a4c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 153,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "5284ef91-8bc4-4a26-bc88-1e1cf8e4a23f",
                          "parentUUID": "34a4d3ed-4e9b-4b28-af5a-8405f1a3a4c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralWithdrawn\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "d5cd80f9-ce1f-45b3-888c-25f3c8fc4f3f",
                          "parentUUID": "34a4d3ed-4e9b-4b28-af5a-8405f1a3a4c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 42,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "bddec6d3-b6d4-44fb-be2b-8a72bf047204",
                          "parentUUID": "34a4d3ed-4e9b-4b28-af5a-8405f1a3a4c1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "22515ae8-30b3-43fe-b78f-f0bcdc5a858d",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 140,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, _lib.toBig)(100);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _hardhat.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "e3ac6319-5f4d-4af5-8004-af2b7462b438",
                              "parentUUID": "22515ae8-30b3-43fe-b78f-f0bcdc5a858d",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 335,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _lib.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).gte(accountMinCollateralValue)).to.be.true;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "867b9f05-645b-4f1d-be1b-218d6bf49682",
                              "parentUUID": "22515ae8-30b3-43fe-b78f-f0bcdc5a858d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 155,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = _hardhat.default.users.userFour;\nawait this.collateral.setBalance(user, _ethers.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, _lib.toBig)(1000));\nawait this.collateral.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1000),\n    user\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1010),\n    user\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, _lib.toBig)(1000));",
                              "err": {},
                              "uuid": "2229c5e7-4c36-4622-83fd-9018da9ff3f5",
                              "parentUUID": "22515ae8-30b3-43fe-b78f-f0bcdc5a858d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 28,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(_errors.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "456a4e4e-81d6-4fe5-9918-3b3c7efa8964",
                              "parentUUID": "22515ae8-30b3-43fe-b78f-f0bcdc5a858d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 208,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "8e74787b-ea38-4845-b7f6-13ebbd0b4407",
                              "parentUUID": "22515ae8-30b3-43fe-b78f-f0bcdc5a858d",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 23,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(_errors.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "bcddf800-d28c-4822-9d99-3814738d46d7",
                              "parentUUID": "22515ae8-30b3-43fe-b78f-f0bcdc5a858d",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "867b9f05-645b-4f1d-be1b-218d6bf49682",
                            "2229c5e7-4c36-4622-83fd-9018da9ff3f5",
                            "456a4e4e-81d6-4fe5-9918-3b3c7efa8964",
                            "8e74787b-ea38-4845-b7f6-13ebbd0b4407",
                            "bcddf800-d28c-4822-9d99-3814738d46d7"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 749,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "f535d404-4a1f-474b-871d-16111e835647",
                        "7063d994-3cbe-42d3-86ee-25386961cf58",
                        "5284ef91-8bc4-4a26-bc88-1e1cf8e4a23f",
                        "d5cd80f9-ce1f-45b3-888c-25f3c8fc4f3f",
                        "bddec6d3-b6d4-44fb-be2b-8a72bf047204"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 508,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "8ed6a49b-d838-44eb-b4b9-05390f705222",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 233,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "ec5abe28-0bbd-466e-b5a2-bfbafa8fc422",
                      "parentUUID": "8ed6a49b-d838-44eb-b4b9-05390f705222",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1697507f-6e99-4974-877e-6ad8c87e450e",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 103,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "5f07836d-2ffa-4f3a-849d-6befaeb11094",
                          "parentUUID": "1697507f-6e99-4974-877e-6ad8c87e450e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 104,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "4ca47165-133b-4b4d-a6d0-d0f938a01c60",
                          "parentUUID": "1697507f-6e99-4974-877e-6ad8c87e450e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 105,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "ee9c4610-d1a1-4e13-a5ea-9ada757d426a",
                          "parentUUID": "1697507f-6e99-4974-877e-6ad8c87e450e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 99,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "52126982-e1c8-4ca3-9bae-9704d2d97750",
                          "parentUUID": "1697507f-6e99-4974-877e-6ad8c87e450e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 137,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "36aa5b1f-0a95-46df-9ac6-0ee73b2bb24f",
                          "parentUUID": "1697507f-6e99-4974-877e-6ad8c87e450e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 136,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "63b4d1dd-114d-4ef5-9f04-69cbfc5c85ba",
                          "parentUUID": "1697507f-6e99-4974-877e-6ad8c87e450e",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5f07836d-2ffa-4f3a-849d-6befaeb11094",
                        "4ca47165-133b-4b4d-a6d0-d0f938a01c60",
                        "ee9c4610-d1a1-4e13-a5ea-9ada757d426a",
                        "52126982-e1c8-4ca3-9bae-9704d2d97750",
                        "36aa5b1f-0a95-46df-9ac6-0ee73b2bb24f",
                        "63b4d1dd-114d-4ef5-9f04-69cbfc5c85ba"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 684,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "140dcfaf-02ad-4952-b914-aa92ea5b7bae",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 186,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "9eb9cdb6-8f51-44d2-9019-a2748955a93a",
                          "parentUUID": "140dcfaf-02ad-4952-b914-aa92ea5b7bae",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 184,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "1621ead2-bc70-4af1-9894-33ffebdb59aa",
                          "parentUUID": "140dcfaf-02ad-4952-b914-aa92ea5b7bae",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 139,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "120f410d-e0e6-4258-ad82-4855c884eebe",
                          "parentUUID": "140dcfaf-02ad-4952-b914-aa92ea5b7bae",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 133,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "6b9f0247-e99f-4817-8520-dc98a6826902",
                          "parentUUID": "140dcfaf-02ad-4952-b914-aa92ea5b7bae",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 255,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "fb3b1144-c0cc-4150-8313-a46763fb39aa",
                          "parentUUID": "140dcfaf-02ad-4952-b914-aa92ea5b7bae",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 248,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "30e92339-36ce-4c22-aeea-a68661258845",
                          "parentUUID": "140dcfaf-02ad-4952-b914-aa92ea5b7bae",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "9eb9cdb6-8f51-44d2-9019-a2748955a93a",
                        "1621ead2-bc70-4af1-9894-33ffebdb59aa",
                        "120f410d-e0e6-4258-ad82-4855c884eebe",
                        "6b9f0247-e99f-4817-8520-dc98a6826902",
                        "fb3b1144-c0cc-4150-8313-a46763fb39aa",
                        "30e92339-36ce-4c22-aeea-a68661258845"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1145,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "675348f3-e605-4442-ad4e-0ec7cc06c6b2",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 234,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "7b777b32-3a5b-44a6-896f-7be301da375d",
                      "parentUUID": "675348f3-e605-4442-ad4e-0ec7cc06c6b2",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "9c449972-f247-4e29-a97b-1870507debee",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 265,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "0c4f3ecb-0f03-4342-9c22-ae6cda28db6d",
                          "parentUUID": "9c449972-f247-4e29-a97b-1870507debee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 644,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "69235ee8-9037-4e95-befe-145fa4e6a301",
                          "parentUUID": "9c449972-f247-4e29-a97b-1870507debee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 252,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "234782ef-3d05-422d-ac48-3e6fa874d92b",
                          "parentUUID": "9c449972-f247-4e29-a97b-1870507debee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 267,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "642b7c54-d782-4a21-be17-6cb96a510b15",
                          "parentUUID": "9c449972-f247-4e29-a97b-1870507debee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 312,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "6568d266-05c4-4fda-a4a1-250f542a4d1a",
                          "parentUUID": "9c449972-f247-4e29-a97b-1870507debee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 395,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "1c9ff979-abb9-41b8-8d44-62a0327a868a",
                          "parentUUID": "9c449972-f247-4e29-a97b-1870507debee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 193,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "d0a2cb68-33df-4511-9782-50637d8fc87a",
                          "parentUUID": "9c449972-f247-4e29-a97b-1870507debee",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0c4f3ecb-0f03-4342-9c22-ae6cda28db6d",
                        "69235ee8-9037-4e95-befe-145fa4e6a301",
                        "234782ef-3d05-422d-ac48-3e6fa874d92b",
                        "642b7c54-d782-4a21-be17-6cb96a510b15",
                        "6568d266-05c4-4fda-a4a1-250f542a4d1a",
                        "1c9ff979-abb9-41b8-8d44-62a0327a868a",
                        "d0a2cb68-33df-4511-9782-50637d8fc87a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2328,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "d6f1a098-bcff-4139-874b-96782a66c101",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 244,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "a80cf238-e52b-4e69-8120-69b50af58f67",
                          "parentUUID": "d6f1a098-bcff-4139-874b-96782a66c101",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 251,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "86c71d4e-5f7d-4b45-8eb7-3d59fa3f4257",
                          "parentUUID": "d6f1a098-bcff-4139-874b-96782a66c101",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 244,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "a7791219-7c39-4b05-8e70-6750cfb08eac",
                          "parentUUID": "d6f1a098-bcff-4139-874b-96782a66c101",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 527,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "9f327490-8333-4f86-a0dc-7a974a25785d",
                          "parentUUID": "d6f1a098-bcff-4139-874b-96782a66c101",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 372,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "1d42273c-6fb1-46d8-8164-7443b3e3c08e",
                          "parentUUID": "d6f1a098-bcff-4139-874b-96782a66c101",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 373,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "aaecdd08-e2b8-43ba-b38a-9b5c94c58af4",
                          "parentUUID": "d6f1a098-bcff-4139-874b-96782a66c101",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 422,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.bignumber.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "e64b9488-d295-434d-bd21-2aeef9c2c1ee",
                          "parentUUID": "d6f1a098-bcff-4139-874b-96782a66c101",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a80cf238-e52b-4e69-8120-69b50af58f67",
                        "86c71d4e-5f7d-4b45-8eb7-3d59fa3f4257",
                        "a7791219-7c39-4b05-8e70-6750cfb08eac",
                        "9f327490-8333-4f86-a0dc-7a974a25785d",
                        "1d42273c-6fb1-46d8-8164-7443b3e3c08e",
                        "aaecdd08-e2b8-43ba-b38a-9b5c94c58af4",
                        "e64b9488-d295-434d-bd21-2aeef9c2c1ee"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2433,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "5d02a704-abac-4c26-b6f3-b21a298d2d33",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f003ebf6-3c69-4dee-a605-c1a24ce511af",
              "parentUUID": "5d02a704-abac-4c26-b6f3-b21a298d2d33",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 270,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18\n};\nthis.collateral = hre.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: _testutils.defaultOpenFee\n};\nthis.krAsset = hre.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, hre.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle));\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hre.users.liquidator, (0, _lib.toBig)(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.liquidator.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(100000000)\n    }\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hre.users.userOne, (0, _lib.toBig)(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(this.defaultDepositAmount)\n    }\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral\n});\n// Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset\n});",
              "err": {},
              "uuid": "82d37c8b-329c-47c8-85a0-0cc2b0627526",
              "parentUUID": "5d02a704-abac-4c26-b6f3-b21a298d2d33",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "456dc9b1-b7f7-458e-9478-940ec945ab6b",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 1400,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmountBig18 = (0, _lib.toBig)(this.defaultDepositAmount * 100);\nconst depositAmountBig8 = (0, _lib.toBig)(this.defaultDepositAmount * 100, 8);\nuser = hre.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hre.users.userOne, depositAmountBig18);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig18\n    }\n});\nnewCollateral = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    decimals: 8,\n    price: 10,\n    factor: 0.9\n});\nawait newCollateral.setBalance(hre.users.userOne, depositAmountBig8);\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig8\n    }\n});",
                  "err": {},
                  "uuid": "d8283994-3c0d-47d5-b8b3-db315cd7c9f6",
                  "parentUUID": "456dc9b1-b7f7-458e-9478-940ec945ab6b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 1",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 1",
                  "timedOut": false,
                  "duration": 743,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [deposits, borrows] = [\n    (0, _lib.toBig)(20),\n    (0, _lib.toBig)(10)\n];\nawait this.collateral.setBalance(hre.users.userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.false;\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(2);\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(1);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(hre.users.userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalc = await (0, _liquidations.getExpectedMaxLiq)(hre.users.userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalc).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "146a9bf0-20f7-4760-993b-429e46584dca",
                  "parentUUID": "456dc9b1-b7f7-458e-9478-940ec945ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 4854,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateMinimumDebtValue(0);\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(10)\n];\nconst borrows = (0, _lib.toBig)(10);\nconst collateralPrice = 10;\nthis.collateral.setPrice(collateralPrice);\nconst collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral18Dec\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nawait this.collateral.setBalance(userThree, deposits1);\nawait collateral2.setBalance(userThree, deposits2);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits2,\n    asset: collateral2\n});\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits1,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nconst cr = await (0, _liquidations.getCR)(userThree.address);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n(0, _chai.expect)(cr).to.be.equal(2);\nawait this.collateral.update({\n    factor: 0.25,\n    name: \"updated\"\n});\nthis.collateral.setPrice(5);\nconst expectedCR = 1.125;\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(expectedCR, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nconst maxLiquidatableValueC1 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalcC1 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalcC1).to.be.closeTo(maxLiquidatableValueC1, USD_DELTA);\nconst maxLiquidatableValueC2 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, collateral2.address);\nconst MLCalcC2 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(MLCalcC2).to.be.closeTo(maxLiquidatableValueC2, USD_DELTA);\n(0, _chai.expect)(maxLiquidatableValueC2.gt(maxLiquidatableValueC1)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                  "err": {},
                  "uuid": "aa88b07e-f77b-4bd4-904b-527460c8b82a",
                  "parentUUID": "456dc9b1-b7f7-458e-9478-940ec945ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with single market cdp",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with single market cdp",
                  "timedOut": false,
                  "duration": 403,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nthis.collateral.setPrice(collateralPriceAfter * 0.7);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "bc4f9dcb-9223-4dff-8ea5-8653eb4d958d",
                  "parentUUID": "456dc9b1-b7f7-458e-9478-940ec945ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 844,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: (0, _lib.toBig)(0.1, 8),\n    asset: newCollateral\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, newCollateral);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, newCollateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral).to.be.closeTo(maxLiquidatableValueNewCollateral, USD_DELTA);",
                  "err": {},
                  "uuid": "e27475ed-8a6e-4a09-bd34-641b0ce23561",
                  "parentUUID": "456dc9b1-b7f7-458e-9478-940ec945ab6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "146a9bf0-20f7-4760-993b-429e46584dca",
                "aa88b07e-f77b-4bd4-904b-527460c8b82a",
                "bc4f9dcb-9223-4dff-8ea5-8653eb4d958d",
                "e27475ed-8a6e-4a09-bd34-641b0ce23561"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6844,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "ad6f4186-acd0-49df-8ccd-c7f040850f80",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "844ee33f-6f48-4170-b777-58662c3a143c",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 228,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\n(0, _chai.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price > (0, _lib.fromBig)(minCollateralUSD, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)((0, _lib.fromBig)(newCollateralOraclePrice, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "c5eb6d08-1aea-487a-9636-6d015868735a",
                      "parentUUID": "844ee33f-6f48-4170-b777-58662c3a143c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c5eb6d08-1aea-487a-9636-6d015868735a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 228,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hre.users.userTwo.address]: (0, _lib.toBig)(10000)\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "092bd29d-c24b-4397-b0c8-4865cb333e70",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 469,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = (0, _lib.toBig)(Number(maxLiq.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "b0930e67-5707-4ec0-8cea-812ef4bb01c6",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to LT with a single CDP",
                      "timedOut": false,
                      "duration": 1214,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\nthis.collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\nconst MLM = (0, _lib.fromBig)(await hre.Diamond.maxLiquidationMultiplier(), 18);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4 * MLM, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "7155b991-fb48-40a6-b4f4-3aa029cc43c0",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to LT with multiple CDPs",
                      "timedOut": false,
                      "duration": 3959,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(5)\n];\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait Promise.all([\n    await this.collateral.setBalance(userThree, deposits1),\n    await collateral2.setBalance(userThree, deposits2),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits1,\n        asset: this.collateral\n    }),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits2,\n        asset: collateral2\n    }),\n    await (0, _krassets.mintKrAsset)({\n        user: userThree,\n        amount: borrows,\n        asset: this.krAsset\n    })\n]);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n// seemingly random order of updates to test that the liquidation works regardless\nthis.collateral.setPrice(6.25);\nawait collateral2.update({\n    factor: 0.975,\n    name: \"updated\"\n});\nawait this.krAsset.update({\n    factor: 1.05,\n    name: \"updated\",\n    closeFee: 0.02,\n    openFee: 0,\n    supplyLimit: 1000000\n});\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.05);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral, true);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4, CR_DELTA);\n            // expect(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "67734efe-d27a-40f0-a8d9-7cdec8f09c5c",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 392,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst collateralIndex = await hre.Diamond.getDepositedCollateralAssetIndex(hre.users.userOne.address, this.collateral.address);\nawait this.krAsset.update({\n    name: \"jesus\",\n    factor: 1.5,\n    supplyLimit: 10000000,\n    closeFee: 0.05,\n    openFee: 0\n});\nconst mintedKreskoAssetIndex = await hre.Diamond.getMintedKreskoAssetsIndex(hre.users.userOne.address, this.krAsset.address);\nconst maxLiqValue = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst repayAmount = maxLiqValue.wadDiv(await this.krAsset.getPrice());\nconst tx = await (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, collateralIndex, false);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"LiquidationOccurred\");\n(0, _chai.expect)(event.account).to.equal(hre.users.userOne.address);\n(0, _chai.expect)(event.liquidator).to.equal(hre.users.userTwo.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "069f84de-73b0-4a75-bb01-8dc344e421dc",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 222,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(currUserOneCollateralAmount) * newCollateralPrice > (0, _lib.fromBig)(minimumCollateralUSDValueRequired, 8));\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "77af650f-a7e4-451b-93a4-8bf6e672c728",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "8c84b1f0-7551-4462-9a0b-1f7f30438cc1",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _lib.toBig)(1));\n// Liquidation should fail\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "ab1edd1b-5973-46e1-a955-cf417315339d",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 347,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidationUSD = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst repaymentAmount = maxLiquidationUSD.add(1e9.toString()).wadDiv(await this.krAsset.getPrice());\n// Ensure liquidation cannot happen\nconst tx = await (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0, false);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"LiquidationOccurred\");\nconst assetInfo = await this.collateral.kresko();\nconst expectedSeizedCollateralAmount = maxLiquidationUSD.wadMul(_ethers.BigNumber.from(assetInfo.liquidationIncentive)).wadDiv(await this.collateral.getPrice());\n(0, _chai.expect)(event.account).to.equal(hre.users.userOne.address);\n(0, _chai.expect)(event.liquidator).to.equal(hre.users.userTwo.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.repayAmount).to.not.equal(repaymentAmount);\n(0, _chai.expect)(event.repayAmount).to.be.closeTo(maxLiquidationUSD.wadDiv(await this.krAsset.getPrice()), 1e12);\n(0, _chai.expect)(event.collateralSent).to.be.closeTo(expectedSeizedCollateralAmount, 1e12);",
                      "err": {},
                      "uuid": "24cd7633-028d-4345-abc2-93604a3714fc",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 292,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hre.Diamond.getAccountCollateralValue(hre.users.userOne.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "64c1b8e3-c691-47ae-8e84-fa883a29303a",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 210,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "54ea9f31-7ba5-46e4-b602-99a9326f1fa4",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 216,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(hre.users.userTwo).approve(hre.Diamond.address, repayAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "8bcf7771-5b0a-48cd-9051-55caea99d083",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "b0a913f2-457f-4119-913a-0ee6b8049106",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow seized amount to underflow without liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow seized amount to underflow without liquidators permission",
                      "timedOut": false,
                      "duration": 908,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nthis.collateral.setPrice(2.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait this.collateral.setBalance(hre.users.liquidator, deposits.mul(1000));\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userThree, this.krAsset, this.collateral);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    amount: deposits.mul(1000),\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.liquidator,\n    amount: liqAmount,\n    asset: this.krAsset\n});\nconst allowSeizeUnderflow = false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userThree.address, this.krAsset.address, liqAmount, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userThree.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userThree.address, this.collateral.address), allowSeizeUnderflow)).to.be.revertedWith(_errors.Error.SEIZED_COLLATERAL_UNDERFLOW);",
                      "err": {},
                      "uuid": "d4be0c94-7594-449b-bd7e-5cf44d98b61a",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow seized amount to underflow with liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow seized amount to underflow with liquidators permission",
                      "timedOut": false,
                      "duration": 1364,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nthis.collateral.setPrice(2.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait this.collateral.setBalance(hre.users.liquidator, deposits.mul(1000));\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userThree, this.krAsset, this.collateral);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    amount: deposits.mul(1000),\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.liquidator,\n    amount: liqAmount,\n    asset: this.krAsset\n});\nconst allowSeizeUnderflow = true;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userThree.address, this.krAsset.address, liqAmount, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userThree.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userThree.address, this.collateral.address), allowSeizeUnderflow)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "9da25edd-a4cc-4396-b19a-fc164dda9ae2",
                      "parentUUID": "f02f8d5c-b935-4f8b-80dd-ff0a48b5bf51",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b0930e67-5707-4ec0-8cea-812ef4bb01c6",
                    "7155b991-fb48-40a6-b4f4-3aa029cc43c0",
                    "67734efe-d27a-40f0-a8d9-7cdec8f09c5c",
                    "069f84de-73b0-4a75-bb01-8dc344e421dc",
                    "77af650f-a7e4-451b-93a4-8bf6e672c728",
                    "8c84b1f0-7551-4462-9a0b-1f7f30438cc1",
                    "ab1edd1b-5973-46e1-a955-cf417315339d",
                    "24cd7633-028d-4345-abc2-93604a3714fc",
                    "64c1b8e3-c691-47ae-8e84-fa883a29303a",
                    "54ea9f31-7ba5-46e4-b602-99a9326f1fa4",
                    "8bcf7771-5b0a-48cd-9051-55caea99d083",
                    "b0a913f2-457f-4119-913a-0ee6b8049106",
                    "d4be0c94-7594-449b-bd7e-5cf44d98b61a",
                    "9da25edd-a4cc-4396-b19a-fc164dda9ae2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9762,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 1805,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hre.users.testUserEight;\nuserToLiquidateTwo = hre.users.testUserNine;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits\n});\nawait (0, _testutils.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _testutils.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nconst mcr = (0, _lib.fromBig)(await hre.Diamond.minimumCollateralizationRatio(), 8);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidate.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidateTwo.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "48b5e16f-aae5-4ef2-9095-0ec17e947d2a",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 540,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "72410bfa-062d-45cf-b73f-9b01a4f14216",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 247,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "9e1d4103-7c56-41dd-9232-bc3d624c84dd",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 1420,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "e631c6ca-3c5a-4002-9f4b-7a39fe184ed9",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 1382,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "45c4e7f0-93db-4e4e-818c-c5395598d9c0",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 3352,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 10;\nawait this.collateral.setBalance(userToLiquidate, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).depositCollateral(userToLiquidate.address, this.collateral.address, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).mintKreskoAsset(userToLiquidate.address, (await (0, _krassets.addMockKreskoAsset)()).address, (0, _lib.toBig)(65));\nthis.krAsset.setPrice(newPrice);\nconst deposits = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\nconst debt = await hre.Diamond.kreskoAssetDebt(userToLiquidate.address, this.krAsset.address);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userToLiquidate, this.krAsset, this.krAsset);\n(0, _chai.expect)(deposits).to.equal(liqAmount);\n(0, _chai.expect)(debt).to.gte(liqAmount);\nawait this.krAsset.setBalance(hre.users.liquidator, debt);\nconst assetInfoCollateral = await hre.Diamond.collateralAsset(this.krAsset.address);\nconst assetInfoKr = await hre.Diamond.kreskoAsset(this.krAsset.address);\nconst liquidationAmount = liqAmount.add(\"263684912200000000\").wadDiv(assetInfoCollateral.liquidationIncentive).wadMul(_ethers.BigNumber.from(_lib.WAD).sub(assetInfoKr.closeFee)).add(_lib.WAD);\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, liquidationAmount, this.krAsset.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.krAsset.address), false);\nconst depositsAfter = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "c5ee7bc4-9ee4-4660-a75d-069d73671385",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals to 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals to 0",
                      "timedOut": false,
                      "duration": 3284,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 10;\nawait this.collateral.setBalance(userToLiquidate, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).depositCollateral(userToLiquidate.address, this.collateral.address, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).mintKreskoAsset(userToLiquidate.address, (await (0, _krassets.addMockKreskoAsset)()).address, (0, _lib.toBig)(65));\nthis.krAsset.setPrice(newPrice);\nconst deposits = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\nconst debt = await hre.Diamond.kreskoAssetDebt(userToLiquidate.address, this.krAsset.address);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userToLiquidate, this.krAsset, this.krAsset);\n(0, _chai.expect)(deposits).to.equal(liqAmount);\n(0, _chai.expect)(debt).to.gte(liqAmount);\nawait this.krAsset.setBalance(hre.users.liquidator, debt);\nconst assetInfoCollateral = await hre.Diamond.collateralAsset(this.krAsset.address);\nconst assetInfoKr = await hre.Diamond.kreskoAsset(this.krAsset.address);\nconst liquidationAmount = liqAmount.add(\"263684912400000000\").wadDiv(assetInfoCollateral.liquidationIncentive).wadMul(_ethers.BigNumber.from(_lib.WAD).sub(assetInfoKr.closeFee)).add(_lib.WAD);\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, liquidationAmount, this.krAsset.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.krAsset.address), false);\nconst depositsAfter = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\n(0, _chai.expect)(depositsAfter).to.equal(0);",
                      "err": {},
                      "uuid": "a927652b-b78c-4041-9c78-49163b3814fa",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 5701,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "8c5e19f9-ce03-4577-9a80-7682696e28ab",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 5654,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "ae800870-565e-4e75-a7b4-55aca3de68c5",
                      "parentUUID": "8860d5d6-6865-422a-8bb3-1678b09148e6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "72410bfa-062d-45cf-b73f-9b01a4f14216",
                    "9e1d4103-7c56-41dd-9232-bc3d624c84dd",
                    "e631c6ca-3c5a-4002-9f4b-7a39fe184ed9",
                    "45c4e7f0-93db-4e4e-818c-c5395598d9c0",
                    "c5ee7bc4-9ee4-4660-a75d-069d73671385",
                    "a927652b-b78c-4041-9c78-49163b3814fa",
                    "8c5e19f9-ce03-4577-9a80-7682696e28ab",
                    "ae800870-565e-4e75-a7b4-55aca3de68c5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 21580,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8641017b-749a-41ee-94dd-e0a19f6cbddc",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ae3adb5e-a365-497d-a0bb-0b4fd3f5ee10",
              "parentUUID": "8641017b-749a-41ee-94dd-e0a19f6cbddc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 64,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\n// Load account with collateral\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.setBalance(_hardhat.default.users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, _collaterals.depositCollateral)({\n    amount: 10000,\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral\n});",
              "err": {},
              "uuid": "207df75c-07b2-4a3f-9e69-6a4503e81ff5",
              "parentUUID": "8641017b-749a-41ee-94dd-e0a19f6cbddc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ff6863a-d669-42fa-b8bd-394f423ce9f5",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "bc322f28-999d-4916-a6dd-395f69130e93",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 178,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "f5de2c14-98e5-4829-b889-736884fa6d6c",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 356,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(50);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(50);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "feadabfc-f4b0-4b26-9ce5-f4b0f2e11ee0",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 2636,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: 0\n};\nconst { contract: secondKreskoAsset  } = await (0, _krassets.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(20);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address,\n    secondKreskoAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, secondKreskoAsset.address);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "af5f9dc5-42d5-4b6b-a25f-7466b818c72f",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 207,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _lib.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)((0, _lib.fromBig)(mintAmountUSDValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "56f41758-0888-47c5-afe6-4dd21a892bbe",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 207,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "7864b45f-06e7-4b01-8f01-e7aabf714a56",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 105,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, _lib.toBig)(500);\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetMinted\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "a11c099d-2044-4871-bffe-7a1de0b9c769",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(1);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "db21dbaa-864b-4894-b21d-5ba574edb11e",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 184,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "0163d41c-699f-4aa9-9ed1-cd10e1f748d3",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "4048de3b-746b-4d95-b9f6-ae05a6b396db",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 89,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, _lib.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, _lib.toBig)(mcrAmount + 1);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "29750871-f8fc-4150-85aa-d20847eb3cf7",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).depositCollateral(_hardhat.default.users.userOne.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await _hardhat.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, _lib.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(overSupplyLimit))).to.be.revertedWith(_errors.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "34aaba02-c445-4372-87e8-e410f6a29993",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "c9ddbbf9-40a5-4868-8c3e-601959735494",
                      "parentUUID": "bc322f28-999d-4916-a6dd-395f69130e93",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f5de2c14-98e5-4829-b889-736884fa6d6c",
                    "feadabfc-f4b0-4b26-9ce5-f4b0f2e11ee0",
                    "af5f9dc5-42d5-4b6b-a25f-7466b818c72f",
                    "56f41758-0888-47c5-afe6-4dd21a892bbe",
                    "7864b45f-06e7-4b01-8f01-e7aabf714a56",
                    "a11c099d-2044-4871-bffe-7a1de0b9c769",
                    "db21dbaa-864b-4894-b21d-5ba574edb11e",
                    "0163d41c-699f-4aa9-9ed1-cd10e1f748d3",
                    "4048de3b-746b-4d95-b9f6-ae05a6b396db",
                    "29750871-f8fc-4150-85aa-d20847eb3cf7",
                    "34aaba02-c445-4372-87e8-e410f6a29993"
                  ],
                  "failures": [],
                  "pending": [
                    "c9ddbbf9-40a5-4868-8c3e-601959735494"
                  ],
                  "skipped": [],
                  "duration": 4123,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "2c6bc1f8-e801-4941-a7a4-5a42d808e129",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "cba3cf0c-28da-45bb-be03-bac131a469f9",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 142,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "a274b729-35bd-4c9f-b1b2-5a4ca834c88b",
                          "parentUUID": "cba3cf0c-28da-45bb-be03-bac131a469f9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 142,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "14ad4e9c-3a15-4f12-8d81-13a024cc6ab1",
                          "parentUUID": "cba3cf0c-28da-45bb-be03-bac131a469f9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 139,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "afbbebb7-db20-42b9-85e1-a29a87e4e4d3",
                          "parentUUID": "cba3cf0c-28da-45bb-be03-bac131a469f9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 142,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "4bb23b23-621d-44b5-aa1d-6f3a6da5cbaa",
                          "parentUUID": "cba3cf0c-28da-45bb-be03-bac131a469f9",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a274b729-35bd-4c9f-b1b2-5a4ca834c88b",
                        "14ad4e9c-3a15-4f12-8d81-13a024cc6ab1",
                        "afbbebb7-db20-42b9-85e1-a29a87e4e4d3",
                        "4bb23b23-621d-44b5-aa1d-6f3a6da5cbaa"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 565,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "b2583e12-d546-4b3e-8db4-6f651cb1e921",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 197,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "637ffbe1-5da2-4201-a532-a4b7e4645741",
                          "parentUUID": "b2583e12-d546-4b3e-8db4-6f651cb1e921",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 196,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "784c9bdb-2c0e-4f4f-b2ff-10bdba2a9ed0",
                          "parentUUID": "b2583e12-d546-4b3e-8db4-6f651cb1e921",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 201,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "725a17ee-c097-4667-a56d-d3a34606e746",
                          "parentUUID": "b2583e12-d546-4b3e-8db4-6f651cb1e921",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 192,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "2a4e0895-9852-4d4a-9728-680753b65096",
                          "parentUUID": "b2583e12-d546-4b3e-8db4-6f651cb1e921",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "637ffbe1-5da2-4201-a532-a4b7e4645741",
                        "784c9bdb-2c0e-4f4f-b2ff-10bdba2a9ed0",
                        "725a17ee-c097-4667-a56d-d3a34606e746",
                        "2a4e0895-9852-4d4a-9728-680753b65096"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 786,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "45b466a9-a812-4688-bc09-61a2d90b415c",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 448,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(valueBeforeRebase);\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "25cf3763-d932-4efa-8cf7-215aaf40b6b8",
                          "parentUUID": "45b466a9-a812-4688-bc09-61a2d90b415c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 439,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, this.krAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "b2d15f41-1377-4afe-a63e-18f5de330788",
                          "parentUUID": "45b466a9-a812-4688-bc09-61a2d90b415c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "25cf3763-d932-4efa-8cf7-215aaf40b6b8",
                        "b2d15f41-1377-4afe-a63e-18f5de330788"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 887,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "959373b7-0f61-4f71-b103-969f8ff244f2",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 554,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, _lib.toBig)(20);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userThree.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userThree.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.users.userThree.address)).to.equal(this.initialBalance);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).depositCollateral(_hardhat.default.users.userThree.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "6be35d41-6704-451c-9ab6-d91fd9a16deb",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 169,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "71d972a5-86e8-42d9-92de-255e4f2fe5f6",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "734b4d5e-632e-472b-b70c-4e928d3581ea",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 221,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userThree.address);\n(0, _chai.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "6bc0fc9a-e1ee-4696-a797-74c01299c5cf",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "5b82914b-b605-4372-9bb6-95b65b3164a5",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 213,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, _lib.fromBig)(await _hardhat.default.Diamond.minimumDebtValue(), 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = (0, _lib.toBig)((0, _lib.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "3da0a377-6886-4fee-9c2f-84c4f853caa7",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 115,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetBurned\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "9d24cce1-2deb-4902-9424-907ad2b9183f",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 246,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "623cc57a-4ebc-4afb-84ad-3014392cb48b",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(_errors.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "26e962dd-d898-4f5f-b0a9-9a0f24cdfb78",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "0cd0717a-5514-4bae-960e-d4734b80b70d",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 55,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add((0, _lib.toBig)(1));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "bdd99fc7-47f6-4852-a44e-0f3a72ec980e",
                      "parentUUID": "959373b7-0f61-4f71-b103-969f8ff244f2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "b7f17d14-7b65-4ba5-94f8-6d2745acbd17",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 377,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, _lib.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._testutils.defaultKrAssetArgs,\n    openFee\n});\nconst mintAmount = (0, _lib.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"OpenFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await _hardhat.default.Diamond.calcExpectedFee(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount, _testutils.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, _chai.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "cba89cbe-f0f1-4939-add3-33ed16ce698f",
                          "parentUUID": "b7f17d14-7b65-4ba5-94f8-6d2745acbd17",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "cba89cbe-f0f1-4939-add3-33ed16ce698f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 377,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "b5a81dcd-1d1b-4cdc-80fe-11428d8685d2",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 182,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _lib.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, _lib.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "d73286de-e60a-451b-a0f5-8ffc2f3cb84b",
                          "parentUUID": "b5a81dcd-1d1b-4cdc-80fe-11428d8685d2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 713,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "4c40974f-e968-4e76-b7d3-7ee8b30adca0",
                          "parentUUID": "b5a81dcd-1d1b-4cdc-80fe-11428d8685d2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 706,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "dd2acb5c-ced9-4e2f-80cf-0172491256b1",
                          "parentUUID": "b5a81dcd-1d1b-4cdc-80fe-11428d8685d2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d73286de-e60a-451b-a0f5-8ffc2f3cb84b",
                        "4c40974f-e968-4e76-b7d3-7ee8b30adca0",
                        "dd2acb5c-ced9-4e2f-80cf-0172491256b1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1601,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "71d972a5-86e8-42d9-92de-255e4f2fe5f6",
                    "6bc0fc9a-e1ee-4696-a797-74c01299c5cf",
                    "3da0a377-6886-4fee-9c2f-84c4f853caa7",
                    "9d24cce1-2deb-4902-9424-907ad2b9183f",
                    "623cc57a-4ebc-4afb-84ad-3014392cb48b",
                    "26e962dd-d898-4f5f-b0a9-9a0f24cdfb78",
                    "0cd0717a-5514-4bae-960e-d4734b80b70d",
                    "bdd99fc7-47f6-4852-a44e-0f3a72ec980e"
                  ],
                  "failures": [],
                  "pending": [
                    "734b4d5e-632e-472b-b70c-4e928d3581ea",
                    "5b82914b-b605-4372-9bb6-95b65b3164a5"
                  ],
                  "skipped": [],
                  "duration": 1082,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "a7f654f3-69ec-41e1-8f10-cad272d73654",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 106,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmountInt,\n    user: _hardhat.default.users.userOne\n});",
                      "err": {},
                      "uuid": "80577d94-732d-4902-9bba-aa2b2df62324",
                      "parentUUID": "a7f654f3-69ec-41e1-8f10-cad272d73654",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "740a2f5e-df26-4486-a7ea-99977ed67a50",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 191,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.closeTo((0, _lib.toBig)(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "74f3a429-bd17-4281-a450-889915ee7e36",
                          "parentUUID": "740a2f5e-df26-4486-a7ea-99977ed67a50",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 194,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "5b9293a4-e32c-48c6-a29a-9c45fb55bde2",
                          "parentUUID": "740a2f5e-df26-4486-a7ea-99977ed67a50",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 192,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _lib.toBig)(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "946d7c87-4ea3-4b65-b1cf-0b27e367d235",
                          "parentUUID": "740a2f5e-df26-4486-a7ea-99977ed67a50",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 194,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "e29298ab-584c-4ec0-a5b1-ad1603e3ea6e",
                          "parentUUID": "740a2f5e-df26-4486-a7ea-99977ed67a50",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "74f3a429-bd17-4281-a450-889915ee7e36",
                        "5b9293a4-e32c-48c6-a29a-9c45fb55bde2",
                        "946d7c87-4ea3-4b65-b1cf-0b27e367d235",
                        "e29298ab-584c-4ec0-a5b1-ad1603e3ea6e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 771,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "703c8037-b087-4404-afb5-decfa56f7b13",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 526,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "efebcc23-98e1-4b5b-baa0-4b75f2fdd370",
                          "parentUUID": "703c8037-b087-4404-afb5-decfa56f7b13",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 310,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "2cd48544-c873-45bb-97b9-90972b9869d7",
                          "parentUUID": "703c8037-b087-4404-afb5-decfa56f7b13",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 193,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "7f697176-e82d-49e5-8f7c-87dcadf4674f",
                          "parentUUID": "703c8037-b087-4404-afb5-decfa56f7b13",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 286,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "d6fb4fdb-ef59-4a48-8f2d-126c7c26f8c8",
                          "parentUUID": "703c8037-b087-4404-afb5-decfa56f7b13",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "efebcc23-98e1-4b5b-baa0-4b75f2fdd370",
                        "2cd48544-c873-45bb-97b9-90972b9869d7",
                        "7f697176-e82d-49e5-8f7c-87dcadf4674f",
                        "d6fb4fdb-ef59-4a48-8f2d-126c7c26f8c8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1315,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9eba7a46-7c90-4369-97c3-6fbbf9d64b06",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "a036209a-cce6-4cf0-93a0-0bd01d286b75",
              "parentUUID": "9eba7a46-7c90-4369-97c3-6fbbf9d64b06",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 3878,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.secondCollateral = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    price: 1,\n    factor: 1,\n    decimals: 18\n});\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nconst krAssetArgs = {\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    price: 10,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: 0,\n    openFee: 0\n};\nthis.krAsset = await (0, _krassets.addMockKreskoAsset)(krAssetArgs);\nthis.initialBalance = (0, _lib.toBig)(1000000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userFive.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userFive.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.users.userFive.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: _hardhat.default.users.userFive,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(100000)\n};\nthis.mintArgs = {\n    user: _hardhat.default.users.userFive,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(2000)\n};\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userFive).depositCollateral(_hardhat.default.users.userFive.address, this.depositArgs.asset.address, this.depositArgs.amount);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userFive).mintKreskoAsset(_hardhat.default.users.userFive.address, this.mintArgs.asset.address, this.mintArgs.amount);",
              "err": {},
              "uuid": "4faa32b7-2a7c-43c2-a30a-a61b9b189c8a",
              "parentUUID": "9eba7a46-7c90-4369-97c3-6fbbf9d64b06",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "417e8ce1-971e-4266-a744-3c6827d07428",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "e0a90c62-15f8-4fa9-852d-0bf3b1990f03",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should withdraw correct amount",
                      "timedOut": false,
                      "duration": 840,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nconst Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.testWithdrawalAmount(this.collateral.address, withdrawalAmount)).to.not.be.revertedWith(\"wront amount received\");\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "a17cb1b2-b4a3-499a-8b88-62b8f54d8463",
                      "parentUUID": "e0a90c62-15f8-4fa9-852d-0bf3b1990f03",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 886,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst balKreskoBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nawait Receiver.test(this.collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(this.collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(_hardhat.default.users.userFive.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "75bb61ef-96f3-4e13-b67f-c205aa18c52b",
                      "parentUUID": "e0a90c62-15f8-4fa9-852d-0bf3b1990f03",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 1176,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(this.collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralRatio(_hardhat.default.users.userFive.address)).to.be.closeTo(15e17.toString(), 1e10.toString());\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 10e15.toString())).to.be.reverted;",
                      "err": {},
                      "uuid": "5ade2ab7-e27e-4333-be6b-2e7732f57265",
                      "parentUUID": "e0a90c62-15f8-4fa9-852d-0bf3b1990f03",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 908,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nawait Receiver.testRedeposit(this.collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "ffb6a811-72a4-413a-9e0f-bb14e48605d2",
                      "parentUUID": "e0a90c62-15f8-4fa9-852d-0bf3b1990f03",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 920,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nawait this.secondCollateral.setPrice((0, _lib.fromBig)(await this.collateral.getPrice(), 8));\nawait this.secondCollateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userFive.address]: this.initialBalance\n});\nawait this.secondCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userFive.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance,\n        [Receiver.address]: this.initialBalance\n    }\n});\nawait Receiver.testDepositAlternate(this.collateral.address, deposits, this.secondCollateral.address);\nconst secondCollateralDeposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.secondCollateral.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "1e85f585-e7f2-479e-80bd-2a7251a503ca",
                      "parentUUID": "e0a90c62-15f8-4fa9-852d-0bf3b1990f03",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a17cb1b2-b4a3-499a-8b88-62b8f54d8463",
                    "75bb61ef-96f3-4e13-b67f-c205aa18c52b",
                    "5ade2ab7-e27e-4333-be6b-2e7732f57265",
                    "ffb6a811-72a4-413a-9e0f-bb14e48605d2",
                    "1e85f585-e7f2-479e-80bd-2a7251a503ca"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4730,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "fe338526-ad73-4794-b61b-93584b192759",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 752,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 0)).to.be.revertedWith(_testutils.Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "6354ad38-f012-42d4-b76d-dce7d2dbd4a0",
                      "parentUUID": "fe338526-ad73-4794-b61b-93584b192759",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 755,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond, false), _hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 1)).to.be.revertedWith(`AccessControl: account ${Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "4062c6e1-c31d-4bfe-b270-8af0d2b2bcbf",
                      "parentUUID": "fe338526-ad73-4794-b61b-93584b192759",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 978,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "21c66f63-6c1f-48bd-b3ac-f7983da55cf8",
                      "parentUUID": "fe338526-ad73-4794-b61b-93584b192759",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 1013,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (0, _testutils.wrapContractWithSigner)(await getReceiver(_hardhat.default.Diamond), _hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(this.collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "3797eec1-618d-40d1-aaf4-9356441034ab",
                      "parentUUID": "fe338526-ad73-4794-b61b-93584b192759",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6354ad38-f012-42d4-b76d-dce7d2dbd4a0",
                    "4062c6e1-c31d-4bfe-b270-8af0d2b2bcbf",
                    "21c66f63-6c1f-48bd-b3ac-f7983da55cf8",
                    "3797eec1-618d-40d1-aaf4-9356441034ab"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3498,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e664a933-eb6b-493d-a2e2-8ab7977d2703",
          "title": "Redstone",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-redstone.ts",
          "file": "/src/test/oracle/00-redstone.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Redstone\"",
              "fullTitle": "Redstone \"before each\" hook in \"Redstone\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "3bf9723c-c1a2-4564-8866-500cbd040030",
              "parentUUID": "e664a933-eb6b-493d-a2e2-8ab7977d2703",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Redstone\"",
              "fullTitle": "Redstone \"before each\" hook in \"Redstone\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nthis.deployer = await _hardhat.default.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await _hardhat.default.ethers.getNamedSigner(\"userOne\");",
              "err": {},
              "uuid": "89d46ea1-b890-4665-be63-faf90db238f5",
              "parentUUID": "e664a933-eb6b-493d-a2e2-8ab7977d2703",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b93e139d-f964-413f-9f00-028024f446a0",
              "title": "Redstone",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-redstone.ts",
              "file": "/src/test/oracle/00-redstone.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Redstone\"",
                  "fullTitle": "Redstone Redstone \"before each\" hook in \"Redstone\"",
                  "timedOut": false,
                  "duration": 89,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ethers  } = _hardhat.default;\nredstoneCollateral = this.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\n/// set initial collateral price\nredstoneCollateral.setPrice(10);\nconst initialBalance = (0, _lib.toBig)(100000);\nawait redstoneCollateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: initialBalance\n});\nawait redstoneCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: initialBalance\n    }\n});\nconst MockSequencerUptimeFeed = await ethers.getContractFactory(\"MockSequencerUptimeFeed\");\nmockSequencerUptimeFeed = await MockSequencerUptimeFeed.deploy();\nthis.depositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: redstoneCollateral,\n    amount: (0, _lib.toBig)(1)\n};\nawait _hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, redstoneCollateral.address, this.depositArgs.amount);\n// check initial conditions\n(0, _chai.expect)(await redstoneCollateral.getPrice()).to.equal((0, _lib.toBig)(10, 8), \"collateral price should be $10\");\n// As redstone price is 0, will use chainlink price = 10\n// so collateral value = $10 * 1 = $10\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(10, 8), \"collateral value should be $10\");",
                  "err": {},
                  "uuid": "2ce81d4d-c08c-44c8-bbba-3c959ae8b55e",
                  "parentUUID": "b93e139d-f964-413f-9f00-028024f446a0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Redstone Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nredstoneCollateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// so collateral value = $20 * 1 = $20\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(redstoneCollateralPrice, 8), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "1008195f-c455-41a4-a9cc-12ac1dd4e19f",
                  "parentUUID": "b93e139d-f964-413f-9f00-028024f446a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get chainlink price when price +- oracleDeviationPct of redstone price ",
                  "fullTitle": "Redstone Redstone should get chainlink price when price +- oracleDeviationPct of redstone price ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 12\nredstoneCollateral.setPrice(12);\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// so collateral value = $12 * 1 = $12\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(12, 8), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "31a3c89d-40aa-4e0d-9711-628f93da93e1",
                  "parentUUID": "b93e139d-f964-413f-9f00-028024f446a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Redstone Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nredstoneCollateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// should revert if price deviates more than oracleDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.be.revertedWith(_test.Error.ORACLE_PRICE_UNSTABLE);\nredstoneCollateral.setPrice(10);",
                  "err": {},
                  "uuid": "b921949a-859a-4be1-8bf7-92d3ab0b3b58",
                  "parentUUID": "b93e139d-f964-413f-9f00-028024f446a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return redstone price if sequencer is down",
                  "fullTitle": "Redstone Redstone should return redstone price if sequencer is down",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 5\nredstoneCollateral.setPrice(5);\nconst redstoneCollateralPrice = 200;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n/// set sequencer uptime feed address\nawait redstoneDiamond.updateSequencerUptimeFeed(mockSequencerUptimeFeed.address);\n// should return redstone price if sequencer is down\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.be.equal((0, _lib.toBig)(redstoneCollateralPrice, 8), \"collateral value should be $200\");\nredstoneCollateral.setPrice(10);",
                  "err": {},
                  "uuid": "d68c2a0b-4852-4db1-8cec-dc071da06105",
                  "parentUUID": "b93e139d-f964-413f-9f00-028024f446a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1008195f-c455-41a4-a9cc-12ac1dd4e19f",
                "31a3c89d-40aa-4e0d-9711-628f93da93e1",
                "b921949a-859a-4be1-8bf7-92d3ab0b3b58",
                "d68c2a0b-4852-4db1-8cec-dc071da06105"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 125,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1ca574c8-aebb-4c2a-8b79-32c6f263adbf",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "420b56b9-350c-4f0b-8b10-f23396ab4a1b",
              "parentUUID": "1ca574c8-aebb-4c2a-8b79-32c6f263adbf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = _hardhat.default.collaterals.find((asset)=>asset.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer , devTwo , extOne , extTwo , devOne  } = await _hardhat.default.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
              "uuid": "78314688-5769-4a08-9d9a-7f05dbd0872f",
              "parentUUID": "1ca574c8-aebb-4c2a-8b79-32c6f263adbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "07e48dc1-b074-41a1-b2cc-926f2f8fabba",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await _hardhat.default.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"setSafetyStateSet\", [\n    true\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst safetyState = await _hardhat.default.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "1b87bae0-4bcc-4d3d-a0c6-eb2869a34e54",
                  "parentUUID": "07e48dc1-b074-41a1-b2cc-926f2f8fabba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b87bae0-4bcc-4d3d-a0c6-eb2869a34e54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "392cf406-5f72-42dd-93ae-b7f3d783aa9c",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "dcec037a-4dba-40c2-bab8-cc9d809d5ce4",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "f1518346-eca8-494a-9e57-e59aa678cdb3",
                      "parentUUID": "dcec037a-4dba-40c2-bab8-cc9d809d5ce4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "dd091d25-445e-4226-8b32-e9e3a01f5a55",
                      "parentUUID": "dcec037a-4dba-40c2-bab8-cc9d809d5ce4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "2bdcf177-b343-45ca-a231-a5ebf3bfdc28",
                      "parentUUID": "dcec037a-4dba-40c2-bab8-cc9d809d5ce4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 45,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "adec6861-f038-41d1-8a68-38e693355073",
                      "parentUUID": "dcec037a-4dba-40c2-bab8-cc9d809d5ce4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f1518346-eca8-494a-9e57-e59aa678cdb3",
                    "dd091d25-445e-4226-8b32-e9e3a01f5a55",
                    "2bdcf177-b343-45ca-a231-a5ebf3bfdc28",
                    "adec6861-f038-41d1-8a68-38e693355073"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 220,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "62b6bf3c-1398-4c47-8e1e-babb77a51684",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "4b31a637-7a72-4cff-be99-4219db6191c7",
                      "parentUUID": "62b6bf3c-1398-4c47-8e1e-babb77a51684",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.krAsset.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.krAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "ed2393a9-2b95-4815-9b4c-7ed98e72fd06",
                      "parentUUID": "62b6bf3c-1398-4c47-8e1e-babb77a51684",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = _hardhat.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        randomAddr\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "383ded03-00d7-41b6-a5a5-c54aab29294a",
                      "parentUUID": "62b6bf3c-1398-4c47-8e1e-babb77a51684",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4b31a637-7a72-4cff-be99-4219db6191c7",
                    "ed2393a9-2b95-4815-9b4c-7ed98e72fd06",
                    "383ded03-00d7-41b6-a5a5-c54aab29294a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 179,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "b18edb4c-d37b-4b2a-8a1d-b9ab12f43a98",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "234838d5-d73a-415c-9c41-322af9e96d91",
                      "parentUUID": "b18edb4c-d37b-4b2a-8a1d-b9ab12f43a98",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockBefore = await _hardhat.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, _chai.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait _hardhat.default.ethers.provider.send(\"evm_increaseTime\", [\n    sevenDays\n]);\nawait _hardhat.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockAfter = await _hardhat.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, _chai.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, _chai.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, _chai.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n            // NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "97e12c40-0eb9-471e-bff5-558e237d707e",
                      "parentUUID": "b18edb4c-d37b-4b2a-8a1d-b9ab12f43a98",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "234838d5-d73a-415c-9c41-322af9e96d91",
                    "97e12c40-0eb9-471e-bff5-558e237d707e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 125,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "71932be3-3945-4af4-b89a-a412c5f6d967",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 118,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "46405d61-b634-429d-8689-1500204a00d6",
                      "parentUUID": "71932be3-3945-4af4-b89a-a412c5f6d967",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 116,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "d333ccaf-4595-4bc8-a278-2261431b4743",
                      "parentUUID": "71932be3-3945-4af4-b89a-a412c5f6d967",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 116,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "877edf8a-c075-4b0b-b6c9-6696397b5ac8",
                      "parentUUID": "71932be3-3945-4af4-b89a-a412c5f6d967",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 116,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "68fda319-1dfb-48c8-a3f1-8a086890813e",
                      "parentUUID": "71932be3-3945-4af4-b89a-a412c5f6d967",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 116,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "142f2440-468d-4e83-b231-fe0cbb2cf02c",
                      "parentUUID": "71932be3-3945-4af4-b89a-a412c5f6d967",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "46405d61-b634-429d-8689-1500204a00d6",
                    "d333ccaf-4595-4bc8-a278-2261431b4743",
                    "877edf8a-c075-4b0b-b6c9-6696397b5ac8",
                    "68fda319-1dfb-48c8-a3f1-8a086890813e",
                    "142f2440-468d-4e83-b231-fe0cbb2cf02c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 582,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "78c53972-1e1b-40ee-9ce9-a841b88fe8c6",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 39,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"SafetyStateChange\");\n(0, _chai.expect)(event.action).to.equal(_testutils.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(_hardhat.default.ethers.utils.keccak256(_hardhat.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "118642dd-0bb2-4733-b147-b8ad5c1d395d",
                      "parentUUID": "78c53972-1e1b-40ee-9ce9-a841b88fe8c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "118642dd-0bb2-4733-b147-b8ad5c1d395d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 39,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "576a2c7a-1263-4336-95ab-9ab910896f31",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d99696d6-ad74-4c20-a6d4-9d9a5cf794a0",
              "parentUUID": "576a2c7a-1263-4336-95ab-9ab910896f31",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 6505,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = [\n    _hardhat.default.users.testUserFive,\n    _hardhat.default.users.testUserSix,\n    _hardhat.default.users.testUserSeven\n];\n[KreskoAsset, CollateralAsset, CollateralAsset8Dec] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice10USD\",\n        price: collateralPrice,\n        symbol: \"KreskoAssetPrice10USD\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1.25,\n        supplyLimit: 100000\n    }, true),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral18Dec\",\n        price: collateralPrice,\n        factor: 1,\n        decimals: 18\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral8Dec\",\n        price: collateralPrice,\n        factor: 0.8,\n        decimals: 8\n    })\n]);\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, depositAmount18Dec),\n        await CollateralAsset8Dec.setBalance(user, depositAmount8Dec),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}",
              "err": {},
              "uuid": "f7a44a8a-8a52-40e2-b551-9fdb1f4ae220",
              "parentUUID": "576a2c7a-1263-4336-95ab-9ab910896f31",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
              "title": "#Configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be initialized with correct params",
                  "fullTitle": "SCDP #Configuration should be initialized with correct params",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { args  } = await (0, _shared.getSCDPInitializer)(_hardhat.default);\nconst configuration = await _hardhat.default.Diamond.getSCDPConfig();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.lt).to.equal(args.lt);\n(0, _chai.expect)(configuration.mcr).to.equal(args.mcr);",
                  "err": {},
                  "uuid": "9801b7cb-a9c5-4f6e-913b-1ce4ce050350",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted collateral",
                  "fullTitle": "SCDP #Configuration should be able to add whitelisted collateral",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal(configuration.liquidationIncentive);\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(configuration.depositLimit);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "ffa25560-9158-4269-94c6-ba4e72ac39c5",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted collateral",
                  "fullTitle": "SCDP #Configuration should be able to update a whitelisted collateral",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.updatePoolCollateral(CollateralAsset.address, (0, _lib.toBig)(1.05), 1);\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal((0, _lib.toBig)(1.05));\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\n(0, _chai.expect)(collateral.depositLimit).to.equal(1);",
                  "err": {},
                  "uuid": "63986747-3e19-4026-a226-59e1e6c0e60a",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted collateral asset",
                  "fullTitle": "SCDP #Configuration should be able to disable a whitelisted collateral asset",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "145356f7-4c0e-43cd-82b8-cb359227d689",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a collateral asset",
                  "fullTitle": "SCDP #Configuration should be able to remove a collateral asset",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "e9305e56-0f8a-4ef7-9c19-20792babb14d",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to add whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(configuration.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(configuration.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(configuration.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(configuration.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "339e4a1b-cd94-47cf-881f-8f032f764e93",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to update a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst update = {\n    openFee: (0, _lib.toBig)(0.05),\n    closeFee: (0, _lib.toBig)(0.05),\n    protocolFee: (0, _lib.toBig)(0.4),\n    supplyLimit: (0, _lib.toBig)(50000)\n};\nawait _hardhat.default.Diamond.updatePoolKrAsset(KreskoAsset.address, update);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(update.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(update.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(update.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(update.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "10c766fe-554a-48dd-8fdb-b6a1143046da",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to disable a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "248dec28-b168-4da2-b8d1-fbba66815d7e",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to remove a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "e3ae3e50-3f12-4fb6-a1a6-1f15e0574608",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to enable and disable swap pairs",
                  "fullTitle": "SCDP #Configuration should be able to enable and disable swap pairs",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapPairsEnabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: true\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: false\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "87180cc9-78ea-4fc6-a90e-23d07d1ef37c",
                  "parentUUID": "d2a82db4-8d2d-443d-9662-5488b3dbdbb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9801b7cb-a9c5-4f6e-913b-1ce4ce050350",
                "ffa25560-9158-4269-94c6-ba4e72ac39c5",
                "63986747-3e19-4026-a226-59e1e6c0e60a",
                "145356f7-4c0e-43cd-82b8-cb359227d689",
                "e9305e56-0f8a-4ef7-9c19-20792babb14d",
                "339e4a1b-cd94-47cf-881f-8f032f764e93",
                "10c766fe-554a-48dd-8fdb-b6a1143046da",
                "248dec28-b168-4da2-b8d1-fbba66815d7e",
                "e3ae3e50-3f12-4fb6-a1a6-1f15e0574608",
                "87180cc9-78ea-4fc6-a90e-23d07d1ef37c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1019,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "ec704612-a1d5-406b-ab84-24ccd084148b",
              "title": "#Deposit",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Deposit\"",
                  "fullTitle": "SCDP #Deposit \"before each\" hook in \"#Deposit\"",
                  "timedOut": false,
                  "duration": 94,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 8,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "7b93ec7f-cad3-4adc-b27b-a1b9b906f3fe",
                  "parentUUID": "ec704612-a1d5-406b-ab84-24ccd084148b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "SCDP #Deposit should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 1517,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    // Unadjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    // Adjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n// Unadjusted\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);\n// Adjusted\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "c51040b7-dda9-4124-b9f4-adb97eae6f1d",
                  "parentUUID": "ec704612-a1d5-406b-ab84-24ccd084148b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "SCDP #Deposit should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 2084,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec);\n    // WITHOUT_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n    // WITH_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(expectedValueAdjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.add(expectedValueAdjusted8Dec));\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.mul(users.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(users.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(users.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(valueTotalAdjusted8Dec);\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(valueAdjusted);\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(users.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(users.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted8Dec);\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "c92d793f-3426-4233-9d72-048aafb7a811",
                  "parentUUID": "ec704612-a1d5-406b-ab84-24ccd084148b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c51040b7-dda9-4124-b9f4-adb97eae6f1d",
                "c92d793f-3426-4233-9d72-048aafb7a811"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3601,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "cfae85ab-419d-43b7-af81-b4ed465e5b8e",
              "title": "#Withdraw",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Withdraw\"",
                  "fullTitle": "SCDP #Withdraw \"before each\" hook in \"#Withdraw\"",
                  "timedOut": false,
                  "duration": 111,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "bf89a750-3109-46ff-8733-f3a2c9e1c01c",
                  "parentUUID": "cfae85ab-419d-43b7-af81-b4ed465e5b8e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to withdraw full collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw full collateral of multiple assets",
                  "timedOut": false,
                  "duration": 2373,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(Kresko.address)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.equal(0);\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "45ab3b00-ba88-4e2c-b4d1-1a7908ddec62",
                  "parentUUID": "cfae85ab-419d-43b7-af81-b4ed465e5b8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw partial collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw partial collateral of multiple assets",
                  "timedOut": false,
                  "duration": 4261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const partialWithdraw = depositAmount18Dec.div(users.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(users.length);\nconst expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice * 1 * depositAmount, 8).mul(200).div(300); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8).mul(200).div(300); // cfactor = 0.8\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, partialWithdraw);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, partialWithdraw8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(partialWithdraw);\n    (0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(user.address)).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.closeTo(expectedValueAdjusted.add(expectedValueAdjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _lib.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(_hardhat.default.Diamond.address)).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.closeTo((0, _lib.toBig)(2000), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.closeTo((0, _lib.toBig)(2000, 8), 1);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.closeTo(expectedValueUnadjusted.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.closeTo(expectedValueAdjusted.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.closeTo(expectedValueUnadjusted8Dec.mul(users.length), 20);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.closeTo(expectedValueAdjusted8Dec.mul(users.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(users.length).add(expectedValueUnadjusted.mul(users.length));\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "b24cda2e-9fc8-4945-8788-252df93121dd",
                  "parentUUID": "cfae85ab-419d-43b7-af81-b4ed465e5b8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45ab3b00-ba88-4e2c-b4d1-1a7908ddec62",
                "b24cda2e-9fc8-4945-8788-252df93121dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6634,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b74bcf9f-96f9-440c-bf13-880bac18d5e8",
              "title": "#Fee Distribution",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Fee Distribution\"",
                  "fullTitle": "SCDP #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                  "timedOut": false,
                  "duration": 189,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "incomeCumulator = _hardhat.default.users.admin;\nawait CollateralAsset.setBalance(incomeCumulator, depositAmount18Dec.mul(users.length));\nawait CollateralAsset.contract.connect(incomeCumulator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 8,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            depositLimit: _hardhat.ethers.constants.MaxUint256,\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "f9d6775c-b539-4dbf-8df1-78ef79bd98c7",
                  "parentUUID": "b74bcf9f-96f9-440c-bf13-880bac18d5e8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to cumulate fees into deposits",
                  "fullTitle": "SCDP #Fee Distribution should be able to cumulate fees into deposits",
                  "timedOut": false,
                  "duration": 4976,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fees = depositAmount18Dec.mul(users.length);\nconst expectedValueNoFees = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, incomeCumulator).cumulateIncome(CollateralAsset.address, fees);\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees); // fees for single asset\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(expectedValueNoFees); // fees\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees); // fees\n    // withdraw principal\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n}\n// expect protocol to have no collateral here, only fees left.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(fees);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(global.collateralValue).to.equal(0);\n// withdraw fees\nfor (const user of users){\n    const Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    // fees in user wallet\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    // nothing left in protocol for user\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n// nothing left in protocol.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);",
                  "err": {},
                  "uuid": "f2b58e6b-1ab9-40ae-af7b-0e69d712bf4c",
                  "parentUUID": "b74bcf9f-96f9-440c-bf13-880bac18d5e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2b58e6b-1ab9-40ae-af7b-0e69d712bf4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4976,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "40871fef-e5b2-44c0-9266-45482262b553",
              "title": "#Swap",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Swap\"",
                  "fullTitle": "SCDP #Swap \"before each\" hook in \"#Swap\"",
                  "timedOut": false,
                  "duration": 4627,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000));\n    await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.setBalance(swapper, (0, _lib.toBig)(10000));\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "280a9268-a206-43b1-bb16-e0cb5aa3031a",
                  "parentUUID": "40871fef-e5b2-44c0-9266-45482262b553",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have collateral in pool",
                  "fullTitle": "SCDP #Swap should have collateral in pool",
                  "timedOut": false,
                  "duration": 363,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = await _hardhat.default.Diamond.getPoolStats(false);\n(0, _chai.expect)(value.collateralValue).to.equal((0, _lib.toBig)(10000, 8));\n(0, _chai.expect)(value.debtValue).to.equal(0);\n(0, _chai.expect)(value.cr).to.equal(0);",
                  "err": {},
                  "uuid": "15806180-aaa3-496e-a1ad-f2233e3dc62c",
                  "parentUUID": "40871fef-e5b2-44c0-9266-45482262b553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to preview a swap",
                  "fullTitle": "SCDP #Swap should be able to preview a swap",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD);\nconst assetInPrice = (0, _lib.toBig)(ONE_USD, 8);\nconst assetOutPrice = (0, _lib.toBig)(KreskoAsset2Price, 8);\nconst feePercentage = (0, _lib.toBig)(0.015 + 0.025);\nconst feePercentageProtocol = (0, _lib.toBig)(0.5);\nconst expectedTotalFee = swapAmount.wadMul(feePercentage);\nconst expectedProtocolFee = expectedTotalFee.wadMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(assetInPrice).wadDiv(assetOutPrice);\nconst [amountOut, feeAmount, feeAmountProtocol] = await _hardhat.default.Diamond.previewSwap(KISS.address, KreskoAsset2.address, (0, _lib.toBig)(1));\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                  "err": {},
                  "uuid": "80e7bb28-ae24-4f05-9bd0-74576e0f816a",
                  "parentUUID": "40871fef-e5b2-44c0-9266-45482262b553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == 0 | swap collateral == 0",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == 0 | swap collateral == 0",
                  "timedOut": false,
                  "duration": 1316,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOut = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nconst tx = await Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(await KreskoAsset2.contract.balanceOf(swapper.address)).to.equal(expectedAmountOut);\n(0, _chai.expect)(await KISS.contract.balanceOf(swapper.address)).to.equal((0, _lib.toBig)(10000).sub(swapAmount));\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal((0, _lib.toBig)(0.96));\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal((0, _lib.toBig)(0.0096));\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(10000.96, 8));\n(0, _chai.expect)(global.debtValue).to.equal((0, _lib.toBig)(0.96, 8));\n(0, _chai.expect)(global.cr).to.equal((0, _lib.toBig)(10000.96, 8).wadDiv((0, _lib.toBig)(0.96, 8)));",
                  "err": {},
                  "uuid": "17081c08-8a48-412a-850c-02a8f7062b4e",
                  "parentUUID": "40871fef-e5b2-44c0-9266-45482262b553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "timedOut": false,
                  "duration": 2260,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountAsset = (0, _lib.toBig)(1); // $100\nconst expectedKissOut = (0, _lib.toBig)(96); // $100 * 0.96 = $96\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: KISS,\n    amount: (0, _lib.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: KreskoAsset2,\n    amount: (0, _lib.toBig)(0.1)\n});\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmountAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal(0);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n// back to starting point\n(0, _chai.expect)(global.collateralValue).to.equal((0, _lib.toBig)(10000, 8));\n(0, _chai.expect)(global.debtValue).to.equal(0);\n(0, _chai.expect)(global.cr).to.equal(0);",
                  "err": {},
                  "uuid": "c8edaf82-ae55-4f7b-9cbf-1ade083e3089",
                  "parentUUID": "40871fef-e5b2-44c0-9266-45482262b553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt > assetsIn | swap collateral > assetsOut",
                  "timedOut": false,
                  "duration": 1982,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD); // $1\nconst expectedAmountOutAsset = (0, _lib.toBig)(0.0096); // $100 * 0.0096 = $0.96\nconst expectedSecondFeeValue = (0, _lib.toBig)(0.96, 8).wadMul((0, _lib.toBig)(0.04)); // $0.96 * 4% = $0.0384\nconst expectedSecondFeeKISS = (0, _lib.toBig)(0.96).wadMul((0, _lib.toBig)(0.04)); // 0.96 * 4% = 0.0384\nconst expectedAmountOutKISS = (0, _lib.toBig)(0.96).sub(expectedSecondFeeKISS); // = 0.9216\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, expectedAmountOutAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(expectedAmountOutAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOutKISS);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(swapper.address, KISS.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(expectedSecondFeeKISS);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(expectedSecondFeeValue);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal(expectedSecondFeeValue);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal(expectedSecondFeeKISS.wadDiv((0, _lib.toBig)(KreskoAsset2Price)));\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\nconst expectedCollateralValue = (0, _lib.toBig)(10000, 8).add(expectedSecondFeeValue);\nconst expectedDebtValue = expectedSecondFeeValue;\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedDebtValue);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedDebtValue));",
                  "err": {},
                  "uuid": "4e994c67-6bc5-44e9-88fc-694f124fcc98",
                  "parentUUID": "40871fef-e5b2-44c0-9266-45482262b553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt < assetsIn | swap collateral < assetsOut",
                  "timedOut": false,
                  "duration": 3000,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmountKiss = (0, _lib.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountKrAsset = (0, _lib.toBig)(2); // $200\nconst expectedKissOut = (0, _lib.toBig)(192); // $200 * 0.96 = $192\nconst expectedDebtKiss = (0, _lib.toBig)(96); // 192 required out - 96 in collateral from first swap = 96 new debt\nconst expectedDebtValueKiss = (0, _lib.toBig)(96, 8); // $192 - $96 = $96\nconst expectedCollateralKrAssetValue = (0, _lib.toBig)(96, 8); // $192 swapped in after fees, $96 in debt = $96 to swap owned collateral\nconst expectedCollateralKrAsset = (0, _lib.toBig)(0.96); // $192 swapped in after fees, $96 in debt = $96 to swap owned collateral\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: KISS,\n    amount: (0, _lib.toBig)(400)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: KreskoAsset2,\n    amount: (0, _lib.toBig)(1.04)\n});\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmountKiss, 0);\nconst stats = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(stats.collateralValue).to.be.gt((0, _lib.toBig)(10000, 8));\n// the swap that matters, here user has 0.96 krAsset in wallet, 1.04 minted. swaps expecting 192 kiss after fees.\nconst tx = await Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _lib.getNamedEvent)(tx, \"Swap\");\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(KreskoAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n// KISS deposits sent in swap\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KISS.address)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KISS.address, true)).to.equal(0);\n// KrAsset debt is cleared\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KreskoAsset2.address, true)).to.equal(0);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KreskoAsset2.address)).to.equal(0);\n// KISS debt is issued\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebtValue(KISS.address, true)).to.equal(expectedDebtValueKiss);\n(0, _chai.expect)(await Kresko.getPoolKrAssetDebt(KISS.address)).to.equal(expectedDebtKiss);\n// krAsset collateral deposits added after debt cleared in swap\n(0, _chai.expect)(await Kresko.getPoolSwapDeposits(KreskoAsset2.address)).to.equal(expectedCollateralKrAsset);\n(0, _chai.expect)(await Kresko.getPoolDepositsValue(KreskoAsset2.address, true)).to.equal(expectedCollateralKrAssetValue);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\nconst expectedCollateralValue = (0, _lib.toBig)(10000, 8).add(expectedCollateralKrAssetValue);\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedDebtValueKiss);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.wadDiv(expectedDebtValueKiss));",
                  "err": {},
                  "uuid": "c7284c1b-ef57-4fb9-9e5d-e851b4b7b49d",
                  "parentUUID": "40871fef-e5b2-44c0-9266-45482262b553",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15806180-aaa3-496e-a1ad-f2233e3dc62c",
                "80e7bb28-ae24-4f05-9bd0-74576e0f816a",
                "17081c08-8a48-412a-850c-02a8f7062b4e",
                "c8edaf82-ae55-4f7b-9cbf-1ade083e3089",
                "4e994c67-6bc5-44e9-88fc-694f124fcc98",
                "c7284c1b-ef57-4fb9-9e5d-e851b4b7b49d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8960,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "44187dde-33a6-4ea9-ba49-b62af0666110",
              "title": "#Liquidations",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Liquidations\"",
                  "fullTitle": "SCDP #Liquidations \"before each\" hook in \"#Liquidations\"",
                  "timedOut": false,
                  "duration": 4853,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000)),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}\nawait KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait Promise.all([\n    (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec),\n    (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset8Dec.address, depositAmount8Dec)\n]);\nCollateralAsset.setPrice(collateralPrice);",
                  "err": {},
                  "uuid": "81b95818-bd55-409c-96f9-95b01f2d3705",
                  "parentUUID": "44187dde-33a6-4ea9-ba49-b62af0666110",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is not underwater",
                  "timedOut": false,
                  "duration": 1134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.false;",
                  "err": {},
                  "uuid": "33350862-bc47-4cca-a1c2-e6718f7549a2",
                  "parentUUID": "44187dde-33a6-4ea9-ba49-b62af0666110",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert liquidations if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should revert liquidations if the pool is not underwater",
                  "timedOut": false,
                  "duration": 1708,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.false;\nconst KreskoLiquidator = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.liquidator);\nawait KreskoAsset2.setBalance(_hardhat.default.users.liquidator, (0, _lib.toBig)(1000000));\nawait (0, _chai.expect)(KreskoLiquidator.poolLiquidate(KreskoAsset2.address, (0, _lib.toBig)(7.7), CollateralAsset8Dec.address)).to.be.revertedWith(\"not-liquidatable\");",
                  "err": {},
                  "uuid": "3802bfd6-9843-4be2-a4fe-108f89302c70",
                  "parentUUID": "44187dde-33a6-4ea9-ba49-b62af0666110",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify if the pool is underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is underwater",
                  "timedOut": false,
                  "duration": 1664,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nCollateralAsset.setPrice(collateralPrice / 1000);\nCollateralAsset8Dec.setPrice(collateralPrice / 1000);\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.be.lt((await _hardhat.default.Diamond.getSCDPConfig()).lt);\n(0, _chai.expect)(await _hardhat.default.Diamond.poolIsLiquidatable()).to.be.true;",
                  "err": {},
                  "uuid": "7da8aa97-f7ca-41b6-b02e-b6df13bbedc1",
                  "parentUUID": "44187dde-33a6-4ea9-ba49-b62af0666110",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow liquidating the underwater pool",
                  "fullTitle": "SCDP #Liquidations should allow liquidating the underwater pool",
                  "timedOut": false,
                  "duration": 5325,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD * 2600); // $1\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nKreskoAsset2.setPrice(newKreskoAssetPrice);\nconst KreskoLiquidator = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.liquidator);\nconst repayAmount = (await _hardhat.default.Diamond.getMaxLiquidation(_hardhat.default.ethers.constants.AddressZero, KreskoAsset2.address, CollateralAsset.address)).wadDiv(await KreskoAsset2.getPrice());\nawait KreskoAsset2.setBalance(_hardhat.default.users.liquidator, repayAmount.add(1e18.toString()));\nconst tx = await KreskoLiquidator.poolLiquidate(KreskoAsset2.address, repayAmount, CollateralAsset.address);\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.gt((await _hardhat.default.Diamond.getSCDPConfig()).lt);\n(0, _chai.expect)(await KreskoLiquidator.poolIsLiquidatable()).to.equal(false);\nawait (0, _chai.expect)(KreskoLiquidator.poolLiquidate(KreskoAsset2.address, repayAmount, CollateralAsset8Dec.address)).to.be.revertedWith(\"not-liquidatable\");\nconst event = await (0, _lib.getNamedEvent)(tx, \"CollateralPoolLiquidationOccured\");\nconst expectedSeizeAmount = repayAmount.wadMul((0, _lib.toBig)(newKreskoAssetPrice, 8)).wadMul((0, _lib.toBig)(1.05)).wadDiv((0, _lib.toBig)(collateralPrice, 8));\n(0, _chai.expect)(event.args.liquidator).to.eq(_hardhat.default.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(CollateralAsset.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(KreskoAsset2.address);\nconst expectedDepositsAfter = depositAmount18Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address)).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountDepositsWithFees(depositor.address, CollateralAsset.address)).to.eq(expectedDepositsAfter);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, users[2]).poolDeposit(users[2].address, CollateralAsset.address, depositAmount18Dec.mul(10));\n(0, _chai.expect)((await _hardhat.default.Diamond.getPoolStats(true)).cr).to.gt((await _hardhat.default.Diamond.getSCDPConfig()).mcr);\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolWithdraw(depositor.address, CollateralAsset.address, expectedDepositsAfter)).to.not.be.reverted;\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address)).to.eq(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountDepositsWithFees(depositor.address, CollateralAsset.address)).to.eq(0);",
                  "err": {},
                  "uuid": "07549364-8f22-445b-a65c-6a212f6c24a4",
                  "parentUUID": "44187dde-33a6-4ea9-ba49-b62af0666110",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33350862-bc47-4cca-a1c2-e6718f7549a2",
                "3802bfd6-9843-4be2-a4fe-108f89302c70",
                "7da8aa97-f7ca-41b6-b02e-b6df13bbedc1",
                "07549364-8f22-445b-a65c-6a212f6c24a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9831,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
              "title": "#Error",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Error\"",
                  "fullTitle": "SCDP #Error \"before each\" hook in \"#Error\"",
                  "timedOut": false,
                  "duration": 5485,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "swapper = users[0];\ndepositor = users[1];\n[KreskoAsset2, KISS] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice100USD\",\n        price: KreskoAsset2Price,\n        symbol: \"KreskoAssetPrice100USD\",\n        closeFee: 0.05,\n        openFee: 0.05,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: ONE_USD,\n        symbol: \"KISS\",\n        closeFee: 0.025,\n        openFee: 0.025,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 1000000\n    }, true)\n]);\n// setup collaterals and krAssets in shared pool\nconst collateralConfig = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.05),\n    depositLimit: _hardhat.ethers.constants.MaxUint256,\n    liquidityIndex: _lib.RAY\n};\nconst krAssetConfig = {\n    openFee: (0, _lib.toBig)(0.015),\n    closeFee: (0, _lib.toBig)(0.015),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nconst KISSConfig = {\n    openFee: (0, _lib.toBig)(0.025),\n    closeFee: (0, _lib.toBig)(0.025),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address,\n        KISS.address,\n        KreskoAsset.address,\n        KreskoAsset2.address\n    ], [\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig,\n        collateralConfig\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address,\n        KreskoAsset2.address,\n        KISS.address\n    ], [\n        krAssetConfig,\n        krAssetConfig,\n        KISSConfig\n    ]),\n    await _hardhat.default.Diamond.setSwapPairs([\n        {\n            assetIn: KreskoAsset2.address,\n            assetOut: KreskoAsset.address,\n            enabled: true\n        },\n        {\n            assetIn: KISS.address,\n            assetOut: KreskoAsset2.address,\n            enabled: true\n        },\n        {\n            assetIn: KreskoAsset.address,\n            assetOut: KISS.address,\n            enabled: true\n        }\n    ])\n]);\n// mint some KISS for users\nfor (const user of users){\n    await CollateralAsset.setBalance(user, (0, _lib.toBig)(1000000));\n    await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KreskoAsset2.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n    await KISS.setBalance(swapper, (0, _lib.toBig)(10000));\n}\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "123dc60b-2b25-4f11-9499-77db1c0d8214",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert depositing unsupported tokens",
                  "fullTitle": "SCDP #Error should revert depositing unsupported tokens",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [UnsupportedToken] = await _hardhat.default.deploy(\"MockERC20\", {\n    args: [\n        \"UnsupportedToken\",\n        \"UnsupportedToken\",\n        18,\n        (0, _lib.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst { deployer  } = await _hardhat.default.getNamedAccounts();\nawait (0, _chai.expect)(_hardhat.default.Diamond.poolDeposit(deployer, UnsupportedToken.address, 1)).to.be.revertedWith(\"asset-disabled\");",
                  "err": {},
                  "uuid": "71999fce-08ca-4386-adaf-def7979cebef",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing without deposits",
                  "fullTitle": "SCDP #Error should revert withdrawing without deposits",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KreskoUserNoDeposits = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(KreskoUserNoDeposits.poolWithdraw(depositor.address, CollateralAsset.address, 1)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "ac866106-9ef7-4daf-b356-cc4148ddebc4",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals below MCR",
                  "fullTitle": "SCDP #Error should revert withdrawals below MCR",
                  "timedOut": false,
                  "duration": 1504,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(1000); // $1000\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0); // generate debt\nconst deposits = await Kresko.getPoolAccountPrincipalDeposits(depositor.address, CollateralAsset.address);\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, depositor).poolWithdraw(depositor.address, CollateralAsset.address, deposits)).to.be.revertedWith(\"withdraw-mcr-violation\");",
                  "err": {},
                  "uuid": "ac46fc07-93e2-499e-9c5d-ac560b798654",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals of swap owned collateral deposits",
                  "fullTitle": "SCDP #Error should revert withdrawals of swap owned collateral deposits",
                  "timedOut": false,
                  "duration": 1005,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0);\nconst deposits = await Kresko.getPoolSwapDeposits(KreskoAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(Kresko.poolWithdraw(swapper.address, KreskoAsset2.address, deposits)).to.be.revertedWith(\"withdrawal-violation\");",
                  "err": {},
                  "uuid": "577125af-112b-4e82-8313-6b99f40faeb0",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping with price below minAmountOut",
                  "fullTitle": "SCDP #Error should revert swapping with price below minAmountOut",
                  "timedOut": false,
                  "duration": 348,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nconst [amountOut] = await Kresko.previewSwap(KreskoAsset2.address, KISS.address, swapAmount);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWith(\"swap-slippage\");",
                  "err": {},
                  "uuid": "7d9a5229-59eb-47c6-8f04-6d7e9f50941c",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping unsupported route",
                  "fullTitle": "SCDP #Error should revert swapping unsupported route",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, CollateralAsset.address, swapAmount, 0)).to.be.revertedWith(\"swap-disabled\");",
                  "err": {},
                  "uuid": "dd2e5023-5484-44ce-a855-9f1f41653ccf",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset in is disabled",
                  "fullTitle": "SCDP #Error should revert swapping if asset in is disabled",
                  "timedOut": false,
                  "duration": 137,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"asset-in-disabled\");",
                  "err": {},
                  "uuid": "cb33073f-9f72-4426-86b4-025e00e929fb",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping if asset out is disabled",
                  "fullTitle": "SCDP #Error should revert swapping if asset out is disabled",
                  "timedOut": false,
                  "duration": 149,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset2.address\n]);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                  "err": {},
                  "uuid": "652c8b1b-4da7-4851-8c12-32551f75d305",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping causes CDP to go below MCR",
                  "fullTitle": "SCDP #Error should revert swapping causes CDP to go below MCR",
                  "timedOut": false,
                  "duration": 1032,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _lib.toBig)(1000000);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst Kresko = (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, swapper);\nawait (0, _chai.expect)(Kresko.swap(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"swap-mcr-violation\");",
                  "err": {},
                  "uuid": "0a1e0992-daf6-4ea2-925d-3464b78d4cc1",
                  "parentUUID": "70aec13d-cc4a-46a6-a94c-5a54272b14c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71999fce-08ca-4386-adaf-def7979cebef",
                "ac866106-9ef7-4daf-b356-cc4148ddebc4",
                "ac46fc07-93e2-499e-9c5d-ac560b798654",
                "577125af-112b-4e82-8313-6b99f40faeb0",
                "7d9a5229-59eb-47c6-8f04-6d7e9f50941c",
                "dd2e5023-5484-44ce-a855-9f1f41653ccf",
                "cb33073f-9f72-4426-86b4-025e00e929fb",
                "652c8b1b-4da7-4851-8c12-32551f75d305",
                "0a1e0992-daf6-4ea2-925d-3464b78d4cc1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4436,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}