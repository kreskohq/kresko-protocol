{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 8,
    "pending": 0,
    "failures": 1,
    "start": "2023-09-22T02:04:22.573Z",
    "end": "2023-09-22T02:04:40.154Z",
    "duration": 17581,
    "testsRegistered": 9,
    "passPercent": 88.88888888888889,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "78f124f1-a7b2-47a2-842a-45fd9c361a3f",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
      "file": "/src/test/scdp/00-scdp.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "99726216-dfa6-46af-b5ae-d8947f7a56c5",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 138,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await (0, _test.scdpFixture)({\n    krAssets: createAssets,\n    collaterals: createCollaterals,\n    swapKISSConfig,\n    defaultCollateralConfig,\n    defaultKrAssetConfig,\n    swapKrAssetConfig\n});\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;\n[CollateralAsset, CollateralAsset8Dec] = this.collaterals;\n[KreskoAsset, KreskoAsset2, KISS] = this.krAssets;\nthis.usersArr = fixture.users;\nliquidator = _hardhat.default.users.liquidator;\n[swapper, depositor, depositor2] = this.usersArr;\nKreskoSwapper = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, swapper);\nKreskoDepositor = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositor);\nKreskoDepositor2 = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositor2);\nKreskoLiquidator = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, liquidator);",
              "err": {},
              "uuid": "3c189daf-e5ca-40ab-be61-c39df2a0ede5",
              "parentUUID": "99726216-dfa6-46af-b5ae-d8947f7a56c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1da58092-6e5e-49c6-884b-1aa281b53c30",
              "title": "#Test",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Test\"",
                  "fullTitle": "SCDP #Test \"before each\" hook in \"#Test\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await reset(this.usersArr);",
                  "err": {},
                  "uuid": "d499ba9a-ab7b-4b4c-9c53-c53f3e8dac16",
                  "parentUUID": "1da58092-6e5e-49c6-884b-1aa281b53c30",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                  "title": "#Error",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Error\"",
                      "fullTitle": "SCDP #Test #Error \"before each\" hook in \"#Error\"",
                      "timedOut": false,
                      "duration": 313,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(this.usersArr.map((signer)=>CollateralAsset.setBalance(signer, (0, _lib.toBig)(1000000))));\nawait KISS.setBalance(swapper, (0, _lib.toBig)(10000));\nawait KISS.setBalance(depositor, _hardhat.ethers.BigNumber.from(1));\nawait _hardhat.default.Diamond.addDepositAssetsSCDP([\n    KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait Promise.all([\n    KreskoDepositor.depositSCDP(depositor.address, KISS.address, 1),\n    KreskoDepositor.depositSCDP(depositor.address, CollateralAsset.address, depositAmount18Dec)\n]);",
                      "err": {},
                      "uuid": "afe28bd3-00ff-4833-8362-1463f4caf807",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert depositing unsupported tokens",
                      "fullTitle": "SCDP #Test #Error should revert depositing unsupported tokens",
                      "timedOut": false,
                      "duration": 145,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const [UnsupportedToken] = await _hardhat.default.deploy(\"MockERC20\", {\n    args: [\n        \"UnsupportedToken\",\n        \"UnsupportedToken\",\n        18,\n        (0, _lib.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst { deployer  } = await _hardhat.default.getNamedAccounts();\nawait (0, _chai.expect)(_hardhat.default.Diamond.depositSCDP(deployer, UnsupportedToken.address, 1)).to.be.revertedWith(\"asset-disabled\");",
                      "err": {
                        "message": "AssertionError: Expected transaction to be reverted with asset-disabled, but other exception was thrown: Error: VM Exception while processing transaction: reverted with reason string 'deposit-not-enabled'",
                        "estack": "AssertionError: Expected transaction to be reverted with asset-disabled, but other exception was thrown: Error: VM Exception while processing transaction: reverted with reason string 'deposit-not-enabled'\n    at onError (node_modules/.pnpm/@ethereum-waffle+chai@3.4.4/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/revertedWith.js:25:18)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at runNextTicks (node:internal/process/task_queues:65:3)\n    at listOnTimeout (node:internal/timers:526:9)\n    at processTimers (node:internal/timers:500:7)\n    at async Context.<anonymous> (src/test/scdp/00-scdp.ts:1274:17)",
                        "diff": null
                      },
                      "uuid": "eaa82e00-5858-4b50-8c0e-00dacc5abf75",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawing without deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawing without deposits",
                      "timedOut": false,
                      "duration": 91,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(KreskoSwapper.withdrawSCDP(depositor.address, CollateralAsset.address, 1)).to.be.revertedWith(\"withdrawal-violation\");",
                      "err": {},
                      "uuid": "dc01713e-15ec-45fa-a919-d792cb7f7a20",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals below MCR",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals below MCR",
                      "timedOut": false,
                      "duration": 2281,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(ONE_USD).mul(1000); // $1000\nawait KreskoSwapper.swapSCDP(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0); // generate debt\nconst deposits = await KreskoSwapper.getAccountDepositSCDP(depositor.address, CollateralAsset.address);\nawait (0, _chai.expect)(KreskoDepositor.withdrawSCDP(depositor.address, CollateralAsset.address, deposits)).to.be.revertedWith(\"withdraw-mcr-violation\");",
                      "err": {},
                      "uuid": "00c4ba7c-c2b3-4a1b-b034-e3cee27a7cf0",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals of swap owned collateral deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals of swap owned collateral deposits",
                      "timedOut": false,
                      "duration": 1441,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nawait KreskoSwapper.swapSCDP(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0);\nconst deposits = await KreskoSwapper.getSwapDepositsSCDP(KreskoAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(KreskoSwapper.withdrawSCDP(swapper.address, KreskoAsset2.address, deposits)).to.be.revertedWith(\"withdrawal-violation\");",
                      "err": {},
                      "uuid": "8c0946cf-63f9-4a38-8d4e-80c1d675a04b",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping with price below minAmountOut",
                      "fullTitle": "SCDP #Test #Error should revert swapping with price below minAmountOut",
                      "timedOut": false,
                      "duration": 937,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst [amountOut] = await KreskoSwapper.previewSwapSCDP(KreskoAsset2.address, KISS.address, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWith(\"swap-slippage\");",
                      "err": {},
                      "uuid": "cb80138a-6989-4101-af9f-8cce513c37e8",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping unsupported route",
                      "fullTitle": "SCDP #Test #Error should revert swapping unsupported route",
                      "timedOut": false,
                      "duration": 113,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, KreskoAsset2.address, CollateralAsset.address, swapAmount, 0)).to.be.revertedWith(\"swap-disabled\");",
                      "err": {},
                      "uuid": "ab956727-bc1e-4756-8878-5b63a4fa776f",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping if asset in is disabled",
                      "fullTitle": "SCDP #Test #Error should revert swapping if asset in is disabled",
                      "timedOut": false,
                      "duration": 228,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    KreskoAsset2.address\n], false);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0)).to.be.revertedWith(\"asset-in-disabled\");",
                      "err": {},
                      "uuid": "dc7fee18-4726-425a-a743-3d61dfa56ed8",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping if asset out is disabled",
                      "fullTitle": "SCDP #Test #Error should revert swapping if asset out is disabled",
                      "timedOut": false,
                      "duration": 403,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    KreskoAsset2.address\n], false);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, KISS.address, KreskoAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                      "err": {},
                      "uuid": "3306855a-fddb-4d94-b499-124d7ede927f",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping causes CDP to go below MCR",
                      "fullTitle": "SCDP #Test #Error should revert swapping causes CDP to go below MCR",
                      "timedOut": false,
                      "duration": 1480,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1500000);\nawait KreskoAsset2.setBalance(swapper, swapAmount);\nconst tx = KreskoSwapper.swapSCDP(swapper.address, KreskoAsset2.address, KISS.address, swapAmount, 0);\nawait (0, _chai.expect)(tx).to.be.revertedWith(\"swap-mcr-violation\");",
                      "err": {},
                      "uuid": "1b490b48-74d9-4da1-b447-98f9f9c0bd7e",
                      "parentUUID": "45932829-cd3b-4164-a861-d58a1bb7b2b1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dc01713e-15ec-45fa-a919-d792cb7f7a20",
                    "00c4ba7c-c2b3-4a1b-b034-e3cee27a7cf0",
                    "8c0946cf-63f9-4a38-8d4e-80c1d675a04b",
                    "cb80138a-6989-4101-af9f-8cce513c37e8",
                    "ab956727-bc1e-4756-8878-5b63a4fa776f",
                    "dc7fee18-4726-425a-a743-3d61dfa56ed8",
                    "3306855a-fddb-4d94-b499-124d7ede927f",
                    "1b490b48-74d9-4da1-b447-98f9f9c0bd7e"
                  ],
                  "failures": [
                    "eaa82e00-5858-4b50-8c0e-00dacc5abf75"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 7119,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}