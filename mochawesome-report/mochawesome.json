{
  "stats": {
<<<<<<< HEAD
    "suites": 88,
    "tests": 264,
    "passes": 240,
    "pending": 24,
    "failures": 0,
    "start": "2023-10-07T02:16:06.732Z",
    "end": "2023-10-07T02:17:55.735Z",
    "duration": 109003,
    "testsRegistered": 264,
    "passPercent": 100,
    "pendingPercent": 9.090909090909092,
=======
    "suites": 91,
    "tests": 280,
    "passes": 257,
    "pending": 23,
    "failures": 0,
    "start": "2023-10-05T12:53:53.828Z",
    "end": "2023-10-05T12:58:30.217Z",
    "duration": 276389,
    "testsRegistered": 280,
    "passPercent": 100,
    "pendingPercent": 8.214285714285714,
>>>>>>> origin/dev-159-syth-wrap
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
<<<<<<< HEAD
      "uuid": "e8b71ba3-bc14-40d8-9fae-3c0244b4f1ed",
=======
      "uuid": "506072c8-70e4-4ce2-b4f2-6832b536a814",
>>>>>>> origin/dev-159-syth-wrap
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
<<<<<<< HEAD
          "uuid": "2a84c07a-f67c-4c02-a2c3-cc82dac5553a",
=======
          "uuid": "e64ec289-c861-4bd1-996a-9690e88b008b",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.assetValuesFixture)();\nf.user = hre.users.testUserSeven;\nUser = (0, _redstone.wrapKresko)(hre.Diamond, f.user);",
              "err": {},
<<<<<<< HEAD
              "uuid": "d978dd02-812a-407e-ab14-d20e1bccc5a0",
              "parentUUID": "2a84c07a-f67c-4c02-a2c3-cc82dac5553a",
=======
              "uuid": "dbf35eba-e3a6-426d-9822-801adf9387bf",
              "parentUUID": "e64ec289-c861-4bd1-996a-9690e88b008b",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "1d3452c1-55b1-4bca-9eb0-52cdd06237d7",
=======
              "uuid": "48e3dd6d-69c7-4ab2-b75d-2bbb298e8906",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 108,
=======
                  "duration": 275,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "d78c12b4-9872-4ab0-932c-87cd9a19d008",
                  "parentUUID": "1d3452c1-55b1-4bca-9eb0-52cdd06237d7",
=======
                  "uuid": "74e9389c-69d7-42a7-9a93-e7434275dac4",
                  "parentUUID": "48e3dd6d-69c7-4ab2-b75d-2bbb298e8906",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 105,
=======
                  "duration": 278,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "9280569a-3ac1-4324-8ee5-9a196e3fb827",
                  "parentUUID": "1d3452c1-55b1-4bca-9eb0-52cdd06237d7",
=======
                  "uuid": "4861855f-bab1-4e7a-9a1c-1c41e42ba01e",
                  "parentUUID": "48e3dd6d-69c7-4ab2-b75d-2bbb298e8906",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 106,
=======
                  "duration": 276,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "67b46338-64d5-412d-8a17-410148a26f18",
                  "parentUUID": "1d3452c1-55b1-4bca-9eb0-52cdd06237d7",
=======
                  "uuid": "43c64154-48c9-47a8-8e0b-f0c09ff7d139",
                  "parentUUID": "48e3dd6d-69c7-4ab2-b75d-2bbb298e8906",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 240,
=======
                  "duration": 623,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.depositCollateral(f.user.address, f.CollateralAsset.address, (0, _values.toBig)(10));\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, (0, _values.toBig)(10, 8));\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, (0, _values.toBig)(10, 21));\nconst expectedDepositValue = (0, _values.toBig)(150, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "da699316-77a2-4d14-b4a2-744265b8437d",
                  "parentUUID": "1d3452c1-55b1-4bca-9eb0-52cdd06237d7",
=======
                  "uuid": "9f9cc76b-9916-4624-8a9d-d3d9391ac631",
                  "parentUUID": "48e3dd6d-69c7-4ab2-b75d-2bbb298e8906",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "d78c12b4-9872-4ab0-932c-87cd9a19d008",
                "9280569a-3ac1-4324-8ee5-9a196e3fb827",
                "67b46338-64d5-412d-8a17-410148a26f18",
                "da699316-77a2-4d14-b4a2-744265b8437d"
=======
                "74e9389c-69d7-42a7-9a93-e7434275dac4",
                "4861855f-bab1-4e7a-9a1c-1c41e42ba01e",
                "43c64154-48c9-47a8-8e0b-f0c09ff7d139",
                "9f9cc76b-9916-4624-8a9d-d3d9391ac631"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 559,
=======
              "duration": 1452,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "87361715-4542-40af-a043-a7c5339ace17",
=======
              "uuid": "74c8db61-2f50-4d33-b81c-a52492d43624",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 111,
=======
                  "duration": 452,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance));",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "6951b953-e091-46d6-94eb-87039120a05d",
                  "parentUUID": "87361715-4542-40af-a043-a7c5339ace17",
=======
                  "uuid": "fb510866-c60b-4a89-91d9-9f90f472e8ea",
                  "parentUUID": "74c8db61-2f50-4d33-b81c-a52492d43624",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 108,
=======
                  "duration": 472,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset8Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset8Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 8));",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "5ae974d0-64f0-48e5-b538-16056e694947",
                  "parentUUID": "87361715-4542-40af-a043-a7c5339ace17",
=======
                  "uuid": "637feb07-e094-4afd-83a0-4edca1fba4be",
                  "parentUUID": "74c8db61-2f50-4d33-b81c-a52492d43624",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 109,
=======
                  "duration": 476,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset21Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset21Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 21));",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "e7c1a002-48e2-4843-8814-aeab27d8265e",
                  "parentUUID": "87361715-4542-40af-a043-a7c5339ace17",
=======
                  "uuid": "f79b4d7f-875d-457f-970f-0fc7ea44baa7",
                  "parentUUID": "74c8db61-2f50-4d33-b81c-a52492d43624",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "6951b953-e091-46d6-94eb-87039120a05d",
                "5ae974d0-64f0-48e5-b538-16056e694947",
                "e7c1a002-48e2-4843-8814-aeab27d8265e"
=======
                "fb510866-c60b-4a89-91d9-9f90f472e8ea",
                "637feb07-e094-4afd-83a0-4edca1fba4be",
                "f79b4d7f-875d-457f-970f-0fc7ea44baa7"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 328,
=======
              "duration": 1400,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "b8f45dcb-ce4f-4c5c-bda2-1257967cf80e",
=======
              "uuid": "b8214af1-9007-41bb-8e79-db63d6a13d17",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 588,
=======
                  "duration": 1534,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)); // 2.475",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "dee677fa-59d0-4d41-a11f-d18756464e44",
                  "parentUUID": "b8f45dcb-ce4f-4c5c-bda2-1257967cf80e",
=======
                  "uuid": "2a05584d-5451-4545-a808-5507b901e816",
                  "parentUUID": "b8214af1-9007-41bb-8e79-db63d6a13d17",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 585,
=======
                  "duration": 1529,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)); // 2.475",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "240b1336-8988-42ab-a311-1c766b2a1f40",
                  "parentUUID": "b8f45dcb-ce4f-4c5c-bda2-1257967cf80e",
=======
                  "uuid": "9b41c849-d64a-4e90-b216-00aca8ae8ddd",
                  "parentUUID": "b8214af1-9007-41bb-8e79-db63d6a13d17",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 595,
=======
                  "duration": 1530,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)); // 2.475",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "bd246ec3-fa6b-4f5d-b4ff-89245f391f38",
                  "parentUUID": "b8f45dcb-ce4f-4c5c-bda2-1257967cf80e",
=======
                  "uuid": "b819c1ab-9acf-4620-b727-78c00aba040d",
                  "parentUUID": "b8214af1-9007-41bb-8e79-db63d6a13d17",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "dee677fa-59d0-4d41-a11f-d18756464e44",
                "240b1336-8988-42ab-a311-1c766b2a1f40",
                "bd246ec3-fa6b-4f5d-b4ff-89245f391f38"
=======
                "2a05584d-5451-4545-a808-5507b901e816",
                "9b41c849-d64a-4e90-b216-00aca8ae8ddd",
                "b819c1ab-9acf-4620-b727-78c00aba040d"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 1768,
=======
              "duration": 4593,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "23eea254-7a88-40e8-a548-c3f56b5fc737",
=======
          "uuid": "8d346e03-234e-4d4c-bc25-56e14b543628",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Diamond",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.diamondFixture)();",
              "err": {},
<<<<<<< HEAD
              "uuid": "afc44169-5738-491c-982d-6c8eb32b6c40",
              "parentUUID": "23eea254-7a88-40e8-a548-c3f56b5fc737",
=======
              "uuid": "a12f17b4-7b12-449d-9f31-d8354ba5c4c1",
              "parentUUID": "8d346e03-234e-4d4c-bc25-56e14b543628",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "e8c027b1-f935-496c-a8aa-4d1dc6b73107",
=======
              "uuid": "c5cbc746-a9e7-44a8-ac8c-f10651b4eb73",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#initialization",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 74,
=======
                  "duration": 196,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "080542c6-e467-4b65-a55d-87e9dd290870",
                  "parentUUID": "e8c027b1-f935-496c-a8aa-4d1dc6b73107",
=======
                  "uuid": "c72f48ee-04fa-413c-87aa-5070859a8947",
                  "parentUUID": "c5cbc746-a9e7-44a8-ac8c-f10651b4eb73",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 85,
=======
                  "duration": 126,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = f.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "2603a581-9200-4026-b84f-a473b0b92cd5",
                  "parentUUID": "e8c027b1-f935-496c-a8aa-4d1dc6b73107",
=======
                  "uuid": "ac7e5081-a6c3-458c-8875-2ce5cab92d1b",
                  "parentUUID": "c5cbc746-a9e7-44a8-ac8c-f10651b4eb73",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 84,
=======
                  "duration": 123,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = f.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "a38eb32d-b7dc-419a-a9df-7220d83b943e",
                  "parentUUID": "e8c027b1-f935-496c-a8aa-4d1dc6b73107",
=======
                  "uuid": "df343079-64cc-4416-80ab-fe1de50c9c0f",
                  "parentUUID": "c5cbc746-a9e7-44a8-ac8c-f10651b4eb73",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "080542c6-e467-4b65-a55d-87e9dd290870",
                "2603a581-9200-4026-b84f-a473b0b92cd5",
                "a38eb32d-b7dc-419a-a9df-7220d83b943e"
=======
                "c72f48ee-04fa-413c-87aa-5070859a8947",
                "ac7e5081-a6c3-458c-8875-2ce5cab92d1b",
                "df343079-64cc-4416-80ab-fe1de50c9c0f"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 243,
=======
              "duration": 445,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "77d1524b-c5a5-441b-91cc-0770e55bf4bb",
=======
          "uuid": "57843478-4f31-426e-ae9d-5ee8e8343be1",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Diamond",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
<<<<<<< HEAD
              "uuid": "c3866da5-2538-4ad1-8d31-8a7abd512ff9",
              "parentUUID": "77d1524b-c5a5-441b-91cc-0770e55bf4bb",
=======
              "uuid": "00088a25-b6fe-4a82-af49-b2e8e0f40034",
              "parentUUID": "57843478-4f31-426e-ae9d-5ee8e8343be1",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "ada2d20d-5144-4682-bdad-50dc8802c677",
=======
              "uuid": "4c30c608-4d29-41c6-92df-4d657328d27c",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#ownership",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 39,
=======
                  "duration": 100,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.owner()).to.equal(hre.addr.deployer);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "b0681d68-219a-4d9b-a444-3497d0e946c0",
                  "parentUUID": "ada2d20d-5144-4682-bdad-50dc8802c677",
=======
                  "uuid": "515355a5-fbe8-4433-8155-fa5914ba2506",
                  "parentUUID": "4c30c608-4d29-41c6-92df-4d657328d27c",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 39,
=======
                  "duration": 99,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.hasRole(_roles.default.ADMIN, hre.addr.deployer)).to.equal(true);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "fdd58bb4-84a4-4052-a7f0-0b5462da3b3b",
                  "parentUUID": "ada2d20d-5144-4682-bdad-50dc8802c677",
=======
                  "uuid": "72647681-909e-49c8-a2cc-df3e98690978",
                  "parentUUID": "4c30c608-4d29-41c6-92df-4d657328d27c",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 78,
=======
                  "duration": 200,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await hre.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "d4e92099-b1f1-4312-8672-7c0a47475641",
                  "parentUUID": "ada2d20d-5144-4682-bdad-50dc8802c677",
=======
                  "uuid": "d3e781b5-cc22-40aa-9019-503867281881",
                  "parentUUID": "4c30c608-4d29-41c6-92df-4d657328d27c",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 123,
=======
                  "duration": 329,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _general.wrapContractWithSigner)(hre.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await hre.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "2cfb1558-421a-485f-ab1d-4baaed4b2c17",
                  "parentUUID": "ada2d20d-5144-4682-bdad-50dc8802c677",
=======
                  "uuid": "0056438c-e466-4070-bce4-a2288e22270f",
                  "parentUUID": "4c30c608-4d29-41c6-92df-4d657328d27c",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "b0681d68-219a-4d9b-a444-3497d0e946c0",
                "fdd58bb4-84a4-4052-a7f0-0b5462da3b3b",
                "d4e92099-b1f1-4312-8672-7c0a47475641",
                "2cfb1558-421a-485f-ab1d-4baaed4b2c17"
=======
                "515355a5-fbe8-4433-8155-fa5914ba2506",
                "72647681-909e-49c8-a2cc-df3e98690978",
                "d3e781b5-cc22-40aa-9019-503867281881",
                "0056438c-e466-4070-bce4-a2288e22270f"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 279,
=======
              "duration": 728,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "066c83e6-2199-40df-bf58-f18bfcad5d0a",
=======
          "uuid": "7209ab58-828e-49ff-b04a-9bc0cab7a64b",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Diamond",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a5d74c50-d383-4490-8eaa-c6e4f92e6685",
              "parentUUID": "066c83e6-2199-40df-bf58-f18bfcad5d0a",
=======
              "uuid": "08a3ba3f-ed66-461c-9b03-cda2900d4028",
              "parentUUID": "7209ab58-828e-49ff-b04a-9bc0cab7a64b",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "8a5db049-c278-49ff-b3f6-8d819ac70920",
=======
              "uuid": "64421985-c428-4f9c-9ad8-de95cb219a6f",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#upgrades",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 529,
=======
                  "duration": 519,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hre.ethers.utils.id('kresko.test.operator');\nconst isTestOperator = await hre.Diamond.hasRole(TEST_OPERATOR_ROLE, hre.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await hre.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], hre.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(hre.addr.userOne);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "9c5f18ad-21be-445a-a675-7971a3ec4be3",
                  "parentUUID": "8a5db049-c278-49ff-b3f6-8d819ac70920",
=======
                  "uuid": "bec35426-545c-44fc-9e3b-3ffa9e25d890",
                  "parentUUID": "64421985-c428-4f9c-9ad8-de95cb219a6f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 584,
=======
                  "duration": 437,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: 'SmockFacet',\n    initializerName: 'SmockInit',\n    initializerArgs: hre.addr.userOne\n});\nconst facetsBefore = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: 'SmockFacet'\n});\nconst facetsAfter = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "89a9e682-c094-471a-9bb2-cc9d2590dc9a",
                  "parentUUID": "8a5db049-c278-49ff-b3f6-8d819ac70920",
=======
                  "uuid": "c1c53aaa-efc5-4fa5-8ee5-c67af491b079",
                  "parentUUID": "64421985-c428-4f9c-9ad8-de95cb219a6f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 158,
=======
                  "duration": 227,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.nonadmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hre.Diamond.facetAddress(signature);\nconst functions = await hre.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hre.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hre.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await hre.ethers.getContractAt('AuthEvent', hre.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(hre.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(hre.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.nonadmin).acceptOwnership()).to.be.reverted;",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "83b40929-d498-4957-9c8c-b46077164e9a",
                  "parentUUID": "8a5db049-c278-49ff-b3f6-8d819ac70920",
=======
                  "uuid": "2a93e2da-185d-4d66-9e04-03274fa3bbeb",
                  "parentUUID": "64421985-c428-4f9c-9ad8-de95cb219a6f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 235,
=======
                  "duration": 380,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.nonadmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hre.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hre.deploy('DiamondOwnershipFacet', {\n    deploymentName: 'DiamondOwnershipFacet2'\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.nonadmin).acceptOwnership()).to.be.reverted;\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hre.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hre.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).acceptOwnership());\nconst currentOwner = await hre.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "808a8050-befc-41e4-a3a7-0b5f2f831d30",
                  "parentUUID": "8a5db049-c278-49ff-b3f6-8d819ac70920",
=======
                  "uuid": "781aedb6-2925-4f62-8415-b9dc876312be",
                  "parentUUID": "64421985-c428-4f9c-9ad8-de95cb219a6f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 390,
=======
                  "duration": 246,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock('SmockInit');\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hre.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(false);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "99dedc86-a234-4aa2-9097-23bdb522d06f",
                  "parentUUID": "8a5db049-c278-49ff-b3f6-8d819ac70920",
=======
                  "uuid": "f21af571-7979-4fb3-8dce-fb603f7c2567",
                  "parentUUID": "64421985-c428-4f9c-9ad8-de95cb219a6f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 837,
=======
                  "duration": 629,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await hre.ethers.getContractAt('SmockFacet', hre.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock('SmockFacet2');\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hre.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hre.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hre.ethers.getContractAt('SmockFacet2', hre.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "8d813057-c55f-4fca-8173-a3cb2dc534ef",
                  "parentUUID": "8a5db049-c278-49ff-b3f6-8d819ac70920",
=======
                  "uuid": "a4c96016-f2b3-40fc-9e95-3c502412556f",
                  "parentUUID": "64421985-c428-4f9c-9ad8-de95cb219a6f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "9c5f18ad-21be-445a-a675-7971a3ec4be3",
                "89a9e682-c094-471a-9bb2-cc9d2590dc9a",
                "83b40929-d498-4957-9c8c-b46077164e9a",
                "808a8050-befc-41e4-a3a7-0b5f2f831d30",
                "99dedc86-a234-4aa2-9097-23bdb522d06f",
                "8d813057-c55f-4fca-8173-a3cb2dc534ef"
=======
                "bec35426-545c-44fc-9e3b-3ffa9e25d890",
                "c1c53aaa-efc5-4fa5-8ee5-c67af491b079",
                "2a93e2da-185d-4d66-9e04-03274fa3bbeb",
                "781aedb6-2925-4f62-8415-b9dc876312be",
                "f21af571-7979-4fb3-8dce-fb603f7c2567",
                "a4c96016-f2b3-40fc-9e95-3c502412556f"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 2733,
=======
              "duration": 2438,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "7f469bf9-cf1d-49ac-805a-14a22475056e",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/03-protocol.ts",
          "file": "/src/test/diamond/03-protocol.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.defaultFixture)();",
              "err": {},
              "uuid": "9cc871a5-6960-458b-8662-ed28d4c783f5",
              "parentUUID": "7f469bf9-cf1d-49ac-805a-14a22475056e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "97b5a679-40e2-462a-9300-cf2da3eb9cf9",
              "title": "#protocol initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/03-protocol.ts",
              "file": "/src/test/diamond/03-protocol.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initialized all facets",
                  "fullTitle": "Diamond #protocol initialization initialized all facets",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hre.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._deploy.minterFacets,\n    ..._deploy.diamondFacets,\n    ..._deploy.scdpFacets,\n    ..._deploy.commonFacets\n].map(async (name)=>{\n    const deployment = await hre.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "5b6ad3e5-1a04-401b-8433-3a71d83d24b6",
                  "parentUUID": "97b5a679-40e2-462a-9300-cf2da3eb9cf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "initialized correct state",
                  "fullTitle": "Diamond #protocol initialization initialized correct state",
                  "timedOut": false,
                  "duration": 274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(4);\nconst { args } = await (0, _deploy.getCommonInitializer)(hre);\nconst { args: minterArgs } = await (0, _deploy.getMinterInitializer)(hre);\nconst { args: scdpArgs } = await (0, _deploy.getSCDPInitializer)(hre);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.SAFETY_COUNCIL, hre.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getFeeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await hre.Diamond.getMinCollateralRatio()).to.equal(minterArgs.minCollateralRatio);\nconst scdpParams = await hre.Diamond.getCurrentParametersSCDP();\n(0, _chai.expect)(scdpParams.minCollateralRatio).to.equal(scdpArgs.minCollateralRatio);\n(0, _chai.expect)(scdpParams.liquidationThreshold).to.equal(scdpArgs.liquidationThreshold);\n(0, _chai.expect)(scdpParams.swapFeeRecipient).to.equal(scdpArgs.swapFeeRecipient);\n(0, _chai.expect)(await hre.Diamond.getMinDebtValue()).to.equal(args.minDebtValue);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(args.oracleDeviationPct);",
                  "err": {},
                  "uuid": "6745cf1d-391a-48f9-90ce-c011327b609b",
                  "parentUUID": "97b5a679-40e2-462a-9300-cf2da3eb9cf9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b6ad3e5-1a04-401b-8433-3a71d83d24b6",
                "6745cf1d-391a-48f9-90ce-c011327b609b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "93530ae6-804e-43be-adc8-bfc69203f3c5",
=======
          "uuid": "0f5b2de0-93ce-4231-8084-45145a83f8db",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Forking",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "878e0a48-d65e-4aae-9fd1-a8bac378af93",
=======
              "uuid": "f5316e3a-e292-42ec-808a-2caae43bce11",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#setup",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "60c0a03a-9123-4382-8dd3-9d4708643094",
                  "parentUUID": "878e0a48-d65e-4aae-9fd1-a8bac378af93",
=======
                  "uuid": "12d3f08a-0d6a-4e3d-90ff-009fbe0ee745",
                  "parentUUID": "f5316e3a-e292-42ec-808a-2caae43bce11",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
<<<<<<< HEAD
                "60c0a03a-9123-4382-8dd3-9d4708643094"
=======
                "12d3f08a-0d6a-4e3d-90ff-009fbe0ee745"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "ae125f61-1202-4caf-aa1c-71051bf2bccf",
=======
              "uuid": "25bf4ac0-4e58-42d4-8b02-504034329e4e",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "09abed39-84bd-48f0-b581-8ece48add00a",
                  "parentUUID": "ae125f61-1202-4caf-aa1c-71051bf2bccf",
=======
                  "uuid": "0af6fa97-3462-41c9-85b4-30efde8f27db",
                  "parentUUID": "25bf4ac0-4e58-42d4-8b02-504034329e4e",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
<<<<<<< HEAD
                "09abed39-84bd-48f0-b581-8ece48add00a"
=======
                "0af6fa97-3462-41c9-85b4-30efde8f27db"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "ebadaab1-91a1-4c7c-8b3b-0f483de8e495",
=======
              "uuid": "4565046f-865d-45ed-baf5-728d8ab91f18",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#facet-upgrade-16-05-2023",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works",
                  "fullTitle": "Forking #facet-upgrade-16-05-2023 works",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "94b26f49-78a1-4c63-91a3-8afb7c56ac69",
                  "parentUUID": "ebadaab1-91a1-4c7c-8b3b-0f483de8e495",
=======
                  "uuid": "86e9214a-fffe-4197-bdb4-1410c5450886",
                  "parentUUID": "4565046f-865d-45ed-baf5-728d8ab91f18",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
<<<<<<< HEAD
                "94b26f49-78a1-4c63-91a3-8afb7c56ac69"
=======
                "86e9214a-fffe-4197-bdb4-1410c5450886"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "92d156ab-313c-4612-83ef-81d3d1cbe9b2",
=======
          "uuid": "b2292b1c-6e8f-409d-8e69-3168cbc7a415",
>>>>>>> origin/dev-159-syth-wrap
          "title": "KreskoAsset",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "eaee9f34-57b2-4340-b16b-0086aa09031d",
=======
              "uuid": "33d2800d-3cae-4976-b96a-f1b4ec64dd93",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#initialization - anchor",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "f = await (0, _fixtures.kreskoAssetFixture)({\n    name,\n    symbol\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "1802b7bb-907e-4ede-9286-2376aa2b9fe3",
                  "parentUUID": "eaee9f34-57b2-4340-b16b-0086aa09031d",
=======
                  "uuid": "61aff8eb-bb7a-4a2e-b2fb-9279bb017da6",
                  "parentUUID": "33d2800d-3cae-4976-b96a-f1b4ec64dd93",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
<<<<<<< HEAD
                  "code": "await (0, _chai.expect)(f.KreskoAsset.initialize(name, symbol, 18, hre.addr.deployer, hre.Diamond.address)).to.be.reverted;",
                  "err": {},
                  "uuid": "0a608cde-2f14-4a05-b937-62cf10ee8417",
                  "parentUUID": "eaee9f34-57b2-4340-b16b-0086aa09031d",
=======
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, hre.addr.deployer, hre.Diamond.address, hre.ethers.constants.AddressZero, 0, hre.addr.deployer, 0, 0)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "143064b7-e40e-477f-ab59-4304f3938abf",
                  "parentUUID": "33d2800d-3cae-4976-b96a-f1b4ec64dd93",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "555f27e9-a0b3-4833-acb6-83876125e738",
                  "parentUUID": "eaee9f34-57b2-4340-b16b-0086aa09031d",
=======
                  "uuid": "ec64bd74-9af5-4e0a-9cdb-c326058b0230",
                  "parentUUID": "33d2800d-3cae-4976-b96a-f1b4ec64dd93",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 23,
=======
                  "duration": 17,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await f.KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.default.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.default.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "72ef887e-5825-438d-8323-787ea56dd3b4",
                  "parentUUID": "eaee9f34-57b2-4340-b16b-0086aa09031d",
=======
                  "uuid": "deca6cbd-1319-413d-bc8a-e1ed7935968b",
                  "parentUUID": "33d2800d-3cae-4976-b96a-f1b4ec64dd93",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 17,
=======
                  "duration": 11,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "33310d29-c77e-48c6-b32d-cc71804fa823",
                  "parentUUID": "eaee9f34-57b2-4340-b16b-0086aa09031d",
=======
                  "uuid": "2069d71a-3af4-4053-a26c-8eb5cc749fe4",
                  "parentUUID": "33d2800d-3cae-4976-b96a-f1b4ec64dd93",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "0a608cde-2f14-4a05-b937-62cf10ee8417",
                "72ef887e-5825-438d-8323-787ea56dd3b4",
                "33310d29-c77e-48c6-b32d-cc71804fa823"
              ],
              "failures": [],
              "pending": [
                "555f27e9-a0b3-4833-acb6-83876125e738"
              ],
              "skipped": [],
              "duration": 47,
=======
                "143064b7-e40e-477f-ab59-4304f3938abf",
                "deca6cbd-1319-413d-bc8a-e1ed7935968b",
                "2069d71a-3af4-4053-a26c-8eb5cc749fe4"
              ],
              "failures": [],
              "pending": [
                "ec64bd74-9af5-4e0a-9cdb-c326058b0230"
              ],
              "skipped": [],
              "duration": 35,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "541b19c8-d1e6-4c7b-abc5-539cdf95254b",
=======
              "uuid": "70753967-4dc6-4950-94fb-b2cdd59a838d",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#initialization - wrapped",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(f.KreskoAssetAnchor.initialize(f.KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.reverted;",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "92fa6d5e-6e0a-4157-9de9-a64ebcfce24c",
                  "parentUUID": "541b19c8-d1e6-4c7b-abc5-539cdf95254b",
=======
                  "uuid": "4c99083a-3d62-4c22-8313-ab15d3bd362a",
                  "parentUUID": "70753967-4dc6-4950-94fb-b2cdd59a838d",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 26,
=======
                  "duration": 21,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(anchorName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(anchorSymbol);\n(0, _chai.expect)(await f.KreskoAssetAnchor.asset()).to.equal(f.KreskoAsset.address);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.default.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.default.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalAssets()).to.equal(await f.KreskoAsset.totalSupply());\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "4fe829c1-e038-420d-8bf6-78cc52c99ca0",
                  "parentUUID": "541b19c8-d1e6-4c7b-abc5-539cdf95254b",
=======
                  "uuid": "00194a73-3744-485c-9c7e-49f6bcd479bc",
                  "parentUUID": "70753967-4dc6-4950-94fb-b2cdd59a838d",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "e864b839-c333-4d7d-a2a2-41af78e0a0bf",
                  "parentUUID": "541b19c8-d1e6-4c7b-abc5-539cdf95254b",
=======
                  "uuid": "df26d50f-3fc3-47b9-801c-486d7601d9e9",
                  "parentUUID": "70753967-4dc6-4950-94fb-b2cdd59a838d",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 22,
=======
                  "duration": 17,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(newSymbol);\nawait f.KreskoAssetAnchor.reinitializeERC20(name, symbol, 3);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "aeb31476-54cc-4422-86bb-a1085dc04135",
                  "parentUUID": "541b19c8-d1e6-4c7b-abc5-539cdf95254b",
=======
                  "uuid": "5db3f52a-8229-480d-9176-934b010fa315",
                  "parentUUID": "70753967-4dc6-4950-94fb-b2cdd59a838d",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "92fa6d5e-6e0a-4157-9de9-a64ebcfce24c",
                "4fe829c1-e038-420d-8bf6-78cc52c99ca0",
                "aeb31476-54cc-4422-86bb-a1085dc04135"
              ],
              "failures": [],
              "pending": [
                "e864b839-c333-4d7d-a2a2-41af78e0a0bf"
              ],
              "skipped": [],
              "duration": 55,
=======
                "4c99083a-3d62-4c22-8313-ab15d3bd362a",
                "00194a73-3744-485c-9c7e-49f6bcd479bc",
                "5db3f52a-8229-480d-9176-934b010fa315"
              ],
              "failures": [],
              "pending": [
                "df26d50f-3fc3-47b9-801c-486d7601d9e9"
              ],
              "skipped": [],
              "duration": 45,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "8d103cf5-a210-45a9-8a77-e3c081bfc8f9",
=======
          "uuid": "74eeacc1-de1c-4282-9d26-d91db71129d6",
>>>>>>> origin/dev-159-syth-wrap
          "title": "KreskoAsset",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "({ KreskoAsset } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH'\n}));\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_roles.default.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "59097c70-e28d-4d7a-ad60-2c485bcc42d3",
              "parentUUID": "8d103cf5-a210-45a9-8a77-e3c081bfc8f9",
=======
              "code": "({ KreskoAsset  } = await (0, _test.kreskoAssetFixture)({\n    krAsset: 'KreskoAsset5'\n}));\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "452637db-5e27-48ea-a399-433e69a69ab2",
              "parentUUID": "74eeacc1-de1c-4282-9d26-d91db71129d6",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "fbdf3e1f-4faa-423b-92cd-5d59da677558",
=======
              "uuid": "480866eb-b022-4935-a187-0a9bae172dc7",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#mint",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "70e28119-f226-4e90-acd2-0ef8ddd4442f",
                  "parentUUID": "fbdf3e1f-4faa-423b-92cd-5d59da677558",
=======
                  "uuid": "b86adda4-61df-427c-9f42-b62b1d43757a",
                  "parentUUID": "480866eb-b022-4935-a187-0a9bae172dc7",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 18,
=======
                  "duration": 15,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "f10bb4ee-37c7-4fc6-b5f2-3ecd1e6857dd",
                  "parentUUID": "fbdf3e1f-4faa-423b-92cd-5d59da677558",
=======
                  "uuid": "b809275c-ab71-47b4-85ed-1a42f6f9ac7e",
                  "parentUUID": "480866eb-b022-4935-a187-0a9bae172dc7",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.reverted;\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "e5b6def4-9168-497d-be23-6bed29de611d",
                  "parentUUID": "fbdf3e1f-4faa-423b-92cd-5d59da677558",
=======
                  "uuid": "0c984b3f-a44d-421d-8504-935325609508",
                  "parentUUID": "480866eb-b022-4935-a187-0a9bae172dc7",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 32,
=======
                  "duration": 21,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.renounceRole(_roles.default.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.admin).mint(this.owner.address, this.mintAmount)).to.be.reverted;",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "8d24519f-10b2-4739-aa22-fb8f0da0cd49",
                  "parentUUID": "fbdf3e1f-4faa-423b-92cd-5d59da677558",
=======
                  "uuid": "4b466eec-67dc-4cd2-8438-ad4c29495fcc",
                  "parentUUID": "480866eb-b022-4935-a187-0a9bae172dc7",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "70e28119-f226-4e90-acd2-0ef8ddd4442f",
                "f10bb4ee-37c7-4fc6-b5f2-3ecd1e6857dd",
                "e5b6def4-9168-497d-be23-6bed29de611d",
                "8d24519f-10b2-4739-aa22-fb8f0da0cd49"
=======
                "b86adda4-61df-427c-9f42-b62b1d43757a",
                "b809275c-ab71-47b4-85ed-1a42f6f9ac7e",
                "0c984b3f-a44d-421d-8504-935325609508",
                "4b466eec-67dc-4cd2-8438-ad4c29495fcc"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 107,
=======
              "duration": 80,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "4db8d34f-8532-4907-8ecd-59fd2ec2b27b",
=======
              "uuid": "b9c69f12-5925-42d8-999b-c3ddca90c99f",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#burn",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "d3717130-eaf0-4c5f-96b0-acb8179805e5",
                  "parentUUID": "4db8d34f-8532-4907-8ecd-59fd2ec2b27b",
=======
                  "uuid": "62472bed-c2f2-407c-afaa-6218a3d7a203",
                  "parentUUID": "b9c69f12-5925-42d8-999b-c3ddca90c99f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "6b2f2a80-9aa1-4a52-8ac3-3966f0031e1a",
                  "parentUUID": "4db8d34f-8532-4907-8ecd-59fd2ec2b27b",
=======
                  "uuid": "b83ebd5d-5cb9-4f38-93fd-1c8602f53e32",
                  "parentUUID": "b9c69f12-5925-42d8-999b-c3ddca90c99f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 25,
=======
                  "duration": 23,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).approve(hre.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "8b5573de-41be-4103-b685-3b3d80d3fdff",
                  "parentUUID": "4db8d34f-8532-4907-8ecd-59fd2ec2b27b",
=======
                  "uuid": "89983956-78ee-48f7-a100-cbb66401af01",
                  "parentUUID": "b9c69f12-5925-42d8-999b-c3ddca90c99f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 17,
=======
                  "duration": 11,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await KreskoAsset.balanceOf(hre.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "3be86eb3-a5e2-40b2-aeb0-bc42dbb2f0d9",
                  "parentUUID": "4db8d34f-8532-4907-8ecd-59fd2ec2b27b",
=======
                  "uuid": "8f438ad2-42db-4d53-9106-d0ba22fccbc9",
                  "parentUUID": "b9c69f12-5925-42d8-999b-c3ddca90c99f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 30,
=======
                  "duration": 20,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.connect(hre.users.userTwo).burn(hre.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hre.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "2d192b81-bae7-4475-8869-6b806988df26",
                  "parentUUID": "4db8d34f-8532-4907-8ecd-59fd2ec2b27b",
=======
                  "uuid": "1fe7c601-9a77-4864-98ce-29601be4b2ac",
                  "parentUUID": "b9c69f12-5925-42d8-999b-c3ddca90c99f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "6b2f2a80-9aa1-4a52-8ac3-3966f0031e1a",
                "8b5573de-41be-4103-b685-3b3d80d3fdff",
                "3be86eb3-a5e2-40b2-aeb0-bc42dbb2f0d9",
                "2d192b81-bae7-4475-8869-6b806988df26"
=======
                "b83ebd5d-5cb9-4f38-93fd-1c8602f53e32",
                "89983956-78ee-48f7-a100-cbb66401af01",
                "8f438ad2-42db-4d53-9106-d0ba22fccbc9",
                "1fe7c601-9a77-4864-98ce-29601be4b2ac"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 91,
=======
              "duration": 71,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "ec4d2c3f-009c-4b49-b780-7f6ec0948e25",
=======
          "uuid": "25f7b80a-3844-414c-aef8-197acb3ad23f",
>>>>>>> origin/dev-159-syth-wrap
          "title": "KreskoAsset",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 181,
=======
              "duration": 47,
>>>>>>> origin/dev-159-syth-wrap
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "const result = await hre.deployments.fixture('diamond-init');\nif (result.Diamond) {\n    hre.Diamond = (0, _redstone.wrapKresko)(await hre.getContractOrFork('Kresko'));\n}\nKreskoAsset = (await (0, _createkrasset.createKrAsset)('krETH', 'Ether')).KreskoAsset;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "cf0f7dcf-6921-4fd4-b2c3-ef2a1ce37543",
              "parentUUID": "ec4d2c3f-009c-4b49-b780-7f6ec0948e25",
=======
              "code": "// Deploy WETH\n[WETH] = await hre.deploy(\"WETH\", {\n    from: hre.addr.deployer\n});\n// Give WETH to deployer\nawait WETH.connect(hre.users.devOne).deposit({\n    value: (0, _lib.toBig)(100)\n});\n({ KreskoAsset , KreskoAssetAnchor  } = await (0, _test.kreskoAssetFixture)({\n    krAsset: \"KreskoAsset4\",\n    token: WETH.address,\n    tokenDecimals: await WETH.decimals()\n}));\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);\n// set Kresko Anchor token address in KreskoAsset\nawait KreskoAsset.connect(hre.users.admin).setAnchorToken(KreskoAssetAnchor.address);\n// Approve WETH for KreskoAsset\nawait WETH.connect(hre.users.devOne).approve(KreskoAsset.address, hre.ethers.constants.MaxUint256);\n// Set fee recipient\nawait KreskoAsset.connect(hre.users.admin).setFeeRecipient(hre.addr.devTwo);",
              "err": {},
              "uuid": "bfed582f-08f5-4f8b-8783-983513d34e3c",
              "parentUUID": "25f7b80a-3844-414c-aef8-197acb3ad23f",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "17556fd8-f854-432c-ad75-aefe1d162336",
=======
              "uuid": "b9537b09-18a6-4d6a-9896-e2db2268d257",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#rebase",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "2e378a31-8f4f-49d8-bcb4-131fde49c89a",
                  "parentUUID": "17556fd8-f854-432c-ad75-aefe1d162336",
=======
                  "uuid": "b1901611-22b3-4625-8efa-c27b4d492578",
                  "parentUUID": "b9537b09-18a6-4d6a-9896-e2db2268d257",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "773f7bae-faea-4993-9b99-76180cc99288",
                  "parentUUID": "17556fd8-f854-432c-ad75-aefe1d162336",
=======
                  "uuid": "78c5f889-cdfe-4987-9616-98cbd5404767",
                  "parentUUID": "b9537b09-18a6-4d6a-9896-e2db2268d257",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "840309ec-44bd-4c17-9573-7898acd466a3",
                  "parentUUID": "17556fd8-f854-432c-ad75-aefe1d162336",
=======
                  "uuid": "dd82358c-882f-4fdf-9f19-e451cc1576fc",
                  "parentUUID": "b9537b09-18a6-4d6a-9896-e2db2268d257",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
=======
                  "uuid": "2330a22c-8139-4df5-b280-721703b2e9f1",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#balance + supply",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 11,
=======
                      "duration": 9,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7158cd92-c0af-468b-b3a5-05930607910a",
                      "parentUUID": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
=======
                      "uuid": "537622cc-55f5-4b46-ba6a-1a00d76954cb",
                      "parentUUID": "2330a22c-8139-4df5-b280-721703b2e9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "df9f9e90-b3b1-44e8-b165-ccf965d88e3c",
                      "parentUUID": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
=======
>>>>>>> origin/dev-159-syth-wrap
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
<<<<<<< HEAD
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "257d564b-07a4-46e1-bc5b-b6975b97faa6",
                      "parentUUID": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
=======
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "bac68248-a864-477e-8550-4fbc20a4acd8",
                      "parentUUID": "2330a22c-8139-4df5-b280-721703b2e9f1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "7efe5814-ac77-472a-b2f7-c81bffe28f0c",
                      "parentUUID": "2330a22c-8139-4df5-b280-721703b2e9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "c5c4ce04-77ed-49e6-8916-f953ccb46245",
                      "parentUUID": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
=======
                      "uuid": "18a530de-1af2-460e-a0d1-08dfe95aaebc",
                      "parentUUID": "2330a22c-8139-4df5-b280-721703b2e9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 15,
=======
                      "duration": 13,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d61ed080-e814-41e9-bef8-6f469e015b7c",
                      "parentUUID": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
=======
                      "uuid": "076d2693-a734-4fae-ad9c-947d6d528267",
                      "parentUUID": "2330a22c-8139-4df5-b280-721703b2e9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 13,
=======
                      "duration": 12,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3d025dcc-7530-4833-a5e7-fac84a33aed5",
                      "parentUUID": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
=======
                      "uuid": "4b45e1f6-5fa6-4d4a-b105-bb626a83cb39",
                      "parentUUID": "2330a22c-8139-4df5-b280-721703b2e9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "fecfd986-b520-4775-b143-b966ce119c7d",
                      "parentUUID": "99b04fa0-d55f-4b9c-b07b-597dd1dac208",
=======
                      "uuid": "6c1fa113-7939-4270-8fe6-2031feb557c5",
                      "parentUUID": "2330a22c-8139-4df5-b280-721703b2e9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "7158cd92-c0af-468b-b3a5-05930607910a",
                    "df9f9e90-b3b1-44e8-b165-ccf965d88e3c",
                    "257d564b-07a4-46e1-bc5b-b6975b97faa6",
                    "c5c4ce04-77ed-49e6-8916-f953ccb46245",
                    "d61ed080-e814-41e9-bef8-6f469e015b7c",
                    "3d025dcc-7530-4833-a5e7-fac84a33aed5",
                    "fecfd986-b520-4775-b143-b966ce119c7d"
=======
                    "537622cc-55f5-4b46-ba6a-1a00d76954cb",
                    "bac68248-a864-477e-8550-4fbc20a4acd8",
                    "7efe5814-ac77-472a-b2f7-c81bffe28f0c",
                    "18a530de-1af2-460e-a0d1-08dfe95aaebc",
                    "076d2693-a734-4fae-ad9c-947d6d528267",
                    "4b45e1f6-5fa6-4d4a-b105-bb626a83cb39",
                    "6c1fa113-7939-4270-8fe6-2031feb557c5"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 96,
=======
                  "duration": 87,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "2d31430a-f0a9-4e1c-93a8-85643d9e9243",
=======
                  "uuid": "1d07044f-8722-492b-a661-2878d4e10115",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#transfer",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 22,
=======
                      "duration": 20,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "efeba59f-fd08-48a4-b9d4-abb798690c64",
                      "parentUUID": "2d31430a-f0a9-4e1c-93a8-85643d9e9243",
=======
                      "uuid": "654c0b20-313d-4e58-a8fe-da5e58790c60",
                      "parentUUID": "1d07044f-8722-492b-a661-2878d4e10115",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 23,
=======
                      "duration": 22,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3bd0a14b-94dd-4b80-9fac-fde0231f1d01",
                      "parentUUID": "2d31430a-f0a9-4e1c-93a8-85643d9e9243",
=======
                      "uuid": "faeb11e6-890c-42e0-96c2-f9a8620838a9",
                      "parentUUID": "1d07044f-8722-492b-a661-2878d4e10115",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 38,
=======
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "25e91019-1bcc-4e0d-97a8-e0b64c9b3760",
                      "parentUUID": "1d07044f-8722-492b-a661-2878d4e10115",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 33,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "e39ba4c3-32dc-4367-ad23-3709fb96348c",
                      "parentUUID": "2d31430a-f0a9-4e1c-93a8-85643d9e9243",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "a37a1944-3931-4df7-bd4a-1a7f899aeb74",
                      "parentUUID": "2d31430a-f0a9-4e1c-93a8-85643d9e9243",
=======
                      "uuid": "63402524-5c0f-4e8f-8f97-d23b44545803",
                      "parentUUID": "1d07044f-8722-492b-a661-2878d4e10115",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 36,
=======
                      "duration": 30,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "615de7bf-5209-469d-8cb2-d781431a2d4b",
                      "parentUUID": "2d31430a-f0a9-4e1c-93a8-85643d9e9243",
=======
                      "uuid": "32592fab-44c1-4d53-aa45-93ad40153382",
                      "parentUUID": "1d07044f-8722-492b-a661-2878d4e10115",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 37,
=======
                      "duration": 34,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "802027ff-24b0-494a-b6d7-427a92bfcf15",
                      "parentUUID": "2d31430a-f0a9-4e1c-93a8-85643d9e9243",
=======
                      "uuid": "94352bc1-59aa-4d7d-9f87-5228c843d00d",
                      "parentUUID": "1d07044f-8722-492b-a661-2878d4e10115",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "efeba59f-fd08-48a4-b9d4-abb798690c64",
                    "3bd0a14b-94dd-4b80-9fac-fde0231f1d01",
                    "e39ba4c3-32dc-4367-ad23-3709fb96348c",
                    "a37a1944-3931-4df7-bd4a-1a7f899aeb74",
                    "615de7bf-5209-469d-8cb2-d781431a2d4b",
                    "802027ff-24b0-494a-b6d7-427a92bfcf15"
=======
                    "654c0b20-313d-4e58-a8fe-da5e58790c60",
                    "faeb11e6-890c-42e0-96c2-f9a8620838a9",
                    "25e91019-1bcc-4e0d-97a8-e0b64c9b3760",
                    "63402524-5c0f-4e8f-8f97-d23b44545803",
                    "32592fab-44c1-4d53-aa45-93ad40153382",
                    "94352bc1-59aa-4d7d-9f87-5228c843d00d"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 192,
=======
                  "duration": 173,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
<<<<<<< HEAD
                "2e378a31-8f4f-49d8-bcb4-131fde49c89a",
                "773f7bae-faea-4993-9b99-76180cc99288",
                "840309ec-44bd-4c17-9573-7898acd466a3"
=======
                "b1901611-22b3-4625-8efa-c27b4d492578",
                "78c5f889-cdfe-4987-9616-98cbd5404767",
                "dd82358c-882f-4fdf-9f19-e451cc1576fc"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 29,
=======
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "627e63ee-e2de-49bc-8aff-d311218818f3",
              "title": "Deposit and Withdraw",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c55b212a-577b-48f8-a3ba-7aebdb89eda1",
                  "title": "Deposit",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "cannot deposit when paused",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit cannot deposit when paused",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).pause();\nawait (0, _chai.expect)(KreskoAsset.deposit(hre.addr.devOne, (0, _lib.toBig)(10))).to.be.revertedWith(\"Pausable: paused\");\nawait KreskoAsset.connect(hre.users.admin).unpause();",
                      "err": {},
                      "uuid": "40e63fe7-9d04-4254-a125-d60b8a6c48a8",
                      "parentUUID": "c55b212a-577b-48f8-a3ba-7aebdb89eda1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can deposit with token",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit can deposit with token",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.devOne).deposit(hre.addr.devOne, (0, _lib.toBig)(10));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.devOne)).to.equal((0, _lib.toBig)(10));",
                      "err": {},
                      "uuid": "205160f4-d074-476f-b4f7-f4329844ed64",
                      "parentUUID": "c55b212a-577b-48f8-a3ba-7aebdb89eda1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot deposit native token if not enabled",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit cannot deposit native token if not enabled",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(10)\n})).to.be.reverted;",
                      "err": {},
                      "uuid": "1b019da1-1098-483a-8124-4a342a2edb29",
                      "parentUUID": "c55b212a-577b-48f8-a3ba-7aebdb89eda1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can deposit native token if enabled",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit can deposit native token if enabled",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nconst prevBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\nawait hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(10, 18)\n});\nconst currentBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\n(0, _chai.expect)(currentBalance.sub(prevBalance)).to.equal((0, _lib.toBig)(10));",
                      "err": {},
                      "uuid": "ba722db8-f28f-45b6-a857-6662074c42bb",
                      "parentUUID": "c55b212a-577b-48f8-a3ba-7aebdb89eda1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "transfers the correct fees to feeRecipient",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Deposit transfers the correct fees to feeRecipient",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).setOpenFee((0, _lib.toBig)(1, 17));\nawait KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nlet prevBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst prevWETHBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\nawait KreskoAsset.connect(hre.users.devOne).deposit(hre.addr.devOne, (0, _lib.toBig)(10));\nlet currentBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst currentWETHBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _lib.toBig)(9));\n(0, _chai.expect)(currentWETHBalanceDevTwo.sub(prevWETHBalanceDevTwo)).to.equal((0, _lib.toBig)(1));\nprevBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst prevBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\nawait hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(10)\n});\ncurrentBalanceDevOne = await KreskoAsset.balanceOf(hre.addr.devOne);\nconst currentBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _lib.toBig)(9));\n(0, _chai.expect)(currentBalanceDevTwo.sub(prevBalanceDevTwo)).to.equal((0, _lib.toBig)(1));\n// Set openfee to 0\nawait KreskoAsset.connect(hre.users.admin).setOpenFee(0);",
                      "err": {},
                      "uuid": "93f62728-0572-4420-a195-6303ad66b767",
                      "parentUUID": "c55b212a-577b-48f8-a3ba-7aebdb89eda1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40e63fe7-9d04-4254-a125-d60b8a6c48a8",
                    "205160f4-d074-476f-b4f7-f4329844ed64",
                    "1b019da1-1098-483a-8124-4a342a2edb29",
                    "ba722db8-f28f-45b6-a857-6662074c42bb",
                    "93f62728-0572-4420-a195-6303ad66b767"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 215,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "eda5738c-faf4-4fe4-90d6-d90e9b0b1e49",
                  "title": "Withdraw",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Withdraw\"",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw \"before each\" hook in \"Withdraw\"",
                      "timedOut": false,
                      "duration": 83,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit some tokens here\nawait KreskoAsset.connect(hre.users.devOne).deposit(hre.addr.devOne, (0, _lib.toBig)(10));\nawait KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nawait hre.users.devOne.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _lib.toBig)(100)\n});",
                      "err": {},
                      "uuid": "d64dd5f5-7eed-4fcb-9141-f0a9401991dc",
                      "parentUUID": "eda5738c-faf4-4fe4-90d6-d90e9b0b1e49",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "cannot withdraw when paused",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw cannot withdraw when paused",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).pause();\nawait (0, _chai.expect)(KreskoAsset.withdraw((0, _lib.toBig)(1), false)).to.be.revertedWith(\"Pausable: paused\");\nawait KreskoAsset.connect(hre.users.admin).unpause();",
                      "err": {},
                      "uuid": "b830a5b8-9dd8-4b6f-ba88-2d662ec75a61",
                      "parentUUID": "eda5738c-faf4-4fe4-90d6-d90e9b0b1e49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can withdraw",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw can withdraw",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const prevBalance = await WETH.balanceOf(hre.addr.devOne);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(1), false);\nconst currentBalance = await WETH.balanceOf(hre.addr.devOne);\n(0, _chai.expect)(currentBalance.sub(prevBalance)).to.equal((0, _lib.toBig)(1));",
                      "err": {},
                      "uuid": "91abd418-4c2a-4a25-aef0-13ddd7af15a0",
                      "parentUUID": "eda5738c-faf4-4fe4-90d6-d90e9b0b1e49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can withdraw native token if enabled",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw can withdraw native token if enabled",
                      "timedOut": false,
                      "duration": 19,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.connect(hre.users.admin).enableNativeToken(true);\nconst prevBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(1), true);\nconst currentBalance = await KreskoAsset.balanceOf(hre.addr.devOne);\n(0, _chai.expect)(prevBalance.sub(currentBalance)).to.equal((0, _lib.toBig)(1));",
                      "err": {},
                      "uuid": "50184669-3163-4b9a-8e8a-37f20ff87352",
                      "parentUUID": "eda5738c-faf4-4fe4-90d6-d90e9b0b1e49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "transfers the correct fees to feeRecipient",
                      "fullTitle": "KreskoAsset Deposit and Withdraw Withdraw transfers the correct fees to feeRecipient",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// set close fee to 10%\nawait KreskoAsset.connect(hre.users.admin).setCloseFee((0, _lib.toBig)(1, 17));\nconst prevBalanceDevOne = await WETH.balanceOf(hre.addr.devOne);\nlet prevBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(10), false);\nconst currentBalanceDevOne = await WETH.balanceOf(hre.addr.devOne);\nlet currentBalanceDevTwo = await WETH.balanceOf(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _lib.toBig)(9));\n(0, _chai.expect)(currentBalanceDevTwo.sub(prevBalanceDevTwo)).to.equal((0, _lib.toBig)(1));\n// Withdraw native token and check if fee is transferred\nprevBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\nawait KreskoAsset.connect(hre.users.devOne).withdraw((0, _lib.toBig)(10), true);\ncurrentBalanceDevTwo = await hre.ethers.provider.getBalance(hre.addr.devTwo);\n(0, _chai.expect)(currentBalanceDevTwo.sub(prevBalanceDevTwo)).to.equal((0, _lib.toBig)(1));",
                      "err": {},
                      "uuid": "5699b3e7-0205-429f-9a70-dc59e819f2da",
                      "parentUUID": "eda5738c-faf4-4fe4-90d6-d90e9b0b1e49",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b830a5b8-9dd8-4b6f-ba88-2d662ec75a61",
                    "91abd418-4c2a-4a25-aef0-13ddd7af15a0",
                    "50184669-3163-4b9a-8e8a-37f20ff87352",
                    "5699b3e7-0205-429f-9a70-dc59e819f2da"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 78,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "63be6278-a2ea-4f35-b5c3-7ce0ed092d14",
=======
          "uuid": "175d700c-e13f-4001-9700-61d16b20323b",
>>>>>>> origin/dev-159-syth-wrap
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 193,
=======
              "duration": 258,
>>>>>>> origin/dev-159-syth-wrap
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "({ KreskoAsset, KreskoAssetAnchor } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH'\n}));\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_roles.default.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_roles.default.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "516b3b95-f445-4548-93f9-ab5d58d6b182",
              "parentUUID": "63be6278-a2ea-4f35-b5c3-7ce0ed092d14",
=======
              "code": "({ KreskoAsset , KreskoAssetAnchor  } = await (0, _test.kreskoAssetFixture)({\n    krAsset: \"KreskoAsset3\"\n}));\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "a9ce935e-6efa-4e4c-b80c-373d064c5de1",
              "parentUUID": "175d700c-e13f-4001-9700-61d16b20323b",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "26f9b1f7-067b-4b7e-baca-e82a1c32ac12",
=======
              "uuid": "93a952dd-acd8-4ad3-9c8c-8defb47340cb",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#minting and burning",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 21,
=======
                  "duration": 18,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount.add(_mocks.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "983bc3dc-f888-4d64-a0a8-6036d15b26a2",
                  "parentUUID": "26f9b1f7-067b-4b7e-baca-e82a1c32ac12",
=======
                  "uuid": "5600cec2-c790-438f-baeb-746a7907e519",
                  "parentUUID": "93a952dd-acd8-4ad3-9c8c-8defb47340cb",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "8860e444-3777-4dc2-a1f5-2de071e6f721",
                  "parentUUID": "26f9b1f7-067b-4b7e-baca-e82a1c32ac12",
=======
                  "uuid": "d125c63a-67df-45fa-914e-192f8bd99362",
                  "parentUUID": "93a952dd-acd8-4ad3-9c8c-8defb47340cb",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "351d2531-963d-4e5d-915b-f3fb12515070",
                  "parentUUID": "26f9b1f7-067b-4b7e-baca-e82a1c32ac12",
=======
                  "uuid": "2531dd6f-687d-4799-8fb0-ef9bb25eecc8",
                  "parentUUID": "93a952dd-acd8-4ad3-9c8c-8defb47340cb",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "933f609c-c344-4444-bbf1-f0fa398f1ac1",
                  "parentUUID": "26f9b1f7-067b-4b7e-baca-e82a1c32ac12",
=======
                  "uuid": "01000b44-3b04-48c3-8762-85b6f9f7bd6f",
                  "parentUUID": "93a952dd-acd8-4ad3-9c8c-8defb47340cb",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "1e70400e-e045-4359-ba22-12c5b35338a8",
                  "parentUUID": "26f9b1f7-067b-4b7e-baca-e82a1c32ac12",
=======
                  "uuid": "1e007aa8-21be-4ae7-a5f7-41245fb79ba9",
                  "parentUUID": "93a952dd-acd8-4ad3-9c8c-8defb47340cb",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "6f35669a-96ce-46b4-a1b6-9660522001f1",
=======
                  "uuid": "57bfd030-1850-416b-af61-01c5a3f83b60",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#rebases",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
<<<<<<< HEAD
                      "uuid": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                      "uuid": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "#conversions",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "e319da23-74a7-45e7-a227-16ab2de60014",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "f799ae42-f4f5-4f31-87e6-d5da25306fc9",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "950029a9-ed1a-4d87-84f5-8004c4e3cdb2",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "fb5b22f3-44d2-4445-8cd7-e4720baa0964",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "705e5891-078d-4737-b21d-4d2a36d7917a",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "9e97b3a9-6dc0-416d-b52e-61e351c054ba",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "87090899-8568-43b2-9b80-fb2be8a2f866",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "6d8642ae-115b-48b0-bc44-77ce2083daaa",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "26dd340f-0ef8-443d-87fe-35274c17fabe",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "0f7ca6ed-612c-44a3-a884-53349b85af79",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "184da2ec-c847-43b1-9a85-bef948f26e5a",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "235d2a84-343c-4f76-80bc-d6e3e97bd344",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "57cbbea7-5d38-4d77-a566-4a140af03ae9",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "e99c3f42-ebdd-4a98-be8c-5ca6bf86e4b9",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "1fb6890f-1368-44f7-9c91-b8f32093ae2e",
                          "parentUUID": "326a159e-1690-4c6f-96da-6010c0888651",
=======
                          "uuid": "6fcbaa70-6e79-43ca-80e1-ce501187543f",
                          "parentUUID": "7f938d83-2303-4216-b743-9451a46dd206",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
<<<<<<< HEAD
                        "e319da23-74a7-45e7-a227-16ab2de60014",
                        "950029a9-ed1a-4d87-84f5-8004c4e3cdb2",
                        "705e5891-078d-4737-b21d-4d2a36d7917a",
                        "87090899-8568-43b2-9b80-fb2be8a2f866",
                        "26dd340f-0ef8-443d-87fe-35274c17fabe",
                        "184da2ec-c847-43b1-9a85-bef948f26e5a",
                        "57cbbea7-5d38-4d77-a566-4a140af03ae9",
                        "1fb6890f-1368-44f7-9c91-b8f32093ae2e"
=======
                        "f799ae42-f4f5-4f31-87e6-d5da25306fc9",
                        "fb5b22f3-44d2-4445-8cd7-e4720baa0964",
                        "9e97b3a9-6dc0-416d-b52e-61e351c054ba",
                        "6d8642ae-115b-48b0-bc44-77ce2083daaa",
                        "0f7ca6ed-612c-44a3-a884-53349b85af79",
                        "235d2a84-343c-4f76-80bc-d6e3e97bd344",
                        "e99c3f42-ebdd-4a98-be8c-5ca6bf86e4b9",
                        "6fcbaa70-6e79-43ca-80e1-ce501187543f"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
<<<<<<< HEAD
                "983bc3dc-f888-4d64-a0a8-6036d15b26a2"
              ],
              "failures": [],
              "pending": [
                "8860e444-3777-4dc2-a1f5-2de071e6f721",
                "351d2531-963d-4e5d-915b-f3fb12515070",
                "933f609c-c344-4444-bbf1-f0fa398f1ac1",
                "1e70400e-e045-4359-ba22-12c5b35338a8"
              ],
              "skipped": [],
              "duration": 21,
=======
                "5600cec2-c790-438f-baeb-746a7907e519"
              ],
              "failures": [],
              "pending": [
                "d125c63a-67df-45fa-914e-192f8bd99362",
                "2531dd6f-687d-4799-8fb0-ef9bb25eecc8",
                "01000b44-3b04-48c3-8762-85b6f9f7bd6f",
                "1e007aa8-21be-4ae7-a5f7-41245fb79ba9"
              ],
              "skipped": [],
              "duration": 18,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "cafc70b1-fa89-4b9c-aafb-5f98578d315d",
=======
          "uuid": "beb2ac24-1f4c-43fc-a8ba-f73a1ffaeb38",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
<<<<<<< HEAD
              "uuid": "6ec61632-1736-4a57-8b83-73b08c81ffd3",
              "parentUUID": "cafc70b1-fa89-4b9c-aafb-5f98578d315d",
=======
              "uuid": "e225e693-b163-4340-b963-c97a88e9b5a9",
              "parentUUID": "beb2ac24-1f4c-43fc-a8ba-f73a1ffaeb38",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
<<<<<<< HEAD
              "uuid": "87ec5b0b-51d1-464f-ad02-82eae9a1ee56",
              "parentUUID": "cafc70b1-fa89-4b9c-aafb-5f98578d315d",
=======
              "uuid": "03db03cd-9a9d-4c05-8bc8-183c74aa487c",
              "parentUUID": "beb2ac24-1f4c-43fc-a8ba-f73a1ffaeb38",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
<<<<<<< HEAD
            "6ec61632-1736-4a57-8b83-73b08c81ffd3",
            "87ec5b0b-51d1-464f-ad02-82eae9a1ee56"
=======
            "e225e693-b163-4340-b963-c97a88e9b5a9",
            "03db03cd-9a9d-4c05-8bc8-183c74aa487c"
>>>>>>> origin/dev-159-syth-wrap
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "853dbb81-5f59-48f9-825b-9d4ce1db2774",
=======
          "uuid": "d4280ca2-916c-4fd2-a452-59211dd06568",
          "title": "Minter - Init",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _test.defaultFixture)();",
              "err": {},
              "uuid": "c4ad395b-62f2-4f2c-bd0b-e8f9ab0d4840",
              "parentUUID": "d4280ca2-916c-4fd2-a452-59211dd06568",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "445979d0-1768-4018-a6c6-569976884d06",
              "title": "#initialization",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 583,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst { args  } = await (0, _shared.getMinterInitializer)(hre);\n(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.hasRole(_test.Role.SAFETY_COUNCIL, hre.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getFeeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await hre.Diamond.getMinCollateralRatio()).to.equal(args.minCollateralRatio);\n(0, _chai.expect)(await hre.Diamond.getMinDebtValue()).to.equal(args.minDebtValue);",
                  "err": {},
                  "uuid": "601349b9-f9c5-40ec-bd2a-724b4ca8e176",
                  "parentUUID": "445979d0-1768-4018-a6c6-569976884d06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst initializer = await (0, _shared.getMinterInitializer)(hre);\nconst initializerContract = await hre.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initializeMinter(initializer.args);\nawait (0, _chai.expect)(hre.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "d9d753ba-162c-4a3e-a9bb-f04888956233",
                  "parentUUID": "445979d0-1768-4018-a6c6-569976884d06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hre.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._shared.minterFacets,\n    ..._shared.diamondFacets,\n    ..._shared.scdpFacets\n].map(async (name)=>{\n    const deployment = await hre.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "f37a1fbc-2c35-4b2d-90bd-2ce351fff121",
                  "parentUUID": "445979d0-1768-4018-a6c6-569976884d06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "601349b9-f9c5-40ec-bd2a-724b4ca8e176",
                "d9d753ba-162c-4a3e-a9bb-f04888956233",
                "f37a1fbc-2c35-4b2d-90bd-2ce351fff121"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 921,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a93d27df-9075-44fa-b100-8979f5da8e7a",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Minter - Configuration",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();",
              "err": {},
<<<<<<< HEAD
              "uuid": "bb922068-f135-489e-b1e8-c78d3ac89a3e",
              "parentUUID": "853dbb81-5f59-48f9-825b-9d4ce1db2774",
=======
              "uuid": "254bfb22-b68a-41ca-bf43-3721035e59a1",
              "parentUUID": "a93d27df-9075-44fa-b100-8979f5da8e7a",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
              "uuid": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#configuration",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 417,
=======
                  "duration": 696,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = (0, _mocks.testMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(hre.Diamond.updateMinCollateralRatio(update.minCollateralRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(update.MLR)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(0.05e4)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateSequencerGracePeriodTime(1000)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateExtOracleDecimals(2)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMinDebtValue(20e8)).to.not.be.reverted;\nconst { minCollateralRatio, maxLiquidationRatio, liquidationThreshold } = await hre.Diamond.getMinterParameters();\n(0, _chai.expect)(await hre.Diamond.getMinDebtValue()).to.equal(20e8);\n(0, _chai.expect)(await hre.Diamond.getExtOracleDecimals()).to.equal(2);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(0.05e4);\n(0, _chai.expect)(update.minCollateralRatio).to.equal(minCollateralRatio);\n(0, _chai.expect)(update.MLR).to.equal(maxLiquidationRatio);\n(0, _chai.expect)(update.liquidationThreshold).to.equal(liquidationThreshold);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "9d6aa8bc-4386-4fa2-8258-b1b8cd48ae01",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "uuid": "58e6577b-1938-4311-a854-45487257399a",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 564,
=======
                  "duration": 738,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, _collaterals.addMockExtAsset)(_mocks.testCollateralConfig);\n(0, _chai.expect)(await hre.Diamond.getCollateralExists(contract.address)).to.equal(true);\nconst priceOfOne = await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1));\n(0, _chai.expect)(Number(priceOfOne)).to.equal((0, _values.toBig)(_mocks.testCollateralConfig.price, 8));",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "f5721643-6322-4f92-b46b-9d3f4ac34253",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "uuid": "82b8db08-b975-466a-a4b9-be3b8728630f",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 898,
=======
                  "duration": 535,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, assetInfo } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await assetInfo();\nconst kreskoPriceAnswer = (0, _values.fromBig)(await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1)), 8);\nconst config = _mocks.testKrAssetConfig.krAssetConfig;\n(0, _chai.expect)(values.isKrAsset).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal(config.kFactor);\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_mocks.testKrAssetConfig.price);\n(0, _chai.expect)(values.supplyLimit).to.equal(config.supplyLimit);\n(0, _chai.expect)(values.closeFee).to.equal(config.closeFee);\n(0, _chai.expect)(values.openFee).to.equal(config.openFee);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "0d9b6790-de76-44d9-9a0f-e6c5357de1e8",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "uuid": "2d10a5b0-567d-4948-805e-ac041261cc1b",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 76,
=======
                  "duration": 202,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.getExtOracleDecimals()).to.equal(decimals);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "75d756d4-b35b-4ee1-96db-a5d5f57fd566",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "uuid": "6054f131-f0d0-447d-ae4f-a03b2efb463e",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidation ratio",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidation ratio",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 113,
=======
                  "duration": 299,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.getMaxLiquidationRatio();\nconst newMLR = 1.42e4;\n(0, _chai.expect)(currentMLM).to.not.eq(newMLR);\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(newMLR)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getMaxLiquidationRatio()).to.eq(newMLR);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "5d682b09-9a9b-4d48-be7d-ad9cfe87dcc5",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "uuid": "7927aab7-32e1-404e-915e-1cccc194a20c",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update oracle deviation pct",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 115,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentDeviationPct = await hre.Diamond.getOracleDeviationPct();\nconst newDeviationPct = 0.03e4;\n(0, _chai.expect)(currentDeviationPct).to.not.equal(newDeviationPct);\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newDeviationPct)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(newDeviationPct);",
                  "err": {},
                  "uuid": "d94acb2c-3ba0-4748-84f4-919fe7a93052",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 122,
=======
                  "duration": 297,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
<<<<<<< HEAD
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.KrAsset.address)).kFactor;\nconst newRatio = 1.2e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(f.KrAsset.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.KrAsset.address)).kFactor === newRatio).to.be.true;",
                  "err": {},
                  "uuid": "fe12ef5d-6354-4fbd-abf4-5f0534d14606",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "code": "const currentODPCT = await hre.Diamond.getOracleDeviationPct();\nconst newODPCT = (0, _lib.toBig)(0.3);\n(0, _chai.expect)(currentODPCT.eq(newODPCT)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newODPCT)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getOracleDeviationPct()).eq(newODPCT)).to.be.true;",
                  "err": {},
                  "uuid": "eb879ac4-52c2-4240-94fe-fa5adf5dd186",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getKreskoAsset(f.KrAsset.address)).kFactor;\nconst newRatio = (0, _lib.toBig)(1.2);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(f.KrAsset.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getKreskoAsset(f.KrAsset.address)).kFactor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "6df4a3d1-861f-4bc5-bda9-b743a9005d87",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.Collateral.address)).factor;\nconst newRatio = 0.9e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCollateralFactor(f.Collateral.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.Collateral.address)).factor === newRatio).to.be.true;",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "2beca6c2-ce59-49ed-aa7b-2305bf839d7b",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "uuid": "03d3384e-c648-4f66-bf98-eb79abb96632",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 469,
=======
                  "duration": 616,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oracleAnswer = (0, _values.fromBig)((await f.KrAsset.priceFeed.latestRoundData())[1], 8);\nconst priceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(priceOfOne);\n(0, _chai.expect)(oracleAnswer).to.equal(_mocks.testKrAssetConfig.price);\nconst update = {\n    kFactor: 1.2e4,\n    supplyLimit: (0, _values.toBig)(12000),\n    closeFee: 0.03e4,\n    openFee: 0.03e4,\n    anchor: f.KrAsset.anchor.address\n};\nconst FakeFeed = await (0, _oracle.getFakeOracle)(20);\nconst newConfig = await (0, _general.getAssetConfig)(f.KrAsset.contract, {\n    ..._mocks.testKrAssetConfig,\n    feed: FakeFeed.address,\n    price: 20,\n    krAssetConfig: update\n});\nawait hre.Diamond.updateFeeds(newConfig.assetStruct.underlyingId, newConfig.feedConfig);\nawait (0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateAsset(f.KrAsset.address, newConfig.assetStruct);\nconst newValues = await hre.Diamond.getAsset(f.KrAsset.address);\nconst updatedOracleAnswer = (0, _values.fromBig)((await FakeFeed.latestRoundData())[1], 8);\nconst newPriceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(newValues.isKrAsset).to.equal(true);\n(0, _chai.expect)(newValues.isCollateral).to.equal(false);\n(0, _chai.expect)(newValues.kFactor).to.equal(update.kFactor);\n(0, _chai.expect)(newValues.supplyLimit).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newPriceOfOne);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(20);\nconst update2 = {\n    ...await hre.Diamond.getAsset(f.KrAsset.address),\n    kFactor: 1.75e4,\n    supplyLimit: (0, _values.toBig)(12000),\n    closeFee: 0.052e4,\n    openFee: 0.052e4,\n    isSCDPKrAsset: true,\n    swapInFeeSCDP: 0.052e4,\n    liqIncentiveSCDP: 1.1e4,\n    anchor: f.KrAsset.anchor.address\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update2);\nconst newValues2 = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(newValues2.isKrAsset).to.equal(true);\n(0, _chai.expect)(newValues2.isSCDPCollateral).to.equal(true);\n(0, _chai.expect)(newValues2.isCollateral).to.equal(false);\n(0, _chai.expect)(newValues2.isSCDPDepositAsset).to.equal(false);\n(0, _chai.expect)(newValues2.isSCDPCoverAsset).to.equal(false);\n(0, _chai.expect)(newValues2.kFactor).to.equal(update2.kFactor);\n(0, _chai.expect)(newValues2.openFee).to.equal(update2.closeFee);\n(0, _chai.expect)(newValues2.closeFee).to.equal(update2.openFee);\n(0, _chai.expect)(newValues2.swapInFeeSCDP).to.equal(update2.swapInFeeSCDP);\n(0, _chai.expect)(newValues2.supplyLimit).to.equal(update2.supplyLimit);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "eaaa0031-cb53-43e8-9d71-9dc57bfff457",
                  "parentUUID": "f32e9be1-e15a-42fd-a521-1c2186109930",
=======
                  "uuid": "62000b49-04b0-4063-a3a4-66dd98228b6d",
                  "parentUUID": "5e4731b9-cd14-4f3d-b3da-e9dadf51de84",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "9d6aa8bc-4386-4fa2-8258-b1b8cd48ae01",
                "f5721643-6322-4f92-b46b-9d3f4ac34253",
                "0d9b6790-de76-44d9-9a0f-e6c5357de1e8",
                "75d756d4-b35b-4ee1-96db-a5d5f57fd566",
                "5d682b09-9a9b-4d48-be7d-ad9cfe87dcc5",
                "d94acb2c-3ba0-4748-84f4-919fe7a93052",
                "fe12ef5d-6354-4fbd-abf4-5f0534d14606",
                "2beca6c2-ce59-49ed-aa7b-2305bf839d7b",
                "eaaa0031-cb53-43e8-9d71-9dc57bfff457"
=======
                "58e6577b-1938-4311-a854-45487257399a",
                "82b8db08-b975-466a-a4b9-be3b8728630f",
                "2d10a5b0-567d-4948-805e-ac041261cc1b",
                "6054f131-f0d0-447d-ae4f-a03b2efb463e",
                "7927aab7-32e1-404e-915e-1cccc194a20c",
                "eb879ac4-52c2-4240-94fe-fa5adf5dd186",
                "6df4a3d1-861f-4bc5-bda9-b743a9005d87",
                "03d3384e-c648-4f66-bf98-eb79abb96632",
                "62000b49-04b0-4063-a3a4-66dd98228b6d"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 2895,
=======
              "duration": 3982,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "69d9e502-2f4d-4744-ae9c-56e7bfa1028e",
=======
          "uuid": "17ea8be6-9344-43c1-aa8f-916b2b3d6fe5",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "f = await (0, _fixtures.depositWithdrawFixture)();\n[[user, User], [depositor, Depositor], [withdrawer, Withdrawer]] = f.users;",
              "err": {},
              "uuid": "dc3b190c-deef-4201-a2e3-bfb3df6eb24f",
              "parentUUID": "69d9e502-2f4d-4744-ae9c-56e7bfa1028e",
=======
              "code": "f = await (0, _testutils.depositWithdrawFixture)();\nf.KrAssetCollateral.setPrice(10);\n[[user, User], [depositor, Depositor], [withdrawer, Withdrawer]] = f.users;",
              "err": {},
              "uuid": "2fdb3842-f7bf-4891-b7d6-89ff8fe29a85",
              "parentUUID": "17ea8be6-9344-43c1-aa8f-916b2b3d6fe5",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "a26b4a52-478a-414d-8665-95de1b6428e2",
=======
              "uuid": "7249efd9-a3e2-42c6-b2d5-238b83f8e54a",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#collateral",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                  "uuid": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#deposit",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 125,
=======
                      "duration": 535,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nconst depositAmount = collateralAmount.div(2);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAssets(user.address)).to.include(f.KrAssetCollateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(user.address, f.KrAssetCollateral.address, withdrawAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_VALUE_LOW');",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "ff0d6422-a9a0-47c6-827a-3b1442d3e72d",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "01c680f4-3aa9-467b-ac97-4647207e73a8",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 46,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(User.depositCollateral(user.address, f.KrAssetCollateral.address, 9e11.toString())).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_VALUE_LOW');",
                      "err": {},
                      "uuid": "a508d001-453c-4c12-b283-5f7ac54c7b6e",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 119,
=======
                      "duration": 108,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
<<<<<<< HEAD
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Account has deposit entry\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAmount(depositor.address, f.Collateral.address)).to.equal(f.initialDeposits);\n// Kresko's balance has increased\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Account's balance has decreased\n(0, _chai.expect)((0, _values.fromBig)(await f.Collateral.balanceOf(depositor.address))).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "c67252e3-8b84-4bab-823a-f61efc4160cd",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "code": "const collateralAmount = (0, _lib.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(User.depositCollateral(user.address, f.KrAssetCollateral.address, 9e11.toString())).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "c54538bb-4395-4504-a8b3-02ee38e83b4f",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 101,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Account has deposit entry\nconst depositedCollateralAssetsAfter = await _optimizations.default.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _optimizations.default.getAccountCollateralAmount(depositor.address, f.Collateral.address)).to.equal(f.initialDeposits);\n// Kresko's balance has increased\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Account's balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await f.Collateral.balanceOf(depositor.address))).to.equal((0, _lib.fromBig)(f.initialBalance) - (0, _lib.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "0fc11811-5857-4a43-92f5-8691514b0bf5",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 145,
=======
                      "duration": 398,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral, from depositor -> user.\nawait (0, _chai.expect)(Depositor.depositCollateral(user.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Confirm the depositor's wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await f.Collateral.balanceOf(depositor.address);\n(0, _chai.expect)((0, _values.fromBig)(depositorBalanceAfter)).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1b7941d0-f979-4783-b9ab-02886ac3367c",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "44c29b5e-2d6c-4b43-85c5-1924e179417a",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 142,
=======
                      "duration": 394,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(depositor.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.add(f.initialDeposits));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "8d2468b7-2954-409f-8604-eb198152f77b",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "6c100176-39c1-497a-83c0-66b1a4a40282",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 109,
=======
                      "duration": 296,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nawait f.Collateral2.setBalance(depositor, f.initialBalance, _hardhat.default.Diamond.address);\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral2.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral2.address\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "381694bf-7d7c-4651-a5b2-ff864aab989f",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "e34e4a9c-e8ea-427a-b3c2-12b42e98888f",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 37,
=======
                      "duration": 99,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits);\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralDeposited');\n(0, _chai.expect)(event.account).to.equal(depositor.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "845b6542-6965-460e-ad61-cbf031855842",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "cb7c9565-de76-45bb-b269-757fea3442ba",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, '0x0000000000000000000000000000000000000001', f.initialDeposits)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_DOES_NOT_EXIST').withArgs('0x0000000000000000000000000000000000000001');",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "773679d7-3014-4eb5-9d88-3ceaa5ceb768",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "e98b2f1c-5c6a-4156-b603-204be8f5503e",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'ZERO_DEPOSIT').withArgs(f.Collateral.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1fedcaf3-e425-4bd2-8fc4-d2d1bd868350",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "53dcb691-a5b5-47df-8e16-2c9d376f3102",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 112,
=======
                      "duration": 260,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devTwo, extOne } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositor).depositCollateral(depositor.address, f.Collateral.contract.address, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'ACTION_PAUSED_FOR_ASSET');",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "70ccf62c-aab7-4559-8f3f-98635980113e",
                      "parentUUID": "eb3be056-a8d3-4caa-93dd-5ee3c3858be0",
=======
                      "uuid": "96ca9d1e-2ea7-499e-8cf3-5ac5c52153ae",
                      "parentUUID": "51899f58-6e5b-4331-aba2-f93563046fee",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "ff0d6422-a9a0-47c6-827a-3b1442d3e72d",
                    "a508d001-453c-4c12-b283-5f7ac54c7b6e",
                    "c67252e3-8b84-4bab-823a-f61efc4160cd",
                    "1b7941d0-f979-4783-b9ab-02886ac3367c",
                    "8d2468b7-2954-409f-8604-eb198152f77b",
                    "381694bf-7d7c-4651-a5b2-ff864aab989f",
                    "845b6542-6965-460e-ad61-cbf031855842",
                    "773679d7-3014-4eb5-9d88-3ceaa5ceb768",
                    "1fedcaf3-e425-4bd2-8fc4-d2d1bd868350",
                    "70ccf62c-aab7-4559-8f3f-98635980113e"
=======
                    "01c680f4-3aa9-467b-ac97-4647207e73a8",
                    "c54538bb-4395-4504-a8b3-02ee38e83b4f",
                    "0fc11811-5857-4a43-92f5-8691514b0bf5",
                    "44c29b5e-2d6c-4b43-85c5-1924e179417a",
                    "6c100176-39c1-497a-83c0-66b1a4a40282",
                    "e34e4a9c-e8ea-427a-b3c2-12b42e98888f",
                    "cb7c9565-de76-45bb-b269-757fea3442ba",
                    "e98b2f1c-5c6a-4156-b603-204be8f5503e",
                    "53dcb691-a5b5-47df-8e16-2c9d376f3102",
                    "96ca9d1e-2ea7-499e-8cf3-5ac5c52153ae"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 905,
=======
                  "duration": 2384,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "8b79cf3e-8274-4367-8343-1db3891c933e",
=======
                  "uuid": "53f06421-83e5-43fd-ac43-c60d87e3a058",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#withdraw",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
<<<<<<< HEAD
                      "uuid": "6d289236-4e04-439f-8124-3df15b6ba45e",
=======
                      "uuid": "be1724bf-c792-4751-88d2-444f96753ed3",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 141,
=======
                          "duration": 563,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "ac774a73-b286-436e-be97-909192354851",
                          "parentUUID": "6d289236-4e04-439f-8124-3df15b6ba45e",
=======
                          "uuid": "669e2150-378e-45a9-991e-874fdeba1dd5",
                          "parentUUID": "be1724bf-c792-4751-88d2-444f96753ed3",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 141,
=======
                          "duration": 459,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits.sub(amountDeposited));",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "41a2c85b-df55-4093-a1e8-b3feb197fdcd",
                          "parentUUID": "6d289236-4e04-439f-8124-3df15b6ba45e",
=======
                          "uuid": "cddb5a0e-9b14-4d3d-aca3-0c0cecaae493",
                          "parentUUID": "be1724bf-c792-4751-88d2-444f96753ed3",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 177,
=======
                          "duration": 657,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.grantRole(_roles.default.MANAGER, user.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_roles.default.MANAGER, user.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(f.initialDeposits));",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "53da290c-f1e5-4bcf-a591-6136499e2a5b",
                          "parentUUID": "6d289236-4e04-439f-8124-3df15b6ba45e",
=======
                          "uuid": "211be50f-1c00-463f-93ea-69d7d24a4e04",
                          "parentUUID": "be1724bf-c792-4751-88d2-444f96753ed3",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 38,
=======
                          "duration": 275,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralWithdrawn');\n(0, _chai.expect)(event.account).to.equal(withdrawer.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "4a3e423a-9678-4bd5-b4d5-9c303a493e6a",
                          "parentUUID": "6d289236-4e04-439f-8124-3df15b6ba45e",
=======
                          "uuid": "2d81ac7c-a2ee-46c7-bafd-5f363ee9203e",
                          "parentUUID": "be1724bf-c792-4751-88d2-444f96753ed3",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 50,
=======
                          "duration": 108,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${user.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "fcf122ac-92f5-408a-81cd-52e2f22c8d37",
                          "parentUUID": "6d289236-4e04-439f-8124-3df15b6ba45e",
=======
                          "uuid": "dcc88975-10b0-40f0-a8ba-08cb50a4bff0",
                          "parentUUID": "be1724bf-c792-4751-88d2-444f96753ed3",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
<<<<<<< HEAD
                          "uuid": "89567c6b-f1f7-4946-b7fb-0a6f83235d8a",
=======
                          "uuid": "3e825af1-00f4-436c-a50c-e979b28c605e",
>>>>>>> origin/dev-159-syth-wrap
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
<<<<<<< HEAD
                              "duration": 204,
=======
                              "duration": 353,
>>>>>>> origin/dev-159-syth-wrap
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne mints some kr assets\nthis.mintAmount = (0, _values.toBig)(100);\nawait Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _optimizations.default.getMinCollateralRatio();",
                              "err": {},
<<<<<<< HEAD
                              "uuid": "b83c42eb-f7d7-42a2-91e6-58af5f36c206",
                              "parentUUID": "89567c6b-f1f7-4946-b7fb-0a6f83235d8a",
=======
                              "uuid": "deac3166-f9cc-493b-a1a9-9ba3106ec440",
                              "parentUUID": "3e825af1-00f4-436c-a50c-e979b28c605e",
>>>>>>> origin/dev-159-syth-wrap
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
<<<<<<< HEAD
                              "duration": 548,
=======
                              "duration": 1448,
>>>>>>> origin/dev-159-syth-wrap
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _values.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst [accMinCollateralValue, accCollateralValue, withdrawnCollateralValue] = await Promise.all([\n    _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr),\n    _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address),\n    _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount)\n]);\n(0, _chai.expect)(accCollateralValue.sub(withdrawnCollateralValue).gte(accMinCollateralValue)).to.be.true;\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst withdrawerBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(withdrawerBalance).to.equal(withdrawAmount);\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
<<<<<<< HEAD
                              "uuid": "a094cfb9-ad6b-4d08-a08d-df2687db0391",
                              "parentUUID": "89567c6b-f1f7-4946-b7fb-0a6f83235d8a",
=======
                              "uuid": "1e4e3fe9-814f-4a55-ad39-c7201b428798",
                              "parentUUID": "3e825af1-00f4-436c-a50c-e979b28c605e",
>>>>>>> origin/dev-159-syth-wrap
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
<<<<<<< HEAD
                              "duration": 113,
=======
                              "duration": 446,
>>>>>>> origin/dev-159-syth-wrap
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const randomUser = _hardhat.default.users.userFour;\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(0));\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(1000));\nawait f.Collateral.contract.connect(randomUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1000),\n    user: randomUser\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1010),\n    user: randomUser\n});\n(0, _chai.expect)(await f.Collateral.balanceOf(randomUser.address)).to.equal((0, _values.toBig)(1000));",
                              "err": {},
<<<<<<< HEAD
                              "uuid": "d37cf800-adb9-4a41-8d15-9293b49a9674",
                              "parentUUID": "89567c6b-f1f7-4946-b7fb-0a6f83235d8a",
=======
                              "uuid": "78979244-99f3-4130-aa3a-2fa50970eebc",
                              "parentUUID": "3e825af1-00f4-436c-a50c-e979b28c605e",
>>>>>>> origin/dev-159-syth-wrap
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
<<<<<<< HEAD
                              "duration": 39,
=======
                              "duration": 172,
>>>>>>> origin/dev-159-syth-wrap
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, 0, withdrawAmount)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'ZERO_AMOUNT').withArgs(f.Collateral.address);",
                              "err": {},
<<<<<<< HEAD
                              "uuid": "a59d8fe6-09b2-4f4e-a1b8-2c21b7b71569",
                              "parentUUID": "89567c6b-f1f7-4946-b7fb-0a6f83235d8a",
=======
                              "uuid": "496dac90-8f77-4688-b31b-c9e0f494deaa",
                              "parentUUID": "3e825af1-00f4-436c-a50c-e979b28c605e",
>>>>>>> origin/dev-159-syth-wrap
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
<<<<<<< HEAD
                              "duration": 321,
=======
                              "duration": 909,
>>>>>>> origin/dev-159-syth-wrap
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = f.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\nconst withdrawnCollateralValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_VALUE_LOW').withArgs(0, 150000000000);",
                              "err": {},
<<<<<<< HEAD
                              "uuid": "b9cb1bc1-3b53-4295-b830-74f469eb40b1",
                              "parentUUID": "89567c6b-f1f7-4946-b7fb-0a6f83235d8a",
=======
                              "uuid": "3e7ec38f-40b4-45e6-86d3-b2671b518420",
                              "parentUUID": "3e825af1-00f4-436c-a50c-e979b28c605e",
>>>>>>> origin/dev-159-syth-wrap
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
<<<<<<< HEAD
                              "duration": 35,
=======
                              "duration": 94,
>>>>>>> origin/dev-159-syth-wrap
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 1)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'INVALID_ASSET_INDEX').withArgs(f.Collateral.address, 1, 0);",
                              "err": {},
<<<<<<< HEAD
                              "uuid": "a42e1527-4087-4b2f-83c6-4760bb301f34",
                              "parentUUID": "89567c6b-f1f7-4946-b7fb-0a6f83235d8a",
=======
                              "uuid": "02db8aa6-7358-4ffa-8733-491171d83495",
                              "parentUUID": "3e825af1-00f4-436c-a50c-e979b28c605e",
>>>>>>> origin/dev-159-syth-wrap
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
<<<<<<< HEAD
                            "a094cfb9-ad6b-4d08-a08d-df2687db0391",
                            "d37cf800-adb9-4a41-8d15-9293b49a9674",
                            "a59d8fe6-09b2-4f4e-a1b8-2c21b7b71569",
                            "b9cb1bc1-3b53-4295-b830-74f469eb40b1",
                            "a42e1527-4087-4b2f-83c6-4760bb301f34"
=======
                            "1e4e3fe9-814f-4a55-ad39-c7201b428798",
                            "78979244-99f3-4130-aa3a-2fa50970eebc",
                            "496dac90-8f77-4688-b31b-c9e0f494deaa",
                            "3e7ec38f-40b4-45e6-86d3-b2671b518420",
                            "02db8aa6-7358-4ffa-8733-491171d83495"
>>>>>>> origin/dev-159-syth-wrap
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
<<<<<<< HEAD
                          "duration": 1056,
=======
                          "duration": 3069,
>>>>>>> origin/dev-159-syth-wrap
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [
<<<<<<< HEAD
                        "ac774a73-b286-436e-be97-909192354851",
                        "41a2c85b-df55-4093-a1e8-b3feb197fdcd",
                        "53da290c-f1e5-4bcf-a591-6136499e2a5b",
                        "4a3e423a-9678-4bd5-b4d5-9c303a493e6a",
                        "fcf122ac-92f5-408a-81cd-52e2f22c8d37"
=======
                        "669e2150-378e-45a9-991e-874fdeba1dd5",
                        "cddb5a0e-9b14-4d3d-aca3-0c0cecaae493",
                        "211be50f-1c00-463f-93ea-69d7d24a4e04",
                        "2d81ac7c-a2ee-46c7-bafd-5f363ee9203e",
                        "dcc88975-10b0-40f0-a8ba-08cb50a4bff0"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 547,
=======
                      "duration": 2062,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "b623a37e-eb10-4ad9-a8e6-7c1a07576823",
=======
                  "uuid": "da712cfb-fcf7-417b-a0e5-4d06c1305015",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#deposit - rebase",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase \"before each\" hook in \"#deposit - rebase\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 226,
=======
                      "duration": 546,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setBalance(user, f.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// Allowance for Kresko\nawait f.KrAssetCollateral.contract.setVariable('_allowances', {\n    [user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait User.depositCollateral(user.address, f.Collateral.address, f.initialDeposits);\n// Mint some krAssets\nawait User.mintKreskoAsset(user.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await User.getAccountDebtAmount(user.address, f.KrAssetCollateral.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3b8c7a86-3f6e-44f7-a0a2-51dd4ac741ca",
                      "parentUUID": "b623a37e-eb10-4ad9-a8e6-7c1a07576823",
=======
                      "uuid": "e7aa4985-3dde-43a6-89f6-5d84bebefb30",
                      "parentUUID": "da712cfb-fcf7-417b-a0e5-4d06c1305015",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
<<<<<<< HEAD
                      "uuid": "e0fb99e8-cc06-48df-8710-330b92d2b9b5",
=======
                      "uuid": "fc763ba2-e7a8-4be9-bc69-73c458e59cd0",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 135,
=======
                          "duration": 375,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(expectedDepositsAfter);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "ec168c0f-f784-4f8e-853d-9ff51891d5a9",
                          "parentUUID": "e0fb99e8-cc06-48df-8710-330b92d2b9b5",
=======
                          "uuid": "ba6234e1-5005-478b-87c0-a0d31f09c7a7",
                          "parentUUID": "fc763ba2-e7a8-4be9-bc69-73c458e59cd0",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 138,
=======
                          "duration": 315,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "1bae5dc0-c132-44b2-a6ae-5690d2886595",
                          "parentUUID": "e0fb99e8-cc06-48df-8710-330b92d2b9b5",
=======
                          "uuid": "eddd64b0-e5bb-4175-a9c5-ee4030886d17",
                          "parentUUID": "fc763ba2-e7a8-4be9-bc69-73c458e59cd0",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 153,
=======
                          "duration": 315,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "c284313e-c785-420c-a8d2-39867db9241d",
                          "parentUUID": "e0fb99e8-cc06-48df-8710-330b92d2b9b5",
=======
                          "uuid": "7d3cd99e-b59f-4650-85f4-340b4679e66b",
                          "parentUUID": "fc763ba2-e7a8-4be9-bc69-73c458e59cd0",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 137,
=======
                          "duration": 320,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "316a2b38-16a1-4b46-aedd-130221e87266",
                          "parentUUID": "e0fb99e8-cc06-48df-8710-330b92d2b9b5",
=======
                          "uuid": "b59eb0e1-9280-42f3-96c3-3016590bb7da",
                          "parentUUID": "fc763ba2-e7a8-4be9-bc69-73c458e59cd0",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 181,
=======
                          "duration": 416,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "e97c1b0e-1286-4500-af59-e78f6f4d72b8",
                          "parentUUID": "e0fb99e8-cc06-48df-8710-330b92d2b9b5",
=======
                          "uuid": "a60dfc1e-bcc5-45fc-ac9b-d1fd12ec9138",
                          "parentUUID": "fc763ba2-e7a8-4be9-bc69-73c458e59cd0",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 175,
=======
                          "duration": 410,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "546bf604-e60b-4269-8ea9-a70e07ccc52a",
                          "parentUUID": "e0fb99e8-cc06-48df-8710-330b92d2b9b5",
=======
                          "uuid": "ecb1b686-988f-4b44-9b8a-984e31be6076",
                          "parentUUID": "fc763ba2-e7a8-4be9-bc69-73c458e59cd0",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "ec168c0f-f784-4f8e-853d-9ff51891d5a9",
                        "1bae5dc0-c132-44b2-a6ae-5690d2886595",
                        "c284313e-c785-420c-a8d2-39867db9241d",
                        "316a2b38-16a1-4b46-aedd-130221e87266",
                        "e97c1b0e-1286-4500-af59-e78f6f4d72b8",
                        "546bf604-e60b-4269-8ea9-a70e07ccc52a"
=======
                        "ba6234e1-5005-478b-87c0-a0d31f09c7a7",
                        "eddd64b0-e5bb-4175-a9c5-ee4030886d17",
                        "7d3cd99e-b59f-4650-85f4-340b4679e66b",
                        "b59eb0e1-9280-42f3-96c3-3016590bb7da",
                        "a60dfc1e-bcc5-45fc-ac9b-d1fd12ec9138",
                        "ecb1b686-988f-4b44-9b8a-984e31be6076"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 919,
=======
                      "duration": 2151,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
<<<<<<< HEAD
                      "uuid": "0e164808-0019-46d6-ad92-64c562041fdc",
=======
                      "uuid": "4899787c-e055-4f5d-ae82-a28816fad801",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 277,
=======
                          "duration": 706,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "e7cb84b0-1f25-421a-94a7-de44d86a7029",
                          "parentUUID": "0e164808-0019-46d6-ad92-64c562041fdc",
=======
                          "uuid": "f6d16951-78de-4dff-a324-ecf909b4c2e2",
                          "parentUUID": "4899787c-e055-4f5d-ae82-a28816fad801",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 353,
=======
                          "duration": 639,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "b103be9d-217c-454e-8b73-8845c1b6219c",
                          "parentUUID": "0e164808-0019-46d6-ad92-64c562041fdc",
=======
                          "uuid": "8985c52b-a728-4563-8e8e-9dc8ac0afbc9",
                          "parentUUID": "4899787c-e055-4f5d-ae82-a28816fad801",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 216,
=======
                          "duration": 469,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "5d44cb55-de46-4ed2-bcc4-3462a363796f",
                          "parentUUID": "0e164808-0019-46d6-ad92-64c562041fdc",
=======
                          "uuid": "eeb91e2e-e6aa-4448-84ed-d22aedb00aaf",
                          "parentUUID": "4899787c-e055-4f5d-ae82-a28816fad801",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 262,
=======
                          "duration": 470,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "6030fb68-d0a3-4dab-a953-030b7cbe7c90",
                          "parentUUID": "0e164808-0019-46d6-ad92-64c562041fdc",
=======
                          "uuid": "268d3c0c-1043-46a1-91fd-56fc3d9f2bae",
                          "parentUUID": "4899787c-e055-4f5d-ae82-a28816fad801",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 445,
=======
                          "duration": 941,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "aa0bf94a-6c22-4d57-83d0-6a5876e775b5",
                          "parentUUID": "0e164808-0019-46d6-ad92-64c562041fdc",
=======
                          "uuid": "71f53197-59f1-42d1-8b47-527ba5aa4354",
                          "parentUUID": "4899787c-e055-4f5d-ae82-a28816fad801",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 409,
=======
                          "duration": 1021,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "06e03626-aa03-46fe-9abf-405df921f81b",
                          "parentUUID": "0e164808-0019-46d6-ad92-64c562041fdc",
=======
                          "uuid": "c20a7362-8dfe-4538-bbd0-253e7f3680ef",
                          "parentUUID": "4899787c-e055-4f5d-ae82-a28816fad801",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "e7cb84b0-1f25-421a-94a7-de44d86a7029",
                        "b103be9d-217c-454e-8b73-8845c1b6219c",
                        "5d44cb55-de46-4ed2-bcc4-3462a363796f",
                        "6030fb68-d0a3-4dab-a953-030b7cbe7c90",
                        "aa0bf94a-6c22-4d57-83d0-6a5876e775b5",
                        "06e03626-aa03-46fe-9abf-405df921f81b"
=======
                        "f6d16951-78de-4dff-a324-ecf909b4c2e2",
                        "8985c52b-a728-4563-8e8e-9dc8ac0afbc9",
                        "eeb91e2e-e6aa-4448-84ed-d22aedb00aaf",
                        "268d3c0c-1043-46a1-91fd-56fc3d9f2bae",
                        "71f53197-59f1-42d1-8b47-527ba5aa4354",
                        "c20a7362-8dfe-4538-bbd0-253e7f3680ef"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 1962,
=======
                      "duration": 4246,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "2ad585de-a173-4d00-949b-ae612d0d0ab8",
=======
                  "uuid": "dc07fb8d-e990-4762-a574-6eddf3f83424",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#withdraw - rebase",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase \"before each\" hook in \"#withdraw - rebase\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 163,
=======
                      "duration": 353,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await _optimizations.default.getAccountDebtAmount(withdrawer.address, f.KrAssetCollateral);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d5c6f085-d60a-48e8-b1cd-2f7f5b318955",
                      "parentUUID": "2ad585de-a173-4d00-949b-ae612d0d0ab8",
=======
                      "uuid": "969f2a89-f12e-4ead-9c4a-e24e867ee927",
                      "parentUUID": "dc07fb8d-e990-4762-a574-6eddf3f83424",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
<<<<<<< HEAD
                      "uuid": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                      "uuid": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 299,
=======
                          "duration": 751,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "01a7f83e-cf81-44b8-a280-d404a0122dd9",
                          "parentUUID": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                          "uuid": "90898db2-2604-4f93-bc00-f6aa091717bb",
                          "parentUUID": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 238,
=======
                          "duration": 748,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "c7845487-3969-4845-ba17-e7653ebe4012",
                          "parentUUID": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                          "uuid": "74fda896-1726-4ffc-986b-40ea81b07566",
                          "parentUUID": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 250,
=======
                          "duration": 745,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "455618ed-09e1-43bb-9bc5-cc47d2d393b7",
                          "parentUUID": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                          "uuid": "9852dbbe-48fb-4cdd-904c-6bd7438a2a38",
                          "parentUUID": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 274,
=======
                          "duration": 757,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "8dede08d-48dd-4c2c-ae7d-03963107c8f5",
                          "parentUUID": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                          "uuid": "694c9a5b-323e-4c47-84db-1b36f331188f",
                          "parentUUID": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 286,
=======
                          "duration": 859,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "24a9e305-39fc-40cc-bc14-575996b9febe",
                          "parentUUID": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                          "uuid": "c0531010-ae7d-45bd-9404-429a52787a48",
                          "parentUUID": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 296,
=======
                          "duration": 853,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "a26a75bb-6c42-44dd-b39d-3a7e95cfd99f",
                          "parentUUID": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                          "uuid": "2421e165-aa0f-47db-907a-c4f90766b34c",
                          "parentUUID": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 221,
=======
                          "duration": 549,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await f.Collateral.contract.balanceOf(withdrawer.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.Collateral.address));\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(withdrawer.address)).to.equal(expectedNrcBalanceAfter);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "9449ff62-948a-48a3-bed2-be86e69fa938",
                          "parentUUID": "4fce5239-6fc3-4216-abf1-21209e29571a",
=======
                          "uuid": "29261554-69dc-4c68-94e2-35f90eb96db8",
                          "parentUUID": "92418725-b14f-4dbe-a80a-34b5e7b3ab2a",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "01a7f83e-cf81-44b8-a280-d404a0122dd9",
                        "c7845487-3969-4845-ba17-e7653ebe4012",
                        "455618ed-09e1-43bb-9bc5-cc47d2d393b7",
                        "8dede08d-48dd-4c2c-ae7d-03963107c8f5",
                        "24a9e305-39fc-40cc-bc14-575996b9febe",
                        "a26a75bb-6c42-44dd-b39d-3a7e95cfd99f",
                        "9449ff62-948a-48a3-bed2-be86e69fa938"
=======
                        "90898db2-2604-4f93-bc00-f6aa091717bb",
                        "74fda896-1726-4ffc-986b-40ea81b07566",
                        "9852dbbe-48fb-4cdd-904c-6bd7438a2a38",
                        "694c9a5b-323e-4c47-84db-1b36f331188f",
                        "c0531010-ae7d-45bd-9404-429a52787a48",
                        "2421e165-aa0f-47db-907a-c4f90766b34c",
                        "29261554-69dc-4c68-94e2-35f90eb96db8"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 1864,
=======
                      "duration": 5262,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
<<<<<<< HEAD
                      "uuid": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                      "uuid": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 234,
=======
                          "duration": 734,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "02e604dc-bf86-4ef5-8ff2-e5bd8ca74936",
                          "parentUUID": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                          "uuid": "e9a6d27b-1537-49de-be95-90b58f031685",
                          "parentUUID": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 248,
=======
                          "duration": 728,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "482d49b4-0514-4ffa-98d6-622a9adcf5a5",
                          "parentUUID": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                          "uuid": "66c49185-ae46-479b-9ebb-2cbf27e796e9",
                          "parentUUID": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 243,
=======
                          "duration": 735,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "f413112a-be7b-496f-ab0f-d7d7af1308dc",
                          "parentUUID": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                          "uuid": "0d0a40f1-ecc3-4f17-af88-5f110a57733c",
                          "parentUUID": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 284,
=======
                          "duration": 732,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "86c68079-4bf0-435a-bf06-593012d21b25",
                          "parentUUID": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                          "uuid": "19819ded-2bb7-43b6-ab39-21d029759134",
                          "parentUUID": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 446,
=======
                          "duration": 1202,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "05a21a01-573e-4ce3-bf2b-ad5e25271008",
                          "parentUUID": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                          "uuid": "0708c43b-9c12-4428-aa4c-c995f0c7386b",
                          "parentUUID": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 457,
=======
                          "duration": 1208,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "1fdd289a-489e-4b70-ae56-7b2727b7d544",
                          "parentUUID": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                          "uuid": "94b416dc-7511-494e-81ee-1b9979190792",
                          "parentUUID": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 683,
=======
                          "duration": 1693,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.Collateral.address);\nconst withdrawValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "f6587bdd-8db7-4ad7-8c30-97de7e556de3",
                          "parentUUID": "893a3707-50e7-491c-877b-d0f32ba6673d",
=======
                          "uuid": "934522ca-6aec-4861-b0f3-ea10095fb5a4",
                          "parentUUID": "9274e8eb-9b13-4460-b759-6234f2d9db41",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "02e604dc-bf86-4ef5-8ff2-e5bd8ca74936",
                        "482d49b4-0514-4ffa-98d6-622a9adcf5a5",
                        "f413112a-be7b-496f-ab0f-d7d7af1308dc",
                        "86c68079-4bf0-435a-bf06-593012d21b25",
                        "05a21a01-573e-4ce3-bf2b-ad5e25271008",
                        "1fdd289a-489e-4b70-ae56-7b2727b7d544",
                        "f6587bdd-8db7-4ad7-8c30-97de7e556de3"
=======
                        "e9a6d27b-1537-49de-be95-90b58f031685",
                        "66c49185-ae46-479b-9ebb-2cbf27e796e9",
                        "0d0a40f1-ecc3-4f17-af88-5f110a57733c",
                        "19819ded-2bb7-43b6-ab39-21d029759134",
                        "0708c43b-9c12-4428-aa4c-c995f0c7386b",
                        "94b416dc-7511-494e-81ee-1b9979190792",
                        "934522ca-6aec-4861-b0f3-ea10095fb5a4"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 2595,
=======
                      "duration": 7032,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "3551c004-f517-4381-86cd-f77b345dfdf1",
=======
          "uuid": "b8cac9fb-c23e-465f-b75c-96871219bb35",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Minter - Liquidations",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 85,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "f = await (0, _fixtures.liquidationsFixture)();\n[[user1, User], [user2], [user3], [user4], [user5], [liquidator, Liquidator], [liquidatorTwo, LiquidatorTwo]] = f.users;\nawait f.reset();",
              "err": {},
              "uuid": "f8c36ea3-5f1a-4b4e-bb0d-2b4acb49d6e0",
              "parentUUID": "3551c004-f517-4381-86cd-f77b345dfdf1",
=======
              "code": "f = await (0, _testutils.liquidationsFixture)();\n[[user1, User], [user2], [user3], [user4], [user5], [liquidator, Liquidator], [liquidatorTwo, LiquidatorTwo]] = f.users;\nawait f.reset();",
              "err": {},
              "uuid": "872f8673-270d-4e7a-8dfa-000c03f1bd3c",
              "parentUUID": "b8cac9fb-c23e-465f-b75c-96871219bb35",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "0c844e26-c9de-4b00-867d-62e4b75244cf",
=======
              "uuid": "de681904-7cda-40d0-93da-03862be0de9b",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#isAccountLiquidatable",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify accounts below their liquidation threshold",
                  "fullTitle": "Minter - Liquidations #isAccountLiquidatable should identify accounts below their liquidation threshold",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 455,
=======
                  "duration": 1309,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [cr, minCollateralUSD, initialCanLiquidate] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(user1.address),\n    hre.Diamond.getAccountMinCollateralAtRatio(user1.address, hre.Diamond.getLiquidationThreshold()),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(cr).to.be.equal(1.5e4);\n(0, _chai.expect)(f.initialDeposits.mul(10).gt(minCollateralUSD));\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.equal(true);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "494cb504-7fc4-4932-aebe-2b4a2f067ae9",
                  "parentUUID": "0c844e26-c9de-4b00-867d-62e4b75244cf",
=======
                  "uuid": "d7efe813-6608-401f-b316-63142ebdf315",
                  "parentUUID": "de681904-7cda-40d0-93da-03862be0de9b",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "494cb504-7fc4-4932-aebe-2b4a2f067ae9"
=======
                "d7efe813-6608-401f-b316-63142ebdf315"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 455,
=======
              "duration": 1309,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "4cd3ee8f-c400-444e-9bc2-dcd0fdeef469",
=======
              "uuid": "60e31f03-209c-4c51-a0bd-769a5c738b46",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 1266,
=======
                  "duration": 1644,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const MLVBeforeC1 = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address);\nconst MLVBeforeC2 = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral2.address);\n(0, _chai.expect)(MLVBeforeC1.repayValue).to.be.closeTo(MLVBeforeC2.repayValue, USD_DELTA);\nawait hre.Diamond.updateCollateralFactor(f.Collateral.address, 0.25e4);\nawait (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: f.initialDeposits.div(2),\n    asset: f.Collateral2\n});\nconst expectedCR = 1.125e4;\nconst [crAfter, isLiquidatableAfter, MLVAfterC1, MLVAfterC2] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address),\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral2.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(crAfter).to.be.closeTo(expectedCR, 1);\n(0, _chai.expect)(MLVAfterC1.repayValue).to.gt(MLVBeforeC1.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue).to.gt(MLVBeforeC2.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue.gt(MLVAfterC1.repayValue)).to.be.true;",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "6dfaa5fa-66ce-45c5-90a8-6667bcb3f159",
                  "parentUUID": "4cd3ee8f-c400-444e-9bc2-dcd0fdeef469",
=======
                  "uuid": "aa21c527-1ef7-4d7c-8f26-2b6567f17f70",
                  "parentUUID": "60e31f03-209c-4c51-a0bd-769a5c738b46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 2038,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateCollateralFactor(f.Collateral.address, (0, _lib.toBig)(0.25));\nawait (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: f.initialDeposits.div(2),\n    asset: f.Collateral2\n});\nconst expectedCR = 1.125;\nconst [crAfter, isLiquidatableAfter, MLVAfterC1, MLVAfterC2] = await Promise.all([\n    (0, _liquidations.getCR)(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral2.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(crAfter).to.be.closeTo(expectedCR, CR_DELTA);\n(0, _chai.expect)(MLVAfterC2.gt(MLVAfterC1)).to.be.true;\n        // await liquidate(user1, f.KrAsset, f.Collateral);\n        // expect(await getCR(user1.address)).to.be.gt(1.4);",
                  "err": {},
                  "uuid": "fe9a0227-d5c3-46a2-820c-b5140401e6d9",
                  "parentUUID": "60e31f03-209c-4c51-a0bd-769a5c738b46",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 658,
=======
                  "duration": 2906,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _values.toBig)(0.1, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.true;\nconst [maxLiq, maxLiq8Dec] = await Promise.all([\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(maxLiq.repayValue).gt(0);\n(0, _chai.expect)(maxLiq8Dec.repayValue).gt(0);\n(0, _chai.expect)(maxLiq.repayValue).gt(maxLiq8Dec.repayValue);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "3b0759e5-69c7-4e5a-9cd8-ff12f3efba7b",
                  "parentUUID": "4cd3ee8f-c400-444e-9bc2-dcd0fdeef469",
=======
                  "uuid": "6df8c17b-1adf-45c7-a587-b456e7c0222e",
                  "parentUUID": "60e31f03-209c-4c51-a0bd-769a5c738b46",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "6dfaa5fa-66ce-45c5-90a8-6667bcb3f159",
                "3b0759e5-69c7-4e5a-9cd8-ff12f3efba7b"
=======
                "aa21c527-1ef7-4d7c-8f26-2b6567f17f70",
                "fe9a0227-d5c3-46a2-820c-b5140401e6d9",
                "6df8c17b-1adf-45c7-a587-b456e7c0222e"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 1924,
=======
              "duration": 6588,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "d2d95c74-0818-44c8-8af8-7bd5a2df8fbb",
=======
              "uuid": "f59ec9b4-87ef-4ee3-9ef2-84d9fc029105",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#liquidation",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                  "uuid": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#liquidate",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(7.5);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2356ffd9-31c6-41d1-9c96-bc236c50d2a6",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "1ea5f441-d5ba-4e38-89fd-2796be89a0a3",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 373,
=======
                      "duration": 773,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\nconst userOneDebtBefore = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst liquidatorBalanceBefore = await f.Collateral.balanceOf(liquidator.address);\nconst liquidatorBalanceKrBefore = await f.KrAsset.balanceOf(liquidator.address);\nconst kreskoBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxRepayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11, 8));\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, maxRepayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address));\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst userOneDebtAfterLiquidation = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebtAfterLiquidation.eq(userOneDebtBefore.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst userOneCollateralAfterLiquidation = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\n(0, _chai.expect)(userOneCollateralAfterLiquidation.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\n(0, _chai.expect)(await f.KrAsset.balanceOf(liquidator.address)).eq(liquidatorBalanceKrBefore.sub(maxRepayAmount));\n// Confirm that userTwo has received some collateral from the contract\n(0, _chai.expect)(await f.Collateral.balanceOf(liquidator.address)).gt(liquidatorBalanceBefore);\n// Confirm that Kresko contract's collateral balance has decreased.\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).lt(kreskoBalanceBefore);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "9d7244fd-9003-4059-8ea8-9c4ab7565503",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "7da996fa-eb89-4f4b-a9c2-4cde9fab5f0d",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with a single CDP",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1036,
=======
                      "duration": 1400,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.updateCollateralFactor(f.Collateral.address, 0.99e4);\nawait hre.Diamond.updateKFactor(f.KrAsset.address, 1.02e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address);\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, maxLiq.repayAmount.add((0, _values.toBig)(1222, 27)), f.Collateral.address, maxLiq.repayAssetIndex, maxLiq.seizeAssetIndex);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user1.address)).to.be.eq(await _optimizations.default.getMaxLiquidationRatio());\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "cf2d2c6a-5386-4953-a107-3ed14d0f77ef",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "f47a2444-a299-430d-9687-ff41cb552f55",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with multiple CDPs",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1238,
=======
                      "duration": 2860,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _values.toBig)(10, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(5.5);\nf.Collateral8Dec.setPrice(6);\nawait hre.Diamond.updateCollateralFactor(f.Collateral.address, 0.9754e4);\nawait hre.Diamond.updateKFactor(f.KrAsset.address, 1.05e4);\nawait (0, _liquidations.liquidate)(user1, f.KrAsset, f.Collateral8Dec);\nconst [crAfter, isLiquidatableAfter] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.false;\n(0, _chai.expect)(crAfter).to.be.eq(await _optimizations.default.getMaxLiquidationRatio());",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7a960d97-590e-4ebc-b264-6ea7e7c7d573",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "bc154d58-84cb-423b-9da8-72fdbd6d169b",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 323,
=======
                      "duration": 701,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11));\nconst tx = await Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address));\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3cb800a8-35c4-42d3-bbc4-896a6889306a",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "3d854920-c245-4f19-a3fd-d661c790e33f",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 139,
=======
                      "duration": 323,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(10);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE').withArgs(16500000000, 15400000000);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "0e11d932-484a-49a1-a790-4e050fae45c6",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "6c60ce5f-708c-4458-9651-7ecce1cfa302",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 41,
=======
                      "duration": 96,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'ZERO_REPAY').withArgs(f.KrAsset.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "6f51d4d0-9d6e-411e-86b1-bfc87e36240a",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "190a3764-d717-4fa2-8d2f-e9be6f90f99b",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should clamp liquidations if repay value/amount exceeds debt",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should clamp liquidations if repay value/amount exceeds debt",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 752,
=======
                      "duration": 354,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _values.toBig)(10));\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount, hre.Diamond.address);\n// Liquidation should fail\nconst liquidatorBalanceBefore = await f.KrAsset.balanceOf(liquidatorTwo.address);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address);\n(0, _chai.expect)(maxLiq.repayAmount).to.be.lt(repayAmount);\nconst tx = await LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\nconst liquidatorBalanceAfter = await f.KrAsset.balanceOf(liquidatorTwo.address);\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidatorTwo.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.args.repayAmount).to.not.equal(repayAmount);\n(0, _chai.expect)(event.args.repayAmount).to.equal(maxLiq.repayAmount);\n(0, _chai.expect)(event.args.collateralSent).to.be.equal(maxLiq.seizeAmount);\n(0, _chai.expect)(liquidatorBalanceAfter.add(repayAmount)).to.not.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(liquidatorBalanceAfter.add(maxLiq.repayAmount)).to.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user1.address)).to.be.eq(await hre.Diamond.getMaxLiquidationRatio());",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "da906777-65a4-4c54-b68b-01655e9ddfd3",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "fe89577a-1fce-4aa7-b774-20f0ae29b43b",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 1600,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _lib.toBig)(2, 8),\n    asset: f.Collateral8Dec\n});\nconst allowedRepaymentValue = await hre.Diamond.getMaxLiquidation(user1.address, f.KrAsset.address, f.Collateral.address);\nconst allowedRepaymentAmount = allowedRepaymentValue.wadDiv((0, _lib.toBig)(11, 8));\nconst overflowRepayment = allowedRepaymentAmount.add((0, _lib.toBig)(1));\nconst tx = await Liquidator.liquidate(user1.address, f.KrAsset.address, overflowRepayment, f.Collateral.address, 0, 0, false);\nconst event = await (0, _lib.getNamedEvent)(tx, \"LiquidationOccurred\");\nconst assetInfo = await f.Collateral.kresko();\nconst expectedSeizedCollateralAmount = allowedRepaymentValue.wadMul(_ethers.BigNumber.from(assetInfo.liquidationIncentive)).wadDiv(await f.Collateral.getPrice());\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.args.repayAmount).to.not.equal(overflowRepayment);\n(0, _chai.expect)(event.args.repayAmount).to.equal(allowedRepaymentAmount);\n(0, _chai.expect)(event.args.collateralSent).to.be.equal(expectedSeizedCollateralAmount);",
                      "err": {},
                      "uuid": "db48c896-f2c8-4e0e-82fa-e02deda8ac4c",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 526,
=======
                      "duration": 1086,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(f.Collateral.config.args.price);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getMinCollateralRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getLiquidationThreshold());\nf.Collateral.setPrice(9.9);\nconst accountCollateralValue = await hre.Diamond.getAccountTotalCollateralValue(user1.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "45d71965-e443-447f-95cd-d1c702bf0900",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "cc5a6070-881d-44da-b454-70b858ac8cb8",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator token approval for Kresko Assets",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without liquidator token approval for Kresko Assets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 364,
=======
                      "duration": 780,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(0);\nconst repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(user2.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b5586a70-d060-46c9-84a4-21ade0e5d2cf",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "46ce3d1a-34d8-47ae-9395-7dd2f5858ed6",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 378,
=======
                      "duration": 776,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait f.KrAsset.contract.setVariable('_allowances', {\n    [liquidatorTwo.address]: {\n        [hre.Diamond.address]: repayAmount\n    }\n});\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "c84384bf-d431-41d6-b65e-b60912bed036",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "69472c0b-e7cb-4ba5-8845-9df002f67dc6",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 35,
=======
                      "duration": 101,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)(User.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SELF_LIQUIDATION');",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "31190ca0-49a0-47df-9429-dfebd5a73051",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "15788740-9cf9-4548-a08c-d9ddc5a1139b",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should error on seize underflow",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should error on seize underflow",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
=======
                      "duration": 1058,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
>>>>>>> origin/dev-159-syth-wrap
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b23f2e1e-7777-426a-895a-830ea00b107e",
                      "parentUUID": "0a80fe17-136e-4bd9-b1e0-21be42f85b20",
=======
                      "uuid": "414f63e9-9bf1-47bf-aa28-0492c009708b",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow seized amount to underflow with liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow seized amount to underflow with liquidators permission",
                      "timedOut": false,
                      "duration": 1043,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(6);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(user1, f.KrAsset, f.Collateral);\nconst allowSeizeUnderflow = true;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, liqAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address), allowSeizeUnderflow)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "68d0b893-388b-4641-988b-39e076a51db5",
                      "parentUUID": "76bd8cad-2bfa-481d-a874-951c0f4293b1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "9d7244fd-9003-4059-8ea8-9c4ab7565503",
                    "cf2d2c6a-5386-4953-a107-3ed14d0f77ef",
                    "7a960d97-590e-4ebc-b264-6ea7e7c7d573",
                    "3cb800a8-35c4-42d3-bbc4-896a6889306a",
                    "0e11d932-484a-49a1-a790-4e050fae45c6",
                    "6f51d4d0-9d6e-411e-86b1-bfc87e36240a",
                    "da906777-65a4-4c54-b68b-01655e9ddfd3",
                    "45d71965-e443-447f-95cd-d1c702bf0900",
                    "b5586a70-d060-46c9-84a4-21ade0e5d2cf",
                    "c84384bf-d431-41d6-b65e-b60912bed036",
                    "31190ca0-49a0-47df-9429-dfebd5a73051"
=======
                    "7da996fa-eb89-4f4b-a9c2-4cde9fab5f0d",
                    "f47a2444-a299-430d-9687-ff41cb552f55",
                    "bc154d58-84cb-423b-9da8-72fdbd6d169b",
                    "3d854920-c245-4f19-a3fd-d661c790e33f",
                    "6c60ce5f-708c-4458-9651-7ecce1cfa302",
                    "190a3764-d717-4fa2-8d2f-e9be6f90f99b",
                    "fe89577a-1fce-4aa7-b774-20f0ae29b43b",
                    "db48c896-f2c8-4e0e-82fa-e02deda8ac4c",
                    "cc5a6070-881d-44da-b454-70b858ac8cb8",
                    "46ce3d1a-34d8-47ae-9395-7dd2f5858ed6",
                    "69472c0b-e7cb-4ba5-8845-9df002f67dc6",
                    "15788740-9cf9-4548-a08c-d9ddc5a1139b",
                    "414f63e9-9bf1-47bf-aa28-0492c009708b",
                    "68d0b893-388b-4641-988b-39e076a51db5"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [
                    "b23f2e1e-7777-426a-895a-830ea00b107e"
                  ],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 5205,
=======
                  "duration": 12951,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                  "uuid": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.resetRebasing();",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "36cb6d23-7fee-4fd0-bafc-85e3dd4d43cd",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "8a353992-c117-432c-87c2-7605fca9e681",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should setup correct",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should setup correct",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 469,
=======
                      "duration": 1222,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [mcr, cr, cr2, liquidatable] = await Promise.all([\n    _optimizations.default.getMinCollateralRatio(),\n    hre.Diamond.getAccountCollateralRatio(user3.address),\n    hre.Diamond.getAccountCollateralRatio(user4.address),\n    hre.Diamond.getAccountLiquidatable(user3.address)\n]);\n(0, _chai.expect)(cr).to.closeTo(mcr, 8);\n(0, _chai.expect)(cr2).to.closeTo(mcr, 1);\n(0, _chai.expect)(liquidatable).to.be.false;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "dbfbd05b-840c-42a6-955c-20a0d0587454",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "3e1b2d86-38ce-4ee0-9dcc-588aae65b303",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 117,
=======
                      "duration": 276,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE').withArgs(1000000000000, 933333332400);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d2af3bda-7ec9-43fd-9599-02518b679ab8",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "5ed4136f-7046-45b6-9499-672e1c28a730",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 115,
=======
                      "duration": 274,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE').withArgs(1000000000000, 933333332400);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "87eb7551-bee9-43f0-8bcd-805d4251e162",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "37557bff-b555-4ae8-b67d-10f84e17e550",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1360,
=======
                      "duration": 3098,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true);\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "9de90ec3-8b0d-406f-8188-73c971ef4e67",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "c7315e08-180e-40aa-9e43-77af2d5c5884",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1160,
=======
                      "duration": 2016,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.KrAsset.setPrice(rebasePrice + 1);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "67cebe88-7387-4862-a5a5-46ff8780af11",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "bbe78921-8e8e-48d4-bf6a-16dc2da57f63",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 791,
=======
                      "duration": 1055,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.updateCollateralFactor(f.KrAssetCollateral.address, 0.99e4);\nawait hre.Diamond.updateKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, maxLiq.repayAmount, hre.Diamond.address);\nawait Liquidator.liquidate(user3.address, f.KrAssetCollateral.address, maxLiq.repayAmount.sub(1e9), f.KrAssetCollateral.address, maxLiq.repayAssetIndex, maxLiq.seizeAssetIndex);\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7f31a505-6cb4-48dc-a407-175b285f64b1",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate to 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate to 0",
                      "timedOut": false,
                      "duration": 755,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.updateCollateralFactor(f.KrAssetCollateral.address, 1e4);\nawait hre.Diamond.updateKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nconst liquidationAmount = maxLiq.repayAmount.add((0, _values.toBig)(20, 27));\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, liquidationAmount, hre.Diamond.address);\nawait Liquidator.liquidate(user3.address, f.KrAssetCollateral.address, liquidationAmount, f.KrAssetCollateral.address, maxLiq.repayAssetIndex, maxLiq.seizeAssetIndex);\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(0);",
                      "err": {},
                      "uuid": "02e80c9e-f2fb-457c-8987-99f2c8088ae9",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "4ab678f6-af5f-4e03-9a2a-21aa240c764f",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 2604,
=======
                      "duration": 6045,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid * denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "a5a04fd8-4559-43a1-9bf3-c656385b2434",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "8a4e515e-99a0-4106-b8ba-f9d4913cc4d5",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 2672,
=======
                      "duration": 5598,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid / denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "4dedb72c-1819-435f-b8b5-238e21ebc5ce",
                      "parentUUID": "6483846b-5751-45b2-b27f-fbb8b3cc94df",
=======
                      "uuid": "3cd09360-c0e9-4ef9-bf90-825fb057077a",
                      "parentUUID": "9dbfaa13-ec6c-4f7c-9b23-3e649855bd92",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "dbfbd05b-840c-42a6-955c-20a0d0587454",
                    "d2af3bda-7ec9-43fd-9599-02518b679ab8",
                    "87eb7551-bee9-43f0-8bcd-805d4251e162",
                    "9de90ec3-8b0d-406f-8188-73c971ef4e67",
                    "67cebe88-7387-4862-a5a5-46ff8780af11",
                    "7f31a505-6cb4-48dc-a407-175b285f64b1",
                    "02e80c9e-f2fb-457c-8987-99f2c8088ae9",
                    "a5a04fd8-4559-43a1-9bf3-c656385b2434",
                    "4dedb72c-1819-435f-b8b5-238e21ebc5ce"
=======
                    "3e1b2d86-38ce-4ee0-9dcc-588aae65b303",
                    "5ed4136f-7046-45b6-9499-672e1c28a730",
                    "37557bff-b555-4ae8-b67d-10f84e17e550",
                    "c7315e08-180e-40aa-9e43-77af2d5c5884",
                    "bbe78921-8e8e-48d4-bf6a-16dc2da57f63",
                    "4ab678f6-af5f-4e03-9a2a-21aa240c764f",
                    "8a4e515e-99a0-4106-b8ba-f9d4913cc4d5",
                    "3cd09360-c0e9-4ef9-bf90-825fb057077a"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 10043,
=======
                  "duration": 19584,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "6460136e-8cb5-411f-b901-e9030ea9596c",
=======
          "uuid": "73874104-8c0a-4196-9b06-71d54df7b3e8",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Minter",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.mintRepayFixture)();\n[[user1, User1], [user2, User2]] = f.users;\nawait f.reset();",
              "err": {},
<<<<<<< HEAD
              "uuid": "55d9dd59-b36a-4d42-8132-26abb08b82ce",
              "parentUUID": "6460136e-8cb5-411f-b901-e9030ea9596c",
=======
              "uuid": "0bb5be1d-1206-4d22-9850-80af2f45e073",
              "parentUUID": "73874104-8c0a-4196-9b06-71d54df7b3e8",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "4083af9c-355a-461a-b22a-3e7405a830e9",
=======
              "uuid": "a5096683-06fb-4c7f-ab2a-572ba08b5cae",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#mint+burn",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                  "uuid": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#mint",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 290,
=======
                      "duration": 787,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(f.initialMintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _values.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "12198f97-fe35-442c-8f00-5bc24b96076c",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "45aaef98-657f-48f9-ad37-ef2237b9b9ee",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 496,
=======
                      "duration": 1219,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7512e50b-5007-41a6-8cd5-8980695051c5",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "eb0cfb1a-2c4c-469e-bbf7-a769524e5dc0",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 363,
=======
                      "duration": 794,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(20);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset2.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset2);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset2.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await f.KrAsset2.contract.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "21f21ada-7804-49d1-a16d-039c0842c661",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "7432c013-e0a0-4bab-bdd6-83bb858d79bc",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 284,
=======
                      "duration": 687,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _values.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst currMinimumDebtValue = await hre.Diamond.getMinDebtValue();\n(0, _chai.expect)(mintAmountUSDValue).to.equal(currMinimumDebtValue);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "ce396fc3-5746-4cf4-be3e-eddcd8a7877f",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "bb74e111-c5f0-4aef-ab92-53c415a0e854",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 201,
=======
                      "duration": 455,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.default.MANAGER, user2.address);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _values.toBig)(1);\nawait User2.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userTwoBalanceAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userTwoBalanceAfter).to.equal(mintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "317ebfee-f4f0-40f2-87af-58712be7ebe7",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "8e0f904b-fdb6-4e62-83ec-2ec491acca69",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 180,
=======
                      "duration": 355,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetMinted');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "05a06b11-f205-441f-9be5-82d3707c88af",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "4cb0011d-6091-49e7-b0c0-8848b64fdecf",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 62,
=======
                      "duration": 106,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(User1.mintKreskoAsset(user2.address, f.KrAsset.address, (0, _values.toBig)(1))).to.be.revertedWith(`AccessControl: account ${user1.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3402f4a4-c9a2-4cfa-a182-bb8a1a7ec0d6",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "bc304db8-e6d1-48ee-a7a0-8a722e8179d4",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 127,
=======
                      "duration": 354,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currMinimumDebtValue = await _optimizations.default.getMinDebtValue();\nconst mintAmount = currMinimumDebtValue.wadDiv(_mocks.TEN_USD.ebn(8)).sub(1e9);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'MINT_VALUE_LOW').withArgs(f.KrAsset.address, 10e8 - 1, currMinimumDebtValue);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "48b46e2f-96d7-483c-a3fa-6ebdd2ea3b55",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "d64e91b2-c932-44f2-831b-a792fee44ca1",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 36,
=======
                      "duration": 95,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, '0x0000000000000000000000000000000000000002', (0, _values.toBig)(1))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'KRASSET_DOES_NOT_EXIST').withArgs('0x0000000000000000000000000000000000000002');",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1a6ee5eb-e778-43d9-8029-94bed509e0b5",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "d5a39468-7414-4868-b03e-dcce5f66c171",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 371,
=======
                      "duration": 265,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmountDeposited = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral.address);\nconst MCR = await hre.Diamond.getMinCollateralRatio();\nconst mcrAmount = collateralAmountDeposited.percentMul(MCR);\nconst mintAmount = mcrAmount.add(1);\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst userState = await hre.Diamond.getAccountState(user1.address);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'COLLATERAL_VALUE_LOW').withArgs(userState.totalCollateralValue, mintValue.percentMul(MCR));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "6d5dda27-a8dc-4e89-8fb3-2d32327d98dc",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "c4c33d08-fb48-4411-a501-4790d87950cc",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 265,
=======
                      "duration": 297,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait f.Collateral.setBalance(user1, (0, _values.toBig)(100000000));\nawait (0, _chai.expect)(User1.depositCollateral(user1.address, f.Collateral.address, (0, _values.toBig)(10000))).not.to.be.reverted;\nconst assetSupplyLimit = (0, _values.toBig)(1);\nconst mintAmount = (0, _values.toBig)(2);\nawait f.KrAsset.update({\n    ...f.KrAsset.config.args,\n    krAssetConfig: {\n        ...f.KrAsset.config.args.krAssetConfig,\n        supplyLimit: assetSupplyLimit\n    }\n});\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'MAX_SUPPLY_EXCEEDED').withArgs(f.KrAsset.address, (await f.KrAsset.contract.totalSupply()).add(mintAmount), assetSupplyLimit);\nawait f.KrAsset.update({\n    ...f.KrAsset.config.args,\n    krAssetConfig: {\n        ...f.KrAsset.config.args.krAssetConfig,\n        supplyLimit: assetSupplyLimit\n    }\n});",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "a7d4477c-ca25-4b5a-8dd4-5eb6db8cea3b",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "71717041-ca85-4346-aa5e-7e1bb4944ea5",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "ef3de737-649c-4107-96b2-1056fcd0dea9",
                      "parentUUID": "befe1d2d-1594-4eaa-b76b-b8bcab83cf02",
=======
                      "uuid": "9fa3534f-1299-4abf-9165-b94ccbc55af3",
                      "parentUUID": "6c68afc0-4002-47c2-87c1-a0b7e43131fb",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "12198f97-fe35-442c-8f00-5bc24b96076c",
                    "7512e50b-5007-41a6-8cd5-8980695051c5",
                    "21f21ada-7804-49d1-a16d-039c0842c661",
                    "ce396fc3-5746-4cf4-be3e-eddcd8a7877f",
                    "317ebfee-f4f0-40f2-87af-58712be7ebe7",
                    "05a06b11-f205-441f-9be5-82d3707c88af",
                    "3402f4a4-c9a2-4cfa-a182-bb8a1a7ec0d6",
                    "48b46e2f-96d7-483c-a3fa-6ebdd2ea3b55",
                    "1a6ee5eb-e778-43d9-8029-94bed509e0b5",
                    "6d5dda27-a8dc-4e89-8fb3-2d32327d98dc",
                    "a7d4477c-ca25-4b5a-8dd4-5eb6db8cea3b"
                  ],
                  "failures": [],
                  "pending": [
                    "ef3de737-649c-4107-96b2-1056fcd0dea9"
                  ],
                  "skipped": [],
                  "duration": 2675,
=======
                    "45aaef98-657f-48f9-ad37-ef2237b9b9ee",
                    "eb0cfb1a-2c4c-469e-bbf7-a769524e5dc0",
                    "7432c013-e0a0-4bab-bdd6-83bb858d79bc",
                    "bb74e111-c5f0-4aef-ab92-53c415a0e854",
                    "8e0f904b-fdb6-4e62-83ec-2ec491acca69",
                    "4cb0011d-6091-49e7-b0c0-8848b64fdecf",
                    "bc304db8-e6d1-48ee-a7a0-8a722e8179d4",
                    "d64e91b2-c932-44f2-831b-a792fee44ca1",
                    "d5a39468-7414-4868-b03e-dcce5f66c171",
                    "c4c33d08-fb48-4411-a501-4790d87950cc",
                    "71717041-ca85-4346-aa5e-7e1bb4944ea5"
                  ],
                  "failures": [],
                  "pending": [
                    "9fa3534f-1299-4abf-9165-b94ccbc55af3"
                  ],
                  "skipped": [],
                  "duration": 5414,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "a3c28f10-7c18-442c-b23d-f1fd6e455a2c",
=======
                  "uuid": "55e0f8f1-6c93-4fdb-a8c2-7b18a0755bee",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#mint - rebase",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
<<<<<<< HEAD
                      "uuid": "4d363b1a-ec1d-41fd-a27c-744400d6df8c",
=======
                      "uuid": "9c01094c-313c-4968-8a09-3f01a10430a9",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 223,
=======
                          "duration": 467,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "953fedc5-eeb1-4bb5-8e68-2f1f36625307",
                          "parentUUID": "4d363b1a-ec1d-41fd-a27c-744400d6df8c",
=======
                          "uuid": "92dfc90b-31df-48a6-9daf-9f60477b99ab",
                          "parentUUID": "9c01094c-313c-4968-8a09-3f01a10430a9",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 237,
=======
                          "duration": 467,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "49c53077-a7d3-4f87-8cc9-a8c38de5bd0c",
                          "parentUUID": "4d363b1a-ec1d-41fd-a27c-744400d6df8c",
=======
                          "uuid": "b185d25d-803b-40d8-bab0-bd0b9c1da758",
                          "parentUUID": "9c01094c-313c-4968-8a09-3f01a10430a9",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 264,
=======
                          "duration": 463,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "8e1d48d1-3279-4c49-9f3d-e001166fc72f",
                          "parentUUID": "4d363b1a-ec1d-41fd-a27c-744400d6df8c",
=======
                          "uuid": "da70e289-f349-4569-925d-b5a37cf9696e",
                          "parentUUID": "9c01094c-313c-4968-8a09-3f01a10430a9",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 221,
=======
                          "duration": 461,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "1421e5e6-fae4-44c3-bb85-673a19abf7c6",
                          "parentUUID": "4d363b1a-ec1d-41fd-a27c-744400d6df8c",
=======
                          "uuid": "63cc8eb1-f5f8-4c97-a59d-c8a8df808498",
                          "parentUUID": "9c01094c-313c-4968-8a09-3f01a10430a9",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "953fedc5-eeb1-4bb5-8e68-2f1f36625307",
                        "49c53077-a7d3-4f87-8cc9-a8c38de5bd0c",
                        "8e1d48d1-3279-4c49-9f3d-e001166fc72f",
                        "1421e5e6-fae4-44c3-bb85-673a19abf7c6"
=======
                        "92dfc90b-31df-48a6-9daf-9f60477b99ab",
                        "b185d25d-803b-40d8-bab0-bd0b9c1da758",
                        "da70e289-f349-4569-925d-b5a37cf9696e",
                        "63cc8eb1-f5f8-4c97-a59d-c8a8df808498"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 945,
=======
                      "duration": 1858,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
<<<<<<< HEAD
                      "uuid": "78803534-a737-41c9-886a-eb12abf093d3",
=======
                      "uuid": "d3cd71ae-ffac-464d-8747-3975fec6b296",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 342,
=======
                          "duration": 727,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "810e0f4e-2b10-41da-86b1-70f813df3c27",
                          "parentUUID": "78803534-a737-41c9-886a-eb12abf093d3",
=======
                          "uuid": "20c293f9-f456-4d18-af2b-6b1344d58168",
                          "parentUUID": "d3cd71ae-ffac-464d-8747-3975fec6b296",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 338,
=======
                          "duration": 727,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "ede0cf14-ad3a-4c66-a6f5-7eda7e3fed4b",
                          "parentUUID": "78803534-a737-41c9-886a-eb12abf093d3",
=======
                          "uuid": "a3e9f9ed-fae2-4acd-8f7d-8352dca14800",
                          "parentUUID": "d3cd71ae-ffac-464d-8747-3975fec6b296",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 323,
=======
                          "duration": 723,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice, 8) / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "b2776f19-ecdf-4f3b-9da6-6a9f03993e45",
                          "parentUUID": "78803534-a737-41c9-886a-eb12abf093d3",
=======
                          "uuid": "966293ff-c54c-4f8d-8e65-a4fc78975c02",
                          "parentUUID": "d3cd71ae-ffac-464d-8747-3975fec6b296",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 305,
=======
                          "duration": 729,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "274f5498-d8b7-4b1c-8509-dc067da627f1",
                          "parentUUID": "78803534-a737-41c9-886a-eb12abf093d3",
=======
                          "uuid": "41e3a5b9-4611-408b-8ead-3af926a20618",
                          "parentUUID": "d3cd71ae-ffac-464d-8747-3975fec6b296",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "810e0f4e-2b10-41da-86b1-70f813df3c27",
                        "ede0cf14-ad3a-4c66-a6f5-7eda7e3fed4b",
                        "b2776f19-ecdf-4f3b-9da6-6a9f03993e45",
                        "274f5498-d8b7-4b1c-8509-dc067da627f1"
=======
                        "20c293f9-f456-4d18-af2b-6b1344d58168",
                        "a3e9f9ed-fae2-4acd-8f7d-8352dca14800",
                        "966293ff-c54c-4f8d-8e65-a4fc78975c02",
                        "41e3a5b9-4611-408b-8ead-3af926a20618"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 1308,
=======
                      "duration": 2906,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
<<<<<<< HEAD
                      "uuid": "0d80c12e-84bd-4f32-bddc-4ac0beecc350",
=======
                      "uuid": "082af3e8-67e0-48e2-abb3-857df1eb18a7",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 738,
=======
                          "duration": 1821,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(valueBeforeRebase);\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await f.KrAsset.contract.balanceOf(user1.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, f.KrAsset)).to.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "709005e0-c1ff-4c0a-b4f0-c5b7e4fb9ce1",
                          "parentUUID": "0d80c12e-84bd-4f32-bddc-4ac0beecc350",
=======
                          "uuid": "201f9092-e034-4d58-9955-71bd108bba99",
                          "parentUUID": "082af3e8-67e0-48e2-abb3-857df1eb18a7",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 773,
=======
                          "duration": 1741,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, f.KrAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, f.KrAsset));\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "c3f3530f-7f8b-4af3-b6ee-4546ecec7af7",
                          "parentUUID": "0d80c12e-84bd-4f32-bddc-4ac0beecc350",
=======
                          "uuid": "108a497f-0bdc-44f1-9529-aa03fe7ec749",
                          "parentUUID": "082af3e8-67e0-48e2-abb3-857df1eb18a7",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "709005e0-c1ff-4c0a-b4f0-c5b7e4fb9ce1",
                        "c3f3530f-7f8b-4af3-b6ee-4546ecec7af7"
=======
                        "201f9092-e034-4d58-9955-71bd108bba99",
                        "108a497f-0bdc-44f1-9529-aa03fe7ec749"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 1511,
=======
                      "duration": 3562,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                  "uuid": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#burn",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 153,
=======
                      "duration": 352,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b55b61e0-ec28-424a-9ef8-0e783c4eac50",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "03e7cf07-37ab-4aa1-b46f-be63ea8f07eb",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 162,
=======
                      "duration": 359,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(f.initialMintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userDebt).to.closeTo(f.initialMintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "08766acc-f6a6-46a2-adce-43f4b5b1df75",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "2e2c760b-139f-4a27-a917-b5b81d57b988",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "df990103-e196-4b97-a38b-17f5d5d3913a",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "d04f22b6-5947-4c63-8ee6-45d3eb3bce51",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 193,
=======
                      "duration": 459,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.default.MANAGER, user2.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nconst userOneBalanceBefore = await f.KrAsset.balanceOf(user1.address);\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait User2.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// await expect(User2.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be\n//   .reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userOneBalance).to.equal(userOneBalanceBefore, 'userOneBalance');\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await f.KrAsset.balanceOf(user2.address);\n(0, _chai.expect)(userThreeBalance).to.equal(f.initialMintAmount.sub(burnAmount), 'userThreeBalance');\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount), 'totalSupplyAfter');\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user2.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n], 'mintedKreskoAssetsAfter');\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebt).to.equal(f.initialMintAmount.sub(burnAmount));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "53db18ac-476b-4498-b3b8-22db88b3a0a1",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "0981cdfb-b7df-4d32-8c0e-5642e71b215f",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "4c47f606-b023-440b-b83c-9dd4bb672c97",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "5b04f002-32da-4879-9407-6e5bbf113990",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 245,
=======
                      "duration": 361,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await f.KrAsset.balanceOf(user1.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst minDebtValue = (0, _values.fromBig)(await _optimizations.default.getMinDebtValue(), 8);\nconst oraclePrice = f.KrAsset.config.args.price;\nconst burnAmount = (0, _values.toBig)((0, _values.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3f810cad-8550-43b1-a6d0-42538f5702e3",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "718f3976-a87d-4c58-8192-8aea201b75cb",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 157,
=======
                      "duration": 356,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetBurned');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount.div(5));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "4a303f48-f815-4116-8dfe-5422fbcb1716",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "74d74969-28a0-4a56-81b4-5d2317f62bf9",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 281,
=======
                      "duration": 795,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = f.initialMintAmount.add(secondMintAmount);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "966ca809-53f2-46ad-b617-7592371b805a",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "72451574-3bf7-4219-b556-5a4dc14bc5bc",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 30,
=======
                      "duration": 95,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, 0, kreskoAssetIndex)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'ZERO_BURN');",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1cee2b79-0df9-4848-ac34-5fee5246b856",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "b26de768-62cc-49d3-8886-868188da8269",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 42,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User2.burnKreskoAsset(user1.address, f.KrAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${user2.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "66a39cb0-8136-4930-9799-20e1ea1946cb",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "e2cd1e5c-524c-4c35-b5af-676b45b9922c",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 36,
=======
                      "duration": 98,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst burnAmount = debt.add((0, _values.toBig)(1));\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b6d5aa42-c614-45ce-9527-6ac5360f3b24",
                      "parentUUID": "8af40efb-14c1-420e-80d9-1183dca4f370",
=======
                      "uuid": "604635af-fd5d-44ad-a591-cc0734eab284",
                      "parentUUID": "5f5773b5-5381-4e7b-b237-7b89d2262259",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
<<<<<<< HEAD
                      "uuid": "020fb55f-a3c6-4821-8c12-0e06e64574ef",
=======
                      "uuid": "2c1ce9cb-43b2-4d7b-ade1-557c468531cb",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "Protocol open fee",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 443,
=======
                          "duration": 1206,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01e4;\nawait f.KrAsset.update({\n    ...f.KrAsset.config.args,\n    krAssetConfig: {\n        ...f.KrAsset.config.args.krAssetConfig,\n        openFee,\n        supplyLimit: _values.MaxUint128\n    }\n});\nconst mintAmount = (0, _values.toBig)(1);\nconst mintValue = mintAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst expectedFeeValue = mintValue.percentMul(openFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(_mocks.TEN_USD.ebn(8));\n// Get the balances prior to the fee being charged.\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Mint Kresko asset\nconst tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'OpenFeePaid');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst [, values] = await hre.Diamond.previewFee(user1.address, f.KrAsset.address, mintAmount, _fees.default.OPEN);\n(0, _chai.expect)(values[0]).eq(expectedCollateralFeeAmount);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "ed63baba-ba77-47c9-8af6-51fa543dc1a6",
                          "parentUUID": "020fb55f-a3c6-4821-8c12-0e06e64574ef",
=======
                          "uuid": "89b70341-b2c2-4d29-bcdd-2fa0a7d39f29",
                          "parentUUID": "2c1ce9cb-43b2-4d7b-ade1-557c468531cb",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "ed63baba-ba77-47c9-8af6-51fa543dc1a6"
=======
                        "89b70341-b2c2-4d29-bcdd-2fa0a7d39f29"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 443,
=======
                      "duration": 1206,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
<<<<<<< HEAD
                      "uuid": "3e0dc5de-929b-441b-a0f8-6517fde59a82",
=======
                      "uuid": "7e25ad1c-eb2d-43c9-a1d0-8b0b7a37e89d",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "Protocol Close Fee",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 194,
=======
                          "duration": 456,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _values.toBig)(1);\nconst burnValue = burnAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst closeFee = f.KrAsset.config.args.krAssetConfig.closeFee; // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.percentMul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(f.Collateral.config.args.price.ebn(8));\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'CloseFeePaid');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "a85f5568-f253-4565-9900-a7e3219596f8",
                          "parentUUID": "3e0dc5de-929b-441b-a0f8-6517fde59a82",
=======
                          "uuid": "0103c77f-a5a4-45f5-931e-3beb7c8d4477",
                          "parentUUID": "7e25ad1c-eb2d-43c9-a1d0-8b0b7a37e89d",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 512,
=======
                          "duration": 1169,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'CloseFeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.mul(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'CloseFeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "1f30ac1b-b630-40db-b09f-017f10836f21",
                          "parentUUID": "3e0dc5de-929b-441b-a0f8-6517fde59a82",
=======
                          "uuid": "43d8eab6-6a2e-4a90-a903-53ff571b9e22",
                          "parentUUID": "7e25ad1c-eb2d-43c9-a1d0-8b0b7a37e89d",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 494,
=======
                          "duration": 1170,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'CloseFeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _values.fromBig)(await f.KrAsset.getPrice(), 8) * denominator;\nf.KrAsset.setPrice(priceAfter);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.div(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'CloseFeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "945951b2-a9d4-47e7-a123-e5fe78608fb8",
                          "parentUUID": "3e0dc5de-929b-441b-a0f8-6517fde59a82",
=======
                          "uuid": "a1364cdd-debc-470e-8b73-e7dd19195d05",
                          "parentUUID": "7e25ad1c-eb2d-43c9-a1d0-8b0b7a37e89d",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "a85f5568-f253-4565-9900-a7e3219596f8",
                        "1f30ac1b-b630-40db-b09f-017f10836f21",
                        "945951b2-a9d4-47e7-a123-e5fe78608fb8"
=======
                        "0103c77f-a5a4-45f5-931e-3beb7c8d4477",
                        "43d8eab6-6a2e-4a90-a903-53ff571b9e22",
                        "a1364cdd-debc-470e-8b73-e7dd19195d05"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 1200,
=======
                      "duration": 2795,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [
<<<<<<< HEAD
                    "08766acc-f6a6-46a2-adce-43f4b5b1df75",
                    "53db18ac-476b-4498-b3b8-22db88b3a0a1",
                    "3f810cad-8550-43b1-a6d0-42538f5702e3",
                    "4a303f48-f815-4116-8dfe-5422fbcb1716",
                    "966ca809-53f2-46ad-b617-7592371b805a",
                    "1cee2b79-0df9-4848-ac34-5fee5246b856",
                    "66a39cb0-8136-4930-9799-20e1ea1946cb",
                    "b6d5aa42-c614-45ce-9527-6ac5360f3b24"
                  ],
                  "failures": [],
                  "pending": [
                    "df990103-e196-4b97-a38b-17f5d5d3913a",
                    "4c47f606-b023-440b-b83c-9dd4bb672c97"
                  ],
                  "skipped": [],
                  "duration": 1146,
=======
                    "2e2c760b-139f-4a27-a917-b5b81d57b988",
                    "0981cdfb-b7df-4d32-8c0e-5642e71b215f",
                    "718f3976-a87d-4c58-8192-8aea201b75cb",
                    "74d74969-28a0-4a56-81b4-5d2317f62bf9",
                    "72451574-3bf7-4219-b556-5a4dc14bc5bc",
                    "b26de768-62cc-49d3-8886-868188da8269",
                    "e2cd1e5c-524c-4c35-b5af-676b45b9922c",
                    "604635af-fd5d-44ad-a591-cc0734eab284"
                  ],
                  "failures": [],
                  "pending": [
                    "d04f22b6-5947-4c63-8ee6-45d3eb3bce51",
                    "5b04f002-32da-4879-9407-6e5bbf113990"
                  ],
                  "skipped": [],
                  "duration": 2627,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "88d99171-c2a1-4be0-b8ff-e799ae561660",
=======
                  "uuid": "f6f025a4-5fa3-450d-8a63-9e20e53abecf",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#burn - rebase",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase \"before each\" hook in \"#burn - rebase\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 188,
=======
                      "duration": 390,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: f.KrAsset,\n    amount: mintAmount,\n    user: user1\n});",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d9cae631-9a11-4a19-bd69-ada32a06093b",
                      "parentUUID": "88d99171-c2a1-4be0-b8ff-e799ae561660",
=======
                      "uuid": "416b90e1-ec54-4e94-adbc-067fee575af3",
                      "parentUUID": "f6f025a4-5fa3-450d-8a63-9e20e53abecf",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
<<<<<<< HEAD
                      "uuid": "3bd4214d-c21d-4ca1-86ba-18dbdec5c284",
=======
                      "uuid": "18354e26-f848-4d61-a9cf-8b9f07096437",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 216,
=======
                          "duration": 571,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(debtAfter).to.equal(0);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(0);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(f.initialMintAmount); // WEI",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "2f6b9ed2-eed2-40da-9820-22048bb7043a",
                          "parentUUID": "3bd4214d-c21d-4ca1-86ba-18dbdec5c284",
=======
                          "uuid": "df6cc45e-31f6-4b8c-91f6-e58c4646c9ea",
                          "parentUUID": "18354e26-f848-4d61-a9cf-8b9f07096437",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 252,
=======
                          "duration": 577,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "73804db6-df5e-4705-88a5-b558ba41f28d",
                          "parentUUID": "3bd4214d-c21d-4ca1-86ba-18dbdec5c284",
=======
                          "uuid": "c6b429dd-574a-410b-8316-9a8205897dfd",
                          "parentUUID": "18354e26-f848-4d61-a9cf-8b9f07096437",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 202,
=======
                          "duration": 658,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _values.fromBig)(await f.KrAsset.contract.balanceOf(user1.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _values.toBig)(expectedBalanceAfterBurn * denominator).add(f.initialMintAmount));",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "f906ab10-b07d-484f-a95e-72dc9986c1e3",
                          "parentUUID": "3bd4214d-c21d-4ca1-86ba-18dbdec5c284",
=======
                          "uuid": "9da78c20-ee31-43ff-b265-8cfbda7498b5",
                          "parentUUID": "18354e26-f848-4d61-a9cf-8b9f07096437",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 269,
=======
                          "duration": 575,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "33d1e041-9b2a-409e-a08e-04ac6421cfa0",
                          "parentUUID": "3bd4214d-c21d-4ca1-86ba-18dbdec5c284",
=======
                          "uuid": "93bd2324-c8d5-4f96-8360-951cc0cb28aa",
                          "parentUUID": "18354e26-f848-4d61-a9cf-8b9f07096437",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "2f6b9ed2-eed2-40da-9820-22048bb7043a",
                        "73804db6-df5e-4705-88a5-b558ba41f28d",
                        "f906ab10-b07d-484f-a95e-72dc9986c1e3",
                        "33d1e041-9b2a-409e-a08e-04ac6421cfa0"
=======
                        "df6cc45e-31f6-4b8c-91f6-e58c4646c9ea",
                        "c6b429dd-574a-410b-8316-9a8205897dfd",
                        "9da78c20-ee31-43ff-b265-8cfbda7498b5",
                        "93bd2324-c8d5-4f96-8360-951cc0cb28aa"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 939,
=======
                      "duration": 2381,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
<<<<<<< HEAD
                      "uuid": "a3693c03-5f74-4a91-92f5-f7c638c9c20a",
=======
                      "uuid": "7531bf97-525a-47c2-934f-af882d80822c",
>>>>>>> origin/dev-159-syth-wrap
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 245,
=======
                          "duration": 642,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "62307cc8-0b8e-4f4e-8e65-17b53288ff8f",
                          "parentUUID": "a3693c03-5f74-4a91-92f5-f7c638c9c20a",
=======
                          "uuid": "dc386a9b-a37d-4ff8-aabd-60ead09458b2",
                          "parentUUID": "7531bf97-525a-47c2-934f-af882d80822c",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 421,
=======
                          "duration": 928,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(f.KrAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "f9013b6f-2276-49df-978b-679b3bda68d9",
                          "parentUUID": "a3693c03-5f74-4a91-92f5-f7c638c9c20a",
=======
                          "uuid": "21ef23d6-b365-45b2-b1a3-23c81642c98d",
                          "parentUUID": "7531bf97-525a-47c2-934f-af882d80822c",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 241,
=======
                          "duration": 642,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "32272958-1c06-4868-9bda-e1701171e505",
                          "parentUUID": "a3693c03-5f74-4a91-92f5-f7c638c9c20a",
=======
                          "uuid": "1a9b9c5a-0b9d-4017-b733-a90ce1dfd203",
                          "parentUUID": "7531bf97-525a-47c2-934f-af882d80822c",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
<<<<<<< HEAD
                          "duration": 456,
=======
                          "duration": 1028,
>>>>>>> origin/dev-159-syth-wrap
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
<<<<<<< HEAD
                          "uuid": "491f21e9-d96f-45c9-9f9d-45608cc9e9e4",
                          "parentUUID": "a3693c03-5f74-4a91-92f5-f7c638c9c20a",
=======
                          "uuid": "51306d29-4ddb-450b-83b7-9f5487a88ea1",
                          "parentUUID": "7531bf97-525a-47c2-934f-af882d80822c",
>>>>>>> origin/dev-159-syth-wrap
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
<<<<<<< HEAD
                        "62307cc8-0b8e-4f4e-8e65-17b53288ff8f",
                        "f9013b6f-2276-49df-978b-679b3bda68d9",
                        "32272958-1c06-4868-9bda-e1701171e505",
                        "491f21e9-d96f-45c9-9f9d-45608cc9e9e4"
=======
                        "dc386a9b-a37d-4ff8-aabd-60ead09458b2",
                        "21ef23d6-b365-45b2-b1a3-23c81642c98d",
                        "1a9b9c5a-0b9d-4017-b733-a90ce1dfd203",
                        "51306d29-4ddb-450b-83b7-9f5487a88ea1"
>>>>>>> origin/dev-159-syth-wrap
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
<<<<<<< HEAD
                      "duration": 1363,
=======
                      "duration": 3240,
>>>>>>> origin/dev-159-syth-wrap
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "4355346f-2417-4c95-99da-fc3992808c80",
=======
          "uuid": "b09ef013-e6d9-44f2-9523-789f4e4fa865",
>>>>>>> origin/dev-159-syth-wrap
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[, , [user]] = f.users;",
              "err": {},
<<<<<<< HEAD
              "uuid": "936fc6e9-1c2b-4923-9890-23f5df433567",
              "parentUUID": "4355346f-2417-4c95-99da-fc3992808c80",
=======
              "uuid": "0ee1e4bb-d729-45d1-aef0-1cc1a791173a",
              "parentUUID": "b09ef013-e6d9-44f2-9523-789f4e4fa865",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "1a00c011-4452-4b27-a480-6e8ac1cbcd30",
=======
              "uuid": "339ce37a-2ed2-402d-9d91-3a5d18c2b988",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "c10ff195-85e5-4142-9bde-476ace4de7bf",
=======
                  "uuid": "b215b6b9-2332-4c7c-88c9-5045300f52be",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw withdraw correct amount",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 138,
=======
                      "duration": 367,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nawait (0, _chai.expect)(f.Receiver.testWithdrawalAmount(f.Collateral.address, withdrawalAmount)).to.not.be.revertedWith('wront amount received');\n(0, _chai.expect)(await f.Collateral.balanceOf(f.Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2c717fd7-ce30-4a3a-9236-35e754e53b56",
                      "parentUUID": "c10ff195-85e5-4142-9bde-476ace4de7bf",
=======
                      "uuid": "9629723e-2e60-4c12-b1b9-9656aad7589c",
                      "parentUUID": "b215b6b9-2332-4c7c-88c9-5045300f52be",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 313,
=======
                      "duration": 830,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst balKreskoBefore = await f.Collateral.contract.balanceOf(hre.Diamond.address);\nawait Receiver.test(f.Collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(f.Collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(user.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await f.Collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "a3205413-c5db-49ea-952d-a02c583d64df",
                      "parentUUID": "c10ff195-85e5-4142-9bde-476ace4de7bf",
=======
                      "uuid": "1a396aa8-7032-4535-9afc-708ec22a91b1",
                      "parentUUID": "b215b6b9-2332-4c7c-88c9-5045300f52be",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 664,
=======
                      "duration": 1747,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(f.Collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user.address)).to.be.eq(1.5e4);\nawait (0, _chai.expect)(Receiver.test(f.Collateral.address, 10e15.toString())).to.be.reverted;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1979679d-4789-452a-9408-0d472316242f",
                      "parentUUID": "c10ff195-85e5-4142-9bde-476ace4de7bf",
=======
                      "uuid": "37b109ca-a1d8-486d-ade2-6843dc73cb6e",
                      "parentUUID": "b215b6b9-2332-4c7c-88c9-5045300f52be",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 202,
=======
                      "duration": 558,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nawait Receiver.testRedeposit(f.Collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await f.Collateral.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await f.Collateral.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "597ec999-805f-4610-bc79-4b27fb8686c5",
                      "parentUUID": "c10ff195-85e5-4142-9bde-476ace4de7bf",
=======
                      "uuid": "df4ac6b7-0fe0-464a-8c49-a00c36894d1f",
                      "parentUUID": "b215b6b9-2332-4c7c-88c9-5045300f52be",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 147,
=======
                      "duration": 383,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nf.Collateral2.setPrice(10);\nawait f.Collateral2.setBalance(user, f.depositAmount);\nawait f.Collateral2.contract.setVariable('_allowances', {\n    [user.address]: {\n        [hre.Diamond.address]: f.depositAmount,\n        [Receiver.address]: f.depositAmount\n    }\n});\nawait Receiver.testDepositAlternate(f.Collateral.address, deposits, f.Collateral2.address);\nconst secondCollateralDeposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral2.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "dae0216b-2acf-42cb-97a2-783615dafad6",
                      "parentUUID": "c10ff195-85e5-4142-9bde-476ace4de7bf",
=======
                      "uuid": "b6f8eb89-4c85-478a-b33a-c6d9c7502e18",
                      "parentUUID": "b215b6b9-2332-4c7c-88c9-5045300f52be",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "2c717fd7-ce30-4a3a-9236-35e754e53b56",
                    "a3205413-c5db-49ea-952d-a02c583d64df",
                    "1979679d-4789-452a-9408-0d472316242f",
                    "597ec999-805f-4610-bc79-4b27fb8686c5",
                    "dae0216b-2acf-42cb-97a2-783615dafad6"
=======
                    "9629723e-2e60-4c12-b1b9-9656aad7589c",
                    "1a396aa8-7032-4535-9afc-708ec22a91b1",
                    "37b109ca-a1d8-486d-ade2-6843dc73cb6e",
                    "df4ac6b7-0fe0-464a-8c49-a00c36894d1f",
                    "b6f8eb89-4c85-478a-b33a-c6d9c7502e18"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 1464,
=======
                  "duration": 3885,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "6634996b-23d2-483f-b0e0-ab21959705ae",
=======
                  "uuid": "82e1c236-2102-4728-9a03-b480930ee362",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 52,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 0)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 0)).to.be.revertedWith(Error.ZERO_WITHDRAW);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "73a9cb2e-b63e-4c82-8b2c-df220f96af42",
                      "parentUUID": "6634996b-23d2-483f-b0e0-ab21959705ae",
=======
                      "uuid": "0314726d-cdbf-4098-b305-a579b16c1960",
                      "parentUUID": "82e1c236-2102-4728-9a03-b480930ee362",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 103,
=======
                      "duration": 221,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.revokeRole(_roles.default.MANAGER, f.Receiver.address);\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 10000)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 10000)).to.be.revertedWith(\n            //     `AccessControl: account ${f.Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`,\n            // );",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "680a1bd9-7f54-46c6-96cf-c2b6d9359ec4",
                      "parentUUID": "6634996b-23d2-483f-b0e0-ab21959705ae",
=======
                      "uuid": "a8337b50-f6c2-436a-b252-c03196e3ea39",
                      "parentUUID": "82e1c236-2102-4728-9a03-b480930ee362",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 342,
=======
                      "duration": 839,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "5ee56190-f192-4d77-bd42-b9bc561f2c56",
                      "parentUUID": "6634996b-23d2-483f-b0e0-ab21959705ae",
=======
                      "uuid": "a8572905-878e-49e5-ba74-3adfe2bd8b3d",
                      "parentUUID": "82e1c236-2102-4728-9a03-b480930ee362",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 347,
=======
                      "duration": 840,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "aa3b583f-978b-4aea-a898-e98dab00b2b2",
                      "parentUUID": "6634996b-23d2-483f-b0e0-ab21959705ae",
=======
                      "uuid": "66015159-f3dc-43ce-a90a-1282e1dc4941",
                      "parentUUID": "82e1c236-2102-4728-9a03-b480930ee362",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "73a9cb2e-b63e-4c82-8b2c-df220f96af42",
                    "680a1bd9-7f54-46c6-96cf-c2b6d9359ec4",
                    "5ee56190-f192-4d77-bd42-b9bc561f2c56",
                    "aa3b583f-978b-4aea-a898-e98dab00b2b2"
=======
                    "0314726d-cdbf-4098-b305-a579b16c1960",
                    "a8337b50-f6c2-436a-b252-c03196e3ea39",
                    "a8572905-878e-49e5-ba74-3adfe2bd8b3d",
                    "66015159-f3dc-43ce-a90a-1282e1dc4941"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 844,
=======
                  "duration": 2010,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "b6da7627-c6c9-4fcf-86dc-f07174283ba4",
=======
          "uuid": "d474a076-1725-4f44-94b9-57d12b303cce",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Gating",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/06-gating.ts",
          "file": "/src/test/minter/06-gating.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Gating\"",
              "fullTitle": "Gating \"before each\" hook in \"Gating\"",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 123,
=======
              "duration": 237,
>>>>>>> origin/dev-159-syth-wrap
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// Set Gating phase to 3\nawait hre.Diamond.updatePhase(2);\n// setup collateral for userOne and userTwo\nthis.initialBalance = (0, _values.toBig)(100000);\nawait f.Collateral.setBalance(hre.users.userOne, this.initialBalance, hre.Diamond.address);\nawait f.Collateral.setBalance(hre.users.userTwo, this.initialBalance, hre.Diamond.address);\nthis.depositArgsOne = {\n    user: hre.users.userOne,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\nthis.depositArgsTwo = {\n    user: hre.users.userTwo,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\n// Deploy nft contract\n[this.nft] = await hre.deploy('MockERC1155', {\n    args: [],\n    from: hre.users.deployer.address\n});\nawait hre.Diamond.updateKreskian(this.nft.address);",
              "err": {},
<<<<<<< HEAD
              "uuid": "ea18ee48-09f0-4c30-9549-c29fd1b94175",
              "parentUUID": "b6da7627-c6c9-4fcf-86dc-f07174283ba4",
=======
              "uuid": "9336b43f-3885-4d66-b03f-8cf7ec17b282",
              "parentUUID": "d474a076-1725-4f44-94b9-57d12b303cce",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not allow to deposit collateral if the user doesn't have required nft's",
              "fullTitle": "Gating should not allow to deposit collateral if the user doesn't have required nft's",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 54,
=======
              "duration": 129,
>>>>>>> origin/dev-159-syth-wrap
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
<<<<<<< HEAD
              "uuid": "3ada26ae-6d55-410d-96ca-6cb9fc29aee0",
              "parentUUID": "b6da7627-c6c9-4fcf-86dc-f07174283ba4",
=======
              "uuid": "162e1b35-8205-40b1-9d71-82d2fdab3481",
              "parentUUID": "d474a076-1725-4f44-94b9-57d12b303cce",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow to deposit collateral if the user has the required nft's",
              "fullTitle": "Gating should allow to deposit collateral if the user has the required nft's",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.nft.safeTransferFrom(hre.users.deployer.address, this.depositArgsOne.user.address, 0, 1, '0x00');\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
<<<<<<< HEAD
              "uuid": "b22eeac1-e520-49f5-abbe-899845d17668",
              "parentUUID": "b6da7627-c6c9-4fcf-86dc-f07174283ba4",
=======
              "uuid": "7d626783-41dd-492e-bc69-d23170dcf349",
              "parentUUID": "d474a076-1725-4f44-94b9-57d12b303cce",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After all the phases anyone should be able to deposit collateral",
              "fullTitle": "Gating After all the phases anyone should be able to deposit collateral",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 96,
=======
              "duration": 232,
>>>>>>> origin/dev-159-syth-wrap
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await hre.Diamond.updatePhase(3);\n// Anyone should be able to deposit collateral\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsTwo.user).depositCollateral(this.depositArgsTwo.user.address, f.Collateral.address, this.depositArgsTwo.amount)).not.to.be.reverted;",
              "err": {},
<<<<<<< HEAD
              "uuid": "79832961-2fa2-45a5-8181-ee3257694f48",
              "parentUUID": "b6da7627-c6c9-4fcf-86dc-f07174283ba4",
=======
              "uuid": "248d83f3-d347-4571-9e5e-fe6f65064bd9",
              "parentUUID": "d474a076-1725-4f44-94b9-57d12b303cce",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "3ada26ae-6d55-410d-96ca-6cb9fc29aee0",
            "b22eeac1-e520-49f5-abbe-899845d17668",
            "79832961-2fa2-45a5-8181-ee3257694f48"
=======
            "162e1b35-8205-40b1-9d71-82d2fdab3481",
            "7d626783-41dd-492e-bc69-d23170dcf349",
            "248d83f3-d347-4571-9e5e-fe6f65064bd9"
>>>>>>> origin/dev-159-syth-wrap
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 215,
=======
          "duration": 501,
>>>>>>> origin/dev-159-syth-wrap
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "d99629cf-41bf-49d4-8467-42e22becedb4",
=======
          "uuid": "e6b0e5d9-edf6-41d9-9803-0a4b5ee1bfd7",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Oracles",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/oracle/00-oracles.ts",
          "file": "/src/test/oracle/00-oracles.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Oracles\"",
              "fullTitle": "Oracles \"before each\" hook in \"Oracles\"",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1,
=======
              "duration": 17,
>>>>>>> origin/dev-159-syth-wrap
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// Deploy one price feed\n[, [user]] = f.users;\nthis.deployer = await hre.ethers.getNamedSigner('deployer');\nthis.userOne = await hre.ethers.getNamedSigner('userOne');\nf.Collateral.setPrice(10);",
              "err": {},
<<<<<<< HEAD
              "uuid": "60f53dfe-b967-4cec-a3a0-090e7f2102f4",
              "parentUUID": "d99629cf-41bf-49d4-8467-42e22becedb4",
=======
              "uuid": "96fbf8f9-0e50-411b-a0ac-65dcb7b6160f",
              "parentUUID": "e6b0e5d9-edf6-41d9-9803-0a4b5ee1bfd7",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "1b4f2203-0cb4-493d-be55-5170e60163f0",
=======
              "uuid": "dc27b3f3-6969-482f-b182-e128edd6df3f",
>>>>>>> origin/dev-159-syth-wrap
              "title": "Redstone",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/oracle/00-oracles.ts",
              "file": "/src/test/oracle/00-oracles.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct setup",
                  "fullTitle": "Oracles Redstone should have correct setup",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 78,
=======
                  "duration": 185,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check initial conditions\n(0, _chai.expect)(await hre.Diamond.getAccountTotalCollateralValue(user.address)).to.equal((0, _values.toBig)(10000, 8), 'collateral value should be $10');",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "7548cf34-4d8c-48b8-994e-2230537725d9",
                  "parentUUID": "1b4f2203-0cb4-493d-be55-5170e60163f0",
=======
                  "uuid": "2882fbd9-e7a9-47a3-b065-6aeb99e41f91",
                  "parentUUID": "dc27b3f3-6969-482f-b182-e128edd6df3f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Oracles Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 60,
=======
                  "duration": 118,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nf.Collateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $20');",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "4c75e245-315c-4815-a69a-f667fce89ac8",
                  "parentUUID": "1b4f2203-0cb4-493d-be55-5170e60163f0",
=======
                  "uuid": "b9a68306-4153-4538-bdcc-0dad579029fc",
                  "parentUUID": "dc27b3f3-6969-482f-b182-e128edd6df3f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get primary price when price +- oracleDeviationPct of reference price ",
                  "fullTitle": "Oracles Redstone should get primary price when price +- oracleDeviationPct of reference price ",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 113,
=======
                  "duration": 221,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.Collateral.setOracleOrder([\n    _types.OracleType.Redstone,\n    _types.OracleType.Chainlink\n]);\n/// set chainlink price to 12\nf.Collateral.setPrice(12);\n/// set redstone price to 11\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $11');",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "1e7a3b33-e7bf-492c-9aef-f26f87143b0d",
                  "parentUUID": "1b4f2203-0cb4-493d-be55-5170e60163f0",
=======
                  "uuid": "0bbe0c41-e1c3-4feb-abef-badf55291e76",
                  "parentUUID": "dc27b3f3-6969-482f-b182-e128edd6df3f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Oracles Redstone should revert if price deviates too much",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 65,
=======
                  "duration": 121,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nf.Collateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\n// should revert if price deviates more than oracleDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.be.reverted;\nf.Collateral.setPrice(10);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "c1a2fb87-e89f-4c70-8c0a-8894ebedc0d3",
                  "parentUUID": "1b4f2203-0cb4-493d-be55-5170e60163f0",
=======
                  "uuid": "f315d926-e5c6-4aa7-9a90-a49f74450802",
                  "parentUUID": "dc27b3f3-6969-482f-b182-e128edd6df3f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return redstone price if sequencer is down",
                  "fullTitle": "Oracles Redstone should return redstone price if sequencer is down",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 148,
=======
                  "duration": 308,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 5\nf.Collateral.setPrice(5);\nconst redstoneCollateralPrice = 200;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    ..._redstone.defaultRedstoneDataPoints.map((p)=>p.value === 0 ? {\n            ...p,\n            value: 1\n        } : p),\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\n(await hre.getContractOrFork('MockSequencerUptimeFeed')).setAnswer(1);\n// should return redstone price if sequencer is down\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.be.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $200');\nf.Collateral.setPrice(10);\n(await hre.getContractOrFork('MockSequencerUptimeFeed')).setAnswer(0);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "b08a5215-965f-47e4-babd-651f596d1f44",
                  "parentUUID": "1b4f2203-0cb4-493d-be55-5170e60163f0",
=======
                  "uuid": "41e89ea8-9c6f-4c14-aea8-775665fc0ad1",
                  "parentUUID": "dc27b3f3-6969-482f-b182-e128edd6df3f",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "7548cf34-4d8c-48b8-994e-2230537725d9",
                "4c75e245-315c-4815-a69a-f667fce89ac8",
                "1e7a3b33-e7bf-492c-9aef-f26f87143b0d",
                "c1a2fb87-e89f-4c70-8c0a-8894ebedc0d3",
                "b08a5215-965f-47e4-babd-651f596d1f44"
=======
                "2882fbd9-e7a9-47a3-b065-6aeb99e41f91",
                "b9a68306-4153-4538-bdcc-0dad579029fc",
                "0bbe0c41-e1c3-4feb-abef-badf55291e76",
                "f315d926-e5c6-4aa7-9a90-a49f74450802",
                "41e89ea8-9c6f-4c14-aea8-775665fc0ad1"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 464,
=======
              "duration": 953,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "effc66f8-189c-40dd-949f-684b65d6edd7",
=======
          "uuid": "545fca83-16c8-4e96-bf5e-b86e3f10eaab",
>>>>>>> origin/dev-159-syth-wrap
          "title": "Safety Council",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devTwo, extOne, extTwo, devOne } = await hre.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
<<<<<<< HEAD
              "uuid": "1512bdb0-6743-4554-961d-5583f982b418",
              "parentUUID": "effc66f8-189c-40dd-949f-684b65d6edd7",
=======
              "uuid": "a6b598c9-8a77-4b18-817f-eb7ed38b20b7",
              "parentUUID": "545fca83-16c8-4e96-bf5e-b86e3f10eaab",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "0d2534d3-4303-4387-b711-68d4ea84da41",
=======
              "uuid": "da98617a-a820-4687-ad03-f04fd25554c2",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 104,
=======
                  "duration": 225,
>>>>>>> origin/dev-159-syth-wrap
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'setSafetyStateSet', [\n    true\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst safetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "34b8b32c-f431-4a22-b8bd-05dc87d713dd",
                  "parentUUID": "0d2534d3-4303-4387-b711-68d4ea84da41",
=======
                  "uuid": "c6714932-2c6c-4a9a-ba60-78f334ec483b",
                  "parentUUID": "da98617a-a820-4687-ad03-f04fd25554c2",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "34b8b32c-f431-4a22-b8bd-05dc87d713dd"
=======
                "c6714932-2c6c-4a9a-ba60-78f334ec483b"
>>>>>>> origin/dev-159-syth-wrap
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 104,
=======
              "duration": 225,
>>>>>>> origin/dev-159-syth-wrap
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
<<<<<<< HEAD
              "uuid": "ab15c105-c011-4140-9b5a-761f4b73d482",
=======
              "uuid": "e9f1ae9a-97d0-4cd0-8690-22bd11ec3ea9",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "3138cb08-2b64-4d43-995e-5a19a0a53989",
=======
                  "uuid": "c17450fe-8c03-42ea-8be7-86233644496c",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 66,
=======
                      "duration": 127,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "0312ebe7-0958-4f48-abe6-c006f2dbf43f",
                      "parentUUID": "3138cb08-2b64-4d43-995e-5a19a0a53989",
=======
                      "uuid": "a4d3a138-dfa6-490f-814e-05da7e862489",
                      "parentUUID": "c17450fe-8c03-42ea-8be7-86233644496c",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 64,
=======
                      "duration": 119,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "93adf338-acf6-47d2-a34f-b0250eb9533c",
                      "parentUUID": "3138cb08-2b64-4d43-995e-5a19a0a53989",
=======
                      "uuid": "1a2319d2-5963-46b6-bb15-ee1bcd1ef059",
                      "parentUUID": "c17450fe-8c03-42ea-8be7-86233644496c",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 66,
=======
                      "duration": 127,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2eef60c5-38e9-40d1-b33e-1ac70e6dd045",
                      "parentUUID": "3138cb08-2b64-4d43-995e-5a19a0a53989",
=======
                      "uuid": "19a3e632-bd9e-446c-9fba-d6a6343efff7",
                      "parentUUID": "c17450fe-8c03-42ea-8be7-86233644496c",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 54,
=======
                      "duration": 192,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "9daa5fe9-28fc-473b-8dc7-6f5ed558eb02",
                      "parentUUID": "3138cb08-2b64-4d43-995e-5a19a0a53989",
=======
                      "uuid": "74623e3c-ec4b-44e3-a179-f91de6222254",
                      "parentUUID": "c17450fe-8c03-42ea-8be7-86233644496c",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "0312ebe7-0958-4f48-abe6-c006f2dbf43f",
                    "93adf338-acf6-47d2-a34f-b0250eb9533c",
                    "2eef60c5-38e9-40d1-b33e-1ac70e6dd045",
                    "9daa5fe9-28fc-473b-8dc7-6f5ed558eb02"
=======
                    "a4d3a138-dfa6-490f-814e-05da7e862489",
                    "1a2319d2-5963-46b6-bb15-ee1bcd1ef059",
                    "19a3e632-bd9e-446c-9fba-d6a6343efff7",
                    "74623e3c-ec4b-44e3-a179-f91de6222254"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 250,
=======
                  "duration": 565,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "836738b4-827c-4d9c-a2be-f9f7698dce0b",
=======
                  "uuid": "9563974f-9746-46f9-ac90-a2ff4c5cac52",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "06ec4275-b76f-4a22-800a-915551396991",
                      "parentUUID": "836738b4-827c-4d9c-a2be-f9f7698dce0b",
=======
                      "uuid": "9795a796-2d5f-488d-83d0-413a1d059d4a",
                      "parentUUID": "9563974f-9746-46f9-ac90-a2ff4c5cac52",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 67,
=======
                      "duration": 127,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.KrAsset.address\n    ],\n    _actions.default.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.REPAY.toString(), f.KrAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "58d91cb5-b063-4a36-8952-02f7cd6bcc89",
                      "parentUUID": "836738b4-827c-4d9c-a2be-f9f7698dce0b",
=======
                      "uuid": "afc68e13-f0e3-4ef5-a369-13b1cf3e6cd7",
                      "parentUUID": "9563974f-9746-46f9-ac90-a2ff4c5cac52",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 65,
=======
                      "duration": 121,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hre.ethers.utils.computeAddress('0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d');\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        randomAddr\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "ea4d95e9-a663-4b69-a150-eecff5bb2bae",
                      "parentUUID": "836738b4-827c-4d9c-a2be-f9f7698dce0b",
=======
                      "uuid": "60cfc585-98e5-4358-b29d-961435359e9f",
                      "parentUUID": "9563974f-9746-46f9-ac90-a2ff4c5cac52",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "06ec4275-b76f-4a22-800a-915551396991",
                    "58d91cb5-b063-4a36-8952-02f7cd6bcc89",
                    "ea4d95e9-a663-4b69-a150-eecff5bb2bae"
=======
                    "9795a796-2d5f-488d-83d0-413a1d059d4a",
                    "afc68e13-f0e3-4ef5-a369-13b1cf3e6cd7",
                    "60cfc585-98e5-4358-b29d-961435359e9f"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 206,
=======
                  "duration": 371,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "aa074403-3e0b-4d89-97c1-ee6c869b386f",
=======
                  "uuid": "c028c533-2e25-49cf-9cbb-46fd4388f9f1",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "duration based pausing",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 66,
=======
                      "duration": 121,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _actions.default.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2d7b0cd3-f845-4755-82cc-d7183e7eaf03",
                      "parentUUID": "aa074403-3e0b-4d89-97c1-ee6c869b386f",
=======
                      "uuid": "0dd994b6-f0f1-4a5c-b98c-4fa06f97a8fe",
                      "parentUUID": "c028c533-2e25-49cf-9cbb-46fd4388f9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "83d32d2d-7dc6-48ba-a5ca-d83eeee98bc1",
                      "parentUUID": "aa074403-3e0b-4d89-97c1-ee6c869b386f",
=======
                      "uuid": "0257c3c8-59dc-46ce-9243-58ff84a339f8",
                      "parentUUID": "c028c533-2e25-49cf-9cbb-46fd4388f9f1",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "2d7b0cd3-f845-4755-82cc-d7183e7eaf03"
                  ],
                  "failures": [],
                  "pending": [
                    "83d32d2d-7dc6-48ba-a5ca-d83eeee98bc1"
                  ],
                  "skipped": [],
                  "duration": 66,
=======
                    "0dd994b6-f0f1-4a5c-b98c-4fa06f97a8fe"
                  ],
                  "failures": [],
                  "pending": [
                    "0257c3c8-59dc-46ce-9243-58ff84a339f8"
                  ],
                  "skipped": [],
                  "duration": 121,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "8e8ed5a5-96d7-4aca-884c-fc9efae7609e",
=======
                  "uuid": "c30aef64-9517-4e59-ac81-27b349f6dff5",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 134,
=======
                      "duration": 360,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1e456c22-9ec2-4b06-9ee8-382ae4227830",
                      "parentUUID": "8e8ed5a5-96d7-4aca-884c-fc9efae7609e",
=======
                      "uuid": "ff8579e4-4493-482a-b4cf-8329e6f4deaa",
                      "parentUUID": "c30aef64-9517-4e59-ac81-27b349f6dff5",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 130,
=======
                      "duration": 247,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "25d9c157-6775-43fe-b52c-48d9b9ba1672",
                      "parentUUID": "8e8ed5a5-96d7-4aca-884c-fc9efae7609e",
=======
                      "uuid": "6d195b2c-3594-4e71-9b08-55b80c8ef053",
                      "parentUUID": "c30aef64-9517-4e59-ac81-27b349f6dff5",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 127,
=======
                      "duration": 244,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "157b0107-c1b4-4054-86b1-1fe49cde6311",
                      "parentUUID": "8e8ed5a5-96d7-4aca-884c-fc9efae7609e",
=======
                      "uuid": "2cbeff44-21b8-411c-8c27-d6e7b6b4a502",
                      "parentUUID": "c30aef64-9517-4e59-ac81-27b349f6dff5",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 133,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "71f5ceda-d262-4ffe-921c-d3a4a3cf4ee9",
                      "parentUUID": "8e8ed5a5-96d7-4aca-884c-fc9efae7609e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 143,
=======
                      "duration": 238,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
<<<<<<< HEAD
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "05990f1b-6a6e-472a-883d-af5620abd111",
                      "parentUUID": "8e8ed5a5-96d7-4aca-884c-fc9efae7609e",
=======
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "4bfe1e49-f9f5-435b-aabf-a56a5f3afc11",
                      "parentUUID": "c30aef64-9517-4e59-ac81-27b349f6dff5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 239,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, \"toggleAssetsPaused\", [\n    [\n        f.Collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "5378a81b-2cc6-466f-969e-1b44d93be108",
                      "parentUUID": "c30aef64-9517-4e59-ac81-27b349f6dff5",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "1e456c22-9ec2-4b06-9ee8-382ae4227830",
                    "25d9c157-6775-43fe-b52c-48d9b9ba1672",
                    "157b0107-c1b4-4054-86b1-1fe49cde6311",
                    "71f5ceda-d262-4ffe-921c-d3a4a3cf4ee9",
                    "05990f1b-6a6e-472a-883d-af5620abd111"
=======
                    "ff8579e4-4493-482a-b4cf-8329e6f4deaa",
                    "6d195b2c-3594-4e71-9b08-55b80c8ef053",
                    "2cbeff44-21b8-411c-8c27-d6e7b6b4a502",
                    "4bfe1e49-f9f5-435b-aabf-a56a5f3afc11",
                    "5378a81b-2cc6-466f-969e-1b44d93be108"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 667,
=======
                  "duration": 1328,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "aebb5c5b-6428-4f62-a08a-803a132b2895",
=======
                  "uuid": "d4ecb219-ff37-46fa-9244-f6ba995a0216",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "event emission",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 28,
=======
                      "duration": 21,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'SafetyStateChange');\n(0, _chai.expect)(event.action).to.equal(_actions.default.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(f.Collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(hre.ethers.utils.keccak256(hre.ethers.utils.toUtf8Bytes('paused')));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d22229e4-931d-4b1c-8ed3-d33457f6a5fa",
                      "parentUUID": "aebb5c5b-6428-4f62-a08a-803a132b2895",
=======
                      "uuid": "a28189d8-15aa-4880-961a-ab8082eac7df",
                      "parentUUID": "d4ecb219-ff37-46fa-9244-f6ba995a0216",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "d22229e4-931d-4b1c-8ed3-d33457f6a5fa"
=======
                    "a28189d8-15aa-4880-961a-ab8082eac7df"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 28,
=======
                  "duration": 21,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
<<<<<<< HEAD
          "uuid": "4ee32fbb-96b4-404b-b209-48e3f02beab9",
=======
          "uuid": "0091844a-3d71-40bc-abba-86e05111ed4b",
>>>>>>> origin/dev-159-syth-wrap
          "title": "SCDP",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.scdpFixture)({\n    krAssets: createAssets,\n    collaterals: createCollaterals\n});\n[[swapper, KreskoSwapper], [depositor, KreskoDepositor], [depositor2, KreskoDepositor2], [, KreskoLiquidator]] = f.users;",
              "err": {},
<<<<<<< HEAD
              "uuid": "abcf25d8-d49e-4571-808a-7ce22f9f45a6",
              "parentUUID": "4ee32fbb-96b4-404b-b209-48e3f02beab9",
=======
              "uuid": "1db53e0a-d643-45f2-bd2a-8bef73c31eab",
              "parentUUID": "0091844a-3d71-40bc-abba-86e05111ed4b",
>>>>>>> origin/dev-159-syth-wrap
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "f3b1fde6-a196-4cfa-ab25-f4332db43626",
=======
              "uuid": "53004bab-4eec-436d-b49d-a4f2cfbb8d9c",
>>>>>>> origin/dev-159-syth-wrap
              "title": "#Test",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Test\"",
                  "fullTitle": "SCDP #Test \"before each\" hook in \"#Test\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.reset();",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "da1db383-6a2a-4b39-a19e-574332063c60",
                  "parentUUID": "f3b1fde6-a196-4cfa-ab25-f4332db43626",
=======
                  "uuid": "efe9041f-cd14-4264-b424-50ea97797b10",
                  "parentUUID": "53004bab-4eec-436d-b49d-a4f2cfbb8d9c",
>>>>>>> origin/dev-159-syth-wrap
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                  "uuid": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#Configuration",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be initialized correctly",
                      "fullTitle": "SCDP #Test #Configuration should be initialized correctly",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 355,
=======
                      "duration": 1359,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { args } = await (0, _deploy.getSCDPInitializer)(hre);\nconst configuration = await hre.Diamond.getCurrentParametersSCDP();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.liquidationThreshold).to.equal(args.liquidationThreshold);\n(0, _chai.expect)(configuration.minCollateralRatio).to.equal(args.minCollateralRatio);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include.members([\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst depositsEnabled = await Promise.all([\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral.address),\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral8Dec.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(depositsEnabled).to.deep.equal([\n    true,\n    true,\n    false,\n    false,\n    true\n]);\nconst depositAssets = await hre.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KISS.address\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3bf6c82c-e8bc-47eb-8b1e-bdb59f701227",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "98a2afed-957d-4f62-a303-7ea4e37c92ba",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to whitelist new deposit asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to whitelist new deposit asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 209,
=======
                      "duration": 310,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const assetInfoBefore = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoBefore.isSCDPDepositAsset).to.equal(false);\nawait hre.Diamond.updateAsset(f.KrAsset2.address, {\n    ...assetInfoBefore,\n    isSCDPDepositAsset: true,\n    depositLimitSCDP: 1\n});\nconst assetInfoAfter = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoAfter.decimals).to.equal(await f.KISS.contract.decimals());\n(0, _chai.expect)(assetInfoAfter.liquidityIndexSCDP).to.equal(_values.RAY);\n(0, _chai.expect)(assetInfoAfter.depositLimitSCDP).to.equal(1);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address)).to.equal(true);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "380f949a-95e3-4125-8073-ab010572c5e9",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "4fe9e957-e867-4885-9e40-05cb058550c9",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to update deposit limit of asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to update deposit limit of asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 88,
=======
                      "duration": 204,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.updateDepositLimitSCDP(f.Collateral.address, 1);\nconst collateral = await hre.Diamond.getAsset(f.Collateral.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.Collateral.contract.decimals());\n(0, _chai.expect)(collateral.liquidityIndexSCDP).to.equal(_values.RAY);\n(0, _chai.expect)(collateral.depositLimitSCDP).to.equal(1);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "e67ae593-0498-4eb1-9dab-c50a6e874d5c",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "3c054900-626f-4464-adcf-c1d201945be9",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable a deposit asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable a deposit asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 164,
=======
                      "duration": 499,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.setDepositAssetSCDP(f.Collateral.address, false);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.Collateral.address);\nconst depositAssets = await hre.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "75dc2bb1-d924-4d28-b87c-61f32a5d4b82",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "cd102291-2e89-481f-93fb-e4f054111f5f",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable and enable a collateral asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable and enable a collateral asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 547,
=======
                      "duration": 1201,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.setCollateralSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\nawait hre.Diamond.setDepositAssetSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setCollateralSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setDepositAssetSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.include(f.Collateral.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "55ca40ef-9458-4fd2-8efd-e4ddd95f91f6",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "ab024eec-5419-4577-a185-0fae1a72a3c0",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to remove a collateral asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to remove a collateral asset",
                      "timedOut": false,
                      "duration": 403,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.removeCollateralsSCDP([\n    f.Collateral.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(collaterals).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.Collateral.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                      "err": {},
                      "uuid": "e9790000-36ea-4124-aa3f-3425f07867cd",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to add whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to add whitelisted kresko asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 44,
=======
                      "duration": 201,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(scdpKrAssetConfig.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(scdpKrAssetConfig.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(scdpKrAssetConfig.liqIncentiveSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(scdpKrAssetConfig.protocolFeeShareSCDP);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2b660ae9-693e-44cb-82c3-8322b014dc40",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "4fb25e2d-bec0-4f99-8384-7012b00d06f8",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to update a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to update a whitelisted kresko asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 236,
=======
                      "duration": 598,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const update = {\n    ...f.KrAsset.config.assetStruct,\n    swapInFeeSCDP: 0.05e4,\n    swapOutFeeSCDP: 0.05e4,\n    liqIncentiveSCDP: 1.06e4,\n    protocolFeeShareSCDP: 0.4e4\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update);\nconst assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(update.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(update.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(update.protocolFeeShareSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(update.liqIncentiveSCDP);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include(f.KrAsset.address);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "fcbad542-7763-4aa8-888c-e07130c12d24",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "82d65c47-e7bb-4d44-8c99-640886d7dd23",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable a whitelisted kresko asset",
                      "timedOut": false,
                      "duration": 299,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KrAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
                      "uuid": "e3395e84-ca23-450d-a38b-a9359a917238",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to remove a whitelisted kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to remove a whitelisted kresko asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 121,
=======
                      "duration": 418,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.setKrAssetSCDP(f.KrAsset.address, false);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.not.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "513c5948-00a7-47ec-b152-63d70fd336bb",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "b4163399-940a-4fe8-9c75-86038663fe75",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to disable and enable a collateral asset that is also a kresko asset",
                      "fullTitle": "SCDP #Test #Configuration should be able to disable and enable a collateral asset that is also a kresko asset",
                      "timedOut": false,
                      "duration": 1314,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await _hardhat.default.Diamond.addDepositAssetsSCDP([\n    f.KISS.address\n], [\n    defaultCollateralConfig\n]);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KISS.address\n], false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.not.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KISS.address);\nawait _hardhat.default.Diamond.enableAssetsSCDP([\n    f.KISS.address\n], true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getCollateralsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositAssetsSCDP()).to.include(f.KISS.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAssetEnabledSCDP(f.KISS.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositEnabledSCDP(f.KISS.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getKreskoAssetsSCDP()).to.include(f.KISS.address);",
                      "err": {},
                      "uuid": "ba71f054-0e4b-4f44-9952-a6a9f8b7bc25",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to enable and disable swap pairs",
                      "fullTitle": "SCDP #Test #Configuration should be able to enable and disable swap pairs",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 251,
=======
                      "duration": 602,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapPairsEnabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: true\n    }\n];\nawait hre.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: false\n    }\n];\nawait hre.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(false);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "42444977-ee92-4bd1-923a-b4b360ed8975",
                      "parentUUID": "ec20d3ec-c297-4508-89ce-45145a4039ec",
=======
                      "uuid": "bb91c504-91ab-46cb-ac58-220b5af9aee3",
                      "parentUUID": "2c97074b-df98-4535-a8b4-3706cc7d539e",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "3bf6c82c-e8bc-47eb-8b1e-bdb59f701227",
                    "380f949a-95e3-4125-8073-ab010572c5e9",
                    "e67ae593-0498-4eb1-9dab-c50a6e874d5c",
                    "75dc2bb1-d924-4d28-b87c-61f32a5d4b82",
                    "55ca40ef-9458-4fd2-8efd-e4ddd95f91f6",
                    "2b660ae9-693e-44cb-82c3-8322b014dc40",
                    "fcbad542-7763-4aa8-888c-e07130c12d24",
                    "513c5948-00a7-47ec-b152-63d70fd336bb",
                    "42444977-ee92-4bd1-923a-b4b360ed8975"
=======
                    "98a2afed-957d-4f62-a303-7ea4e37c92ba",
                    "4fe9e957-e867-4885-9e40-05cb058550c9",
                    "3c054900-626f-4464-adcf-c1d201945be9",
                    "cd102291-2e89-481f-93fb-e4f054111f5f",
                    "ab024eec-5419-4577-a185-0fae1a72a3c0",
                    "e9790000-36ea-4124-aa3f-3425f07867cd",
                    "4fb25e2d-bec0-4f99-8384-7012b00d06f8",
                    "82d65c47-e7bb-4d44-8c99-640886d7dd23",
                    "e3395e84-ca23-450d-a38b-a9359a917238",
                    "b4163399-940a-4fe8-9c75-86038663fe75",
                    "ba71f054-0e4b-4f44-9952-a6a9f8b7bc25",
                    "bb91c504-91ab-46cb-ac58-220b5af9aee3"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 2015,
=======
                  "duration": 7408,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "3adc911f-a48e-487d-a42d-dbaea729391a",
=======
                  "uuid": "d250f491-2443-463f-b442-1d0d38daf8d4",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#Deposit",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to deposit collateral, calculate correct deposit values",
                      "fullTitle": "SCDP #Test #Deposit should be able to deposit collateral, calculate correct deposit values",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1325,
                      "state": "passed",
                      "speed": "fast",
=======
                      "duration": 4696,
                      "state": "passed",
                      "speed": "medium",
>>>>>>> origin/dev-159-syth-wrap
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectedValueUnadjusted = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (collateralPrice * depositAmount).ebn(8); // cfactor = 1\nawait Promise.all(f.usersArr.map((user)=>{\n    return (0, _redstone.wrapKresko)(hre.Diamond, user).depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n}));\nconst [userInfos, statistics, assetInfo] = await Promise.all([\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((user)=>user.address), [\n        f.Collateral.address\n    ]),\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\nfor (const userInfo of userInfos){\n    const balance = await f.Collateral.balanceOf(userInfo.account);\n    (0, _chai.expect)(balance).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.totalScaledDepositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositValue).to.equal(expectedValueUnadjusted);\n}\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValue).to.equal(0);\n// Adjusted\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(expectedValueAdjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValueAdjusted).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.effectiveDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.cr).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "f8a146de-3554-4d8e-8e17-f68eb04ab26b",
                      "parentUUID": "3adc911f-a48e-487d-a42d-dbaea729391a",
=======
                      "uuid": "4311221e-d0f3-4001-a015-22cac5d1ca8e",
                      "parentUUID": "d250f491-2443-463f-b442-1d0d38daf8d4",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to deposit multiple collaterals, calculate correct deposit values",
                      "fullTitle": "SCDP #Test #Deposit should be able to deposit multiple collaterals, calculate correct deposit values",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1588,
                      "state": "passed",
                      "speed": "fast",
=======
                      "duration": 4945,
                      "state": "passed",
                      "speed": "medium",
>>>>>>> origin/dev-159-syth-wrap
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const expectedValueUnadjusted = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _values.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const User = (0, _general.wrapContractWithSigner)(hre.Diamond, user);\n    return Promise.all([\n        User.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        User.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec);\n    (0, _chai.expect)(userInfo.deposits[1].depositValue).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n}\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfos[1].depositAmount).to.equal(depositAmount8Dec.mul(f.usersArr.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(f.usersArr.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(f.usersArr.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.equal(valueTotalAdjusted8Dec);\n(0, _chai.expect)(globals.collateralValueAdjusted).to.equal(valueAdjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(f.usersArr.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(f.usersArr.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(globals.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "07fd040c-87c8-482f-b96d-e90b9a113de7",
                      "parentUUID": "3adc911f-a48e-487d-a42d-dbaea729391a",
=======
                      "uuid": "0915f310-4b4d-43ea-bc56-1edc00176edd",
                      "parentUUID": "d250f491-2443-463f-b442-1d0d38daf8d4",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "f8a146de-3554-4d8e-8e17-f68eb04ab26b",
                    "07fd040c-87c8-482f-b96d-e90b9a113de7"
=======
                    "4311221e-d0f3-4001-a015-22cac5d1ca8e",
                    "0915f310-4b4d-43ea-bc56-1edc00176edd"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 2913,
=======
                  "duration": 9641,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "03c424e1-6e76-4c61-8a97-8fed71295d50",
=======
                  "uuid": "170251ed-57f0-4b1f-8abb-660725d83ff2",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#Withdraw",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Withdraw\"",
                      "fullTitle": "SCDP #Test #Withdraw \"before each\" hook in \"#Withdraw\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 290,
=======
                      "duration": 690,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    await Promise.all([\n        UserKresko.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "57008d2d-93e4-4349-8d35-4213c692b267",
                      "parentUUID": "03c424e1-6e76-4c61-8a97-8fed71295d50",
=======
                      "uuid": "b70cfebb-c8f7-4d88-9d5b-fda1ba7e131a",
                      "parentUUID": "170251ed-57f0-4b1f-8abb-660725d83ff2",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to withdraw full collateral of multiple assets",
                      "fullTitle": "SCDP #Test #Withdraw should be able to withdraw full collateral of multiple assets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1871,
=======
                      "duration": 9233,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(0);\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(await f.Collateral.balanceOf(userInfo.account)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].scaledDepositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(0);\n}\nfor (const assetInfo of assetInfos){\n    (0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n    (0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n    (0, _chai.expect)(assetInfo.swapDeposits).to.equal(0);\n}\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "112474c6-fbcc-4e57-bf20-b20ce5de9b36",
                      "parentUUID": "03c424e1-6e76-4c61-8a97-8fed71295d50",
=======
                      "uuid": "cc5687df-1f7b-4928-b49d-51de0c39d44f",
                      "parentUUID": "170251ed-57f0-4b1f-8abb-660725d83ff2",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw partial collateral of multiple assets",
                      "fullTitle": "SCDP #Test #Withdraw should be able to withdraw partial collateral of multiple assets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 2249,
=======
                      "duration": 9524,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const partialWithdraw = depositAmount18Dec.div(f.usersArr.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(f.usersArr.length);\nconst expectedValueUnadjusted = (0, _values.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _values.toBig)(collateralPrice * 1 * depositAmount, 8).mul(200).div(300); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(collateralPrice * 0.8 * depositAmount, 8).mul(200).div(300); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, partialWithdraw),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, partialWithdraw8Dec)\n    ]);\n}));\nconst [collateralBalanceAfter, collateral8DecBalanceAfter, globals, assetInfos, userInfos] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    f.Collateral8Dec.balanceOf(hre.Diamond.address),\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ])\n]);\nfor (const userInfo of userInfos){\n    const [balance18Dec, balance8Dec] = await Promise.all([\n        f.Collateral.balanceOf(userInfo.account),\n        f.Collateral8Dec.balanceOf(userInfo.account)\n    ]);\n    (0, _chai.expect)(balance18Dec).to.equal(partialWithdraw);\n    (0, _chai.expect)(balance8Dec).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositAmount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.deposits[1].scaledDepositAmount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.totalDepositValue).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _values.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(collateralBalanceAfter).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(collateral8DecBalanceAfter).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositAmount).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(assetInfos[1].depositAmount).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositValue).to.closeTo(expectedValueUnadjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.closeTo(expectedValueAdjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValue).to.closeTo(expectedValueUnadjusted8Dec.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.closeTo(expectedValueAdjusted8Dec.mul(f.usersArr.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(f.usersArr.length).add(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(globals.collateralValue).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2f2cd238-ce47-41fe-8612-fd83544ed8cf",
                      "parentUUID": "03c424e1-6e76-4c61-8a97-8fed71295d50",
=======
                      "uuid": "58aaa068-045a-4312-8d0e-cb4f7c7952bc",
                      "parentUUID": "170251ed-57f0-4b1f-8abb-660725d83ff2",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "112474c6-fbcc-4e57-bf20-b20ce5de9b36",
                    "2f2cd238-ce47-41fe-8612-fd83544ed8cf"
=======
                    "cc5687df-1f7b-4928-b49d-51de0c39d44f",
                    "58aaa068-045a-4312-8d0e-cb4f7c7952bc"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 4120,
=======
                  "duration": 18757,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "0f9f81c2-2bb8-49c5-8dc1-2a101a2117af",
=======
                  "uuid": "c1db3caf-6c7b-4352-8053-3c8d3c4598cc",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#Fee Distribution",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Fee Distribution\"",
                      "fullTitle": "SCDP #Test #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                      "timedOut": false,
                      "duration": 21,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "incomeCumulator = hre.users.admin;\nIncomeCumulator = (0, _redstone.wrapKresko)(hre.Diamond, incomeCumulator);\nawait f.Collateral.setBalance(incomeCumulator, depositAmount18Dec.mul(f.usersArr.length), hre.Diamond.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "4f574708-1f65-45fa-aace-9eef68b0727e",
                      "parentUUID": "0f9f81c2-2bb8-49c5-8dc1-2a101a2117af",
=======
                      "uuid": "c4d48735-c029-4bc5-b4c0-6e66dc91d472",
                      "parentUUID": "c1db3caf-6c7b-4352-8053-3c8d3c4598cc",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should be able to cumulate fees into deposits",
                      "fullTitle": "SCDP #Test #Fee Distribution should be able to cumulate fees into deposits",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 3566,
=======
                      "duration": 15808,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const fees = depositAmount18Dec.mul(f.usersArr.length);\nconst expectedValueNoFees = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\n// deposit some\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(hre.Diamond, signer).depositSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\n// cumulate some income\nawait IncomeCumulator.cumulateIncomeSCDP(f.Collateral.address, fees);\n// check that the fees are cumulated\nfor (const data of (await hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.deposits[0].scaledDepositValue).to.equal(expectedValueFees);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.totalScaledDepositValue).to.equal(expectedValueFees);\n}\n// withdraw principal\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(hre.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\nfor (const user of (await hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(user.account);\n    (0, _chai.expect)(user.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(user.deposits[0].scaledDepositValue).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalScaledDepositValue).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec);\n}\nconst [assetInfo, stats, balance] = await Promise.all([\n    hre.Diamond.getAssetInfoSCDP(f.Collateral.address),\n    hre.Diamond.getStatisticsSCDP(),\n    f.Collateral.balanceOf(hre.Diamond.address)\n]);\n(0, _chai.expect)(balance).to.equal(fees);\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(0);\n(0, _chai.expect)(stats.collateralValue).to.equal(0);\n// Withdraw fees\nawait Promise.all(f.usersArr.map((signer)=>{\n    return (0, _redstone.wrapKresko)(hre.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec);\n}));\nfor (const data of (await hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(data.account);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(data.deposits[0].scaledDepositValue).to.equal(0);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(data.totalScaledDepositValue).to.equal(0);\n}\n// nothing left in protocol.\nconst [colalteralBalanceKresko, assetInfoFinal] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    hre.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\n(0, _chai.expect)(colalteralBalanceKresko).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValueAdjusted).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "32181ea5-fe49-4429-a582-633029afa162",
                      "parentUUID": "0f9f81c2-2bb8-49c5-8dc1-2a101a2117af",
=======
                      "uuid": "b2c33e34-343b-44e9-90cb-11b6b237718e",
                      "parentUUID": "c1db3caf-6c7b-4352-8053-3c8d3c4598cc",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "32181ea5-fe49-4429-a582-633029afa162"
=======
                    "b2c33e34-343b-44e9-90cb-11b6b237718e"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 3566,
=======
                  "duration": 15808,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                  "uuid": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#Swap",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Swap\"",
                      "fullTitle": "SCDP #Test #Swap \"before each\" hook in \"#Swap\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 42,
=======
                      "duration": 216,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(depositor, (0, _values.toBig)(10_000));\nawait KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, depositAmount18Dec);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3ae6548a-6eef-412e-af1e-8779ea582524",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "5aa12f8c-548a-4167-b39e-40bca69a04d8",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should have collateral in pool",
                      "fullTitle": "SCDP #Test #Swap should have collateral in pool",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 95,
=======
                      "duration": 1119,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const value = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(value.collateralValue).to.equal((0, _values.toBig)(depositAmount, 8));\n(0, _chai.expect)(value.debtValue).to.equal(0);\n(0, _chai.expect)(value.cr).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "32f5ce05-36c4-4b21-affb-7322550fdb5d",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "e5a945a8-7f1d-453f-84db-8cbf39e49daa",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to preview a swap",
                      "fullTitle": "SCDP #Test #Swap should be able to preview a swap",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 124,
=======
                      "duration": 282,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(1);\nconst assetInPrice = (0, _values.toBig)(ONE_USD, 8);\n(0, _chai.expect)(await f.KrAsset2.getPrice()).to.equal(KreskoAsset2Price.ebn(8));\nconst assetOutPrice = (0, _values.toBig)(KreskoAsset2Price, 8);\nconst feePercentage = FEE_KISS_KRASSET;\nconst feePercentageProtocol = 0.5e4;\nconst expectedTotalFee = swapAmount.percentMul(feePercentage);\nconst expectedProtocolFee = expectedTotalFee.percentMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(assetInPrice).wadDiv(assetOutPrice);\nconst [amountOut, feeAmount, feeAmountProtocol] = await hre.Diamond.previewSwapSCDP(f.KISS.address, f.KrAsset2.address, swapAmount);\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7278ee40-7dc2-4954-a38e-969e2e741a00",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "4862368b-2d60-4603-a22e-411cd79d607b",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt == 0 | swap collateral == 0",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt == 0 | swap collateral == 0",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1021,
=======
                      "duration": 4081,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(ONE_USD); // $1\nconst kissInAfterFees = swapAmount.sub(swapAmount.percentMul(FEE_KISS_KRASSET));\nconst expectedAmountOut = kissInAfterFees.wadMul(ONE_USD.ebn(8)).wadDiv(KreskoAsset2Price.ebn(8));\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\nconst [KR2Balance, KISSBalance, swapperInfo, assetInfos, global] = await Promise.all([\n    f.KrAsset2.balanceOf(swapper.address),\n    f.KISS.balanceOf(swapper.address),\n    hre.Diamond.getAccountInfoSCDP(swapper.address, [\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.getAssetInfosSCDP([\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(KR2Balance).to.equal(expectedAmountOut);\n(0, _chai.expect)(KISSBalance).to.equal((0, _values.toBig)(10_000).sub(swapAmount));\n(0, _chai.expect)(swapperInfo.deposits[0].depositValue).to.equal(0);\n(0, _chai.expect)(swapperInfo.deposits[1].depositValue).to.equal(0);\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(expectedAmountOut);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal(kissInAfterFees);\nconst expectedDepositValue = (0, _values.toBig)(depositAmount, 8).add(kissInAfterFees.wadMul(ONE_USD.ebn(8)));\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal(expectedAmountOut.wadMul(KreskoAsset2Price.ebn(8)));\n(0, _chai.expect)(global.collateralValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedAmountOut.wadMul(KreskoAsset2Price.ebn(8)));\n(0, _chai.expect)(global.cr).to.equal(expectedDepositValue.percentDiv(expectedAmountOut.wadMul(KreskoAsset2Price.ebn(8))));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d6e42cbe-d9f9-4ef4-8e4d-9ed0e76a2ac8",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "646869d0-e5a1-4f0c-8f61-265f8af4e2dc",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1282,
=======
                      "duration": 6257,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountAsset = swapAmount.percentMul(1e4 - FEE_KISS_KRASSET).wadMul(ONE_USD.ebn(8)).wadDiv(KreskoAsset2Price.ebn(8));\nconst expectedKissOut = swapAmountAsset.percentMul(1e4 - FEE_KISS_KRASSET).wadMul(KreskoAsset2Price.ebn(8)).wadDiv(ONE_USD.ebn(8));\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: f.KrAsset2,\n    amount: (0, _values.toBig)(0.1)\n});\nconst globalBefore = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(globalBefore.collateralValue).to.equal(initialDepositValue);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountAsset, 0);\nconst [event, assetInfos] = await Promise.all([\n    (0, _events.getNamedEvent)(tx, 'Swap'),\n    hre.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ])\n]);\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(initialDepositValue);\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\nconst global = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(global.collateralValue).to.equal((0, _values.toBig)(1000, 8));\n(0, _chai.expect)(global.debtValue).to.equal(0);\n(0, _chai.expect)(global.cr).to.equal(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "044802d5-7b90-4995-8097-2bddf5f2941e",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "8028e7a8-d5d3-4dc9-aba2-39d4823292cd",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1171,
=======
                      "duration": 5134,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(1); // $1\nconst swapValue = (0, _values.toBig)(1, 8);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst assetInfoKISS = await hre.Diamond.getAssetInfoSCDP(f.KISS.address);\nconst feeValueFirstSwap = swapValue.percentMul(FEE_KISS_KRASSET);\nconst valueInAfterFees = swapValue.sub(feeValueFirstSwap);\n(0, _chai.expect)(assetInfoKISS.depositValue).to.equal(depositValue.add(valueInAfterFees));\nconst expectedSwapDeposits = valueInAfterFees.num(8).ebn(18);\n(0, _chai.expect)(assetInfoKISS.swapDeposits).to.equal(expectedSwapDeposits);\nconst swapAmountSecond = (0, _values.toBig)(0.009); // this is $0.90, so less than $0.96 since we want to ensure debt > assetsIn | swap deposits > assetsOut\nconst swapValueSecond = swapAmountSecond.wadMul(KreskoAsset2Price.ebn(8));\nconst feeValueSecondSwap = swapValueSecond.sub(swapValueSecond.percentMul(FEE_KISS_KRASSET));\nconst expectedKissOut = feeValueSecondSwap.wadDiv(ONE_USD.ebn(8)); // 0.8685\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountSecond, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountSecond);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst [depositValueKR2, depositValueKISS, assetInfos, globals] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueSCDP(swapper.address, f.KrAsset2.address),\n    KreskoSwapper.getAccountDepositValueSCDP(swapper.address, f.KISS.address),\n    hre.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(depositValueKR2).to.equal(0);\n(0, _chai.expect)(depositValueKISS).to.equal(0);\nconst expectedSwapDepositsAfter = expectedSwapDeposits.sub((0, _values.toBig)(0.9));\nconst expectedSwapDepositsValue = expectedSwapDepositsAfter.wadMul(assetInfoKISS.assetPrice);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(expectedSwapDepositsAfter);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal((0, _values.toBig)(depositAmount, 8).add(expectedSwapDepositsValue));\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(expectedSwapDepositsValue);\nconst expectedDebtAfter = expectedSwapDepositsValue.wadDiv(await f.KrAsset2.getPrice());\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(expectedDebtAfter);\nconst expectedCollateralValue = expectedSwapDepositsValue.add(depositAmount.ebn(8));\n(0, _chai.expect)(globals.collateralValue).to.equal(expectedCollateralValue); // swap deposits + collateral deposited\n(0, _chai.expect)(globals.debtValue).to.equal(expectedSwapDepositsValue); //\n(0, _chai.expect)(globals.cr).to.equal(expectedCollateralValue.percentDiv(expectedSwapDepositsValue));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7a7263ff-1bf6-4d31-a9a6-dc7dc99c83df",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "325b4c52-d088-4a98-a9c5-355f74736b8b",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                      "fullTitle": "SCDP #Test #Swap should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 1670,
=======
                      "duration": 7274,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmountKiss = (0, _values.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountKrAsset = (0, _values.toBig)(2); // $200\nconst swapValue = 200;\nconst firstSwapFeeAmount = swapAmountKiss.percentMul(FEE_KISS_KRASSET);\nconst expectedKissOutSecondSwap = swapAmountKrAsset.sub(swapAmountKrAsset.percentMul(FEE_KISS_KRASSET)).wadMul(KreskoAsset2Price.ebn(8)).wadDiv(ONE_USD.ebn(8));\nconst krAssetOutFirstSwap = swapAmountKiss.sub(firstSwapFeeAmount).wadMul(ONE_USD.ebn(8)).wadDiv(KreskoAsset2Price.ebn(8));\nconst krAssetOutFirstSwapValue = krAssetOutFirstSwap.wadMul(KreskoAsset2Price.ebn(8));\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(400)\n});\nconst ICDPMintAmount = (0, _values.toBig)(1.04);\nawait (0, _krassets.mintKrAsset)({\n    user: swapper,\n    asset: f.KrAsset2,\n    amount: ICDPMintAmount\n});\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmountKiss, 0);\nconst expectedSwapDeposits = swapAmountKiss.sub(firstSwapFeeAmount);\nconst stats = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(await KreskoSwapper.getSwapDepositsSCDP(f.KISS.address)).to.equal(expectedSwapDeposits);\n(0, _chai.expect)(stats.collateralValue).to.be.eq(depositAmount.ebn().add(expectedSwapDeposits).wadMul(ONE_USD.ebn(8)));\n// the swap that matters, here user has 0.96 (previous swap) + 1.04 (mint). expecting 192 kiss from swap.\nconst [expectedAmountOut] = await KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmountKrAsset);\n(0, _chai.expect)(expectedAmountOut).to.equal(expectedKissOutSecondSwap);\nconst tx = await KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOutSecondSwap);\nconst assetInfos = await hre.Diamond.getAssetInfosSCDP([\n    f.KISS.address,\n    f.KrAsset2.address\n]);\n// f.KISS deposits sent in swap\nconst acocuntPrincipalDepositsKISS = await KreskoSwapper.getAccountDepositSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0); // half of 2 krAsset\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(acocuntPrincipalDepositsKISS);\n// KrAsset debt is cleared\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\n// KISS debt is issued\nconst expectedKissDebtValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(expectedKissDebtValue.wadDiv(ONE_USD.ebn(8)));\n// krAsset swap deposits\nconst expectedSwapDepositValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal((0, _values.toBig)(2).sub(krAssetOutFirstSwap));\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedSwapDepositValue); // asset price is $100\nconst global = await hre.Diamond.getStatisticsSCDP();\nconst expectedCollateralValue = (0, _values.toBig)(1000, 8).add(expectedSwapDepositValue);\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.percentDiv(expectedKissDebtValue));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "f4499c24-ae34-4f7a-8da6-be6579a9d700",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "6942e213-3c7c-48d7-93ec-ac89eb4f9d4e",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cumulates fees on swap",
                      "fullTitle": "SCDP #Test #Swap cumulates fees on swap",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 942,
=======
                      "duration": 6050,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const depositAmountNew = (0, _values.toBig)(10000 - depositAmount);\nawait f.KISS.setBalance(depositor, depositAmountNew);\nawait KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, depositAmountNew);\nconst swapAmount = (0, _values.toBig)(ONE_USD * 2600); // $1\nconst scaledDepositsStart = await KreskoSwapper.getAccountScaledDepositsSCDP(depositor.address, f.KISS.address);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst scaledDepositsAfterSwap = await KreskoSwapper.getAccountScaledDepositsSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(scaledDepositsAfterSwap).to.gt(scaledDepositsStart);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, f.KrAsset2.balanceOf(swapper.address), 0);\nconst scaledDepositsAfterSecondSwap = await KreskoSwapper.getAccountScaledDepositsSCDP(depositor.address, f.KISS.address);\n(0, _chai.expect)(scaledDepositsAfterSecondSwap).to.gt(scaledDepositsAfterSwap);\nconst feesGained = await KreskoSwapper.getAccountDepositFeesGainedSCDP(depositor.address, f.KISS.address);\nawait KreskoDepositor.withdrawSCDP(depositor.address, f.KISS.address, feesGained);\nconst [scaledDepositsAfter, feesAfter] = await Promise.all([\n    KreskoSwapper.getAccountScaledDepositsSCDP(depositor.address, f.KISS.address),\n    KreskoSwapper.getAccountDepositFeesGainedSCDP(depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(feesGained).to.eq(feesAfter);\n(0, _chai.expect)(scaledDepositsAfter).to.eq((0, _values.toBig)(10000));\nawait KreskoDepositor.withdrawSCDP(depositor.address, f.KISS.address, (0, _values.toBig)(10000));\nconst [depositsAfterFourth, feesAfterFourth] = await Promise.all([\n    KreskoSwapper.getAccountDepositValueSCDP(depositor.address, f.KISS.address),\n    KreskoSwapper.getAccountScaledDepositsSCDP(depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(depositsAfterFourth).to.eq(0);\n(0, _chai.expect)(feesAfterFourth).to.eq(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "41f04b4d-ca40-4646-9bf8-e4c38ad24386",
                      "parentUUID": "f78bc1b9-26b1-49e2-a9e0-63eb3eab39f7",
=======
                      "uuid": "7659f1c7-3efb-49fe-8b99-2e4fb126ea51",
                      "parentUUID": "d7025b15-f862-4815-bd02-28d68049993b",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "32f5ce05-36c4-4b21-affb-7322550fdb5d",
                    "7278ee40-7dc2-4954-a38e-969e2e741a00",
                    "d6e42cbe-d9f9-4ef4-8e4d-9ed0e76a2ac8",
                    "044802d5-7b90-4995-8097-2bddf5f2941e",
                    "7a7263ff-1bf6-4d31-a9a6-dc7dc99c83df",
                    "f4499c24-ae34-4f7a-8da6-be6579a9d700",
                    "41f04b4d-ca40-4646-9bf8-e4c38ad24386"
=======
                    "e5a945a8-7f1d-453f-84db-8cbf39e49daa",
                    "4862368b-2d60-4603-a22e-411cd79d607b",
                    "646869d0-e5a1-4f0c-8f61-265f8af4e2dc",
                    "8028e7a8-d5d3-4dc9-aba2-39d4823292cd",
                    "325b4c52-d088-4a98-a9c5-355f74736b8b",
                    "6942e213-3c7c-48d7-93ec-ac89eb4f9d4e",
                    "7659f1c7-3efb-49fe-8b99-2e4fb126ea51"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 6305,
=======
                  "duration": 30197,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "331a2bff-0fa5-459d-b7be-65b545175005",
=======
                  "uuid": "44d9ecaa-1757-4e64-a764-471332f79258",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#Liquidations",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Liquidations\"",
                      "fullTitle": "SCDP #Test #Liquidations \"before each\" hook in \"#Liquidations\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 111,
=======
                      "duration": 535,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "for (const signer of f.usersArr){\n    await f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000));\n}\nawait f.KISS.setBalance(swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(depositor2, (0, _values.toBig)(10_000));\nawait Promise.all([\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec),\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral8Dec.address, depositAmount8Dec),\n    KreskoDepositor2.depositSCDP(depositor2.address, f.KISS.address, depositAmount18Dec)\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b3180d26-711b-49bc-9a11-042cac663a33",
                      "parentUUID": "331a2bff-0fa5-459d-b7be-65b545175005",
=======
                      "uuid": "5f5409b0-d2f9-4aa3-b2f7-42a987844197",
                      "parentUUID": "44d9ecaa-1757-4e64-a764-471332f79258",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify if the pool is not underwater",
                      "fullTitle": "SCDP #Test #Liquidations should identify if the pool is not underwater",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 521,
=======
                      "duration": 2362,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "e1a33521-2ee6-4534-a1a7-eb11ed8d9dbf",
                      "parentUUID": "331a2bff-0fa5-459d-b7be-65b545175005",
=======
                      "uuid": "a68cdac9-0b93-4917-bbd1-cedce2684e62",
                      "parentUUID": "44d9ecaa-1757-4e64-a764-471332f79258",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert liquidations if the pool is not underwater",
                      "fullTitle": "SCDP #Test #Liquidations should revert liquidations if the pool is not underwater",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 713,
=======
                      "duration": 3096,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600); // $1\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;\nawait f.KrAsset2.setBalance(hre.users.liquidator, (0, _values.toBig)(1_000_000));\nawait (0, _chai.expect)(KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, (0, _values.toBig)(7.7), f.Collateral8Dec.address)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE');",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1a61af77-5c98-4650-8753-5f7fc1229ee5",
                      "parentUUID": "331a2bff-0fa5-459d-b7be-65b545175005",
=======
                      "uuid": "5a95a20f-1489-4ee0-8a4e-ef275ff376dc",
                      "parentUUID": "44d9ecaa-1757-4e64-a764-471332f79258",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should identify if the pool is underwater",
                      "fullTitle": "SCDP #Test #Liquidations should identify if the pool is underwater",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 774,
=======
                      "duration": 3485,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nf.Collateral.setPrice(collateralPrice / 1000);\nf.Collateral8Dec.setPrice(collateralPrice / 1000);\nconst [stats, params, liquidatable] = await Promise.all([\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getCurrentParametersSCDP(),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(stats.cr).to.be.lt(params.liquidationThreshold);\n(0, _chai.expect)(liquidatable).to.be.true;",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "fda4f21d-7424-47ee-809a-30ac51bd5f05",
                      "parentUUID": "331a2bff-0fa5-459d-b7be-65b545175005",
=======
                      "uuid": "01c59c73-6931-4397-97bd-bdcaaac7f641",
                      "parentUUID": "44d9ecaa-1757-4e64-a764-471332f79258",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidating the underwater pool",
                      "fullTitle": "SCDP #Test #Liquidations should allow liquidating the underwater pool",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 3012,
=======
                      "duration": 11370,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nf.KrAsset2.setPrice(newKreskoAssetPrice);\nconst [scdpParams, maxLiquidatable, krAssetPrice, statsBefore] = await Promise.all([\n    hre.Diamond.getCurrentParametersSCDP(),\n    hre.Diamond.getMaxLiqValueSCDP(f.KrAsset2.address, f.Collateral8Dec.address),\n    f.KrAsset2.getPrice(),\n    hre.Diamond.getStatisticsSCDP()\n]);\nconst repayAmount = maxLiquidatable.repayValue.wadDiv(krAssetPrice);\nawait f.KrAsset2.setBalance(hre.users.liquidator, repayAmount.add(1e18.toString()));\n(0, _chai.expect)(statsBefore.cr).to.lt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(statsBefore.cr).to.gt(1e4);\nconst tx = await KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address);\nconst [statsAfter, liquidatableAfter] = await Promise.all([\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(statsAfter.cr).to.gt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(statsAfter.crDebtValueAdjusted).to.eq(2.01e4);\n(0, _chai.expect)(liquidatableAfter).to.eq(false);\nawait (0, _chai.expect)(KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE');\nconst event = await (0, _events.getNamedEvent)(tx, 'SCDPLiquidationOccured');\nconst expectedSeizeAmount = repayAmount.wadMul((0, _values.toBig)(newKreskoAssetPrice, 8)).percentMul(1.05e4).wadDiv((0, _values.toBig)(collateralPrice, 8)).div(10 ** 10);\n(0, _chai.expect)(event.args.liquidator).to.eq(hre.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(f.Collateral8Dec.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(f.KrAsset2.address);\nconst expectedDepositsAfter = depositAmount8Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(expectedDepositsAfter).to.be.lt(depositAmount8Dec);\nconst [principalDeposits, depositsWithFees, params] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountScaledDepositsSCDP(depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getCurrentParametersSCDP()\n]);\n(0, _chai.expect)(principalDeposits).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(depositsWithFees).to.eq(expectedDepositsAfter);\nawait KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec.mul(10));\nconst stats = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(stats.cr).to.gt(params.minCollateralRatio);\nawait (0, _chai.expect)(KreskoDepositor.withdrawSCDP(depositor.address, f.Collateral8Dec.address, expectedDepositsAfter)).to.not.be.reverted;\nconst [principalEnd, depositsWithFeesEnd] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountScaledDepositsSCDP(depositor.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(principalEnd).to.eq(0);\n(0, _chai.expect)(depositsWithFeesEnd).to.eq(0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "f5350d76-2dd7-429b-910b-97847b774ebc",
                      "parentUUID": "331a2bff-0fa5-459d-b7be-65b545175005",
=======
                      "uuid": "aaad6c3c-9163-4e3d-9760-79daf3e2cf97",
                      "parentUUID": "44d9ecaa-1757-4e64-a764-471332f79258",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "e1a33521-2ee6-4534-a1a7-eb11ed8d9dbf",
                    "1a61af77-5c98-4650-8753-5f7fc1229ee5",
                    "fda4f21d-7424-47ee-809a-30ac51bd5f05",
                    "f5350d76-2dd7-429b-910b-97847b774ebc"
=======
                    "a68cdac9-0b93-4917-bbd1-cedce2684e62",
                    "5a95a20f-1489-4ee0-8a4e-ef275ff376dc",
                    "01c59c73-6931-4397-97bd-bdcaaac7f641",
                    "aaad6c3c-9163-4e3d-9760-79daf3e2cf97"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 5020,
=======
                  "duration": 20313,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
<<<<<<< HEAD
                  "uuid": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                  "uuid": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                  "title": "#Error",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/scdp/00-scdp.ts",
                  "file": "/src/test/scdp/00-scdp.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#Error\"",
                      "fullTitle": "SCDP #Test #Error \"before each\" hook in \"#Error\"",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 90,
=======
                      "duration": 318,
>>>>>>> origin/dev-159-syth-wrap
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(depositor, hre.ethers.BigNumber.from(1));\nawait Promise.all([\n    KreskoDepositor.depositSCDP(depositor.address, f.KISS.address, 1),\n    KreskoDepositor.depositSCDP(depositor.address, f.Collateral.address, depositAmount18Dec)\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "e4b6c913-3165-4b90-9426-49bbb83ad538",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "b16d0b09-eee3-4f4d-9aa2-221647514d44",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert depositing unsupported tokens",
                      "fullTitle": "SCDP #Test #Error should revert depositing unsupported tokens",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 139,
=======
                      "duration": 149,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [UnsupportedToken] = await hre.deploy('MockERC20', {\n    args: [\n        'UnsupportedToken',\n        'UnsupportedToken',\n        18,\n        (0, _values.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(hre.Diamond.address, hre.ethers.constants.MaxUint256);\nconst { deployer } = await hre.getNamedAccounts();\nawait (0, _chai.expect)(hre.Diamond.depositSCDP(deployer, UnsupportedToken.address, 1)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'INVALID_DEPOSIT_ASSET').withArgs(UnsupportedToken.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "02ab763b-339c-4ce1-b6fc-12562b680429",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "d8570acb-859e-4f56-a951-d4b4b3112f75",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawing without deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawing without deposits",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 36,
=======
                      "duration": 190,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(KreskoSwapper.withdrawSCDP(depositor.address, f.Collateral.address, 1)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SCDP_WITHDRAWAL_VIOLATION').withArgs(f.Collateral.address, 1, 0, 0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "527f8ed7-f7d4-47dc-ad86-23c269ba148d",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "6e508234-0b41-43f1-bc32-90f09fa4bcf3",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals below MCR",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals below MCR",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 496,
=======
                      "duration": 2540,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(ONE_USD).mul(1000); // $1000\nawait KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0); // generates the debt\nconst deposits = await KreskoSwapper.getAccountDepositSCDP(depositor.address, f.Collateral.address);\nawait (0, _chai.expect)(KreskoDepositor.withdrawSCDP(depositor.address, f.Collateral.address, deposits)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'DEBT_EXCEEDS_COLLATERAL').withArgs(960e8, 4800e8, 5e4);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b41ed0a7-314f-4be5-b5fa-33c1dfd9fd12",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "3f5630eb-3fe8-42e5-afa4-e4df3729bc49",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert withdrawals of swap owned collateral deposits",
                      "fullTitle": "SCDP #Test #Error should revert withdrawals of swap owned collateral deposits",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 453,
=======
                      "duration": 1621,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nconst deposits = await KreskoSwapper.getSwapDepositsSCDP(f.KrAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(KreskoSwapper.withdrawSCDP(swapper.address, f.KrAsset2.address, deposits)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SCDP_WITHDRAWAL_VIOLATION').withArgs(f.KrAsset2.address, swapAmount, 0, 0);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "1bdbdc82-7e6e-4589-aa61-0bb6740301fc",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "16688f17-71ef-49ea-9e64-8631aae8c156",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping with price below minAmountOut",
                      "fullTitle": "SCDP #Test #Error should revert swapping with price below minAmountOut",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 299,
=======
                      "duration": 963,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nconst [amountOut] = await KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SWAP_SLIPPAGE').withArgs(amountOut, amountOut.add(1));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "9b6f5c4d-896f-4630-8a51-018a0feee44f",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "3cc4daaf-9d03-4d12-8b13-c32d1d7861b8",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping unsupported asset",
                      "fullTitle": "SCDP #Test #Error should revert swapping unsupported asset",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 39,
=======
                      "duration": 99,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.Collateral.address, swapAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'INVALID_ASSET').withArgs(f.Collateral.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "c6061be2-724e-4f3d-87e2-abcbc2933f34",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "0d04ad10-5e64-4fbe-8ce3-3f1e92f5992b",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping a disabled route",
                      "fullTitle": "SCDP #Test #Error should revert swapping a disabled route",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 85,
=======
                      "duration": 199,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait hre.Diamond.setSwapPairsSingle({\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    enabled: false\n});\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SWAP_NOT_ENABLED').withArgs(f.KrAsset2.address, f.KISS.address);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3cc9d23e-ce2a-416d-a27d-171a9376a30e",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "a02143e7-66f6-4ba1-91f4-681fe47b33d6",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping if asset out is disabled",
                      "fullTitle": "SCDP #Test #Error should revert swapping if asset out is disabled",
                      "timedOut": false,
                      "duration": 202,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _lib.toBig)(1);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nawait _hardhat.default.Diamond.disableAssetsSCDP([\n    f.KrAsset2.address\n], false);\nawait (0, _chai.expect)(KreskoSwapper.swapSCDP(swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0)).to.be.revertedWith(\"asset-out-disabled\");",
                      "err": {},
                      "uuid": "681e56cc-812a-4515-887a-b8ad1d751383",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert swapping causes CDP to go below MCR",
                      "fullTitle": "SCDP #Test #Error should revert swapping causes CDP to go below MCR",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 406,
=======
                      "duration": 1450,
>>>>>>> origin/dev-159-syth-wrap
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const swapAmount = (0, _values.toBig)(1_500_000);\nawait f.KrAsset2.setBalance(swapper, swapAmount);\nconst tx = KreskoSwapper.swapSCDP(swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nawait (0, _chai.expect)(tx).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'DEBT_EXCEEDS_COLLATERAL').withArgs('15001000000000000', '75000000000000000', 5e4);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2c1775ad-039f-4c5d-9a86-9d12d608a234",
                      "parentUUID": "c39a0d2f-f7ac-4106-8cd2-e0edff500c4c",
=======
                      "uuid": "f676b816-489d-4214-82bc-8e197bf22216",
                      "parentUUID": "e0d93905-374b-4320-8350-e55693e7c382",
>>>>>>> origin/dev-159-syth-wrap
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "02ab763b-339c-4ce1-b6fc-12562b680429",
                    "527f8ed7-f7d4-47dc-ad86-23c269ba148d",
                    "b41ed0a7-314f-4be5-b5fa-33c1dfd9fd12",
                    "1bdbdc82-7e6e-4589-aa61-0bb6740301fc",
                    "9b6f5c4d-896f-4630-8a51-018a0feee44f",
                    "c6061be2-724e-4f3d-87e2-abcbc2933f34",
                    "3cc9d23e-ce2a-416d-a27d-171a9376a30e",
                    "2c1775ad-039f-4c5d-9a86-9d12d608a234"
=======
                    "d8570acb-859e-4f56-a951-d4b4b3112f75",
                    "6e508234-0b41-43f1-bc32-90f09fa4bcf3",
                    "3f5630eb-3fe8-42e5-afa4-e4df3729bc49",
                    "16688f17-71ef-49ea-9e64-8631aae8c156",
                    "3cc4daaf-9d03-4d12-8b13-c32d1d7861b8",
                    "0d04ad10-5e64-4fbe-8ce3-3f1e92f5992b",
                    "a02143e7-66f6-4ba1-91f4-681fe47b33d6",
                    "681e56cc-812a-4515-887a-b8ad1d751383",
                    "f676b816-489d-4214-82bc-8e197bf22216"
>>>>>>> origin/dev-159-syth-wrap
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 1953,
=======
                  "duration": 7413,
>>>>>>> origin/dev-159-syth-wrap
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}