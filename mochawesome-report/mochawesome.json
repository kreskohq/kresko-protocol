{
  "stats": {
    "suites": 12,
    "tests": 46,
    "passes": 46,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-22T20:45:17.687Z",
    "end": "2023-09-22T20:46:14.523Z",
    "duration": 56836,
    "testsRegistered": 46,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8bfd772c-6480-46c7-bb8e-657e1681cfe8",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
      "file": "/src/test/minter/02-deposit-withdraw.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5c0be614-f624-4f74-ae17-1935f89a422b",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 66,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await hre.deployments.fixture(fixtureName);\nawait _hardhatnetworkhelpers.time.increase(3602);\nif (result.Diamond) {\n    hre.Diamond = (0, _redstone.wrapKresko)(await hre.getContractOrFork(\"Kresko\"));\n}\nthis.facets = result.Diamond?.facets?.length ? result.Diamond.facets : [];\nthis.collaterals = hre.collaterals;\nthis.krAssets = hre.krAssets;",
              "err": {},
              "uuid": "4b903337-4454-4e93-9e54-5e5eeffdb476",
              "parentUUID": "5c0be614-f624-4f74-ae17-1935f89a422b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "user = _hardhat.default.users.userThree;\nUserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, user);\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nCollateral2 = this.collaterals.find((c)=>c.deployArgs.name === \"MockCollateral2\");\nKreskoAssetCollateral = this.krAssets.find((k)=>k.deployArgs.name === \"MockKreskoAssetCollateral\");\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait this.collateral.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\ndepositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(10000)\n};",
              "err": {},
              "uuid": "3bec50d9-f724-4dbd-801a-9871238d7b40",
              "parentUUID": "5c0be614-f624-4f74-ae17-1935f89a422b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fdaf66e1-76ba-487c-ac28-bf0f3fd2bc31",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 556,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _lib.toBig)(100);\nconst KreskoAssetCollateral = this.krAssets.find((kr)=>kr.deployArgs.name === \"MockKreskoAssetCollateral\");\nawait KreskoAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nconst depositAmount = collateralAmount.div(2);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAssets(user.address)).to.include(KreskoAssetCollateral.address);\nawait (0, _chai.expect)(UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "631ed92a-92eb-482d-9500-303ef2a82c58",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 116,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _lib.toBig)(100);\nconst KreskoAssetCollateral = this.krAssets.find((kr)=>kr.deployArgs.name === \"MockKreskoAssetCollateral\");\nawait KreskoAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, 9e11.toString())).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "6645b567-2f75-4ee4-b287-b9cd5fa0a30a",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 479,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user).depositCollateral(depositArgs.user.address, this.collateral.address, depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAmount(depositArgs.user.address, this.collateral.address)).to.equal(depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositArgs.amount);\n// Account's collateral balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address))).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(depositArgs.amount));",
                      "err": {},
                      "uuid": "a19cbfe8-9d6d-4d57-b2f0-8f8ee34fdbf9",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 447,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nawait this.collateral.contract.setVariable(\"_balances\", {\n    [user.address]: this.initialBalance\n});\nawait this.collateral.contract.setVariable(\"_allowances\", {\n    [user.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)(UserKresko.depositCollateral(depositArgs.user.address, this.collateral.address, depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(depositArgs.amount);\n// Confirm the depositor's wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(user.address);\n(0, _chai.expect)((0, _lib.fromBig)(depositorBalanceAfter)).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(depositArgs.amount));",
                      "err": {},
                      "uuid": "c7c0975a-0c07-4d42-a0d2-7e3c9e397490",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 445,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user);\n// Deposit first batch of collateral\nawait (0, _chai.expect)(UserKresko.depositCollateral(depositArgs.user.address, this.collateral.address, depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(UserKresko.depositCollateral(depositArgs.user.address, this.collateral.address, depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(depositArgs.amount.add(depositArgs.amount));",
                      "err": {},
                      "uuid": "98d1cd1c-949e-42f7-9b41-a1c6a8b11bab",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 339,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserKresko = (0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user);\n// Load user account with a different type of collateral\nawait Collateral2.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait Collateral2.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(UserKresko.depositCollateral(depositArgs.user.address, this.collateral.address, depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(UserKresko.depositCollateral(depositArgs.user.address, Collateral2.address, depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address,\n    Collateral2.address\n]);",
                      "err": {},
                      "uuid": "307237d0-2820-483e-aa6b-7c2f0babf672",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 136,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user).depositCollateral(depositArgs.user.address, this.collateral.address, depositArgs.amount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralDeposited\");\n(0, _chai.expect)(event.account).to.equal(depositArgs.user.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(depositArgs.amount);",
                      "err": {},
                      "uuid": "eacc5e5f-3af7-45ef-99e0-25b52b7cd639",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 129,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user).depositCollateral(depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", depositArgs.amount)).to.be.revertedWith(_errors.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "fb80a829-0e4b-42e4-9653-ad0d802e5e61",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 130,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user).depositCollateral(depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "bec111e5-0b0a-4ba8-a34a-ec82a515f1db",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 265,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer , devTwo , extOne  } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user).depositCollateral(depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "ad91e1ba-e928-403f-bce2-8e32c46e8474",
                      "parentUUID": "0977945d-bccf-4b33-adf3-c73d6534ac3a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "631ed92a-92eb-482d-9500-303ef2a82c58",
                    "6645b567-2f75-4ee4-b287-b9cd5fa0a30a",
                    "a19cbfe8-9d6d-4d57-b2f0-8f8ee34fdbf9",
                    "c7c0975a-0c07-4d42-a0d2-7e3c9e397490",
                    "98d1cd1c-949e-42f7-9b41-a1c6a8b11bab",
                    "307237d0-2820-483e-aa6b-7c2f0babf672",
                    "eacc5e5f-3af7-45ef-99e0-25b52b7cd639",
                    "fb80a829-0e4b-42e4-9653-ad0d802e5e61",
                    "bec111e5-0b0a-4ba8-a34a-ec82a515f1db",
                    "ad91e1ba-e928-403f-bce2-8e32c46e8474"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3042,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "a2a46aa0-16ca-49bf-88ab-0deb1616ebb6",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 149,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositArgs.user).depositCollateral(depositArgs.user.address, this.collateral.contract.address, depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = depositArgs.amount;",
                      "err": {},
                      "uuid": "873853b4-ae97-4baf-9e27-c5d8f5f74974",
                      "parentUUID": "a2a46aa0-16ca-49bf-88ab-0deb1616ebb6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "77bbd910-85fa-42ec-aab8-e7abc28b975b",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 613,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nawait (0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getAccountCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "d5817ed0-e0c0-4879-8eed-df51dfcc3195",
                          "parentUUID": "77bbd910-85fa-42ec-aab8-e7abc28b975b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 508,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "9394fb91-25a4-40cc-8bb6-964b0ba6a867",
                          "parentUUID": "77bbd910-85fa-42ec-aab8-e7abc28b975b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 666,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(_hardhat.default.users.userOne.address, this.collateral.address);\nawait (0, _chai.expect)(UserKresko.withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(_hardhat.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "ae3ac4e3-2458-4d66-98b8-29df5a4fd12e",
                          "parentUUID": "77bbd910-85fa-42ec-aab8-e7abc28b975b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 305,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await (0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralWithdrawn\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "06499362-22d7-4ac3-945b-26819e956c4f",
                          "parentUUID": "77bbd910-85fa-42ec-aab8-e7abc28b975b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 113,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(UserKresko.withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "8fcf2d5a-174e-4adc-a774-fa631c625ce8",
                          "parentUUID": "77bbd910-85fa-42ec-aab8-e7abc28b975b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "a360aafa-2d4d-40dc-bbd2-32d82d7d156b",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 676,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, _lib.toBig)(100);\nawait (0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(_hardhat.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _hardhat.default.Diamond.getMinCollateralRatio();",
                              "err": {},
                              "uuid": "db7a7475-023f-4319-a2da-a9727f938540",
                              "parentUUID": "a360aafa-2d4d-40dc-bbd2-32d82d7d156b",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 1567,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _lib.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst [accMinCollateralValue, accCollateralValue, withdrawnCollateralValue] = await Promise.all([\n    _hardhat.default.Diamond.getAccountMinCollateralAtRatio(_hardhat.default.users.userOne.address, this.mcr),\n    _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address),\n    _hardhat.default.Diamond.getCollateralAmountToValue(this.collateral.address, withdrawAmount, false).then(([value])=>value)\n]);\n(0, _chai.expect)(accCollateralValue.sub(withdrawnCollateralValue).gte(accMinCollateralValue)).to.be.true;\nawait (0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "897242f3-0887-4999-882c-81c7085ad873",
                              "parentUUID": "a360aafa-2d4d-40dc-bbd2-32d82d7d156b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 536,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = _hardhat.default.users.userFour;\nawait this.collateral.setBalance(user, _ethers.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, _lib.toBig)(1000));\nawait this.collateral.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1000),\n    user\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1010),\n    user\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, _lib.toBig)(1000));",
                              "err": {},
                              "uuid": "8604d448-552e-4098-b81c-d35d358d0c1f",
                              "parentUUID": "a360aafa-2d4d-40dc-bbd2-32d82d7d156b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 134,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(_errors.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "44067a1f-85b7-4bdb-9ab0-39196a679018",
                              "parentUUID": "a360aafa-2d4d-40dc-bbd2-32d82d7d156b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 1031,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "d34748ec-1376-4edf-8699-ac7112b90e63",
                              "parentUUID": "a360aafa-2d4d-40dc-bbd2-32d82d7d156b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 149,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(_errors.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "d3500fb9-513a-4f11-b4fe-c76215204af8",
                              "parentUUID": "a360aafa-2d4d-40dc-bbd2-32d82d7d156b",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "897242f3-0887-4999-882c-81c7085ad873",
                            "8604d448-552e-4098-b81c-d35d358d0c1f",
                            "44067a1f-85b7-4bdb-9ab0-39196a679018",
                            "d34748ec-1376-4edf-8699-ac7112b90e63",
                            "d3500fb9-513a-4f11-b4fe-c76215204af8"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 3417,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 60000
                        }
                      ],
                      "passes": [
                        "d5817ed0-e0c0-4879-8eed-df51dfcc3195",
                        "9394fb91-25a4-40cc-8bb6-964b0ba6a867",
                        "ae3ac4e3-2458-4d66-98b8-29df5a4fd12e",
                        "06499362-22d7-4ac3-945b-26819e956c4f",
                        "8fcf2d5a-174e-4adc-a774-fa631c625ce8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2205,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "3e844b6e-ea8f-4cd3-8ffd-ff51dd3e104f",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 590,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await this.collateral.setBalance(user, this.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// Allowance for Kresko\nawait KreskoAssetCollateral.contract.setVariable(\"_allowances\", {\n    [user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait UserKresko.depositCollateral(user.address, this.collateral.address, depositArgs.amount);\n// Mint some krAssets\nawait UserKresko.mintKreskoAsset(user.address, KreskoAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await UserKresko.getAccountDebtAmount(user.address, KreskoAssetCollateral.address);",
                      "err": {},
                      "uuid": "35bd2575-a52d-46d3-bc02-04b38bd9258d",
                      "parentUUID": "3e844b6e-ea8f-4cd3-8ffd-ff51dd3e104f",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "af41569a-f976-4b33-842a-105138eb76a1",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 325,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "ef7d4520-aa13-4252-a39f-d3b0968fc922",
                          "parentUUID": "af41569a-f976-4b33-842a-105138eb76a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 315,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "538ee909-2a44-4882-8df9-930b74d3a6b7",
                          "parentUUID": "af41569a-f976-4b33-842a-105138eb76a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 311,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "43f5aed9-b629-440a-88b1-b6f8a1417e6e",
                          "parentUUID": "af41569a-f976-4b33-842a-105138eb76a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 328,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "d6e6e016-1b48-44dc-9398-1056c6e8e4c4",
                          "parentUUID": "af41569a-f976-4b33-842a-105138eb76a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 723,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "fab896ef-aa13-4efe-9b8d-0966ca9328b4",
                          "parentUUID": "af41569a-f976-4b33-842a-105138eb76a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 433,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "de247c4e-c2d7-48bc-abb8-6ca1995f497a",
                          "parentUUID": "af41569a-f976-4b33-842a-105138eb76a1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ef7d4520-aa13-4252-a39f-d3b0968fc922",
                        "538ee909-2a44-4882-8df9-930b74d3a6b7",
                        "43f5aed9-b629-440a-88b1-b6f8a1417e6e",
                        "d6e6e016-1b48-44dc-9398-1056c6e8e4c4",
                        "fab896ef-aa13-4efe-9b8d-0966ca9328b4",
                        "de247c4e-c2d7-48bc-abb8-6ca1995f497a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2435,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "cfcb3df1-81cb-4187-86a8-e2c28cd0e4bb",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 886,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\nKreskoAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "5beb0fcd-d6ba-4c89-b4c9-5ce24d202bbc",
                          "parentUUID": "cfcb3df1-81cb-4187-86a8-e2c28cd0e4bb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 652,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) * denominator;\nKreskoAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "4afc43fc-f211-4c5f-ac2a-78b8c2be44f4",
                          "parentUUID": "cfcb3df1-81cb-4187-86a8-e2c28cd0e4bb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 711,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "2387de1c-8021-4d13-af08-5f83073bf9f7",
                          "parentUUID": "cfcb3df1-81cb-4187-86a8-e2c28cd0e4bb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 472,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "86690448-c446-47c1-80d8-c062c73ae3d0",
                          "parentUUID": "cfcb3df1-81cb-4187-86a8-e2c28cd0e4bb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 1185,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, fullDepositAmount, false);\n// Deposit more\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "bad4188b-b12e-4dba-b5fc-0ef1ff3092d5",
                          "parentUUID": "cfcb3df1-81cb-4187-86a8-e2c28cd0e4bb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1002,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralAmountToValue(KreskoAssetCollateral.address, fullDepositAmount, false);\n// Deposit more\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "4ce5efe6-a946-4294-9dea-9cdc82189e03",
                          "parentUUID": "cfcb3df1-81cb-4187-86a8-e2c28cd0e4bb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5beb0fcd-d6ba-4c89-b4c9-5ce24d202bbc",
                        "4afc43fc-f211-4c5f-ac2a-78b8c2be44f4",
                        "2387de1c-8021-4d13-af08-5f83073bf9f7",
                        "86690448-c446-47c1-80d8-c062c73ae3d0",
                        "bad4188b-b12e-4dba-b5fc-0ef1ff3092d5",
                        "4ce5efe6-a946-4294-9dea-9cdc82189e03"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 4908,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "4e31778a-e0dd-4cc7-869f-da92720e80a2",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 576,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await this.collateral.setBalance(user, this.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// await hre.Diamond.addCollateralAsset(\n//     this.krAsset!.contract.address,\n//     ...(await getCollateralConfig(\n//         this.krAsset.contract,\n//         this.krAsset!.anchor!.address,\n//         toBig(1),\n//         toBig(1.05),\n//         await hre.Diamond.getFeedForAddress(this.krAsset.address, OracleType.Chainlink),\n//     )),\n// );\nawait KreskoAssetCollateral.contract.setVariable(\"_allowances\", {\n    [user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait UserKresko.depositCollateral(user.address, this.collateral.address, depositArgs.amount);\n// Mint some krAssets\nawait UserKresko.mintKreskoAsset(user.address, KreskoAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await UserKresko.getAccountDebtAmount(user.address, KreskoAssetCollateral.address);",
                      "err": {},
                      "uuid": "32616df2-74e4-4b12-912e-7b3cd4803ecd",
                      "parentUUID": "4e31778a-e0dd-4cc7-869f-da92720e80a2",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 1049,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\nconst finalBalance = await KreskoAssetCollateral.contract.balanceOf(user.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "f88b377d-4375-4267-9b0c-515af55e112e",
                          "parentUUID": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 881,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\nconst finalBalance = await KreskoAssetCollateral.contract.balanceOf(user.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "6906463d-2431-44ea-ac0b-10b39520bf77",
                          "parentUUID": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 921,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\nconst finalBalance = await KreskoAssetCollateral.contract.balanceOf(user.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "b05c4e1a-51d5-456d-8c3c-68b4a30bb641",
                          "parentUUID": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 1095,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\nconst finalBalance = await KreskoAssetCollateral.contract.balanceOf(user.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "f4aabbc6-aa6f-4997-81f6-8de8826c0bcc",
                          "parentUUID": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 1265,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\nconst finalBalance = await KreskoAssetCollateral.contract.balanceOf(user.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "149f8a97-de3e-4f6c-b1a2-9af6f719b79b",
                          "parentUUID": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1141,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, KreskoAssetCollateral.address);\nconst finalBalance = await KreskoAssetCollateral.contract.balanceOf(user.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "7ed2d17c-fa1b-4f42-aeb1-660adf9502e6",
                          "parentUUID": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 755,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(user.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, this.collateral.address);\nawait UserKresko.withdrawCollateral(user.address, this.collateral.address, withdrawAmount, cIndex);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(user.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "1c4f085c-2a14-4478-846b-e41054c70f32",
                          "parentUUID": "c41db107-19ee-4281-8d2e-cc0e079ce835",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f88b377d-4375-4267-9b0c-515af55e112e",
                        "6906463d-2431-44ea-ac0b-10b39520bf77",
                        "b05c4e1a-51d5-456d-8c3c-68b4a30bb641",
                        "f4aabbc6-aa6f-4997-81f6-8de8826c0bcc",
                        "149f8a97-de3e-4f6c-b1a2-9af6f719b79b",
                        "7ed2d17c-fa1b-4f42-aeb1-660adf9502e6",
                        "1c4f085c-2a14-4478-846b-e41054c70f32"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 7107,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    },
                    {
                      "uuid": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 873,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "023bb3e6-7e8b-4151-b59d-fa9da8444e45",
                          "parentUUID": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 1086,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Withdraw the full rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "9edc5066-1172-49bf-af80-64d129f9b5cd",
                          "parentUUID": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 1079,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Withdraw the full rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "d75598f7-90a7-40d0-b3b4-5607a06918aa",
                          "parentUUID": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 846,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Withdraw the full rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "75ac9b1e-0116-4f22-9357-3030ea1e5bba",
                          "parentUUID": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 1338,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Withdraw the full rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "a043eb91-f212-498c-9388-bf42d68a764c",
                          "parentUUID": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 1560,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, KreskoAssetCollateral.address);\n// Withdraw the full rebased amount\nawait UserKresko.withdrawCollateral(user.address, KreskoAssetCollateral.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, KreskoAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await KreskoAssetCollateral.contract.balanceOf(user.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "0ace9575-58d2-4b89-8703-ebab040f967c",
                          "parentUUID": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 1947,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await KreskoAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait UserKresko.depositCollateral(user.address, KreskoAssetCollateral.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, this.collateral.address);\nconst [withdrawValue] = await _hardhat.default.Diamond.getCollateralAmountToValue(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nKreskoAssetCollateral.setPrice(newPrice);\nawait KreskoAssetCollateral.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getAccountDepositIndex(user.address, this.collateral.address);\nawait UserKresko.withdrawCollateral(user.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValueOf(user.address, this.collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.bignumber.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "fc3042b2-ef09-4f04-a53f-9f00e623ffb5",
                          "parentUUID": "d52dbd44-ce9f-4e12-a1f0-8a8db7ddc163",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "023bb3e6-7e8b-4151-b59d-fa9da8444e45",
                        "9edc5066-1172-49bf-af80-64d129f9b5cd",
                        "d75598f7-90a7-40d0-b3b4-5607a06918aa",
                        "75ac9b1e-0116-4f22-9357-3030ea1e5bba",
                        "a043eb91-f212-498c-9388-bf42d68a764c",
                        "0ace9575-58d2-4b89-8703-ebab040f967c",
                        "fc3042b2-ef09-4f04-a53f-9f00e623ffb5"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 8729,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 60000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}