{
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-17T12:34:27.415Z",
    "end": "2023-07-17T12:34:27.926Z",
    "duration": 511,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b1f0fe0a-f144-4845-9d53-afd345d031cd",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
      "file": "/src/test/krasset/00-init.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b028ef98-d660-45a1-b462-35580c7e3727",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "1fb1ecbc-5d04-42bd-b2d5-6262b292d8ff",
              "parentUUID": "b028ef98-d660-45a1-b462-35580c7e3727",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e49168b6-78cf-4952-94f7-9377ad05a6f9",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "0d7daa46-5d93-438d-be94-d62d48cd5bc8",
                  "parentUUID": "e49168b6-78cf-4952-94f7-9377ad05a6f9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "ff15f004-e6ed-4814-be08-7b640d7b135d",
                  "parentUUID": "e49168b6-78cf-4952-94f7-9377ad05a6f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetImpl.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "0b8fb57b-15af-43e1-99c4-628a03279af9",
                  "parentUUID": "e49168b6-78cf-4952-94f7-9377ad05a6f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await KreskoAsset.kresko()).to.equal(_hardhat.default.Diamond.address);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(\"64000000000000000000\");\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "2e302b4c-c93a-404a-9b56-c4c61d07e60a",
                  "parentUUID": "e49168b6-78cf-4952-94f7-9377ad05a6f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "6450a4d6-535e-4939-9d34-952924ac9032",
                  "parentUUID": "e49168b6-78cf-4952-94f7-9377ad05a6f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff15f004-e6ed-4814-be08-7b640d7b135d",
                "0b8fb57b-15af-43e1-99c4-628a03279af9",
                "2e302b4c-c93a-404a-9b56-c4c61d07e60a",
                "6450a4d6-535e-4939-9d34-952924ac9032"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "cc2abb27-19e3-4121-89fa-78da8bb078e3",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = _hardhat.default.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "bbf801b1-6657-40d6-85d8-e32e69e50128",
                  "parentUUID": "cc2abb27-19e3-4121-89fa-78da8bb078e3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "6428ce8b-3fcc-4860-b3e5-51e7bbd51f8e",
                  "parentUUID": "cc2abb27-19e3-4121-89fa-78da8bb078e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(_shared.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "f47beccd-87b0-485c-ac16-129770bc036c",
                  "parentUUID": "cc2abb27-19e3-4121-89fa-78da8bb078e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "38441ef2-5cc5-4764-a566-2c81e122fe29",
                  "parentUUID": "cc2abb27-19e3-4121-89fa-78da8bb078e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(_shared.anchorTokenPrefix + symbol);\n(0, _chai.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"64000000000000000000\");\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "9e258e1d-f402-4247-904a-22a33fc3f96c",
                  "parentUUID": "cc2abb27-19e3-4121-89fa-78da8bb078e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6428ce8b-3fcc-4860-b3e5-51e7bbd51f8e",
                "f47beccd-87b0-485c-ac16-129770bc036c",
                "38441ef2-5cc5-4764-a566-2c81e122fe29",
                "9e258e1d-f402-4247-904a-22a33fc3f96c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}