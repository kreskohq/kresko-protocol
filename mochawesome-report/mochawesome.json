{
  "stats": {
    "suites": 5,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-18T01:19:55.748Z",
    "end": "2023-05-18T01:20:58.599Z",
    "duration": 62851,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "47d10788-d8a2-4903-9be1-bbb9c7e227b5",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
      "file": "/src/test/collateral-pool/00-collateral-pool.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "523c3315-5bf9-4969-a449-559ba2804dfb",
          "title": "Collateral Pool",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
          "file": "/src/test/collateral-pool/00-collateral-pool.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Collateral Pool\"",
              "fullTitle": "Collateral Pool \"before each\" hook in \"Collateral Pool\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4cccb369-eba9-4c71-9103-8b31ad1f3cec",
              "parentUUID": "523c3315-5bf9-4969-a449-559ba2804dfb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Collateral Pool\"",
              "fullTitle": "Collateral Pool \"before each\" hook in \"Collateral Pool\"",
              "timedOut": false,
              "duration": 4032,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = [\n    _hardhat.default.users.testUserFive,\n    _hardhat.default.users.testUserSix\n];\noracleDecimals = await _hardhat.default.Diamond.extOracleDecimals();\n[KreskoAsset, CollateralAsset, CollateralAsset8Dec, CollateralAsset21Dec] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KreskoAssetPrice10USD\",\n        price: collateralPrice,\n        symbol: \"KreskoAssetPrice10USD\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 2,\n        supplyLimit: 10\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral18Dec\",\n        price: kreskoAssetPrice,\n        factor: 1,\n        decimals: 18\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral8Dec\",\n        price: kreskoAssetPrice,\n        factor: 0.8,\n        decimals: 8\n    }),\n    await (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral21Dec\",\n        price: kreskoAssetPrice,\n        factor: 0.5,\n        decimals: 21\n    })\n]);\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, depositAmount18Dec),\n        await CollateralAsset8Dec.setBalance(user, depositAmount8Dec),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}",
              "err": {},
              "uuid": "40656853-7eab-4f5e-8930-df28a010b16c",
              "parentUUID": "523c3315-5bf9-4969-a449-559ba2804dfb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
              "title": "#Configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be initialized with correct params",
                  "fullTitle": "Collateral Pool #Configuration should be initialized with correct params",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { args  } = await (0, _shared.getCollateralPoolInitializer)(_hardhat.default);\nconst configuration = await _hardhat.default.Diamond.getCollateralPoolConfig();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.lt).to.equal(args.lt);\n(0, _chai.expect)(configuration.mcr).to.equal(args.mcr);",
                  "err": {},
                  "uuid": "a4813036-681e-4ed2-a38a-da80265f9ba7",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted collateral",
                  "fullTitle": "Collateral Pool #Configuration should be able to add whitelisted collateral",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal(configuration.liquidationIncentive);\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "10a5b087-b12d-42a8-8639-3d1f3a7f9336",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted collateral",
                  "fullTitle": "Collateral Pool #Configuration should be able to update a whitelisted collateral",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.updatePoolCollateral(CollateralAsset.address, (0, _lib.toBig)(1.05));\nconst collateral = await _hardhat.default.Diamond.getPoolCollateral(CollateralAsset.address);\n(0, _chai.expect)(collateral.decimals).to.equal(configuration.decimals);\n(0, _chai.expect)(collateral.liquidationIncentive).to.equal((0, _lib.toBig)(1.05));\n(0, _chai.expect)(collateral.liquidityIndex).to.equal(_lib.RAY);",
                  "err": {},
                  "uuid": "94e4b56b-15ad-4803-934a-806b793b14c2",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted collateral asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to disable a whitelisted collateral asset",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([\n    CollateralAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "1ce137f9-6902-40ec-83c0-c0aae0b9d89c",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a collateral asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to remove a collateral asset",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    decimals: 18,\n    liquidationIncentive: (0, _lib.toBig)(1.1),\n    liquidityIndex: _lib.RAY\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolCollaterals([\n    CollateralAsset.address\n]);\nconst collaterals = await _hardhat.default.Diamond.getPoolCollateralAssets();\n(0, _chai.expect)(collaterals).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "f3afa4a0-212a-47dd-8365-d0cb1718b871",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to add whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(configuration.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(configuration.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(configuration.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(configuration.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "9b330adf-7af5-444d-a033-b421cb5f85b9",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to update a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nconst update = {\n    openFee: (0, _lib.toBig)(0.05),\n    closeFee: (0, _lib.toBig)(0.05),\n    protocolFee: (0, _lib.toBig)(0.4),\n    supplyLimit: (0, _lib.toBig)(50000)\n};\nawait _hardhat.default.Diamond.updatePoolKrAsset(KreskoAsset.address, update);\nconst kreskoAsset = await _hardhat.default.Diamond.getPoolKrAsset(KreskoAsset.address);\n(0, _chai.expect)(kreskoAsset.openFee).to.equal(update.openFee);\n(0, _chai.expect)(kreskoAsset.closeFee).to.equal(update.closeFee);\n(0, _chai.expect)(kreskoAsset.protocolFee).to.equal(update.protocolFee);\n(0, _chai.expect)(kreskoAsset.supplyLimit).to.equal(update.supplyLimit);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(true);",
                  "err": {},
                  "uuid": "dd3fcf29-5233-4efe-8cf5-8c7e97be5d81",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to disable a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.disablePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([\n    KreskoAsset.address\n]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "6472a2f8-0dc6-46d7-ab7b-f6dba0c8abe9",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a whitelisted kresko asset",
                  "fullTitle": "Collateral Pool #Configuration should be able to remove a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    openFee: (0, _lib.toBig)(0.01),\n    closeFee: (0, _lib.toBig)(0.01),\n    protocolFee: (0, _lib.toBig)(0.25),\n    supplyLimit: (0, _lib.toBig)(1000000)\n};\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KreskoAsset.address\n], [\n    configuration\n]);\nawait _hardhat.default.Diamond.removePoolKrAssets([\n    KreskoAsset.address\n]);\nconst krAssets = await _hardhat.default.Diamond.getPoolKrAssets();\n(0, _chai.expect)(krAssets).to.deep.equal([]);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolAssetIsEnabled(KreskoAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "568c1333-dee2-4cb3-baf7-a862dfab901e",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to enable and disable swap pairs",
                  "fullTitle": "Collateral Pool #Configuration should be able to enable and disable swap pairs",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapPairsEnabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: true\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: CollateralAsset.address,\n        assetOut: KreskoAsset.address,\n        enabled: false\n    }\n];\nawait _hardhat.default.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(CollateralAsset.address, KreskoAsset.address)).to.equal(false);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolIsSwapEnabled(KreskoAsset.address, CollateralAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "96b6e2cc-87e0-4218-8224-644a5ee3f1da",
                  "parentUUID": "e5dcfd54-34f5-4ca1-ab57-dff52c8410c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4813036-681e-4ed2-a38a-da80265f9ba7",
                "10a5b087-b12d-42a8-8639-3d1f3a7f9336",
                "94e4b56b-15ad-4803-934a-806b793b14c2",
                "1ce137f9-6902-40ec-83c0-c0aae0b9d89c",
                "f3afa4a0-212a-47dd-8365-d0cb1718b871",
                "9b330adf-7af5-444d-a033-b421cb5f85b9",
                "dd3fcf29-5233-4efe-8cf5-8c7e97be5d81",
                "6472a2f8-0dc6-46d7-ab7b-f6dba0c8abe9",
                "568c1333-dee2-4cb3-baf7-a862dfab901e",
                "96b6e2cc-87e0-4218-8224-644a5ee3f1da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 278,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "9a662b6d-a798-4edf-86f9-d64bc053fe0d",
              "title": "#Deposit",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Deposit\"",
                  "fullTitle": "Collateral Pool #Deposit \"before each\" hook in \"#Deposit\"",
                  "timedOut": false,
                  "duration": 47,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "a53e3667-b6e3-458c-a5ef-c45ed887e4fb",
                  "parentUUID": "9a662b6d-a798-4edf-86f9-d64bc053fe0d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "Collateral Pool #Deposit should be able to deposit collateral, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 278,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = _hardhat.default.Diamond.connect(user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    // Unadjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    // Adjusted\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n// Unadjusted\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);\n// Adjusted\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "9405c177-8510-4569-922f-eeaa9380cf27",
                  "parentUUID": "9a662b6d-a798-4edf-86f9-d64bc053fe0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "fullTitle": "Collateral Pool #Deposit should be able to deposit multiple collaterals, calculate correct deposit values, not touching individual deposits",
                  "timedOut": false,
                  "duration": 394,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nconst WITH_FACTORS = false;\nconst WITHOUT_FACTORS = true;\nfor (const user of users){\n    const Kresko = _hardhat.default.Diamond.connect(user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(depositAmount8Dec);\n    // WITHOUT_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITHOUT_FACTORS)).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n    // WITH_FACTORS\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, WITH_FACTORS)).to.equal(expectedValueAdjusted);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(expectedValueAdjusted8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, WITH_FACTORS)).to.equal(expectedValueAdjusted.add(expectedValueAdjusted8Dec));\n    // regular collateral deposits should be 0\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.collateralDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(depositAmount8Dec.mul(users.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(users.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(users.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITH_FACTORS)).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITH_FACTORS)).to.equal(valueTotalAdjusted8Dec);\nconst globalAdjusted = await _hardhat.default.Diamond.getPoolStats(WITH_FACTORS);\n(0, _chai.expect)(globalAdjusted.collateralValue).to.equal(valueAdjusted);\n(0, _chai.expect)(globalAdjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalAdjusted.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(users.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(users.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, WITHOUT_FACTORS)).to.equal(valueTotalUnadjusted8Dec);\nconst globalUnadjusted = await _hardhat.default.Diamond.getPoolStats(WITHOUT_FACTORS);\n(0, _chai.expect)(globalUnadjusted.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globalUnadjusted.debtValue).to.equal(0);\n(0, _chai.expect)(globalUnadjusted.cr).to.equal(0);",
                  "err": {},
                  "uuid": "c4333593-a24e-45d4-a9dc-abfbff66349e",
                  "parentUUID": "9a662b6d-a798-4edf-86f9-d64bc053fe0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9405c177-8510-4569-922f-eeaa9380cf27",
                "c4333593-a24e-45d4-a9dc-abfbff66349e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 672,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "f1fddc5e-948b-492a-ba6c-819ec2b72c23",
              "title": "#Withdraw",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Withdraw\"",
                  "fullTitle": "Collateral Pool #Withdraw \"before each\" hook in \"#Withdraw\"",
                  "timedOut": false,
                  "duration": 53,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "0ff079c0-3e25-4643-aa36-1bb88b6f877d",
                  "parentUUID": "f1fddc5e-948b-492a-ba6c-819ec2b72c23",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to withdraw full collateral of multiple assets",
                  "fullTitle": "Collateral Pool #Withdraw should be able to withdraw full collateral of multiple assets",
                  "timedOut": false,
                  "duration": 520,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (const user of users){\n    const Kresko = _hardhat.default.Diamond.connect(user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(Kresko.address)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.equal(0);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.equal(0);\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "8ae1866b-a405-4198-9303-da8c4c3c8d82",
                  "parentUUID": "f1fddc5e-948b-492a-ba6c-819ec2b72c23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw partial collateral of multiple assets",
                  "fullTitle": "Collateral Pool #Withdraw should be able to withdraw partial collateral of multiple assets",
                  "timedOut": false,
                  "duration": 507,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const partialWithdraw = depositAmount18Dec.div(2);\nconst partialWithdraw8Dec = depositAmount8Dec.div(2);\nconst expectedValueUnadjusted = (0, _lib.toBig)(collateralPrice * depositAmount, 8).div(2);\nconst expectedValueAdjusted = (0, _lib.toBig)(collateralPrice / 1 * depositAmount, 8).div(2); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _lib.toBig)(collateralPrice * depositAmount, 8).div(2);\nconst expectedValueAdjusted8Dec = (0, _lib.toBig)(collateralPrice * 0.8 * depositAmount, 8).div(2); // cfactor = 0.8\nfor (const user of users){\n    const Kresko = _hardhat.default.Diamond.connect(user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n    await Kresko.poolDeposit(user.address, CollateralAsset8Dec.address, depositAmount8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(depositAmount18Dec);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, partialWithdraw);\n    await Kresko.poolWithdraw(user.address, CollateralAsset8Dec.address, partialWithdraw8Dec);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(partialWithdraw);\n    (0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(user.address)).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset.address)).to.equal(partialWithdraw);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset.address)).to.equal(partialWithdraw);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsWithFees(user.address, CollateralAsset8Dec.address)).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountPrincipalDeposits(user.address, CollateralAsset8Dec.address)).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, false)).to.equal(expectedValueAdjusted.add(expectedValueAdjusted8Dec));\n    (0, _chai.expect)(await _hardhat.default.Diamond.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n}\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount18Dec);\n(0, _chai.expect)(await CollateralAsset8Dec.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(depositAmount8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(depositAmount18Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset8Dec.address)).to.equal(depositAmount8Dec);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(expectedValueUnadjusted.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(expectedValueAdjusted.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, true)).to.equal(expectedValueUnadjusted8Dec.mul(users.length));\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset8Dec.address, false)).to.equal(expectedValueAdjusted8Dec.mul(users.length));\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(users.length).add(expectedValueUnadjusted.mul(users.length));\nconst globals = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(globals.collateralValue).to.equal(totalValueRemaining);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "f714a05d-c66f-4b10-8738-d376bdbe0f2e",
                  "parentUUID": "f1fddc5e-948b-492a-ba6c-819ec2b72c23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ae1866b-a405-4198-9303-da8c4c3c8d82",
                "f714a05d-c66f-4b10-8738-d376bdbe0f2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1027,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "977a4856-4f48-4342-b008-217452631e3f",
              "title": "#Fee Distribution",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/00-collateral-pool.ts",
              "file": "/src/test/collateral-pool/00-collateral-pool.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Fee Distribution\"",
                  "fullTitle": "Collateral Pool #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                  "timedOut": false,
                  "duration": 82,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "incomeCumulator = _hardhat.default.users.admin;\nawait CollateralAsset.setBalance(incomeCumulator, depositAmount18Dec.mul(users.length));\nawait CollateralAsset.contract.connect(incomeCumulator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait Promise.all([\n    await _hardhat.default.Diamond.enablePoolCollaterals([\n        CollateralAsset.address,\n        CollateralAsset8Dec.address\n    ], [\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.1),\n            liquidityIndex: _lib.RAY\n        },\n        {\n            decimals: 18,\n            liquidationIncentive: (0, _lib.toBig)(1.05),\n            liquidityIndex: _lib.RAY\n        }\n    ]),\n    await _hardhat.default.Diamond.enablePoolKrAssets([\n        KreskoAsset.address\n    ], [\n        {\n            openFee: (0, _lib.toBig)(0.01),\n            closeFee: (0, _lib.toBig)(0.01),\n            protocolFee: (0, _lib.toBig)(0.25),\n            supplyLimit: (0, _lib.toBig)(1000000)\n        }\n    ])\n]);",
                  "err": {},
                  "uuid": "8d552054-49aa-487c-84e3-cbee6c16f392",
                  "parentUUID": "977a4856-4f48-4342-b008-217452631e3f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to cumulate fees into deposits",
                  "fullTitle": "Collateral Pool #Fee Distribution should be able to cumulate fees into deposits",
                  "timedOut": false,
                  "duration": 843,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fees = depositAmount18Dec.mul(users.length);\nconst expectedValueNoFees = (0, _lib.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\nfor (const user of users){\n    const Kresko = _hardhat.default.Diamond.connect(user);\n    await Kresko.poolDeposit(user.address, CollateralAsset.address, depositAmount18Dec);\n}\nawait _hardhat.default.Diamond.connect(incomeCumulator).cumulateIncome(CollateralAsset.address, fees);\nfor (const user of users){\n    const Kresko = _hardhat.default.Diamond.connect(user);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees); // fees for single asset\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(expectedValueNoFees); // fees\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees); // fees\n    // withdraw principal\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec);\n}\n// expect protocol to have no collateral here, only fees left.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(fees);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);\nconst global = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(global.collateralValue).to.equal(0);\n// withdraw fees\nfor (const user of users){\n    const Kresko = _hardhat.default.Diamond.connect(user);\n    await Kresko.poolWithdraw(user.address, CollateralAsset.address, depositAmount18Dec);\n    // fees in user wallet\n    (0, _chai.expect)(await CollateralAsset.contract.balanceOf(user.address)).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    // nothing left in protocol for user\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValue(user.address, CollateralAsset.address, true)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountDepositsValueWithFees(user.address, CollateralAsset.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValueWithFees(user.address)).to.equal(0);\n    (0, _chai.expect)(await Kresko.getPoolAccountTotalDepositsValue(user.address, true)).to.equal(0);\n}\n// nothing left in protocol.\n(0, _chai.expect)(await CollateralAsset.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDeposits(CollateralAsset.address)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, true)).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getPoolDepositsValue(CollateralAsset.address, false)).to.equal(0);",
                  "err": {},
                  "uuid": "8b445eb7-c77b-4d19-ade2-578e431087e4",
                  "parentUUID": "977a4856-4f48-4342-b008-217452631e3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b445eb7-c77b-4d19-ade2-578e431087e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 843,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}