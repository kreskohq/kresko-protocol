{
  "stats": {
    "suites": 92,
    "tests": 278,
    "passes": 248,
    "pending": 30,
    "failures": 0,
    "start": "2023-07-11T11:02:26.522Z",
    "end": "2023-07-11T11:06:02.178Z",
    "duration": 215656,
    "testsRegistered": 278,
    "passPercent": 100,
    "pendingPercent": 10.79136690647482,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "60f3984d-d7f4-47b5-83be-1c09256f533a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e64d94d6-ffcc-4cbc-b19f-1b5f5e51c09d",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "bdfc3d96-5343-430d-90c8-847656fcb2e4",
              "parentUUID": "e64d94d6-ffcc-4cbc-b19f-1b5f5e51c09d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 3061,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "user = _hardhat.default.users.testUserSeven;\noracleDecimals = await _hardhat.default.Diamond.extOracleDecimals();\nKreskoAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"KreskoAssetPrice10USD\",\n    price: collateralPrice,\n    symbol: \"KreskoAssetPrice10USD\",\n    closeFee: 0.1,\n    openFee: 0.1,\n    marketOpen: true,\n    factor: 2,\n    supplyLimit: 10\n});\nCollateralAsset = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral18Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 18\n});\nCollateralAsset8Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral8Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 8\n});\nCollateralAsset21Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral21Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 21\n});\nawait CollateralAsset.setBalance(user, (0, _lib.toBig)(startingBalance));\nawait CollateralAsset8Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 8));\nawait CollateralAsset21Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 21));\nawait CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset21Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);",
              "err": {},
              "uuid": "01ba629e-d71a-4267-bf07-5f512ad1e55a",
              "parentUUID": "e64d94d6-ffcc-4cbc-b19f-1b5f5e51c09d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16a4ed9f-edec-4f91-849c-117933e87aa2",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "c1b7be8c-9df0-4a35-9e64-71a5ff1f0d96",
                  "parentUUID": "16a4ed9f-edec-4f91-849c-117933e87aa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "ff1dc94d-fa83-415f-9e8b-825b654c7bed",
                  "parentUUID": "16a4ed9f-edec-4f91-849c-117933e87aa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "b825af45-f235-47cf-b586-c6133acb0e17",
                  "parentUUID": "16a4ed9f-edec-4f91-849c-117933e87aa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, (0, _lib.toBig)(10));\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, (0, _lib.toBig)(10, 8));\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, (0, _lib.toBig)(10, 21));\nconst expectedDepositValue = (0, _lib.toBig)(150, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "64f2b9c0-e533-4216-a15a-545588f0d297",
                  "parentUUID": "16a4ed9f-edec-4f91-849c-117933e87aa2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1b7be8c-9df0-4a35-9e64-71a5ff1f0d96",
                "ff1dc94d-fa83-415f-9e8b-825b654c7bed",
                "b825af45-f235-47cf-b586-c6133acb0e17",
                "64f2b9c0-e533-4216-a15a-545588f0d297"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 286,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "925c78ff-f4ad-4fcd-820a-8fbfa60daad4",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance));",
                  "err": {},
                  "uuid": "bd517277-a795-4827-bb1c-3930a4788e0c",
                  "parentUUID": "925c78ff-f4ad-4fcd-820a-8fbfa60daad4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset8Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset8Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 8));",
                  "err": {},
                  "uuid": "c96d237f-46ea-40e0-9d19-89f1c786d7c8",
                  "parentUUID": "925c78ff-f4ad-4fcd-820a-8fbfa60daad4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 138,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset21Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).withdrawCollateral(user.address, CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset21Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 21));",
                  "err": {},
                  "uuid": "0d69e7eb-cc6e-4578-8029-f85b3e7b8188",
                  "parentUUID": "925c78ff-f4ad-4fcd-820a-8fbfa60daad4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd517277-a795-4827-bb1c-3930a4788e0c",
                "c96d237f-46ea-40e0-9d19-89f1c786d7c8",
                "0d69e7eb-cc6e-4578-8029-f85b3e7b8188"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 373,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "0c4c08a7-cd1a-4a83-9da8-8844259a05a7",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 370,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "22380c9c-9b30-4aa9-b8f6-ca5e95f61947",
                  "parentUUID": "0c4c08a7-cd1a-4a83-9da8-8844259a05a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "ef321eaf-6b7a-42c5-9e46-c542f7087716",
                  "parentUUID": "0c4c08a7-cd1a-4a83-9da8-8844259a05a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 390,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "912c4348-d868-4ebd-a1de-d64bcdf3bf14",
                  "parentUUID": "0c4c08a7-cd1a-4a83-9da8-8844259a05a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22380c9c-9b30-4aa9-b8f6-ca5e95f61947",
                "ef321eaf-6b7a-42c5-9e46-c542f7087716",
                "912c4348-d868-4ebd-a1de-d64bcdf3bf14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7125bbd4-fbf0-4ad5-a457-771ce677f20b",
          "title": "Diamond",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e4343752-0a49-48fe-9a92-0727412443d6",
              "parentUUID": "7125bbd4-fbf0-4ad5-a457-771ce677f20b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eac12fb7-09d5-45bd-9805-23b8a5cb6c53",
              "title": "#initialization",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "e628d702-70d6-4cb2-83b3-3b21cda1de65",
                  "parentUUID": "eac12fb7-09d5-45bd-9805-23b8a5cb6c53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = this.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "b11d05c6-75d2-40e0-8c27-61b6f913fd64",
                  "parentUUID": "eac12fb7-09d5-45bd-9805-23b8a5cb6c53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "1b3722ce-0f53-44ca-937a-c159ee245403",
                  "parentUUID": "eac12fb7-09d5-45bd-9805-23b8a5cb6c53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e628d702-70d6-4cb2-83b3-3b21cda1de65",
                "b11d05c6-75d2-40e0-8c27-61b6f913fd64",
                "1b3722ce-0f53-44ca-937a-c159ee245403"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "cf9bdfad-23c4-4f11-a78c-a2422c56e9c3",
          "title": "Diamond",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ee40b7e2-70d8-4f38-815c-934b0bad8340",
              "parentUUID": "cf9bdfad-23c4-4f11-a78c-a2422c56e9c3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ca7be80-ae0b-4bcf-ab98-d06315771b7c",
              "title": "#ownership",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.addr.deployer);",
                  "err": {},
                  "uuid": "0128fba5-e4cd-4031-ac69-47271f89d9fb",
                  "parentUUID": "9ca7be80-ae0b-4bcf-ab98-d06315771b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "ebdcbfef-3a88-4061-9491-a52cdb9b6dfd",
                  "parentUUID": "9ca7be80-ae0b-4bcf-ab98-d06315771b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "9c3eb42a-a66e-498f-aa58-6f803dae02fc",
                  "parentUUID": "9ca7be80-ae0b-4bcf-ab98-d06315771b7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "8222252b-ac6d-49ea-9771-62a0c7d87698",
                  "parentUUID": "9ca7be80-ae0b-4bcf-ab98-d06315771b7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0128fba5-e4cd-4031-ac69-47271f89d9fb",
                "ebdcbfef-3a88-4061-9491-a52cdb9b6dfd",
                "9c3eb42a-a66e-498f-aa58-6f803dae02fc",
                "8222252b-ac6d-49ea-9771-62a0c7d87698"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 142,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "26c11ce2-44f6-4794-8b98-ebd3b34cb849",
          "title": "Diamond",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "08e2f19e-4be5-41dc-92cd-f70e7c089215",
              "parentUUID": "26c11ce2-44f6-4794-8b98-ebd3b34cb849",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dd1db305-5ab9-4100-b6fa-ca8c3acf9756",
              "title": "#upgrades",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 323,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = _hardhat.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await _hardhat.default.Diamond.hasRole(TEST_OPERATOR_ROLE, _hardhat.default.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await _hardhat.default.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], _hardhat.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(_hardhat.default.addr.userOne);",
                  "err": {},
                  "uuid": "8ba667e6-a1bf-4de3-9ff5-36dabcd3aacb",
                  "parentUUID": "dd1db305-5ab9-4100-b6fa-ca8c3acf9756",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 398,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: _hardhat.default.addr.userOne\n});\nconst facetsBefore = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: \"SmockFacet\"\n});\nconst facetsAfter = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "2d2d0165-08bd-4fa5-a99d-181f8b3f2d8e",
                  "parentUUID": "dd1db305-5ab9-4100-b6fa-ca8c3acf9756",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 181,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await _hardhat.default.Diamond.facetAddress(signature);\nconst functions = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: _hardhat.default.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst filter = _hardhat.default.Diamond.filters[\"PendingOwnershipTransfer(address,address)\"](_hardhat.default.addr.deployer, correctOwner);\nconst [event] = await _hardhat.default.Diamond.queryFilter(filter);\nconst { previousOwner , newOwner  } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(_hardhat.default.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "14b4109a-6f4b-49f7-8ad0-c204f01a2986",
                  "parentUUID": "dd1db305-5ab9-4100-b6fa-ca8c3acf9756",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 243,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await _hardhat.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await _hardhat.default.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\"\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await _hardhat.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await _hardhat.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).acceptOwnership());\nconst currentOwner = await _hardhat.default.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "b3e2308c-c0da-4815-a7f1-b807051831b7",
                  "parentUUID": "dd1db305-5ab9-4100-b6fa-ca8c3acf9756",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 319,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait _hardhat.default.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "bac04b77-0c25-4f02-ac59-9864135bc9ad",
                  "parentUUID": "dd1db305-5ab9-4100-b6fa-ca8c3acf9756",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 631,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await _hardhat.default.ethers.getContractAt(\"SmockFacet\", _hardhat.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait _hardhat.default.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await _hardhat.default.ethers.getContractAt(\"SmockFacet2\", _hardhat.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "438150ac-f1f0-4ea8-995e-6e989da750c7",
                  "parentUUID": "dd1db305-5ab9-4100-b6fa-ca8c3acf9756",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ba667e6-a1bf-4de3-9ff5-36dabcd3aacb",
                "2d2d0165-08bd-4fa5-a99d-181f8b3f2d8e",
                "14b4109a-6f4b-49f7-8ad0-c204f01a2986",
                "b3e2308c-c0da-4815-a7f1-b807051831b7",
                "bac04b77-0c25-4f02-ac59-9864135bc9ad",
                "438150ac-f1f0-4ea8-995e-6e989da750c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2095,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "2304374f-0084-4c0e-bcc9-b517e513a9e2",
          "title": "Forking",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "87eae08f-b756-4d6c-ad61-2944131d2027",
              "title": "#setup",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6c94276e-3759-4ca6-8f1f-806571577794",
                  "parentUUID": "87eae08f-b756-4d6c-ad61-2944131d2027",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "6c94276e-3759-4ca6-8f1f-806571577794"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "dad3e974-513b-4ba5-955b-57a6cdbe6c34",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3f7f979a-7d23-46a0-897c-9176cfd1dfb6",
                  "parentUUID": "dad3e974-513b-4ba5-955b-57a6cdbe6c34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "3f7f979a-7d23-46a0-897c-9176cfd1dfb6"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b4740db8-ccc7-41b1-bd7d-b3dcaafa7fbf",
              "title": "#facet-upgrade-16-05-2023",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works",
                  "fullTitle": "Forking #facet-upgrade-16-05-2023 works",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d165d4e0-93f1-482d-b0a1-08f9b5c32b78",
                  "parentUUID": "b4740db8-ccc7-41b1-bd7d-b3dcaafa7fbf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "d165d4e0-93f1-482d-b0a1-08f9b5c32b78"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "bbaa9171-d0f8-4c5c-ac41-929d79bbd4b0",
          "title": "KreskoAsset",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "54adcfd5-6b0d-4936-8fc2-47d109e16c6a",
              "parentUUID": "bbaa9171-d0f8-4c5c-ac41-929d79bbd4b0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6eae922d-58de-425a-b4de-f076fdb22190",
              "title": "#initialization - anchor",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "13accd29-56b4-4645-83f0-8e9be62e2667",
                  "parentUUID": "6eae922d-58de-425a-b4de-f076fdb22190",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "6d932ef2-23b6-4656-8bef-2c054f5332f3",
                  "parentUUID": "6eae922d-58de-425a-b4de-f076fdb22190",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetImpl.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "b09168f0-79ab-4681-a116-5204a7b4c405",
                  "parentUUID": "6eae922d-58de-425a-b4de-f076fdb22190",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await KreskoAsset.kresko()).to.equal(_hardhat.default.Diamond.address);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(\"200000000000000000000\");\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "dd241f5b-cb4c-4b69-88fb-2ecc47527c25",
                  "parentUUID": "6eae922d-58de-425a-b4de-f076fdb22190",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "94029a71-fdcb-464e-8bac-3583deba832c",
                  "parentUUID": "6eae922d-58de-425a-b4de-f076fdb22190",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d932ef2-23b6-4656-8bef-2c054f5332f3",
                "b09168f0-79ab-4681-a116-5204a7b4c405",
                "dd241f5b-cb4c-4b69-88fb-2ecc47527c25",
                "94029a71-fdcb-464e-8bac-3583deba832c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "9c2f4184-0a46-4898-adf9-2aabaa88fcea",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = _hardhat.default.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "0be3a2bc-9939-4a95-9e44-a0ae2d0a8faa",
                  "parentUUID": "9c2f4184-0a46-4898-adf9-2aabaa88fcea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "9a95e3a7-4896-4a93-ab7a-afb89d2d3b29",
                  "parentUUID": "9c2f4184-0a46-4898-adf9-2aabaa88fcea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(_shared.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "88f3cbac-f8fb-4be2-9442-0032ba52cec9",
                  "parentUUID": "9c2f4184-0a46-4898-adf9-2aabaa88fcea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "7f9f2bb9-745a-45d5-b901-47da1eb082a0",
                  "parentUUID": "9c2f4184-0a46-4898-adf9-2aabaa88fcea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(_shared.anchorTokenPrefix + symbol);\n(0, _chai.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"200000000000000000000\");\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "bdc02ba0-41bb-43cb-9f45-cb51f68476ca",
                  "parentUUID": "9c2f4184-0a46-4898-adf9-2aabaa88fcea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a95e3a7-4896-4a93-ab7a-afb89d2d3b29",
                "88f3cbac-f8fb-4be2-9442-0032ba52cec9",
                "7f9f2bb9-745a-45d5-b901-47da1eb082a0",
                "bdc02ba0-41bb-43cb-9f45-cb51f68476ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d4c11ee1-e2b1-4b59-ac45-f00ded107d6e",
          "title": "KreskoAsset",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "1935c987-a0f3-4fe5-9fa9-1021556d772a",
              "parentUUID": "d4c11ee1-e2b1-4b59-ac45-f00ded107d6e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = _hardhat.default.users.deployer;\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(_test.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "52bdc1f4-6d7b-4d95-a4fc-e4fd099e7785",
              "parentUUID": "d4c11ee1-e2b1-4b59-ac45-f00ded107d6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0cc6a9a-6438-4a7e-bd9e-a05d052fa479",
              "title": "#mint",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "bf03c0c7-713d-4891-888f-c92cbf4e7875",
                  "parentUUID": "a0cc6a9a-6438-4a7e-bd9e-a05d052fa479",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "179f5375-5ef4-499b-a914-9c24a68b7ea6",
                  "parentUUID": "a0cc6a9a-6438-4a7e-bd9e-a05d052fa479",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "10e4e77c-9799-470c-b43f-4213379820e2",
                  "parentUUID": "a0cc6a9a-6438-4a7e-bd9e-a05d052fa479",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.renounceRole(_test.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "0b9f154a-0644-4c82-9d83-5c5322a96a77",
                  "parentUUID": "a0cc6a9a-6438-4a7e-bd9e-a05d052fa479",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf03c0c7-713d-4891-888f-c92cbf4e7875",
                "179f5375-5ef4-499b-a914-9c24a68b7ea6",
                "10e4e77c-9799-470c-b43f-4213379820e2",
                "0b9f154a-0644-4c82-9d83-5c5322a96a77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "af1e3ea9-dba0-43f4-ae01-30fa87c27af2",
              "title": "#burn",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "c8b77170-50c6-4187-871e-14fadeb5a567",
                  "parentUUID": "af1e3ea9-dba0-43f4-ae01-30fa87c27af2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "809a1c57-009b-4236-83c3-d5d16dbfeefb",
                  "parentUUID": "af1e3ea9-dba0-43f4-ae01-30fa87c27af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(_hardhat.default.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "1e0ba7d9-9152-43ce-8ca5-4670d98c017b",
                  "parentUUID": "af1e3ea9-dba0-43f4-ae01-30fa87c27af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "968063b0-a65b-4358-9eba-df27210fcae7",
                  "parentUUID": "af1e3ea9-dba0-43f4-ae01-30fa87c27af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userTwo).burn(_hardhat.default.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "7cc790ed-0c11-474f-a56e-64e10072de2b",
                  "parentUUID": "af1e3ea9-dba0-43f4-ae01-30fa87c27af2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "809a1c57-009b-4236-83c3-d5d16dbfeefb",
                "1e0ba7d9-9152-43ce-8ca5-4670d98c017b",
                "968063b0-a65b-4358-9eba-df27210fcae7",
                "7cc790ed-0c11-474f-a56e-64e10072de2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9dcb911b-11cb-47cf-beba-342525bd85a5",
          "title": "KreskoAsset",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "c02ab9dd-3515-49ec-8803-81917b466405",
              "parentUUID": "9dcb911b-11cb-47cf-beba-342525bd85a5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "ec2ade51-d333-49b0-b332-e3f2bed4f675",
              "parentUUID": "9dcb911b-11cb-47cf-beba-342525bd85a5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ed9c4785-4c8b-4088-8644-576b2c8fd8b7",
              "title": "#rebase",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "f8111e59-052e-4227-9ff6-206a5376bcb0",
                  "parentUUID": "ed9c4785-4c8b-4088-8644-576b2c8fd8b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "07473154-52b4-47c2-a729-2d56837eac79",
                  "parentUUID": "ed9c4785-4c8b-4088-8644-576b2c8fd8b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "a4707a2d-128f-404a-8e46-66223756f40c",
                  "parentUUID": "ed9c4785-4c8b-4088-8644-576b2c8fd8b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                  "title": "#balance + supply",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                      "err": {},
                      "uuid": "1d2964d8-ad24-4863-ad60-a4231b393e0d",
                      "parentUUID": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "bf7a2d1a-3c6a-4e32-b718-e26d92298038",
                      "parentUUID": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "6edb4cfc-5786-4dff-b526-b797d7d8dfda",
                      "parentUUID": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "99b15670-b4c0-4992-90c8-c948ce1e6be0",
                      "parentUUID": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "f8b3121f-8797-45ac-b73f-37cdc5532ff1",
                      "parentUUID": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "82335d3f-c1c4-45d0-bc98-5afb13af63ef",
                      "parentUUID": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "1db12fa8-a225-4c9a-9e3b-5dd2b284cb5f",
                      "parentUUID": "24af4c12-add6-4efc-a666-fcfccfc5610d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1d2964d8-ad24-4863-ad60-a4231b393e0d",
                    "bf7a2d1a-3c6a-4e32-b718-e26d92298038",
                    "6edb4cfc-5786-4dff-b526-b797d7d8dfda",
                    "99b15670-b4c0-4992-90c8-c948ce1e6be0",
                    "f8b3121f-8797-45ac-b73f-37cdc5532ff1",
                    "82335d3f-c1c4-45d0-bc98-5afb13af63ef",
                    "1db12fa8-a225-4c9a-9e3b-5dd2b284cb5f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 179,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "3c14e368-9b9f-4dd8-a572-d3c9427c7e51",
                  "title": "#transfer",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "2df97de6-82bd-4d70-a52d-3125db48beb9",
                      "parentUUID": "3c14e368-9b9f-4dd8-a572-d3c9427c7e51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "ba1fd477-284a-4531-9436-201b0b12f3c2",
                      "parentUUID": "3c14e368-9b9f-4dd8-a572-d3c9427c7e51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 104,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "598eb677-5f46-49ad-a561-c0a7b22dc8af",
                      "parentUUID": "3c14e368-9b9f-4dd8-a572-d3c9427c7e51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "c7dc20be-1579-4feb-82b3-21ceef9a6a97",
                      "parentUUID": "3c14e368-9b9f-4dd8-a572-d3c9427c7e51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 104,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "de319231-e148-4e99-b049-2754d08d5912",
                      "parentUUID": "3c14e368-9b9f-4dd8-a572-d3c9427c7e51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 99,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "1c16e970-8ebe-4c81-b309-bf48aef311e0",
                      "parentUUID": "3c14e368-9b9f-4dd8-a572-d3c9427c7e51",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2df97de6-82bd-4d70-a52d-3125db48beb9",
                    "ba1fd477-284a-4531-9436-201b0b12f3c2",
                    "598eb677-5f46-49ad-a561-c0a7b22dc8af",
                    "c7dc20be-1579-4feb-82b3-21ceef9a6a97",
                    "de319231-e148-4e99-b049-2754d08d5912",
                    "1c16e970-8ebe-4c81-b309-bf48aef311e0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 514,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "f8111e59-052e-4227-9ff6-206a5376bcb0",
                "07473154-52b4-47c2-a729-2d56837eac79",
                "a4707a2d-128f-404a-8e46-66223756f40c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "07a05921-4258-4abe-b45c-dc0a66ab6a04",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ad588328-38fc-461e-a3d4-11b0a3bdd6f9",
              "parentUUID": "07a05921-4258-4abe-b45c-dc0a66ab6a04",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const asset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "4c178d80-2c7c-468e-988d-40658a5171f6",
              "parentUUID": "07a05921-4258-4abe-b45c-dc0a66ab6a04",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6e2d61b5-b16b-4e53-bf6b-eba0d54935c2",
              "title": "#minting and burning",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount.add(_test.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "21395c45-03dd-468b-941a-172fa3fe11e9",
                  "parentUUID": "6e2d61b5-b16b-4e53-bf6b-eba0d54935c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0ff828ec-8e27-4777-8408-299b466f515c",
                  "parentUUID": "6e2d61b5-b16b-4e53-bf6b-eba0d54935c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8221bb71-a1a2-4742-922f-429890d53ce8",
                  "parentUUID": "6e2d61b5-b16b-4e53-bf6b-eba0d54935c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f5907359-02c4-4344-b215-1405d6c83995",
                  "parentUUID": "6e2d61b5-b16b-4e53-bf6b-eba0d54935c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b408c31d-c36a-4985-9711-56a0d0d6c3a6",
                  "parentUUID": "6e2d61b5-b16b-4e53-bf6b-eba0d54935c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "eddf8d49-a27d-47e7-9bce-bcdeb106ee3a",
                  "title": "#rebases",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                      "title": "#conversions",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "2755337f-8bbe-4a03-88f2-04d0d72125e5",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6e09e704-08f4-422c-aeb2-21b1e2100a11",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0a7152fb-0e8a-4913-bea6-bcae73754a01",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4c5ef4a0-a138-4d5a-8fa0-23e729b94398",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "63cecb62-7cdd-40cf-83c4-0c2f3bac0908",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c06abdd3-c01a-49ba-b75d-9ff2be29e3c5",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "664882ee-5a2e-4da2-a71b-b45d3c260ebe",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "3f77806d-1766-4845-b151-1b89c550ba2f",
                          "parentUUID": "fc54d1af-922a-48e1-9cf8-b0fe6afbae6d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "2755337f-8bbe-4a03-88f2-04d0d72125e5",
                        "6e09e704-08f4-422c-aeb2-21b1e2100a11",
                        "0a7152fb-0e8a-4913-bea6-bcae73754a01",
                        "4c5ef4a0-a138-4d5a-8fa0-23e729b94398",
                        "63cecb62-7cdd-40cf-83c4-0c2f3bac0908",
                        "c06abdd3-c01a-49ba-b75d-9ff2be29e3c5",
                        "664882ee-5a2e-4da2-a71b-b45d3c260ebe",
                        "3f77806d-1766-4845-b151-1b89c550ba2f"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "21395c45-03dd-468b-941a-172fa3fe11e9"
              ],
              "failures": [],
              "pending": [
                "0ff828ec-8e27-4777-8408-299b466f515c",
                "8221bb71-a1a2-4742-922f-429890d53ce8",
                "f5907359-02c4-4344-b215-1405d6c83995",
                "b408c31d-c36a-4985-9711-56a0d0d6c3a6"
              ],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "227726df-47ea-47db-83d9-87a8aafd7f6b",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "44519d39-1da9-4da3-8dd7-749bffda44bd",
              "parentUUID": "227726df-47ea-47db-83d9-87a8aafd7f6b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 49,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === \"krETH\").contract;\nconst KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nconst Pair = await (await _hardhat.default.getContractOrFork(\"UniswapV2Factory\")).getPair(KreskoAsset.address, KISS.address);\n// address of KISS-krETH pool\nthis.pool = await _hardhat.ethers.getContractAt(\"UniswapV2Pair\", Pair);\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, _hardhat.default.addr.deployer);",
              "err": {},
              "uuid": "c565a4b3-afe1-423c-ab17-57a1756966a5",
              "parentUUID": "227726df-47ea-47db-83d9-87a8aafd7f6b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst beforeTotalSupply = await KreskoAsset.totalSupply();\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.mint(_hardhat.default.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\n(0, _chai.expect)(await KreskoAsset.balanceOf(_hardhat.default.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(beforeTotalSupply.add(_test.defaultMintAmount).mul(denominator));\n(0, _chai.expect)(afterReserve0).to.equal(beforeReserve0);\n(0, _chai.expect)(afterReserve1).to.equal(beforeReserve1);\n(0, _chai.expect)(beforeTimestamp).to.equal(afterTimestamp);",
              "err": {},
              "uuid": "4664e059-ef75-4baa-bf4d-7a04a0d2cab7",
              "parentUUID": "227726df-47ea-47db-83d9-87a8aafd7f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, [\n    this.pool.address\n]);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\nif (beforeReserve0.eq(afterReserve0)) {\n    (0, _chai.expect)(afterReserve1).to.equal(beforeReserve1.mul(denominator));\n} else {\n    (0, _chai.expect)(afterReserve0).to.equal(beforeReserve0.mul(denominator));\n}\n(0, _chai.expect)(afterTimestamp).to.gt(beforeTimestamp);",
              "err": {},
              "uuid": "92ca827d-a43a-41cc-97cd-823c208220b4",
              "parentUUID": "227726df-47ea-47db-83d9-87a8aafd7f6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4664e059-ef75-4baa-bf4d-7a04a0d2cab7",
            "92ca827d-a43a-41cc-97cd-823c208220b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "dd29e10c-0762-418c-8b36-1559c5171ba1",
          "title": "Minter - Init",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f93b5739-fa5a-4606-9a4f-e936103618b9",
              "parentUUID": "dd29e10c-0762-418c-8b36-1559c5171ba1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "09420de5-fca8-4132-9be5-facd44bed640",
              "title": "#initialization",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 145,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst { args  } = await (0, _shared.getMinterInitializer)(_hardhat.default);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.SAFETY_COUNCIL, _hardhat.default.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.feeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await _hardhat.default.Diamond.liquidationIncentiveMultiplier()).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumCollateralizationRatio()).to.equal(args.minimumCollateralizationRatio);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumDebtValue()).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "e15f8e4a-f201-4be8-81fd-1a41f669e8ed",
                  "parentUUID": "09420de5-fca8-4132-9be5-facd44bed640",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst initializer = await (0, _shared.getMinterInitializer)(_hardhat.default);\nconst initializerContract = await _hardhat.default.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, _chai.expect)(_hardhat.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "f24e2232-4387-4756-847b-b84081ff1a68",
                  "parentUUID": "09420de5-fca8-4132-9be5-facd44bed640",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await _hardhat.default.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._shared.minterFacets,\n    ..._shared.diamondFacets\n].map(async (name)=>{\n    const deployment = await _hardhat.default.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "06500c5e-7b1a-4eee-960d-dbcbf46b8427",
                  "parentUUID": "09420de5-fca8-4132-9be5-facd44bed640",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e15f8e4a-f201-4be8-81fd-1a41f669e8ed",
                "f24e2232-4387-4756-847b-b84081ff1a68",
                "06500c5e-7b1a-4eee-960d-dbcbf46b8427"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 254,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c627651b-4a76-4d4e-94a8-f5d8c964349d",
          "title": "Minter - Configuration",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "207003c5-604b-48f3-bac4-cc40733fb8f1",
              "parentUUID": "c627651b-4a76-4d4e-94a8-f5d8c964349d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
              "title": "#configuration",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer);\nconst update = (0, _test.getNewMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(update.MLM)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(update.oracleDeviationPct)).to.not.be.reverted;\nconst { minimumCollateralizationRatio , minimumDebtValue , feeRecipient , oracleDeviationPct  } = await hre.Diamond.getAllParams();\n(0, _chai.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio);\n(0, _chai.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue);\n(0, _chai.expect)(update.feeRecipient).to.equal(feeRecipient);\n(0, _chai.expect)(update.oracleDeviationPct).to.equal(oracleDeviationPct);",
                  "err": {},
                  "uuid": "09e247d7-1abf-451e-93cd-65b3a80b539a",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 741,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)(_test.defaultCollateralArgs);\n(0, _chai.expect)(await hre.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(contract.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)(Number(oraclePrice)).to.equal((0, _lib.toBig)(_test.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "d061b654-22db-4a3d-a628-acceddcdd5bb",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 1025,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , kresko  } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(await hre.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, _chai.expect)(values.exists).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal((0, _lib.toBig)(_test.defaultKrAssetArgs.factor));\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_test.defaultKrAssetArgs.price);\n(0, _chai.expect)((0, _lib.fromBig)(values.supplyLimit)).to.equal(_test.defaultKrAssetArgs.supplyLimit);\n(0, _chai.expect)((0, _lib.fromBig)(values.closeFee)).to.equal(_test.defaultKrAssetArgs.closeFee);\n(0, _chai.expect)((0, _lib.fromBig)(values.openFee)).to.equal(_test.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "9539495d-7b8c-4eee-ae5b-8913d3d3e1a5",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update AMM oracle",
                  "fullTitle": "Minter - Configuration #configuration can update AMM oracle",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ammOracle = await _smock.smock.fake(\"UniswapV2Oracle\");\nawait hre.Diamond.updateAMMOracle(ammOracle.address);\n(0, _chai.expect)(await hre.Diamond.ammOracle()).to.equal(ammOracle.address);",
                  "err": {},
                  "uuid": "929ea2a5-262b-41f3-9f72-f0381ab2567b",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "108f5e2e-cf1b-40ac-a683-10f53f2a48c7",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidatable multiplier",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidatable multiplier",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.maxLiquidationMultiplier();\nconst newMLM = (0, _lib.toBig)(1.0002);\n(0, _chai.expect)(currentMLM.eq(newMLM)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(newMLM)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.maxLiquidationMultiplier()).eq(newMLM)).to.be.true;",
                  "err": {},
                  "uuid": "a27cea83-f3ac-4585-9503-fd12a589343a",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update oracle deviation pct",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentODPCT = await hre.Diamond.oracleDeviationPct();\nconst newODPCT = (0, _lib.toBig)(0.3);\n(0, _chai.expect)(currentODPCT.eq(newODPCT)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newODPCT)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.oracleDeviationPct()).eq(newODPCT)).to.be.true;",
                  "err": {},
                  "uuid": "816bf2bb-7186-411f-a5d2-1c194e8e3948",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 1038,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _krassets.addMockKreskoAsset)();\nconst oldRatio = (await hre.Diamond.kreskoAsset(contract.address)).kFactor;\nconst newRatio = (0, _lib.toBig)(1.2);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.kreskoAsset(contract.address)).kFactor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "af6905ec-538d-4580-8570-3e2860a3491e",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 754,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)();\nconst oldRatio = (await hre.Diamond.collateralAsset(contract.address)).factor;\nconst newRatio = (0, _lib.toBig)(0.9);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.collateralAsset(contract.address)).factor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "e42535e3-27e7-409e-99c0-8d66f599cce3",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 1445,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , anchor , priceFeed  } = await (0, _krassets.addMockKreskoAsset)();\nconst oracleAnswer = (0, _lib.fromBig)((await priceFeed.latestRoundData())[1], 8);\nconst kreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, _chai.expect)(oracleAnswer).to.equal(_test.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, _lib.toBig)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, _lib.toBig)(0.02),\n    openFee: (0, _lib.toBig)(0.02)\n};\nconst [CLFeed, FluxFeed] = await (0, _oracle.getMockOraclesFor)(await contract.name(), update.price);\nawait (0, _test.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateKreskoAsset(contract.address, await (0, _krassets.getKrAssetConfig)(contract, anchor.address, update.factor, CLFeed.address, FluxFeed.address, (0, _lib.toBig)(update.supplyLimit), update.closeFee, update.openFee));\nconst newValues = await hre.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = (0, _lib.fromBig)((await CLFeed.latestRoundData())[1], 8);\nconst newKreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(newValues.exists).to.equal(true);\n(0, _chai.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, _chai.expect)((0, _lib.fromBig)(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "007d786a-6e17-44b8-8738-ba3531c35810",
                  "parentUUID": "77ddf0da-1783-4b1a-b09a-061f0cbd6931",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09e247d7-1abf-451e-93cd-65b3a80b539a",
                "d061b654-22db-4a3d-a628-acceddcdd5bb",
                "9539495d-7b8c-4eee-ae5b-8913d3d3e1a5",
                "929ea2a5-262b-41f3-9f72-f0381ab2567b",
                "108f5e2e-cf1b-40ac-a683-10f53f2a48c7",
                "a27cea83-f3ac-4585-9503-fd12a589343a",
                "816bf2bb-7186-411f-a5d2-1c194e8e3948",
                "af6905ec-538d-4580-8570-3e2860a3491e",
                "e42535e3-27e7-409e-99c0-8d66f599cce3",
                "007d786a-6e17-44b8-8738-ba3531c35810"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "731f96e5-e99c-4568-8f37-a0b3126f0039",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f17511e0-c8fe-44fb-b850-82d92c1b867f",
              "parentUUID": "731f96e5-e99c-4568-8f37-a0b3126f0039",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.depositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(10000)\n};",
              "err": {},
              "uuid": "b42a817d-d6a6-4106-914a-090b4369fc4c",
              "parentUUID": "731f96e5-e99c-4568-8f37-a0b3126f0039",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "73eac017-5ad1-4934-ba97-ee618fc8dc90",
              "title": "#collateral",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "439a944e-8642-494f-800f-71a89725822e",
                  "title": "#deposit",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert if withdrawing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if withdrawing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 1189,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const arbitraryUser = _hardhat.default.users.testUserSeven;\nconst collateralAmount = (0, _lib.toBig)(100);\nconst newKrAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krTSLA\",\n    symbol: \"krTSLA\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: _testutils.BASIS_POINT.mul(1000)\n});\nawait newKrAsset.setBalance(arbitraryUser, collateralAmount);\nawait newKrAsset.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: collateralAmount.mul(4)\n    }\n});\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(newKrAsset.address, await (0, _collaterals.getCollateralConfig)(newKrAsset.contract, newKrAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), newKrAsset.mocks.clFeed.address, newKrAsset.mocks.fluxFeed.address));\nconst depositAmount = collateralAmount.div(2);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, newKrAsset.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait newKrAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getDepositedCollateralAssets(arbitraryUser.address)).to.deep.equal([\n    newKrAsset.address\n]);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, newKrAsset.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "5d7113c7-b5cb-440f-9da2-516e30e89dd0",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing a krAsset collateral causing lower deposit amount than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 1075,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const arbitraryUser = _hardhat.default.users.testUserSeven;\nconst collateralAmount = (0, _lib.toBig)(100);\nconst newKrAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krTSLA\",\n    symbol: \"krTSLA\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: _testutils.BASIS_POINT.mul(1000)\n});\nawait newKrAsset.setBalance(arbitraryUser, collateralAmount);\nawait newKrAsset.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: collateralAmount.mul(4)\n    }\n});\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(newKrAsset.address, await (0, _collaterals.getCollateralConfig)(newKrAsset.contract, newKrAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), newKrAsset.mocks.clFeed.address, newKrAsset.mocks.fluxFeed.address));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, newKrAsset.address, 9e11.toString())).to.be.revertedWith(_errors.Error.COLLATERAL_AMOUNT_TOO_LOW);",
                      "err": {},
                      "uuid": "e292267f-24cf-42d2-bf8f-122cf6806937",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address))).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "04496a9f-78f4-4432-8408-481853054e40",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 102,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)((0, _lib.fromBig)(depositorBalanceAfter)).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "fb89d964-3167-45d6-9aec-db3c74ac1b2b",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "c847a306-63ce-4dda-9650-5cb767370754",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 797,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"Collateral18Dec\",\n    price: _testutils.defaultOraclePrice,\n    factor: 1,\n    decimals: _testutils.defaultDecimals\n};\nconst { contract , mocks  } = await (0, _collaterals.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Deposit batch of first collateral type\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address,\n    contract.address\n]);",
                      "err": {},
                      "uuid": "b6eb375b-c987-446f-abc1-aac0848a9c19",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralDeposited\");\n(0, _chai.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "523f9e24-3175-48d4-8e39-eadafb5e2e40",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(_errors.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "7e9f3986-ed34-43cd-8a42-c9516f0882a2",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "68643b12-732a-4db5-b706-2b3d51f14572",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 93,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer , devTwo , extOne  } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "36722d3f-e791-4c5a-851b-b95427ebb206",
                      "parentUUID": "439a944e-8642-494f-800f-71a89725822e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5d7113c7-b5cb-440f-9da2-516e30e89dd0",
                    "e292267f-24cf-42d2-bf8f-122cf6806937",
                    "04496a9f-78f4-4432-8408-481853054e40",
                    "fb89d964-3167-45d6-9aec-db3c74ac1b2b",
                    "c847a306-63ce-4dda-9650-5cb767370754",
                    "b6eb375b-c987-446f-abc1-aac0848a9c19",
                    "523f9e24-3175-48d4-8e39-eadafb5e2e40",
                    "7e9f3986-ed34-43cd-8a42-c9516f0882a2",
                    "68643b12-732a-4db5-b706-2b3d51f14572",
                    "36722d3f-e791-4c5a-851b-b95427ebb206"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3526,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "c5d48d7b-0f3d-42ca-aa35-c423569b1eef",
                  "title": "#withdraw",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 28,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "782fb11b-ef46-43f5-8a08-4bb86aedc6e0",
                      "parentUUID": "c5d48d7b-0f3d-42ca-aa35-c423569b1eef",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "8efd6ed7-fcdb-43ef-99f0-7a715d041cc6",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 140,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "c233d9ac-d72f-4af8-8f86-dc615731f5af",
                          "parentUUID": "8efd6ed7-fcdb-43ef-99f0-7a715d041cc6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 107,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "24b5170b-c9a7-4f59-b820-c034d4286281",
                          "parentUUID": "8efd6ed7-fcdb-43ef-99f0-7a715d041cc6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 157,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "d3894da1-0512-4a18-8e1c-534f0ec07539",
                          "parentUUID": "8efd6ed7-fcdb-43ef-99f0-7a715d041cc6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 68,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralWithdrawn\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "a5f7c77e-7698-4bf4-8fc7-252b98a9976e",
                          "parentUUID": "8efd6ed7-fcdb-43ef-99f0-7a715d041cc6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 34,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "5bec4fbd-5d34-46c4-a58f-6486463085dc",
                          "parentUUID": "8efd6ed7-fcdb-43ef-99f0-7a715d041cc6",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "d2de8c16-e694-4427-8e91-898f55f86e76",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 164,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, _lib.toBig)(100);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _hardhat.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "b48151f6-f7a3-4a66-a227-798f5fcc4e71",
                              "parentUUID": "d2de8c16-e694-4427-8e91-898f55f86e76",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 346,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _lib.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).gte(accountMinCollateralValue)).to.be.true;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "1a9acf5c-b33a-4bc4-a2fa-ecf1b7d782ef",
                              "parentUUID": "d2de8c16-e694-4427-8e91-898f55f86e76",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 170,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = _hardhat.default.users.userFour;\nawait this.collateral.setBalance(user, _ethers.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, _lib.toBig)(1000));\nawait this.collateral.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1000),\n    user\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1010),\n    user\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, _lib.toBig)(1000));",
                              "err": {},
                              "uuid": "97a9cb27-5a64-4d08-9375-e315a18f8ab8",
                              "parentUUID": "d2de8c16-e694-4427-8e91-898f55f86e76",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 22,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(_errors.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "9ba9c8d8-e981-41d0-9ca4-0d7bd4ebaa5b",
                              "parentUUID": "d2de8c16-e694-4427-8e91-898f55f86e76",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 205,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "210f4e56-d7d6-4b0b-825f-344a16c90891",
                              "parentUUID": "d2de8c16-e694-4427-8e91-898f55f86e76",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 24,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(_errors.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "7a8ae4c5-8da9-48cd-a5a4-656f2cedf43b",
                              "parentUUID": "d2de8c16-e694-4427-8e91-898f55f86e76",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "1a9acf5c-b33a-4bc4-a2fa-ecf1b7d782ef",
                            "97a9cb27-5a64-4d08-9375-e315a18f8ab8",
                            "9ba9c8d8-e981-41d0-9ca4-0d7bd4ebaa5b",
                            "210f4e56-d7d6-4b0b-825f-344a16c90891",
                            "7a8ae4c5-8da9-48cd-a5a4-656f2cedf43b"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 767,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "c233d9ac-d72f-4af8-8f86-dc615731f5af",
                        "24b5170b-c9a7-4f59-b820-c034d4286281",
                        "d3894da1-0512-4a18-8e1c-534f0ec07539",
                        "a5f7c77e-7698-4bf4-8fc7-252b98a9976e",
                        "5bec4fbd-5d34-46c4-a58f-6486463085dc"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 506,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "7f14ffb4-1f0f-4b14-99a0-7061c8b44619",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 270,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle, assetInfo.marketStatusOracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "6cdf095f-882d-4703-bb0c-54de13942666",
                      "parentUUID": "7f14ffb4-1f0f-4b14-99a0-7061c8b44619",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "2cf0908b-c128-4bd6-8da9-d1816e15ee66",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 111,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "135ee11e-a817-470c-8b94-7b970bcd6ad5",
                          "parentUUID": "2cf0908b-c128-4bd6-8da9-d1816e15ee66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 106,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "aa4b7e51-f109-4a18-9651-39c3d2cf8ac4",
                          "parentUUID": "2cf0908b-c128-4bd6-8da9-d1816e15ee66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 115,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "5a2455a2-6367-4cdf-b438-e9e43d48254a",
                          "parentUUID": "2cf0908b-c128-4bd6-8da9-d1816e15ee66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 103,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "cbe51581-9173-46fd-a0fd-82127256d4ba",
                          "parentUUID": "2cf0908b-c128-4bd6-8da9-d1816e15ee66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 141,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "2b631839-d382-4fed-8b51-2d5ca83b972a",
                          "parentUUID": "2cf0908b-c128-4bd6-8da9-d1816e15ee66",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 138,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "7f78c2b5-9130-44d9-87a1-846a54b32cd3",
                          "parentUUID": "2cf0908b-c128-4bd6-8da9-d1816e15ee66",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "135ee11e-a817-470c-8b94-7b970bcd6ad5",
                        "aa4b7e51-f109-4a18-9651-39c3d2cf8ac4",
                        "5a2455a2-6367-4cdf-b438-e9e43d48254a",
                        "cbe51581-9173-46fd-a0fd-82127256d4ba",
                        "2b631839-d382-4fed-8b51-2d5ca83b972a",
                        "7f78c2b5-9130-44d9-87a1-846a54b32cd3"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 714,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "76d54d8d-457a-4018-8535-1cc9bea30997",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 172,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "b8701350-49a5-463f-922f-98cc2f1452db",
                          "parentUUID": "76d54d8d-457a-4018-8535-1cc9bea30997",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 171,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "d7ac13a4-1747-414c-9e5a-748f9030bb8b",
                          "parentUUID": "76d54d8d-457a-4018-8535-1cc9bea30997",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 127,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "bcdcfe49-f61c-4087-a194-d32da7fbee43",
                          "parentUUID": "76d54d8d-457a-4018-8535-1cc9bea30997",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 130,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "e382512b-54ff-4a28-91e7-7bac80ae51f9",
                          "parentUUID": "76d54d8d-457a-4018-8535-1cc9bea30997",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 247,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "685c3bea-d947-4f04-b212-4eeb70039544",
                          "parentUUID": "76d54d8d-457a-4018-8535-1cc9bea30997",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 388,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "3b4445ad-c2ce-4fbd-8298-46c1ddb84d0c",
                          "parentUUID": "76d54d8d-457a-4018-8535-1cc9bea30997",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b8701350-49a5-463f-922f-98cc2f1452db",
                        "d7ac13a4-1747-414c-9e5a-748f9030bb8b",
                        "bcdcfe49-f61c-4087-a194-d32da7fbee43",
                        "e382512b-54ff-4a28-91e7-7bac80ae51f9",
                        "685c3bea-d947-4f04-b212-4eeb70039544",
                        "3b4445ad-c2ce-4fbd-8298-46c1ddb84d0c"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1235,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "bdd3000b-9f27-44a2-b7fb-75aa9396b736",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 271,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle, assetInfo.marketStatusOracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "2f4db801-a82c-48c6-9e26-a31d10b26c7c",
                      "parentUUID": "bdd3000b-9f27-44a2-b7fb-75aa9396b736",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 378,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "4a974d43-9355-4b86-a422-c63572a8f530",
                          "parentUUID": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 243,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "7ca658e0-1739-4f88-9524-cbd39ad6c28a",
                          "parentUUID": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 261,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "4ce95bfd-81ca-4290-a2f2-e10aa902a21f",
                          "parentUUID": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 246,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "2db62a93-20a1-4e31-a5e4-f9436151294e",
                          "parentUUID": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 303,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "2fa16310-7f3e-4f6e-a875-49aba92fefb4",
                          "parentUUID": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 305,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "aed56d96-7271-4e2e-bb11-450ce3bb0fbf",
                          "parentUUID": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 190,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "b81c3732-3d92-4302-9b52-03e76cf0cb78",
                          "parentUUID": "6011c78d-f35c-4761-b917-8b5c4142fce1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "4a974d43-9355-4b86-a422-c63572a8f530",
                        "7ca658e0-1739-4f88-9524-cbd39ad6c28a",
                        "4ce95bfd-81ca-4290-a2f2-e10aa902a21f",
                        "2db62a93-20a1-4e31-a5e4-f9436151294e",
                        "2fa16310-7f3e-4f6e-a875-49aba92fefb4",
                        "aed56d96-7271-4e2e-bb11-450ce3bb0fbf",
                        "b81c3732-3d92-4302-9b52-03e76cf0cb78"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1926,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 237,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "1134ef97-be30-44be-9385-d865f10d8b75",
                          "parentUUID": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 233,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "ad1035a8-9ca9-4d94-bf7d-b2b6b5a22654",
                          "parentUUID": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 240,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "a92b9619-8e90-4be1-bb20-36b21a8af568",
                          "parentUUID": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 241,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "1b18df36-5467-407a-a26a-aec9d7d07b8d",
                          "parentUUID": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 366,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "54987ba7-41cc-4920-923d-faa777603bdb",
                          "parentUUID": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 373,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "ba18c40f-c1e7-4728-867f-05bc41d5d283",
                          "parentUUID": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 442,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, arbitraryUser).withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.bignumber.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "1b8c6aff-55ed-4a2c-a307-189f7d337d28",
                          "parentUUID": "b000120f-32c6-4f33-af64-291a5f1b3a76",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "1134ef97-be30-44be-9385-d865f10d8b75",
                        "ad1035a8-9ca9-4d94-bf7d-b2b6b5a22654",
                        "a92b9619-8e90-4be1-bb20-36b21a8af568",
                        "1b18df36-5467-407a-a26a-aec9d7d07b8d",
                        "54987ba7-41cc-4920-923d-faa777603bdb",
                        "ba18c40f-c1e7-4728-867f-05bc41d5d283",
                        "1b8c6aff-55ed-4a2c-a307-189f7d337d28"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2132,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e049743f-1e36-4392-b954-5df9f4381d4f",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "657b7822-33e2-41a7-943a-9175ce784bc9",
              "parentUUID": "e049743f-1e36-4392-b954-5df9f4381d4f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 291,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18\n};\nthis.collateral = hre.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: _testutils.defaultOpenFee\n};\nthis.krAsset = hre.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, hre.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle, assetInfo.marketStatusOracle));\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hre.users.liquidator, (0, _lib.toBig)(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.liquidator.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(100000000)\n    }\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hre.users.userOne, (0, _lib.toBig)(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(this.defaultDepositAmount)\n    }\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral\n});\n// Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset\n});",
              "err": {},
              "uuid": "0a59ee4d-a4a0-4ce3-8972-83d870dee2c7",
              "parentUUID": "e049743f-1e36-4392-b954-5df9f4381d4f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "55803ea9-dc7f-45d6-a4ce-f38e5e276024",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 700,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmountBig18 = (0, _lib.toBig)(this.defaultDepositAmount * 100);\nconst depositAmountBig8 = (0, _lib.toBig)(this.defaultDepositAmount * 100, 8);\nuser = hre.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hre.users.userOne, depositAmountBig18);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig18\n    }\n});\nnewCollateral = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    decimals: 8,\n    price: 10,\n    factor: 0.9\n});\nawait newCollateral.setBalance(hre.users.userOne, depositAmountBig8);\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig8\n    }\n});",
                  "err": {},
                  "uuid": "616acd91-52f5-47a7-9eee-3bbb4e44eb0b",
                  "parentUUID": "55803ea9-dc7f-45d6-a4ce-f38e5e276024",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 1",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 1",
                  "timedOut": false,
                  "duration": 790,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [deposits, borrows] = [\n    (0, _lib.toBig)(20),\n    (0, _lib.toBig)(10)\n];\nawait this.collateral.setBalance(hre.users.userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.false;\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(2);\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(1);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(hre.users.userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalc = await (0, _liquidations.getExpectedMaxLiq)(hre.users.userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalc).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "8eb18804-aeea-4b16-968b-5052cd46b0e2",
                  "parentUUID": "55803ea9-dc7f-45d6-a4ce-f38e5e276024",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 4147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateMinimumDebtValue(0);\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(10)\n];\nconst borrows = (0, _lib.toBig)(10);\nconst collateralPrice = 10;\nthis.collateral.setPrice(collateralPrice);\nconst collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral18Dec\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nawait this.collateral.setBalance(userThree, deposits1);\nawait collateral2.setBalance(userThree, deposits2);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits2,\n    asset: collateral2\n});\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits1,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nconst cr = await (0, _liquidations.getCR)(userThree.address);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n(0, _chai.expect)(cr).to.be.equal(2);\nawait this.collateral.update({\n    factor: 0.25,\n    name: \"updated\"\n});\nthis.collateral.setPrice(5);\nconst expectedCR = 1.125;\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(expectedCR, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nconst maxLiquidatableValueC1 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalcC1 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalcC1).to.be.closeTo(maxLiquidatableValueC1, USD_DELTA);\nconst maxLiquidatableValueC2 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, collateral2.address);\nconst MLCalcC2 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(MLCalcC2).to.be.closeTo(maxLiquidatableValueC2, USD_DELTA);\n(0, _chai.expect)(maxLiquidatableValueC2.gt(maxLiquidatableValueC1)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                  "err": {},
                  "uuid": "a19530da-0da0-4c2a-a8e7-25d7d2f84806",
                  "parentUUID": "55803ea9-dc7f-45d6-a4ce-f38e5e276024",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with single market cdp",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with single market cdp",
                  "timedOut": false,
                  "duration": 403,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nthis.collateral.setPrice(collateralPriceAfter * 0.7);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "3c89a796-9ed3-4c17-ac6c-5dae409a519c",
                  "parentUUID": "55803ea9-dc7f-45d6-a4ce-f38e5e276024",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 850,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: (0, _lib.toBig)(0.1, 8),\n    asset: newCollateral\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, newCollateral);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, newCollateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral).to.be.closeTo(maxLiquidatableValueNewCollateral, USD_DELTA);",
                  "err": {},
                  "uuid": "33e3212d-4f0a-4a19-83a3-2d9a221a44f3",
                  "parentUUID": "55803ea9-dc7f-45d6-a4ce-f38e5e276024",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8eb18804-aeea-4b16-968b-5052cd46b0e2",
                "a19530da-0da0-4c2a-a8e7-25d7d2f84806",
                "3c89a796-9ed3-4c17-ac6c-5dae409a519c",
                "33e3212d-4f0a-4a19-83a3-2d9a221a44f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6190,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b60d063b-3249-4c0e-a0df-19e4afdff306",
              "title": "#liquidation",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b0c549a4-c4f6-4ff9-a153-1f6584618db4",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 226,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\n(0, _chai.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price > (0, _lib.fromBig)(minCollateralUSD, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)((0, _lib.fromBig)(newCollateralOraclePrice, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "65339b10-3d58-43b1-9bc2-dbd597af504b",
                      "parentUUID": "b0c549a4-c4f6-4ff9-a153-1f6584618db4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "65339b10-3d58-43b1-9bc2-dbd597af504b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 226,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "5242da10-b172-4b35-843c-ac51f0b11b47",
                  "title": "#liquidate",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hre.users.userTwo.address]: (0, _lib.toBig)(10000)\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "0588e9f8-787b-44a7-990d-f3ff40688e45",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 483,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = (0, _lib.toBig)(Number(maxLiq.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "547a0faa-c9af-47c9-a04b-8067c28f51b8",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to LT with a single CDP",
                      "timedOut": false,
                      "duration": 1296,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\nthis.collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\nconst MLM = (0, _lib.fromBig)(await hre.Diamond.maxLiquidationMultiplier(), 18);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4 * MLM, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "2360793e-8376-4b3b-bd30-6e3fe0b97b39",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to LT with multiple CDPs",
                      "timedOut": false,
                      "duration": 3320,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(5)\n];\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait Promise.all([\n    await this.collateral.setBalance(userThree, deposits1),\n    await collateral2.setBalance(userThree, deposits2),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits1,\n        asset: this.collateral\n    }),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits2,\n        asset: collateral2\n    }),\n    await (0, _krassets.mintKrAsset)({\n        user: userThree,\n        amount: borrows,\n        asset: this.krAsset\n    })\n]);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n// seemingly random order of updates to test that the liquidation works regardless\nthis.collateral.setPrice(6.25);\nawait collateral2.update({\n    factor: 0.975,\n    name: \"updated\"\n});\nawait this.krAsset.update({\n    factor: 1.05,\n    name: \"updated\",\n    closeFee: 0.02,\n    openFee: 0,\n    supplyLimit: 1000000\n});\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.05);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral, true);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4, CR_DELTA);\n            // expect(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "7a61a7c9-aa55-4228-8f7d-e440c347d050",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 404,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst collateralIndex = await hre.Diamond.getDepositedCollateralAssetIndex(hre.users.userOne.address, this.collateral.address);\nawait this.krAsset.update({\n    name: \"jesus\",\n    factor: 1.5,\n    supplyLimit: 10000000,\n    closeFee: 0.05,\n    openFee: 0\n});\nconst mintedKreskoAssetIndex = await hre.Diamond.getMintedKreskoAssetsIndex(hre.users.userOne.address, this.krAsset.address);\nconst maxLiqValue = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst repayAmount = maxLiqValue.wadDiv(await this.krAsset.getPrice());\nconst tx = await (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, collateralIndex, false);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"LiquidationOccurred\");\n(0, _chai.expect)(event.account).to.equal(hre.users.userOne.address);\n(0, _chai.expect)(event.liquidator).to.equal(hre.users.userTwo.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "35178bdb-ef86-482f-a7ae-86aff4d2da6d",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 235,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(currUserOneCollateralAmount) * newCollateralPrice > (0, _lib.fromBig)(minimumCollateralUSDValueRequired, 8));\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "56a5b44c-45a5-4c28-b7e7-19088bcebc5b",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "fad4eaa2-43d3-4edd-9615-429faff9d9c6",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 118,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _lib.toBig)(1));\n// Liquidation should fail\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "5428f122-560d-4e62-b84d-1bf8ad7ee729",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 407,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidationUSD = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst repaymentAmount = maxLiquidationUSD.add(1e9.toString()).wadDiv(await this.krAsset.getPrice());\n// Ensure liquidation cannot happen\nconst tx = await (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0, false);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"LiquidationOccurred\");\nconst assetInfo = await this.collateral.kresko();\nconst expectedSeizedCollateralAmount = maxLiquidationUSD.wadMul(_ethers.BigNumber.from(assetInfo.liquidationIncentive)).wadDiv(await this.collateral.getPrice());\n(0, _chai.expect)(event.account).to.equal(hre.users.userOne.address);\n(0, _chai.expect)(event.liquidator).to.equal(hre.users.userTwo.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.repayAmount).to.not.equal(repaymentAmount);\n(0, _chai.expect)(event.repayAmount).to.be.closeTo(maxLiquidationUSD.wadDiv(await this.krAsset.getPrice()), 1e12);\n(0, _chai.expect)(event.collateralSent).to.be.closeTo(expectedSeizedCollateralAmount, 1e12);",
                      "err": {},
                      "uuid": "e8ed91ab-a0d6-4d69-a452-a4e7c55f1ee1",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 303,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hre.Diamond.getAccountCollateralValue(hre.users.userOne.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "42f15c83-8e10-42bd-ae9d-44a3b52ee0f1",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 230,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "23ac8927-3d30-43d0-adfe-ea9675f03e96",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 239,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(hre.users.userTwo).approve(hre.Diamond.address, repayAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex, false)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "0dfe93f0-6152-42f6-b068-31a3fa3a81e0",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0, false)).to.be.revertedWith(_errors.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "b55ab9e9-fc02-44b7-a8fa-6d3fe73ea5ff",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow seized amount to underflow without liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow seized amount to underflow without liquidators permission",
                      "timedOut": false,
                      "duration": 1145,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nthis.collateral.setPrice(2.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait this.collateral.setBalance(hre.users.liquidator, deposits.mul(1000));\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userThree, this.krAsset, this.collateral);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    amount: deposits.mul(1000),\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.liquidator,\n    amount: liqAmount,\n    asset: this.krAsset\n});\nconst allowSeizeUnderflow = false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userThree.address, this.krAsset.address, liqAmount, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userThree.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userThree.address, this.collateral.address), allowSeizeUnderflow)).to.be.revertedWith(_errors.Error.SEIZED_COLLATERAL_UNDERFLOW);",
                      "err": {},
                      "uuid": "5f3b8766-b73a-4811-9506-5ef002f9f179",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow seized amount to underflow with liquidators permission",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow seized amount to underflow with liquidators permission",
                      "timedOut": false,
                      "duration": 1151,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nthis.collateral.setPrice(2.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait this.collateral.setBalance(hre.users.liquidator, deposits.mul(1000));\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userThree, this.krAsset, this.collateral);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    amount: deposits.mul(1000),\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.liquidator,\n    amount: liqAmount,\n    asset: this.krAsset\n});\nconst allowSeizeUnderflow = true;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userThree.address, this.krAsset.address, liqAmount, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userThree.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userThree.address, this.collateral.address), allowSeizeUnderflow)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "35a28838-6f5d-4c27-853c-7b7e86e9db1c",
                      "parentUUID": "5242da10-b172-4b35-843c-ac51f0b11b47",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "547a0faa-c9af-47c9-a04b-8067c28f51b8",
                    "2360793e-8376-4b3b-bd30-6e3fe0b97b39",
                    "7a61a7c9-aa55-4228-8f7d-e440c347d050",
                    "35178bdb-ef86-482f-a7ae-86aff4d2da6d",
                    "56a5b44c-45a5-4c28-b7e7-19088bcebc5b",
                    "fad4eaa2-43d3-4edd-9615-429faff9d9c6",
                    "5428f122-560d-4e62-b84d-1bf8ad7ee729",
                    "e8ed91ab-a0d6-4d69-a452-a4e7c55f1ee1",
                    "42f15c83-8e10-42bd-ae9d-44a3b52ee0f1",
                    "23ac8927-3d30-43d0-adfe-ea9675f03e96",
                    "0dfe93f0-6152-42f6-b068-31a3fa3a81e0",
                    "b55ab9e9-fc02-44b7-a8fa-6d3fe73ea5ff",
                    "5f3b8766-b73a-4811-9506-5ef002f9f179",
                    "35a28838-6f5d-4c27-853c-7b7e86e9db1c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9376,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 1871,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hre.users.testUserEight;\nuserToLiquidateTwo = hre.users.testUserNine;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits\n});\nawait (0, _testutils.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _testutils.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nconst mcr = (0, _lib.fromBig)(await hre.Diamond.minimumCollateralizationRatio(), 8);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidate.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidateTwo.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "dbc9c124-1c08-4eb9-9a88-5db537d91c49",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 344,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "dcc6de5d-5018-4cf8-a7fc-c93df86cd76d",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 241,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address), false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "867ede9b-b297-4917-a146-fa7849dfce5b",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 1242,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "c70609a3-b851-4bdf-ae66-05c5f4f15965",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 1247,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "cc570ad9-385d-4849-b2b8-014a8f90c241",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 2342,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 10;\nawait this.collateral.setBalance(userToLiquidate, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).depositCollateral(userToLiquidate.address, this.collateral.address, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).mintKreskoAsset(userToLiquidate.address, (await (0, _krassets.addMockKreskoAsset)()).address, (0, _lib.toBig)(65));\nthis.krAsset.setPrice(newPrice);\nconst deposits = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\nconst debt = await hre.Diamond.kreskoAssetDebt(userToLiquidate.address, this.krAsset.address);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userToLiquidate, this.krAsset, this.krAsset);\n(0, _chai.expect)(deposits).to.equal(liqAmount);\n(0, _chai.expect)(debt).to.gte(liqAmount);\nawait this.krAsset.setBalance(hre.users.liquidator, debt);\nconst assetInfoCollateral = await hre.Diamond.collateralAsset(this.krAsset.address);\nconst assetInfoKr = await hre.Diamond.kreskoAsset(this.krAsset.address);\nconst liquidationAmount = liqAmount.add(\"263684912200000000\").wadDiv(assetInfoCollateral.liquidationIncentive).wadMul(_ethers.BigNumber.from(_lib.WAD).sub(assetInfoKr.closeFee)).add(_lib.WAD);\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, liquidationAmount, this.krAsset.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.krAsset.address), false);\nconst depositsAfter = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "dffcc158-bf3f-4bec-b994-f453b42030ed",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals to 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals to 0",
                      "timedOut": false,
                      "duration": 2150,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 10;\nawait this.collateral.setBalance(userToLiquidate, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).depositCollateral(userToLiquidate.address, this.collateral.address, (0, _lib.toBig)(100));\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, userToLiquidate).mintKreskoAsset(userToLiquidate.address, (await (0, _krassets.addMockKreskoAsset)()).address, (0, _lib.toBig)(65));\nthis.krAsset.setPrice(newPrice);\nconst deposits = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\nconst debt = await hre.Diamond.kreskoAssetDebt(userToLiquidate.address, this.krAsset.address);\nconst liqAmount = await (0, _liquidations.getLiqAmount)(userToLiquidate, this.krAsset, this.krAsset);\n(0, _chai.expect)(deposits).to.equal(liqAmount);\n(0, _chai.expect)(debt).to.gte(liqAmount);\nawait this.krAsset.setBalance(hre.users.liquidator, debt);\nconst assetInfoCollateral = await hre.Diamond.collateralAsset(this.krAsset.address);\nconst assetInfoKr = await hre.Diamond.kreskoAsset(this.krAsset.address);\nconst liquidationAmount = liqAmount.add(\"263684912400000000\").wadDiv(assetInfoCollateral.liquidationIncentive).wadMul(_ethers.BigNumber.from(_lib.WAD).sub(assetInfoKr.closeFee)).add(_lib.WAD);\nawait (0, _testutils.wrapContractWithSigner)(hre.Diamond, hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, liquidationAmount, this.krAsset.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.krAsset.address), false);\nconst depositsAfter = await hre.Diamond.collateralDeposits(userToLiquidate.address, this.krAsset.address);\n(0, _chai.expect)(depositsAfter).to.equal(0);",
                      "err": {},
                      "uuid": "7e003118-582e-4e13-94fd-be8df65b35ad",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 4274,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "46f9283a-c692-45a6-8b7b-1b879411abfe",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 4307,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "7042e3db-189c-4cac-89c1-c44fe2abeb68",
                      "parentUUID": "a1986ed2-4641-49ff-ab84-df54cb32950d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dcc6de5d-5018-4cf8-a7fc-c93df86cd76d",
                    "867ede9b-b297-4917-a146-fa7849dfce5b",
                    "c70609a3-b851-4bdf-ae66-05c5f4f15965",
                    "cc570ad9-385d-4849-b2b8-014a8f90c241",
                    "dffcc158-bf3f-4bec-b994-f453b42030ed",
                    "7e003118-582e-4e13-94fd-be8df65b35ad",
                    "46f9283a-c692-45a6-8b7b-1b879411abfe",
                    "7042e3db-189c-4cac-89c1-c44fe2abeb68"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 16147,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8a902982-4638-4321-ad2f-4dbd025faee8",
          "title": "Minter",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "fd311759-dc4b-4e37-9a6d-815065e26d61",
              "parentUUID": "8a902982-4638-4321-ad2f-4dbd025faee8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 58,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\nthis.krAsset.setMarketOpen(this.krAsset.deployArgs.marketOpen);\n// Load account with collateral\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.setBalance(_hardhat.default.users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, _collaterals.depositCollateral)({\n    amount: 10000,\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral\n});",
              "err": {},
              "uuid": "36dcc1f2-8307-4c51-8000-03ea4b4f3561",
              "parentUUID": "8a902982-4638-4321-ad2f-4dbd025faee8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d05e5289-a7b4-4c8b-9380-961aa1e17901",
              "title": "#mint+burn",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                  "title": "#mint",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 210,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "dde889a5-af5f-486b-8d02-9deb15c5041c",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 416,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(50);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(50);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "7835a06c-7716-4032-a2a3-a4445628c33c",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 1362,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: 0\n};\nconst { contract: secondKreskoAsset  } = await (0, _krassets.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(20);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address,\n    secondKreskoAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, secondKreskoAsset.address);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "3d4a3450-7bb0-4112-9bd0-23d9250730fa",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 235,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _lib.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)((0, _lib.fromBig)(mintAmountUSDValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "13bc629b-bfb3-4b0d-bda0-cc1989f1655b",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 225,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _lib.toBig)(10);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "22349da5-203f-4c02-83bd-3b718cdda014",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 130,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, _lib.toBig)(500);\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetMinted\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "e6603b55-b59e-46da-a21e-579ba80375c8",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(1);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "23b04a28-ce6b-457e-9f50-982122a371a5",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 178,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "a3255065-534c-449b-8196-beca0c8e6784",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 20,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "a1b43f96-ba1f-4923-aaf8-53dffebca734",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 91,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, _lib.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, _lib.toBig)(mcrAmount + 1);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "e57d7ad6-8a93-442c-af58-382ec032e78d",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).depositCollateral(_hardhat.default.users.userOne.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await _hardhat.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, _lib.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(overSupplyLimit))).to.be.revertedWith(_errors.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "290d1853-d01d-4fbe-b510-24a06c95f060",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 193,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.krAsset.setMarketOpen(false);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_MARKET_CLOSED);\n// Confirm that the user has no minted krAssets\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Confirm that opening the market makes krAsset mintable again\nthis.krAsset.setMarketOpen(true);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(10));\n// Confirm the array of the user's minted Kresko assets has been pushed to\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);",
                      "err": {},
                      "uuid": "7e97b70e-d9ef-47db-b815-68060f94ac42",
                      "parentUUID": "f3f5380a-e54c-42ac-82f0-65577d21f9bd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dde889a5-af5f-486b-8d02-9deb15c5041c",
                    "7835a06c-7716-4032-a2a3-a4445628c33c",
                    "3d4a3450-7bb0-4112-9bd0-23d9250730fa",
                    "13bc629b-bfb3-4b0d-bda0-cc1989f1655b",
                    "22349da5-203f-4c02-83bd-3b718cdda014",
                    "e6603b55-b59e-46da-a21e-579ba80375c8",
                    "23b04a28-ce6b-457e-9f50-982122a371a5",
                    "a3255065-534c-449b-8196-beca0c8e6784",
                    "a1b43f96-ba1f-4923-aaf8-53dffebca734",
                    "e57d7ad6-8a93-442c-af58-382ec032e78d",
                    "290d1853-d01d-4fbe-b510-24a06c95f060",
                    "7e97b70e-d9ef-47db-b815-68060f94ac42"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3192,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "0ad97a0d-2fd0-4e8d-ac4e-599dc24d9949",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "f3931ca2-c521-4428-969c-d4443bdfe1ba",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 202,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "e69d92e6-0986-4c18-8528-5948793534f2",
                          "parentUUID": "f3931ca2-c521-4428-969c-d4443bdfe1ba",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 192,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "d4119c42-1429-4722-8fae-c1dfb04cde57",
                          "parentUUID": "f3931ca2-c521-4428-969c-d4443bdfe1ba",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 191,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "ca156252-1cbc-4175-8ea3-17464b2113e6",
                          "parentUUID": "f3931ca2-c521-4428-969c-d4443bdfe1ba",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 198,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "5d14ad52-be90-47a2-919d-00639b235247",
                          "parentUUID": "f3931ca2-c521-4428-969c-d4443bdfe1ba",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e69d92e6-0986-4c18-8528-5948793534f2",
                        "d4119c42-1429-4722-8fae-c1dfb04cde57",
                        "ca156252-1cbc-4175-8ea3-17464b2113e6",
                        "5d14ad52-be90-47a2-919d-00639b235247"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 783,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "3e714016-53c6-4422-b2ae-112af163368a",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 252,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "5897ba2c-0c06-4938-8548-15a5e352f2cd",
                          "parentUUID": "3e714016-53c6-4422-b2ae-112af163368a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 248,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "d9cb238c-858a-4263-a929-5ebfc0eeda41",
                          "parentUUID": "3e714016-53c6-4422-b2ae-112af163368a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 239,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "961896ac-7c00-490f-a0b3-7aef18470672",
                          "parentUUID": "3e714016-53c6-4422-b2ae-112af163368a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 237,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "8d1034c7-48b9-499e-96ac-b7e9424e1a9e",
                          "parentUUID": "3e714016-53c6-4422-b2ae-112af163368a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5897ba2c-0c06-4938-8548-15a5e352f2cd",
                        "d9cb238c-858a-4263-a929-5ebfc0eeda41",
                        "961896ac-7c00-490f-a0b3-7aef18470672",
                        "8d1034c7-48b9-499e-96ac-b7e9424e1a9e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 976,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "db4d5399-f5f0-4c5a-b2a8-caaf6c1a6850",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 586,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(valueBeforeRebase);\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "d9903cc3-290e-4fa3-950a-10481bcfd958",
                          "parentUUID": "db4d5399-f5f0-4c5a-b2a8-caaf6c1a6850",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 604,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, this.krAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "b17e613c-e776-48ac-8a09-ff0dfddb9572",
                          "parentUUID": "db4d5399-f5f0-4c5a-b2a8-caaf6c1a6850",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d9903cc3-290e-4fa3-950a-10481bcfd958",
                        "b17e613c-e776-48ac-8a09-ff0dfddb9572"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1190,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                  "title": "#burn",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 295,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, _lib.toBig)(20);\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userThree.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userThree.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.users.userThree.address)).to.equal(this.initialBalance);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).depositCollateral(_hardhat.default.users.userThree.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "24d3f8f4-585c-4768-9b9c-e4f5c95f87a8",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 197,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "534c0ac1-ed6b-4c90-909b-ad2a92679600",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9b2a7ac2-9c12-43c5-abe8-8e1631816353",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 235,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userThree.address);\n(0, _chai.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "b10b08b7-c2e6-4540-87fb-ad4f1d80f843",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "7e1bd16b-a855-430c-a003-0f6bd3e485b7",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 239,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, _lib.fromBig)(await _hardhat.default.Diamond.minimumDebtValue(), 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = (0, _lib.toBig)((0, _lib.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "6be29ff1-d5e7-4ff3-a123-b310caa2942d",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 141,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetBurned\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "5f4bade3-399e-4771-8f22-39f290c8b8ce",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 291,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "df9af3bc-8166-422f-a21b-3f4513c6c338",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(_errors.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "f835368d-5b71-4d06-b150-e647557cc941",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "f2b9c32f-11c8-4b6f-be7b-18e51c38f03b",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add((0, _lib.toBig)(1));\nawait (0, _chai.expect)((0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "6070d1a0-4b6b-447f-84cb-feb456af3f2c",
                      "parentUUID": "735e78ac-8915-4dde-b732-33f3cb68d50b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "d65a7dcf-2b93-4ae6-b34b-5699c0928aad",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 373,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, _lib.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._testutils.defaultKrAssetArgs,\n    openFee\n});\nconst mintAmount = (0, _lib.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"OpenFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await _hardhat.default.Diamond.calcExpectedFee(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount, _testutils.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, _chai.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "1bfb80e7-8d89-4a6f-9964-6fb42c06f076",
                          "parentUUID": "d65a7dcf-2b93-4ae6-b34b-5699c0928aad",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "1bfb80e7-8d89-4a6f-9964-6fb42c06f076"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 373,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "a82cc4df-10c5-489a-8328-6236610e399d",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 192,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _lib.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, _lib.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "a8d1023c-1abd-47f2-940b-998c88834817",
                          "parentUUID": "a82cc4df-10c5-489a-8328-6236610e399d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 807,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "7d7ebc92-77d2-4643-8f1d-7f8b8e6415b1",
                          "parentUUID": "a82cc4df-10c5-489a-8328-6236610e399d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 732,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "3a1bdf13-2692-4975-923c-11d084fcc9ea",
                          "parentUUID": "a82cc4df-10c5-489a-8328-6236610e399d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a8d1023c-1abd-47f2-940b-998c88834817",
                        "7d7ebc92-77d2-4643-8f1d-7f8b8e6415b1",
                        "3a1bdf13-2692-4975-923c-11d084fcc9ea"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1731,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "534c0ac1-ed6b-4c90-909b-ad2a92679600",
                    "b10b08b7-c2e6-4540-87fb-ad4f1d80f843",
                    "6be29ff1-d5e7-4ff3-a123-b310caa2942d",
                    "5f4bade3-399e-4771-8f22-39f290c8b8ce",
                    "df9af3bc-8166-422f-a21b-3f4513c6c338",
                    "f835368d-5b71-4d06-b150-e647557cc941",
                    "f2b9c32f-11c8-4b6f-be7b-18e51c38f03b",
                    "6070d1a0-4b6b-447f-84cb-feb456af3f2c"
                  ],
                  "failures": [],
                  "pending": [
                    "9b2a7ac2-9c12-43c5-abe8-8e1631816353",
                    "7e1bd16b-a855-430c-a003-0f6bd3e485b7"
                  ],
                  "skipped": [],
                  "duration": 1213,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "227cf457-a761-4836-a129-26b6dcd5ea32",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 127,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmountInt,\n    user: _hardhat.default.users.userOne\n});",
                      "err": {},
                      "uuid": "a114c1fd-7333-4b97-a063-705c4953e9a5",
                      "parentUUID": "227cf457-a761-4836-a129-26b6dcd5ea32",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "d06bbb6b-9555-4ac3-89e5-9f0f209bba71",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 212,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.closeTo((0, _lib.toBig)(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "7cae74de-ca50-4525-9b5e-1d924ac9d48d",
                          "parentUUID": "d06bbb6b-9555-4ac3-89e5-9f0f209bba71",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 211,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "f1ae1b8b-5654-4a8a-a611-2733c98ba0f7",
                          "parentUUID": "d06bbb6b-9555-4ac3-89e5-9f0f209bba71",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 215,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _lib.toBig)(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "cdec7e8c-fb20-470a-87fd-f8a0147af829",
                          "parentUUID": "d06bbb6b-9555-4ac3-89e5-9f0f209bba71",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 210,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "4b5f8ded-2641-4059-ae55-7b14e84f58c2",
                          "parentUUID": "d06bbb6b-9555-4ac3-89e5-9f0f209bba71",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "7cae74de-ca50-4525-9b5e-1d924ac9d48d",
                        "f1ae1b8b-5654-4a8a-a611-2733c98ba0f7",
                        "cdec7e8c-fb20-470a-87fd-f8a0147af829",
                        "4b5f8ded-2641-4059-ae55-7b14e84f58c2"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 848,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "40ac8536-881a-463b-acc2-c5dc0ea378c2",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 230,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "380042d0-4ae3-4329-b7ce-928c8d1f95d7",
                          "parentUUID": "40ac8536-881a-463b-acc2-c5dc0ea378c2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 319,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "e266b3ea-b6e0-4372-87f4-9b5885314517",
                          "parentUUID": "40ac8536-881a-463b-acc2-c5dc0ea378c2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 230,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "875caaf8-46a5-411c-a3e7-c1b8dccea836",
                          "parentUUID": "40ac8536-881a-463b-acc2-c5dc0ea378c2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 303,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = (0, _testutils.wrapContractWithSigner)(_hardhat.default.Diamond, _hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "6a90a18b-86a8-4336-9339-7e66818c4c6a",
                          "parentUUID": "40ac8536-881a-463b-acc2-c5dc0ea378c2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "380042d0-4ae3-4329-b7ce-928c8d1f95d7",
                        "e266b3ea-b6e0-4372-87f4-9b5885314517",
                        "875caaf8-46a5-411c-a3e7-c1b8dccea836",
                        "6a90a18b-86a8-4336-9339-7e66818c4c6a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1082,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a029be47-8348-4ebd-a52c-4196fa1f6e34",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a703e58d-7f04-47b1-9b83-e5a902919d52",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f0f385c6-b61d-4297-bb94-34906292283a",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should withdraw correct amount",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "732053a3-9e14-434a-8d84-4d4d7651ca76",
                      "parentUUID": "f0f385c6-b61d-4297-bb94-34906292283a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "a2ffc56a-bbec-4dfe-bf38-d1aa2b0606e7",
                      "parentUUID": "f0f385c6-b61d-4297-bb94-34906292283a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "fd2f9f56-60a8-43dd-95dc-9d5bc4cc3865",
                      "parentUUID": "f0f385c6-b61d-4297-bb94-34906292283a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "6b453c17-ef6b-4cbf-9e77-980e92beed95",
                      "parentUUID": "f0f385c6-b61d-4297-bb94-34906292283a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "ab7e82e4-ead1-4009-80a2-297f9c31255b",
                      "parentUUID": "f0f385c6-b61d-4297-bb94-34906292283a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "732053a3-9e14-434a-8d84-4d4d7651ca76",
                    "a2ffc56a-bbec-4dfe-bf38-d1aa2b0606e7",
                    "fd2f9f56-60a8-43dd-95dc-9d5bc4cc3865",
                    "6b453c17-ef6b-4cbf-9e77-980e92beed95",
                    "ab7e82e4-ead1-4009-80a2-297f9c31255b"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "24e10e82-3be6-4564-8fe4-2eddf77a5e47",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "3caae982-cecb-4b25-a998-5986290b6f77",
                      "parentUUID": "24e10e82-3be6-4564-8fe4-2eddf77a5e47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "41f95abe-185a-4a98-b1ae-058e8cbf5a10",
                      "parentUUID": "24e10e82-3be6-4564-8fe4-2eddf77a5e47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "388bb25c-3d15-4f0a-beac-b9f9a984c450",
                      "parentUUID": "24e10e82-3be6-4564-8fe4-2eddf77a5e47",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "c6384a13-f742-458f-a503-78d0469266f8",
                      "parentUUID": "24e10e82-3be6-4564-8fe4-2eddf77a5e47",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "3caae982-cecb-4b25-a998-5986290b6f77",
                    "41f95abe-185a-4a98-b1ae-058e8cbf5a10",
                    "388bb25c-3d15-4f0a-beac-b9f9a984c450",
                    "c6384a13-f742-458f-a503-78d0469266f8"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b792f1a4-aea8-42fd-b0aa-5fba74d81352",
          "title": "Oracle",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/oracle/00-feeds-and-redstone.ts",
          "file": "/src/test/oracle/00-feeds-and-redstone.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Oracle\"",
              "fullTitle": "Oracle \"before each\" hook in \"Oracle\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "7ec1bef0-7a1f-426e-ac40-cc5acf1d8ba1",
              "parentUUID": "b792f1a4-aea8-42fd-b0aa-5fba74d81352",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Oracle\"",
              "fullTitle": "Oracle \"before each\" hook in \"Oracle\"",
              "timedOut": false,
              "duration": 75,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nconst name = \"TEST\";\nconst decimals = 8;\nconst descriptionFeed = \"Test description\";\nconst feed = await _hardhat.default.run(_tasks.TASK_DEPLOY_PRICE_FEED, {\n    name,\n    decimals,\n    description: descriptionFeed,\n    log: false\n});\nthis.deployer = await _hardhat.default.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await _hardhat.default.ethers.getNamedSigner(\"userOne\");\nthis.pricefeed = feed;",
              "err": {},
              "uuid": "9374167b-f041-42a1-98c1-1f561a80c062",
              "parentUUID": "b792f1a4-aea8-42fd-b0aa-5fba74d81352",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
              "title": "FluxPriceFeed",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/oracle/00-feeds-and-redstone.ts",
              "file": "/src/test/oracle/00-feeds-and-redstone.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize timestamp value once the initial answer is submitted",
                  "fullTitle": "Oracle FluxPriceFeed should initialize timestamp value once the initial answer is submitted",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.pricefeed.latestTimestamp()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(Number(await this.pricefeed.latestTimestamp())).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "bc55421e-3fa7-4c12-88f1-1a0cc77a817b",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestAnswer once it's changed",
                  "fullTitle": "Oracle FluxPriceFeed should return latestAnswer once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7e54cbb5-683d-4cc6-ab8d-2f8ff544e624",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen once it's changed",
                  "fullTitle": "Oracle FluxPriceFeed should return marketOpen once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "600fa1d3-cf42-4929-8442-6ac8ec5a4f90",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-validator to change values",
                  "fullTitle": "Oracle FluxPriceFeed should not allow non-validator to change values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f4aed6de-a089-4d0c-ab91-328e6bd6374d",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return description",
                  "fullTitle": "Oracle FluxPriceFeed should return description",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.pricefeed.description()).to.equal(\"Test description\");",
                  "err": {},
                  "uuid": "f660ee16-513b-4685-9a83-d6f9ca43fda7",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return decimals",
                  "fullTitle": "Oracle FluxPriceFeed should return decimals",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.pricefeed.decimals()).to.equal(8);",
                  "err": {},
                  "uuid": "54be22f8-cdf2-4686-969c-06cfc3c2c603",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRoundData correctly",
                  "fullTitle": "Oracle FluxPriceFeed should return latestRoundData correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b2b14382-b722-4ee5-a8ec-a05a560f4bac",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getRoundData correctly",
                  "fullTitle": "Oracle FluxPriceFeed should return getRoundData correctly",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\nconst roundDataCall = await this.pricefeed.getRoundData(1);\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber()\n};\n(0, _chai.expect)(roundData.roundId).to.gt(0);\n(0, _chai.expect)(roundData.startedAt).to.gt(0);\n(0, _chai.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, _chai.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, _chai.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, _chai.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "989a5387-1c79-498f-ab3d-2d4e2c1a7b61",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getAnswer correctly",
                  "fullTitle": "Oracle FluxPriceFeed should return getAnswer correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(await this.pricefeed.getAnswer(1)).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "d1915dd6-0ee6-4906-8cbf-8b68d0c4bf04",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen correctly",
                  "fullTitle": "Oracle FluxPriceFeed should return marketOpen correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(await this.pricefeed.getMarketOpen(1)).to.equal(true);",
                  "err": {},
                  "uuid": "4b6dedd0-54e8-4c59-9718-df8b02fb5f0b",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRound correctly",
                  "fullTitle": "Oracle FluxPriceFeed should return latestRound correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(await this.pricefeed.latestRound()).to.equal(1);",
                  "err": {},
                  "uuid": "e30689b9-89e6-4230-aeb0-4c811262680a",
                  "parentUUID": "a912e40f-2d5a-41ff-8da0-de155f7ca333",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc55421e-3fa7-4c12-88f1-1a0cc77a817b",
                "f660ee16-513b-4685-9a83-d6f9ca43fda7",
                "54be22f8-cdf2-4686-969c-06cfc3c2c603",
                "989a5387-1c79-498f-ab3d-2d4e2c1a7b61",
                "d1915dd6-0ee6-4906-8cbf-8b68d0c4bf04",
                "4b6dedd0-54e8-4c59-9718-df8b02fb5f0b",
                "e30689b9-89e6-4230-aeb0-4c811262680a"
              ],
              "failures": [],
              "pending": [
                "7e54cbb5-683d-4cc6-ab8d-2f8ff544e624",
                "600fa1d3-cf42-4929-8442-6ac8ec5a4f90",
                "f4aed6de-a089-4d0c-ab91-328e6bd6374d",
                "b2b14382-b722-4ee5-a8ec-a05a560f4bac"
              ],
              "skipped": [],
              "duration": 61,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "2e78d895-c4ec-4c60-aded-139b5f2841ba",
              "title": "Redstone",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/oracle/00-feeds-and-redstone.ts",
              "file": "/src/test/oracle/00-feeds-and-redstone.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Redstone\"",
                  "fullTitle": "Oracle Redstone \"before each\" hook in \"Redstone\"",
                  "timedOut": false,
                  "duration": 77,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { ethers  } = _hardhat.default;\nredstoneCollateral = this.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\n/// set initial collateral price\nredstoneCollateral.setPrice(10);\nconst initialBalance = (0, _lib.toBig)(100000);\nawait redstoneCollateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: initialBalance\n});\nawait redstoneCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: initialBalance\n    }\n});\nconst MockSequencerUptimeFeed = await ethers.getContractFactory(\"MockSequencerUptimeFeed\");\nmockSequencerUptimeFeed = await MockSequencerUptimeFeed.deploy();\nthis.depositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: redstoneCollateral,\n    amount: (0, _lib.toBig)(1)\n};\nawait _hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, redstoneCollateral.address, this.depositArgs.amount);\n// check initial conditions\n(0, _chai.expect)(await redstoneCollateral.getPrice()).to.equal((0, _lib.toBig)(10, 8), \"collateral price should be $10\");\n// As redstone price is 0, will use chainlink price = 10\n// so collateral value = $10 * 1 = $10\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(10, 8), \"collateral value should be $10\");",
                  "err": {},
                  "uuid": "26fdc84d-ca48-4d0a-a3db-841e6c6b4c03",
                  "parentUUID": "2e78d895-c4ec-4c60-aded-139b5f2841ba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Oracle Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nredstoneCollateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// so collateral value = $20 * 1 = $20\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(redstoneCollateralPrice, 8), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "1807f172-f7fc-4faa-a1e1-37b9d49fb44e",
                  "parentUUID": "2e78d895-c4ec-4c60-aded-139b5f2841ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get chainlink price when price +- oracleDeviationPct of redstone price ",
                  "fullTitle": "Oracle Redstone should get chainlink price when price +- oracleDeviationPct of redstone price ",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 12\nredstoneCollateral.setPrice(12);\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// so collateral value = $12 * 1 = $12\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.equal((0, _lib.toBig)(12, 8), \"collateral value should be $20\");",
                  "err": {},
                  "uuid": "10c31ac5-180e-4bef-9d2d-d6317ebcaaa1",
                  "parentUUID": "2e78d895-c4ec-4c60-aded-139b5f2841ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Oracle Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nredstoneCollateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n// should revert if price deviates more than oracleDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.be.revertedWith(_test.Error.ORACLE_PRICE_UNSTABLE);\nredstoneCollateral.setPrice(10);",
                  "err": {},
                  "uuid": "bb31ae5d-1f4a-4dfd-9f0d-f3a42bc83f42",
                  "parentUUID": "2e78d895-c4ec-4c60-aded-139b5f2841ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return redstone price if sequencer is down",
                  "fullTitle": "Oracle Redstone should return redstone price if sequencer is down",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 5\nredstoneCollateral.setPrice(5);\nconst redstoneCollateralPrice = 200;\nconst redstoneDiamond = _evmconnector.WrapperBuilder.wrap(_hardhat.default.Diamond.connect(this.deployer)).usingSimpleNumericMock({\n    mockSignersCount: 1,\n    timestampMilliseconds: Date.now(),\n    dataPoints: [\n        {\n            dataFeedId: \"USDC\",\n            value: redstoneCollateralPrice\n        }\n    ]\n});\n/// set sequencer uptime feed address\nawait redstoneDiamond.updateSequencerUptimeFeed(mockSequencerUptimeFeed.address);\n// should return redstone price if sequencer is down\n(0, _chai.expect)(await redstoneDiamond.getAccountCollateralValue(_hardhat.default.users.userOne.address)).to.be.equal((0, _lib.toBig)(redstoneCollateralPrice, 8), \"collateral value should be $200\");\nredstoneCollateral.setPrice(10);",
                  "err": {},
                  "uuid": "32ffc421-00b1-46c1-96ef-3513819c1903",
                  "parentUUID": "2e78d895-c4ec-4c60-aded-139b5f2841ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1807f172-f7fc-4faa-a1e1-37b9d49fb44e",
                "10c31ac5-180e-4bef-9d2d-d6317ebcaaa1",
                "bb31ae5d-1f4a-4dfd-9f0d-f3a42bc83f42",
                "32ffc421-00b1-46c1-96ef-3513819c1903"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "0346e0e0-e66a-4ab3-a7fb-7fc4b48b83ce",
          "title": "Safety Council",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "a2b1552f-c043-4822-aabc-e0933b8005c3",
              "parentUUID": "0346e0e0-e66a-4ab3-a7fb-7fc4b48b83ce",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = _hardhat.default.collaterals.find((asset)=>asset.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer , devTwo , extOne , extTwo , extThree  } = await _hardhat.default.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;\nthis.extThree = extThree;",
              "err": {},
              "uuid": "1c642567-1294-495f-97fc-120a80bc3733",
              "parentUUID": "0346e0e0-e66a-4ab3-a7fb-7fc4b48b83ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "597a113a-259c-4b12-b8cb-39e6308ddca6",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await _hardhat.default.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"setSafetyStateSet\", [\n    true\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst safetyState = await _hardhat.default.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "6a74b179-003d-42de-8272-8da32e2d80f6",
                  "parentUUID": "597a113a-259c-4b12-b8cb-39e6308ddca6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a74b179-003d-42de-8272-8da32e2d80f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "01657df8-12cd-4c8a-8941-0ab8f63a9357",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "44cb5a82-7a4d-4e68-90c7-bdc6c046cbfa",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "bff983b5-53d8-41c8-bdfe-60880c8e0fbf",
                      "parentUUID": "44cb5a82-7a4d-4e68-90c7-bdc6c046cbfa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "f70ce2ab-4552-4191-9d4c-565f221690bd",
                      "parentUUID": "44cb5a82-7a4d-4e68-90c7-bdc6c046cbfa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo,\n    this.extThree\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "3e06a1c2-779d-4220-bc96-126426fd5961",
                      "parentUUID": "44cb5a82-7a4d-4e68-90c7-bdc6c046cbfa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 39,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "3eefbe3f-d8a6-46ea-8dd7-198dc3625513",
                      "parentUUID": "44cb5a82-7a4d-4e68-90c7-bdc6c046cbfa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bff983b5-53d8-41c8-bdfe-60880c8e0fbf",
                    "f70ce2ab-4552-4191-9d4c-565f221690bd",
                    "3e06a1c2-779d-4220-bc96-126426fd5961",
                    "3eefbe3f-d8a6-46ea-8dd7-198dc3625513"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 209,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "4f3fddc5-4630-44a5-9416-02c75e5ed6ba",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "70216d04-32f7-413f-94e0-98f8e588f0c5",
                      "parentUUID": "4f3fddc5-4630-44a5-9416-02c75e5ed6ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.krAsset.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.krAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "73e80a3f-b08d-4d89-9f04-f752659e8b8e",
                      "parentUUID": "4f3fddc5-4630-44a5-9416-02c75e5ed6ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = _hardhat.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        randomAddr\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "320a1b73-89df-4904-9690-5f4b130a5b51",
                      "parentUUID": "4f3fddc5-4630-44a5-9416-02c75e5ed6ba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "70216d04-32f7-413f-94e0-98f8e588f0c5",
                    "73e80a3f-b08d-4d89-9f04-f752659e8b8e",
                    "320a1b73-89df-4904-9690-5f4b130a5b51"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 166,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "09a42982-acb7-42f2-8a65-66bb9bb23358",
                  "title": "duration based pausing",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "0c55666c-94b0-4a0c-ac7e-1ea329a6882d",
                      "parentUUID": "09a42982-acb7-42f2-8a65-66bb9bb23358",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockBefore = await _hardhat.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, _chai.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait _hardhat.default.ethers.provider.send(\"evm_increaseTime\", [\n    sevenDays\n]);\nawait _hardhat.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockAfter = await _hardhat.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, _chai.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, _chai.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, _chai.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n            // NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "515df5c5-b48a-4870-95fd-728b66240274",
                      "parentUUID": "09a42982-acb7-42f2-8a65-66bb9bb23358",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0c55666c-94b0-4a0c-ac7e-1ea329a6882d",
                    "515df5c5-b48a-4870-95fd-728b66240274"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 112,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "1035537d-e124-4be9-984f-8063368ab2cb",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "b02a8c20-b80c-4d88-816c-bb4c23f9624b",
                      "parentUUID": "1035537d-e124-4be9-984f-8063368ab2cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "343d3dd7-1c92-413b-9101-d1e70483830e",
                      "parentUUID": "1035537d-e124-4be9-984f-8063368ab2cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "701cced4-0d67-484e-b476-5633fb79e986",
                      "parentUUID": "1035537d-e124-4be9-984f-8063368ab2cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "caaacdf7-41fb-4268-a0b4-03c68c343b33",
                      "parentUUID": "1035537d-e124-4be9-984f-8063368ab2cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "901004b5-8309-4236-914f-6e4a87d7f0b9",
                      "parentUUID": "1035537d-e124-4be9-984f-8063368ab2cb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b02a8c20-b80c-4d88-816c-bb4c23f9624b",
                    "343d3dd7-1c92-413b-9101-d1e70483830e",
                    "701cced4-0d67-484e-b476-5633fb79e986",
                    "caaacdf7-41fb-4268-a0b4-03c68c343b33",
                    "901004b5-8309-4236-914f-6e4a87d7f0b9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 541,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "3f2975f5-04b4-4b55-8cab-b7d8d394f40e",
                  "title": "event emission",
                  "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"SafetyStateChange\");\n(0, _chai.expect)(event.action).to.equal(_testutils.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(_hardhat.default.ethers.utils.keccak256(_hardhat.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "b47ffb2f-d561-4d9a-8457-5669ae77fb95",
                      "parentUUID": "3f2975f5-04b4-4b55-8cab-b7d8d394f40e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b47ffb2f-d561-4d9a-8457-5669ae77fb95"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 35,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7ae6431e-92bd-4eb1-8699-e40884ee359f",
          "title": "Interest Rates",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/00-init.ts",
          "file": "/src/test/stability-rate/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "50a88329-bad1-4961-9085-66d524d051c6",
              "parentUUID": "7ae6431e-92bd-4eb1-8699-e40884ee359f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);",
              "err": {},
              "uuid": "5e21a772-6d24-4e7b-aa42-910c4429b0e4",
              "parentUUID": "7ae6431e-92bd-4eb1-8699-e40884ee359f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31680ddb-9432-4a03-a847-0c2303ebf728",
              "title": "#init",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/00-init.ts",
              "file": "/src/test/stability-rate/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initializes correct stability rates",
                  "fullTitle": "Interest Rates #init initializes correct stability rates",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = await _hardhat.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, _chai.expect)(config.debtIndex).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.stabilityRate).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, _chai.expect)(config.rateSlope1).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.rateSlope1);\n(0, _chai.expect)(config.rateSlope2).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.rateSlope2);\n(0, _chai.expect)(config.stabilityRateBase).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.stabilityRateBase);\n(0, _chai.expect)(config.optimalPriceRate).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.optimalPriceRate);\n(0, _chai.expect)(config.priceRateDelta).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.priceRateDelta);",
                  "err": {},
                  "uuid": "c26b451b-7135-42a4-9296-9ea243934c00",
                  "parentUUID": "31680ddb-9432-4a03-a847-0c2303ebf728",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures correct stability rates",
                  "fullTitle": "Interest Rates #init configures correct stability rates",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    stabilityRateBase: _lib.oneRay,\n    rateSlope1: _lib.oneRay.mul(10),\n    rateSlope2: _lib.oneRay.mul(50),\n    optimalPriceRate: _lib.oneRay.div(2),\n    priceRateDelta: _lib.oneRay.div(100).mul(10)\n};\nawait _hardhat.default.Diamond.updateStabilityRateParams(this.krAsset.address, configuration);\nconst config = await _hardhat.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, _chai.expect)(config.debtIndex).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.stabilityRate).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, _chai.expect)(config.rateSlope1).to.bignumber.equal(configuration.rateSlope1);\n(0, _chai.expect)(config.rateSlope2).to.bignumber.equal(configuration.rateSlope2);\n(0, _chai.expect)(config.stabilityRateBase).to.bignumber.equal(configuration.stabilityRateBase);\n(0, _chai.expect)(config.optimalPriceRate).to.bignumber.equal(configuration.optimalPriceRate);\n(0, _chai.expect)(config.priceRateDelta).to.bignumber.equal(configuration.priceRateDelta);",
                  "err": {},
                  "uuid": "3e722079-94cd-4e1d-8800-54af2abbccbe",
                  "parentUUID": "31680ddb-9432-4a03-a847-0c2303ebf728",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant set incorrect values",
                  "fullTitle": "Interest Rates #init cant set incorrect values",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectOptimalRate = {\n    stabilityRateBase: _lib.oneRay,\n    rateSlope1: _lib.oneRay.mul(10),\n    rateSlope2: _lib.oneRay.mul(50),\n    optimalPriceRate: _lib.oneRay.add(1),\n    priceRateDelta: _lib.oneRay.div(100).mul(10)\n};\nconst incorrectExcessRate = {\n    stabilityRateBase: _lib.oneRay,\n    rateSlope1: _lib.oneRay.mul(10),\n    rateSlope2: _lib.oneRay.mul(50),\n    optimalPriceRate: _lib.oneRay,\n    priceRateDelta: _lib.oneRay.add(1)\n};\nawait (0, _chai.expect)(_hardhat.default.Diamond.setupStabilityRateParams(this.krAsset.address, _test.defaultKrAssetArgs.stabilityRates)).to.be.reverted;\nawait (0, _chai.expect)(_hardhat.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectOptimalRate)).to.be.reverted;\nawait (0, _chai.expect)(_hardhat.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectExcessRate)).to.be.reverted;",
                  "err": {},
                  "uuid": "6f8d3954-b3e5-41ef-9b5b-2c1e9326a8ab",
                  "parentUUID": "31680ddb-9432-4a03-a847-0c2303ebf728",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c26b451b-7135-42a4-9296-9ea243934c00",
                "3e722079-94cd-4e1d-8800-54af2abbccbe",
                "6f8d3954-b3e5-41ef-9b5b-2c1e9326a8ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "073acce7-4416-47ec-98a5-c922c653eb9f",
          "title": "Stability Rates",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/01-rates.ts",
          "file": "/src/test/stability-rate/01-rates.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ae3ebd75-2dd9-4771-a2b3-f5b0342a619e",
              "parentUUID": "073acce7-4416-47ec-98a5-c922c653eb9f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 450,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = _hardhat.default.users.deployer;\nthis.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\n[UniMath] = await _hardhat.default.deploy(\"UniswapMath\", {\n    from: _hardhat.default.users.deployer.address,\n    args: [\n        _hardhat.default.UniV2Factory.address,\n        _hardhat.default.UniV2Router.address\n    ]\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, _lib.toBig)(1000);\nconst kLiq = (0, _lib.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: kLiq\n});\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, _amm.addLiquidity)({\n    user: userOne,\n    router: _hardhat.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset\n});\nupdateTWAP = (0, _amm.getTWAPUpdaterFor)(pair.address);\nawait _hardhat.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "6d53d8e2-7d1a-42c4-9275-25b0867bf143",
              "parentUUID": "073acce7-4416-47ec-98a5-c922c653eb9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37fc46bb-303a-41ce-927f-5321f63ddb2b",
              "title": "#no-amm-prices",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct rates and debt when there is no amm price",
                  "fullTitle": "Stability Rates #no-amm-prices calculates correct rates and debt when there is no amm price",
                  "timedOut": false,
                  "duration": 2912,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const krAssetAmount = (0, _lib.toBig)(1);\nconst krAssetNoBaseRate = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: _ethers.BigNumber.from(0),\n    price: 10,\n    supplyLimit: 2000\n});\nconst krAssetWithBaseRate = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: _test.BASIS_POINT.mul(20),\n    price: 10,\n    supplyLimit: 2000\n});\n// Asset\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: krAssetNoBaseRate,\n    amount: krAssetAmount\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: krAssetWithBaseRate,\n    amount: krAssetAmount\n});\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\n// asset with no base rate and no amm price\nconst debtIndexNoBaseRate = await _hardhat.default.Diamond.getDebtIndexForAsset(krAssetNoBaseRate.address);\nconst debtScaledNoBaseRate = await _hardhat.default.Diamond.kreskoAssetDebt(userOne.address, krAssetNoBaseRate.address);\nconst debtPrincipalNoBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetNoBaseRate.address);\nconst debtInterestNoBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetNoBaseRate.address);\n(0, _chai.expect)(debtIndexNoBaseRate).to.equal(_lib.oneRay);\n(0, _chai.expect)(debtScaledNoBaseRate).to.equal(debtPrincipalNoBaseRate);\n(0, _chai.expect)(debtInterestNoBaseRate.kissAmount).to.equal(0);\n(0, _chai.expect)(debtInterestNoBaseRate.assetAmount).to.equal(0);\n// asset with base rate and no amm price\nconst debtIndexWithBaseRate = await _hardhat.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nconst debtScaledWithBaseRate = await _hardhat.default.Diamond.kreskoAssetDebt(userOne.address, krAssetWithBaseRate.address);\nconst debtPrincipalWithBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetWithBaseRate.address);\nconst debtInterestWithBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetWithBaseRate.address);\nconst expectedScaledDebt = await (0, _calculations.toScaledAmount)(debtPrincipalWithBaseRate, krAssetWithBaseRate);\nconst expectedDebtIndex = await (0, _calculations.calcDebtIndex)(krAssetWithBaseRate, debtIndexBefore, lastUpdateTimestamp);\nconst expectedAssetInterest = debtScaledWithBaseRate.sub(debtPrincipalWithBaseRate);\nconst expectedKissInterestAmount = await (0, _calculations.oraclePriceToWad)(_hardhat.default.Diamond.getKrAssetValue(krAssetWithBaseRate.address, expectedAssetInterest, true));\n(0, _chai.expect)(debtIndexWithBaseRate).to.equal(expectedDebtIndex);\n(0, _chai.expect)(debtScaledWithBaseRate).to.equal(expectedScaledDebt);\n(0, _chai.expect)(debtInterestWithBaseRate.assetAmount).to.equal(expectedAssetInterest);\n(0, _chai.expect)(debtInterestWithBaseRate.kissAmount).to.equal(expectedKissInterestAmount);",
                  "err": {},
                  "uuid": "f9c23e46-0136-484d-a8fb-a94c560d6410",
                  "parentUUID": "37fc46bb-303a-41ce-927f-5321f63ddb2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9c23e46-0136-484d-a8fb-a94c560d6410"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2912,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "1a8f36a7-c0ee-492e-b9a1-f377997db86b",
              "title": "#price-rate",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct price rates when amm == oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm == oracle",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst ammPricesOptimal = await (0, _amm.getAMMPrices)(this.collateral, this.krAsset);\n(0, _chai.expect)(ammPricesOptimal.price0).to.be.closeTo(this.krAsset.deployArgs.price, 0.05);\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.equal(_lib.oneRay);",
                  "err": {},
                  "uuid": "f8fa1f09-6db3-446c-bde3-cbc10ba95d32",
                  "parentUUID": "1a8f36a7-c0ee-492e-b9a1-f377997db86b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm > oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm > oracle",
                  "timedOut": false,
                  "duration": 136,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst expectedPriceRate = _test.ONE_PERCENT.mul(premiumPercentage).mul(997).div(1000);\nconst expectedPrice = this.krAsset.deployArgs.price * (premiumPercentage / 100);\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.collateral.address,\n        this.krAsset.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nconst ammPricesUpPremium = await (0, _amm.getAMMPrices)(this.collateral, this.krAsset);\n(0, _chai.expect)(ammPricesUpPremium.price0).to.be.closeTo(expectedPrice, 0.05);\nawait updateTWAP();\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, _test.BASIS_POINT);",
                  "err": {},
                  "uuid": "42886aee-6db9-4b53-8d61-bffa3978fb40",
                  "parentUUID": "1a8f36a7-c0ee-492e-b9a1-f377997db86b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm < oracle ",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 427,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. 5% below oracle price\nconst expectedPriceRate = _test.ONE_PERCENT.mul(premiumPercentage).mul(1003).div(1000);\nconst expectedPrice = this.krAsset.deployArgs.price * (premiumPercentage / 100);\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nconst ammRates = await (0, _amm.getAMMPrices)(this.collateral, this.krAsset);\n(0, _chai.expect)(ammRates.price0).to.be.closeTo(expectedPrice, 0.05);\nawait updateTWAP();\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, _test.BASIS_POINT);",
                  "err": {},
                  "uuid": "46b096f3-6fc1-4a83-afb9-389b29fc26a7",
                  "parentUUID": "1a8f36a7-c0ee-492e-b9a1-f377997db86b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8fa1f09-6db3-446c-bde3-cbc10ba95d32",
                "42886aee-6db9-4b53-8d61-bffa3978fb40",
                "46b096f3-6fc1-4a83-afb9-389b29fc26a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 683,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "77b3de8f-84f6-42e0-a780-cb62aa0a52b8",
              "title": "#stability-rate",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct stability rate when amm == oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rate when amm == oracle",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nconst stabilityRate = await _hardhat.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(stabilityRate).to.bignumber.equal((0, _calculations.getExpectedStabilityRate)(priceRate, _test.defaultKrAssetArgs.stabilityRates));",
                  "err": {},
                  "uuid": "41fe697f-8257-48f9-bde0-f25fc7626c6d",
                  "parentUUID": "77b3de8f-84f6-42e0-a780-cb62aa0a52b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rate when amm > oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rate when amm > oracle",
                  "timedOut": false,
                  "duration": 153,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.collateral.address,\n        this.krAsset.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nconst priceRateActual = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\nconst priceRateDecimal = (0, _lib.fromBig)(priceRateActual, 27);\nconst expectedPriceRateDecimal = (0, _lib.fromBig)(_test.ONE_PERCENT.mul(premiumPercentage).mul(997).div(1000), 27);\n(0, _chai.expect)(priceRateDecimal).to.closeTo(expectedPriceRateDecimal, BPS);\nconst expectedStabilityRate = (0, _calculations.getExpectedStabilityRate)(priceRateActual, _test.defaultKrAssetArgs.stabilityRates);\nconst stabilityRate = await _hardhat.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\n(0, _chai.expect)(stabilityRate).to.bignumber.equal(expectedStabilityRate);",
                  "err": {},
                  "uuid": "3f2fb722-d5df-4fd1-9e9d-1749560367cf",
                  "parentUUID": "77b3de8f-84f6-42e0-a780-cb62aa0a52b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm < oracle ",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 446,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nconst priceRateActual = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\nconst priceRateDecimal = (0, _lib.fromBig)(priceRateActual, 27);\nconst expectedPriceRateDecimal = (0, _lib.fromBig)(_test.ONE_PERCENT.mul(premiumPercentage).mul(1003).div(1000), 27);\n(0, _chai.expect)(priceRateDecimal).to.closeTo(expectedPriceRateDecimal, BPS);\nconst expectedStabilityRate = (0, _calculations.getExpectedStabilityRate)(priceRateActual, _test.defaultKrAssetArgs.stabilityRates);\nconst stabilityRate = await _hardhat.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\n(0, _chai.expect)(stabilityRate).to.bignumber.equal(expectedStabilityRate);",
                  "err": {},
                  "uuid": "65b25d28-175b-474e-9490-d9d2cc1e0d61",
                  "parentUUID": "77b3de8f-84f6-42e0-a780-cb62aa0a52b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41fe697f-8257-48f9-bde0-f25fc7626c6d",
                "3f2fb722-d5df-4fd1-9e9d-1749560367cf",
                "65b25d28-175b-474e-9490-d9d2cc1e0d61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 702,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "01623311-38de-4c7f-b565-4cc987305134",
              "title": "#debt-index",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt index after a year when amm price > oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year when amm price > oracle",
                  "timedOut": false,
                  "duration": 546,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\nconst debtIndexAfter = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, _chai.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, _calculations.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "4a3a7d78-e7d5-487f-88c7-604bbde0acce",
                  "parentUUID": "01623311-38de-4c7f-b565-4cc987305134",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after year when amm price < oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after year when amm price < oracle",
                  "timedOut": false,
                  "duration": 547,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 90; // 90% eg. -10% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\nconst debtIndexAfter = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, _chai.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, _calculations.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "f872ae0c-5fef-45fd-8a2e-e2709d682e8e",
                  "parentUUID": "01623311-38de-4c7f-b565-4cc987305134",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 271,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\nconst debtIndexAfter = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, _chai.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, _calculations.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "2ef4ed88-b405-463c-bb5f-0c425407036a",
                  "parentUUID": "01623311-38de-4c7f-b565-4cc987305134",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a3a7d78-e7d5-487f-88c7-604bbde0acce",
                "f872ae0c-5fef-45fd-8a2e-e2709d682e8e",
                "2ef4ed88-b405-463c-bb5f-0c425407036a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1364,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ac0079d9-9811-4752-9bff-5e2d803e6868",
          "title": "Stability Rates",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/02-debt.ts",
          "file": "/src/test/stability-rate/02-debt.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "93ac900a-2b89-4f1d-a4f3-c3fe71bb7dc1",
              "parentUUID": "ac0079d9-9811-4752-9bff-5e2d803e6868",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 505,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = _hardhat.default.users.deployer;\nuserTwo = _hardhat.default.users.userTwo;\nthis.krAsset = _hardhat.default.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = _hardhat.default.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\n[UniMath] = await _hardhat.default.deploy(\"UniswapMath\", {\n    from: _hardhat.default.users.deployer.address,\n    args: [\n        _hardhat.default.UniV2Factory.address,\n        _hardhat.default.UniV2Router.address\n    ]\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, _lib.toBig)(1000);\nconst kLiq = (0, _lib.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: userOne\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, _amm.addLiquidity)({\n    user: userOne,\n    router: _hardhat.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset\n});\nupdateTWAP = (0, _amm.getTWAPUpdaterFor)(pair.address);\nawait _hardhat.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "6fac7e3d-37fe-4500-91d3-273add6eb882",
              "parentUUID": "ac0079d9-9811-4752-9bff-5e2d803e6868",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ce737f7e-9056-4f07-9998-c9d11f8b3ae1",
              "title": "#debt calculation - mint",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - mint\"",
                  "fullTitle": "Stability Rates #debt calculation - mint \"before each\" hook in \"#debt calculation - mint\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "729d8c75-9710-4c85-b421-5122fa7590f9",
                  "parentUUID": "ce737f7e-9056-4f07-9998-c9d11f8b3ae1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 987,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(+_calculations.ONE_YEAR);\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterYear).to.not.bignumber.equal(debt);\n(0, _chai.expect)(debtAfterYear).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "66ebdcb3-55c9-4a1d-84a5-fad1120715c0",
                  "parentUUID": "ce737f7e-9056-4f07-9998-c9d11f8b3ae1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt amount when amm price < oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price < oracle",
                  "timedOut": false,
                  "duration": 830,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(+_calculations.ONE_YEAR);\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterYear).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "0c6071c2-85b5-41d7-a268-5431911a8952",
                  "parentUUID": "ce737f7e-9056-4f07-9998-c9d11f8b3ae1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 390,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(+_calculations.ONE_YEAR);\nconst debtIndex = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndex.gt(_lib.oneRay)).to.be.true;\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterYear).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "fcc949d2-3107-4848-8d89-50ee15578dff",
                  "parentUUID": "ce737f7e-9056-4f07-9998-c9d11f8b3ae1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66ebdcb3-55c9-4a1d-84a5-fad1120715c0",
                "0c6071c2-85b5-41d7-a268-5431911a8952",
                "fcc949d2-3107-4848-8d89-50ee15578dff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2207,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "6c2be437-561a-471a-a5cf-b4772241176d",
              "title": "#debt calculation - repay",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay\"",
                  "fullTitle": "Stability Rates #debt calculation - repay \"before each\" hook in \"#debt calculation - repay\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "5e884f58-2dcb-4d45-b506-bfdae8f5e25f",
                  "parentUUID": "6c2be437-561a-471a-a5cf-b4772241176d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 663,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 102; // 102% eg. 2% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\n// buy asset, increases price\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.collateral.address,\n        this.krAsset.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalBefore = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst burnAmount = mintAmount.div(2);\nawait (0, _krassets.burnKrAsset)({\n    asset: this.krAsset,\n    amount: burnAmount,\n    user: userTwo\n});\nconst debtAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(principalAfter).to.equal(principalBefore.sub(burnAmount));\n(0, _chai.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(burnAmount), _hardhat.default.ethers.utils.parseUnits(\"10\", \"gwei\"));",
                  "err": {},
                  "uuid": "2648ae19-25a1-43fb-9f7b-68e1dc14ef35",
                  "parentUUID": "6c2be437-561a-471a-a5cf-b4772241176d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 899,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 98; // 101% eg. 1% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\n// dump asset, decreases price\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait _hardhatnetworkhelpers.time.increase(year);\nconst debtIndex = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndex.gt(_lib.oneRay)).to.be.true;\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, _krassets.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo\n});\nconst debtAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), _lib.oneRay.div(10000));",
                  "err": {},
                  "uuid": "69937d00-b749-4615-9978-7c3a40603ca4",
                  "parentUUID": "6c2be437-561a-471a-a5cf-b4772241176d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 509,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait _hardhatnetworkhelpers.time.increase(year);\nconst debtIndex = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndex.gt(_lib.oneRay)).to.be.true;\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, _krassets.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo\n});\nconst debtAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), _lib.oneRay.div(10000));",
                  "err": {},
                  "uuid": "a719628b-33ef-4ecb-a08e-2c8bedbf40d0",
                  "parentUUID": "6c2be437-561a-471a-a5cf-b4772241176d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2648ae19-25a1-43fb-9f7b-68e1dc14ef35",
                "69937d00-b749-4615-9978-7c3a40603ca4",
                "a719628b-33ef-4ecb-a08e-2c8bedbf40d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2071,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
              "title": "#debt calculation - repay interest",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay interest\"",
                  "fullTitle": "Stability Rates #debt calculation - repay interest \"before each\" hook in \"#debt calculation - repay interest\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "e6c1160c-8b19-4a7d-bb53-1a70c4b2fe91",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can view account principal debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account principal debt for asset",
                  "timedOut": false,
                  "duration": 372,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst expectedPrincipalDebt = mintAmount.mul(2);\nconst principalDebtAfterOneYear = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(principalDebtAfterOneYear).to.bignumber.equal(expectedPrincipalDebt);",
                  "err": {},
                  "uuid": "04700562-ffa8-4147-b385-3b4a7640ea08",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view account scaled debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account scaled debt for asset",
                  "timedOut": false,
                  "duration": 444,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst expectedScaledDebt = principalDebt.add(accruedInterest.assetAmount);\nconst scaledDebt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(scaledDebt).to.bignumber.equal(expectedScaledDebt);",
                  "err": {},
                  "uuid": "bcd8b5dc-24a8-40fc-8d61-fefd06b720ba",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view accrued interest in KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view accrued interest in KISS",
                  "timedOut": false,
                  "duration": 485,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst scaledDebt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst expectedValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, scaledDebt.sub(principalDebt), true);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// 8 decimals\n(0, _chai.expect)(accruedInterest.kissAmount).to.bignumber.equal(expectedValue.mul(10 ** 10));",
                  "err": {},
                  "uuid": "02a0fd08-d478-4796-ac25-32e94d0b4968",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay full interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay full interest with KISS",
                  "timedOut": false,
                  "duration": 552,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\n// get the principal before repayment\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// get values after repayment\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(accruedInterest.assetAmount).to.bignumber.eq(0);\n(0, _chai.expect)(debt).to.bignumber.eq(principalDebt);",
                  "err": {},
                  "uuid": "9362b52f-804c-44ae-8850-f80ec9a2a52d",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay partial interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay partial interest with KISS",
                  "timedOut": false,
                  "duration": 618,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\nconst accruedInterestBefore = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// get the principal before repayment\nconst debtBefore = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst repaymentAmount = accruedInterestBefore.kissAmount.div(5);\nconst repaymentAmountAsset = accruedInterestBefore.assetAmount.div(5);\n// repay accrued interest\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).repayStabilityRateInterestPartial(userTwo.address, this.krAsset.address, repaymentAmount);\n// get values after repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterestAfter = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// TODO: calc exact values instead of closeTo\n(0, _chai.expect)(accruedInterestAfter.kissAmount).to.be.closeTo(accruedInterestBefore.kissAmount.sub(repaymentAmount), RATE_DELTA);\n(0, _chai.expect)(debtAfter).to.be.closeTo(debtBefore.sub(repaymentAmountAsset), RATE_DELTA);",
                  "err": {},
                  "uuid": "401bbedf-0c33-4586-870a-c712ba6e3a60",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest for multiple assets in batch",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest for multiple assets in batch",
                  "timedOut": false,
                  "duration": 4431,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: \"krasset2\",\n        marketOpen: true,\n        factor: 1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmountSmall,\n        user: userTwo\n    })));\nconst totalInterestInKISSBefore = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map((asset)=>_hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c)=>a.add(c.kissAmount), _ethers.BigNumber.from(0));\nconst totalInterestInKISSAfter = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, _chai.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nconst KISSMinAmount = (0, _lib.toBig)(10);\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: KISSMinAmount,\n    user: userTwo\n});\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSAfterRepay).to.equal(0);",
                  "err": {},
                  "uuid": "89bd0e66-b693-40b1-b2ba-0674185bc241",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest and principal for a single asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest and principal for a single asset",
                  "timedOut": false,
                  "duration": 963,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst accruedInterestBeforeBurn = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, _hardhat.default.ethers.constants.MaxUint256, 0);\nconst accruedInterestAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Ensure burning does not wipe interest accrued\n(0, _chai.expect)(accruedInterestAfterBurn.assetAmount.gt(accruedInterestBeforeBurn.assetAmount)).to.be.true;\n(0, _chai.expect)(accruedInterestAfterBurn.kissAmount.gt(accruedInterestBeforeBurn.kissAmount)).to.be.true;\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore.length).to.equal(2);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter.length).to.equal(1);\nconst accruedInterestAfterRepayment = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n// Ensure debt actually gets wiped\n(0, _chai.expect)(principalDebt).to.equal(0);\n(0, _chai.expect)(accruedInterestAfterRepayment.assetAmount).to.equal(0);\n(0, _chai.expect)(accruedInterestAfterRepayment.kissAmount).to.equal(0);\n(0, _chai.expect)(debt).to.equal(0);\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst accruedInterestYearAfterRepayment = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Sanity check with another year of time that there is no interest accrual\n(0, _chai.expect)(accruedInterestYearAfterRepayment.assetAmount).to.equal(0);\n(0, _chai.expect)(accruedInterestYearAfterRepayment.kissAmount).to.equal(0);\n// Get kr asset value, should be only KISS minted that remains\nconst krAssetValue = await _hardhat.default.Diamond.getAccountKrAssetValue(userTwo.address);\n(0, _chai.expect)(krAssetValue).to.equal((0, _lib.toBig)(10, 8));",
                  "err": {},
                  "uuid": "2380ec73-c30b-4c72-bb4a-41a0cc88a73d",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch repay interest and all debt",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can batch repay interest and all debt",
                  "timedOut": false,
                  "duration": 4914,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: name,\n        marketOpen: true,\n        factor: 1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmountSmall,\n        user: userTwo\n    })));\nconst totalInterestInKISSBefore = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map((asset)=>_hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c)=>a.add(c.kissAmount), _ethers.BigNumber.from(0));\nconst totalInterestInKISSAfter = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, _chai.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nawait Promise.all(krAssets.map(async (asset)=>(0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).burnKreskoAsset(userTwo.address, asset.address, _hardhat.default.ethers.constants.MaxUint256, await _hardhat.default.Diamond.getMintedKreskoAssetsIndex(userTwo.address, asset.address))));\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore.length).to.equal(4);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSAfterRepay).to.equal(0);\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter.length).to.equal(1);",
                  "err": {},
                  "uuid": "72063369-36f3-4891-8f5e-3940a6602d73",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can open up a new debt positions after wiping all debt + interest",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can open up a new debt positions after wiping all debt + interest",
                  "timedOut": false,
                  "duration": 1479,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst expectedDebtAfterOneYear = await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset);\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(expectedDebtAfterOneYear);\n// Wipe debt\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, _hardhat.default.ethers.constants.MaxUint256, 0);\nconst accruedInterest = (await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n// Mint again, before interest repayment\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\n// Ensure debt is principal + interest\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.closeTo(mintAmount.add(accruedInterest), RATE_DELTA);\n// Burn all assets\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, _hardhat.default.ethers.constants.MaxUint256, 0);\n// Ensure debt is equal to interest\nconst accruedInterestAfterBurn = (await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(accruedInterestAfterBurn);\n// Repay all interest\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// Debt should be wiped\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n// Mint again\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\n// Scaled should be equal to principal\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(mintAmount);\n// Advance time\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\n// Ensure accrual is the same as the previous year with the same position\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.eq(expectedDebtAfterOneYear);",
                  "err": {},
                  "uuid": "01f0b868-3d1a-4539-bdec-01521594a35e",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close a position in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close a position in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 884,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userOne\n});\nawait KISS.connect(userOne).transfer(userTwo.address, minDebtAmount);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).closeKrAssetDebtPosition(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address)).to.eq(0);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(accruedInterest.assetAmount).to.eq(0);\n(0, _chai.expect)(accruedInterest.kissAmount).to.eq(0);\n(0, _chai.expect)((await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "7d580fbb-6fa7-4a58-8769-153d04147190",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close all positions and interest in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close all positions and interest in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 4360,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst kissAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10).mul(2);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: kissAmount,\n    user: userOne\n});\nawait KISS.connect(userOne).transfer(userTwo.address, kissAmount);\nconst krAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: name,\n        marketOpen: true,\n        factor: 1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmountSmall,\n        user: userTwo\n    })));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\n// ~1M gas with 8 krAssets\n// console.log(+(await tx.wait()).gasUsed);\nawait (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, userTwo).batchCloseKrAssetDebtPositions(userTwo.address);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(accruedInterest).to.eq(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountKrAssetValue(userTwo.address)).to.eq(0);\n(0, _chai.expect)((await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "7d8a4122-0da9-427d-b1b9-de1e63f1cdca",
                  "parentUUID": "851dbf93-65cf-4eb4-a86a-edc5d5e70777",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04700562-ffa8-4147-b385-3b4a7640ea08",
                "bcd8b5dc-24a8-40fc-8d61-fefd06b720ba",
                "02a0fd08-d478-4796-ac25-32e94d0b4968",
                "9362b52f-804c-44ae-8850-f80ec9a2a52d",
                "401bbedf-0c33-4586-870a-c712ba6e3a60",
                "89bd0e66-b693-40b1-b2ba-0674185bc241",
                "2380ec73-c30b-4c72-bb4a-41a0cc88a73d",
                "72063369-36f3-4891-8f5e-3940a6602d73",
                "01f0b868-3d1a-4539-bdec-01521594a35e",
                "7d580fbb-6fa7-4a58-8769-153d04147190",
                "7d8a4122-0da9-427d-b1b9-de1e63f1cdca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19502,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c54dd365-6d68-43e5-8142-6b198e3fe8e0",
          "title": "Stability Rates",
          "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
          "file": "/src/test/stability-rate/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = _evmconnector.WrapperBuilder.wrap(await hre.getContractOrFork(\"Kresko\")).usingSimpleNumericMock({\n            mockSignersCount: 1,\n            timestampMilliseconds: Date.now(),\n            dataPoints: [\n                {\n                    dataFeedId: \"DAI\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"USDC\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"TSLA\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"ETH\",\n                    value: 0\n                },\n                {\n                    dataFeedId: \"BTC\",\n                    value: 0\n                }\n            ]\n        });\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4b8f354b-539a-4e32-a428-8d2d848415cf",
              "parentUUID": "c54dd365-6d68-43e5-8142-6b198e3fe8e0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 582,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "liquidator = _hardhat.default.users.deployer;\nuserTwo = _hardhat.default.users.userTwo;\nthis.krAsset = _hardhat.default.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = _hardhat.default.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, _lib.toBig)(1000);\nconst kLiq = (0, _lib.toBig)(100);\nawait this.collateral.setBalance(liquidator, cLiq.mul(2));\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: liquidator\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: liquidator\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, _amm.addLiquidity)({\n    user: liquidator,\n    router: _hardhat.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset\n});\nupdateTWAP = (0, _amm.getTWAPUpdaterFor)(pair.address);\nawait _hardhat.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "22b33184-a983-4a36-89a4-0f3e97078288",
              "parentUUID": "c54dd365-6d68-43e5-8142-6b198e3fe8e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "af6e8895-e57e-4268-809f-ed848f5dd173",
              "title": "#stability rate - liquidation",
              "fullFile": "/Users/tabishshaikh/work/kresko/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
              "file": "/src/test/stability-rate/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#stability rate - liquidation\"",
                  "fullTitle": "Stability Rates #stability rate - liquidation \"before each\" hook in \"#stability rate - liquidation\"",
                  "timedOut": false,
                  "duration": 2955,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Create few krAssets\nkrAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: name,\n        marketOpen: true,\n        factor: 1.1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));",
                  "err": {},
                  "uuid": "385a2f82-a905-4582-84b2-0c062f74c35a",
                  "parentUUID": "af6e8895-e57e-4268-809f-ed848f5dd173",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 960,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\n// mint each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmount,\n        user: userTwo\n    })));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst krAsset = krAssets[0];\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address, false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "bdf6e041-0850-441a-9931-5be11210e065",
                  "parentUUID": "af6e8895-e57e-4268-809f-ed848f5dd173",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot batch liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot batch liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 1013,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\n// mint each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmount,\n        user: userTwo\n    })));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address, false)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "65bfa992-1bfb-4f07-b996-c9f7ad5559d4",
                  "parentUUID": "af6e8895-e57e-4268-809f-ed848f5dd173",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 2153,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\n// mint each krasset\nawait Promise.all([\n    await KISS.connect(liquidator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n    await this.collateral.setBalance(userTwo, depositAmount),\n    // Deposit a bit more to cover the mints\n    await (0, _collaterals.depositCollateral)({\n        asset: this.collateral,\n        amount: depositAmount,\n        user: userTwo\n    }),\n    ...krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n            asset: krAsset,\n            amount: mintAmount,\n            user: userTwo\n        }))\n]);\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map((asset)=>asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR * 4);\n// should be liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\n// Asset to liquidate\nconst krAsset = krAssets[0];\nconst interestUSDTotal = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// Liquidator mints KISS\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: interestUSDTotal.add((0, _lib.toBig)(1)),\n    user: liquidator\n});\n// liquidatable value total before\nconst accruedKissInterest = (0, _lib.fromBig)((await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address)).kissAmount);\nconst accountCollateralBefore = await _hardhat.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, _lib.toBig)(0));\n// Liquidate\nconst tx = await (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address, false);\n// Should all be wiped\nconst interestAccruedAfterLiq = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address);\n(0, _chai.expect)(interestAccruedAfterLiq.kissAmount).to.eq(0);\n(0, _chai.expect)(interestAccruedAfterLiq.assetAmount).to.eq(0);\nconst accountCollateralAfter = await _hardhat.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"InterestLiquidationOccurred\");\n// validate interest accrual changes\n(0, _chai.expect)(accountCollateralAfter).to.equal(accountCollateralBefore.sub(event.collateralSent));\nconst liquidationIncentive = (0, _lib.fromBig)((await _hardhat.default.Diamond.collateralAsset(this.collateral.address)).liquidationIncentive);\nconst expectedCollateral = accruedKissInterest / (0, _lib.fromBig)(await this.collateral.getPrice(), 8) * liquidationIncentive;\n// event validation\n(0, _chai.expect)(event.account).to.equal(userTwo.address);\n(0, _chai.expect)(event.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(krAsset.address);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(event.repayUSD)).to.closeTo(accruedKissInterest, 0.0001);\n(0, _chai.expect)((0, _lib.fromBig)(event.collateralSent).toFixed(6)).to.equal(expectedCollateral.toFixed(6));\n// liquidator received collateral\n(0, _chai.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "6d175125-d7a4-4f24-bb9c-229852449ece",
                  "parentUUID": "af6e8895-e57e-4268-809f-ed848f5dd173",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot underflow seized collateral without liquidators permission",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot underflow seized collateral without liquidators permission",
                  "timedOut": false,
                  "duration": 2039,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\n// mint each krasset\nawait Promise.all([\n    await KISS.connect(liquidator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n    await this.collateral.setBalance(userTwo, depositAmount),\n    // Deposit a bit more to cover the mints\n    await (0, _collaterals.depositCollateral)({\n        asset: this.collateral,\n        amount: depositAmount,\n        user: userTwo\n    }),\n    ...krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n            asset: krAsset,\n            amount: mintAmount,\n            user: userTwo\n        }))\n]);\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map((asset)=>asset.setPrice(newPrice));\n// increase time by a lot, so account is liquidatable and seized collateral will underflow\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR * 40);\n// should be liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\n// Asset to liquidate\nconst krAsset = krAssets[0];\nconst interestUSDTotal = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// Liquidator mints KISS\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: interestUSDTotal.add((0, _lib.toBig)(1)),\n    user: liquidator\n});\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, _lib.toBig)(0));\n// Liquidate\nawait (0, _chai.expect)((0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address, false)).to.be.revertedWith(_errors.Error.SEIZED_COLLATERAL_UNDERFLOW);",
                  "err": {},
                  "uuid": "b016dac1-cabe-4681-bf6c-012f3eead080",
                  "parentUUID": "af6e8895-e57e-4268-809f-ed848f5dd173",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can batch liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 2731,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(liquidator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\n// mint each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmount,\n        user: userTwo\n    })));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map((asset)=>asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR * 4);\n// should be liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\nconst interestKissTotal = (0, _lib.fromBig)(await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n// Liquidator mints KISS\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: interestKissTotal + 1,\n    user: liquidator\n});\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, _lib.toBig)(0));\n// Liquidate\nconst tx = await (0, _test.wrapContractWithSigner)(_hardhat.default.Diamond, liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address, false);\nconst interestKissTotalAfter = (0, _lib.fromBig)(await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"BatchInterestLiquidationOccurred\");\nconst repayUSD = (0, _lib.fromBig)(event.repayUSD);\n// interest accrued changes\n(0, _chai.expect)(interestKissTotalAfter).to.closeTo(interestKissTotal - (0, _lib.fromBig)(event.repayUSD), 0.0001);\nconst liquidationIncentive = (0, _lib.fromBig)((await _hardhat.default.Diamond.collateralAsset(this.collateral.address)).liquidationIncentive);\nconst expectedCollateral = repayUSD / (0, _lib.fromBig)(await this.collateral.getPrice(), 8) * liquidationIncentive;\n// event validation\n(0, _chai.expect)(event.account).to.equal(userTwo.address);\n(0, _chai.expect)(event.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(event.collateralSent)).to.closeTo(expectedCollateral, 0.0001);\n(0, _chai.expect)(repayUSD).to.closeTo(interestKissTotal - interestKissTotalAfter, 0.0001);\n// liquidator received collateral\n(0, _chai.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "c3ecdd98-ef0f-4fd9-b580-2a1f54d588cc",
                  "parentUUID": "af6e8895-e57e-4268-809f-ed848f5dd173",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdf6e041-0850-441a-9931-5be11210e065",
                "65bfa992-1bfb-4f07-b996-c9f7ad5559d4",
                "6d175125-d7a4-4f24-bb9c-229852449ece",
                "b016dac1-cabe-4681-bf6c-012f3eead080",
                "c3ecdd98-ef0f-4fd9-b580-2a1f54d588cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8896,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}