{
  "stats": {
    "suites": 2,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-22T17:53:48.038Z",
    "end": "2023-05-22T17:54:58.856Z",
    "duration": 70818,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cd24dfeb-1800-423f-8b6a-2b9878e0e482",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/01-positions.ts",
      "file": "/src/test/collateral-pool/01-positions.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "675b28c9-e1a4-403a-a70a-02d65cb1f868",
          "title": "Leverage Positions NFT",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/01-positions.ts",
          "file": "/src/test/collateral-pool/01-positions.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Leverage Positions NFT\"",
              "fullTitle": "Leverage Positions NFT \"before each\" hook in \"Leverage Positions NFT\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "de911b7d-301c-4802-9299-850d56e4e012",
              "parentUUID": "675b28c9-e1a4-403a-a70a-02d65cb1f868",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Leverage Positions NFT\"",
              "fullTitle": "Leverage Positions NFT \"before each\" hook in \"Leverage Positions NFT\"",
              "timedOut": false,
              "duration": 4493,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "depositor = _hardhat.default.users.testUserOne;\nusers = [\n    _hardhat.default.users.testUserFive,\n    _hardhat.default.users.testUserSix\n];\npositions = await _hardhat.default.getContractOrFork(\"Positions\");\n[KISS, krETH, CollateralAsset, CollateralAsset8Dec] = await Promise.all([\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"KISS\",\n        price: KISSPrice,\n        symbol: \"KISS\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 100000\n    }, true),\n    (0, _krassets.addMockKreskoAsset)({\n        name: \"krETH\",\n        price: ETHPrice,\n        symbol: \"krETH\",\n        closeFee: 0.1,\n        openFee: 0.1,\n        marketOpen: true,\n        factor: 1,\n        supplyLimit: 100000\n    }, true),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral18Dec\",\n        price: collateralPrice,\n        factor: 1,\n        decimals: 18\n    }),\n    (0, _collaterals.addMockCollateralAsset)({\n        name: \"Collateral8Dec\",\n        price: collateralPrice,\n        factor: 0.8,\n        decimals: 8\n    })\n]);\nawait CollateralAsset.setBalance(depositor, depositAmount18Dec);\nawait CollateralAsset.contract.connect(depositor).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset8Dec.setBalance(depositor, depositAmount8Dec);\nawait CollateralAsset8Dec.contract.connect(depositor).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nfor (const user of users){\n    await Promise.all([\n        await CollateralAsset.setBalance(user, depositAmount18Dec),\n        await CollateralAsset8Dec.setBalance(user, depositAmount8Dec),\n        await CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n        await CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256)\n    ]);\n}",
              "err": {},
              "uuid": "2e767475-a11a-4489-91f7-d6aa28762e31",
              "parentUUID": "675b28c9-e1a4-403a-a70a-02d65cb1f868",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should deploy with correct configuration",
              "fullTitle": "Leverage Positions NFT should deploy with correct configuration",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initializerArgs = (await (0, _shared.getPositionsInitializer)(_hardhat.default)).args;\n(0, _chai.expect)(await positions.name()).to.equal(\"Kresko Positions\");\n(0, _chai.expect)(await positions.symbol()).to.equal(\"krPOS\");\nconst config = await positions.getPositionsConfig();\n(0, _chai.expect)(config.kresko).to.equal(_hardhat.default.Diamond.address);\n(0, _chai.expect)(config.liquidationThreshold).to.equal(initializerArgs.liquidationThreshold);\n(0, _chai.expect)(config.closeThreshold).to.equal(initializerArgs.closeThreshold);\n(0, _chai.expect)(config.maxLeverage).to.equal(initializerArgs.maxLeverage);\n(0, _chai.expect)(config.minLeverage).to.equal(initializerArgs.minLeverage);",
              "err": {},
              "uuid": "78da18c8-9f6a-40a7-8d06-367cbf9e174a",
              "parentUUID": "675b28c9-e1a4-403a-a70a-02d65cb1f868",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
              "title": "Positions",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/collateral-pool/01-positions.ts",
              "file": "/src/test/collateral-pool/01-positions.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Positions\"",
                  "fullTitle": "Leverage Positions NFT Positions \"before each\" hook in \"Positions\"",
                  "timedOut": false,
                  "duration": 181,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "depositor = _hardhat.default.users.testUserOne;\nconst krETHFee = (0, _lib.toBig)(0.005);\nconst KISSFee = (0, _lib.toBig)(0.005);\nconst leverage = (0, _lib.toBig)(2);\nconst totalFeePct = krETHFee.add(KISSFee).wadMul(leverage);\nconst borrowAmountWithoutFees = (0, _lib.toBig)(1).wadMul(leverage);\nconst fees = borrowAmountWithoutFees.wadMul(totalFeePct);\nposition = {\n    account: users[1].address,\n    leverage: leverage,\n    collateralAsset: KISS.address,\n    collateralAmount: (0, _lib.toBig)(ETHPrice),\n    borrowAsset: krETH.address,\n    borrowAmountMin: borrowAmountWithoutFees.sub(fees)\n};\nawait _hardhat.default.Diamond.enablePoolCollaterals([\n    CollateralAsset.address,\n    CollateralAsset8Dec.address,\n    KISS.address,\n    krETH.address\n], [\n    {\n        decimals: 18,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        liquidityIndex: _lib.RAY\n    },\n    {\n        decimals: 8,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        liquidityIndex: _lib.RAY\n    },\n    {\n        decimals: 18,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        liquidityIndex: _lib.RAY\n    },\n    {\n        decimals: 18,\n        liquidationIncentive: (0, _lib.toBig)(1.05),\n        liquidityIndex: _lib.RAY\n    }\n]);\nawait _hardhat.default.Diamond.enablePoolKrAssets([\n    KISS.address,\n    krETH.address\n], [\n    {\n        openFee: KISSFee,\n        closeFee: KISSFee,\n        protocolFee: (0, _lib.toBig)(0.25),\n        supplyLimit: (0, _lib.toBig)(1000000)\n    },\n    {\n        openFee: krETHFee,\n        closeFee: krETHFee,\n        protocolFee: (0, _lib.toBig)(0.25),\n        supplyLimit: (0, _lib.toBig)(1000000)\n    }\n]);\nawait _hardhat.default.Diamond.setSwapPairs([\n    {\n        assetIn: KISS.address,\n        assetOut: krETH.address,\n        enabled: true\n    }\n]);\nawait _hardhat.default.Diamond.connect(depositor).poolDeposit(depositor.address, CollateralAsset.address, depositAmount18Dec);\nawait KISS.setBalance(users[1], depositAmount18Dec);\nawait KISS.contract.connect(users[1]).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);",
                  "err": {},
                  "uuid": "8fbc6f43-45c7-479b-ba93-cbbd23e51bc0",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to mint a position with leverage",
                  "fullTitle": "Leverage Positions NFT Positions should be able to mint a position with leverage",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nawait (0, _chai.expect)(PositionsUser.createPosition(position)).to.not.be.reverted;",
                  "err": {},
                  "uuid": "40b051f8-a167-46f2-8d3c-0906eb7b4fd9",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct leverage on successive positions",
                  "fullTitle": "Leverage Positions NFT Positions should have correct leverage on successive positions",
                  "timedOut": false,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nawait PositionsUser.createPosition(position);\nconst timestamp0 = await (0, _calculations.getBlockTimestamp)();\nconst expectedKissBalance = (0, _lib.toBig)(ETHPrice).sub((0, _lib.toBig)(ETHPrice).wadMul((0, _lib.toBig)(0.02)));\n(0, _chai.expect)(await krETH.contract.balanceOf(positions.address)).to.equal(position.borrowAmountMin);\n(0, _chai.expect)(await KISS.contract.balanceOf(positions.address)).to.equal(0);\n(0, _chai.expect)(await KISS.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(expectedKissBalance); // 1764\nconst [positionNFT0] = await positions.getPosition(0);\n(0, _chai.expect)(positionNFT0.leverage).to.equal((0, _lib.toBig)(2));\n(0, _chai.expect)(positionNFT0.collateral).to.equal(KISS.address);\n(0, _chai.expect)(positionNFT0.borrowed).to.equal(krETH.address);\n(0, _chai.expect)(positionNFT0.account).to.equal(users[1].address);\n(0, _chai.expect)(positionNFT0.creationTimestamp).to.be.equal(timestamp0);\n(0, _chai.expect)(positionNFT0.lastUpdateTimestamp).to.be.equal(timestamp0);\n(0, _chai.expect)(positionNFT0.collateralAmount).to.equal(expectedKissBalance);\n(0, _chai.expect)(positionNFT0.borrowedAmount).to.equal(position.borrowAmountMin);\n(0, _chai.expect)(positionNFT0.nonce).to.equal(0);\nconst newLeverage = (0, _lib.toBig)(3);\nconst totalFeePct = (0, _lib.toBig)(0.01).wadMul(newLeverage);\nconst borrowAmountWithoutFees = (0, _lib.toBig)(1).wadMul(newLeverage);\nconst fees = borrowAmountWithoutFees.wadMul(totalFeePct);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: newLeverage,\n    borrowAmountMin: borrowAmountWithoutFees.sub(fees)\n});\nconst timestamp1 = await (0, _calculations.getBlockTimestamp)();\nconst expectedTotalBorrows = _ethers.BigNumber.from(position.borrowAmountMin).add(borrowAmountWithoutFees.sub(fees));\nconst expectedKissBalance2 = (0, _lib.toBig)(ETHPrice).sub((0, _lib.toBig)(ETHPrice).wadMul(totalFeePct));\n(0, _chai.expect)(await krETH.contract.balanceOf(positions.address)).to.equal(expectedTotalBorrows);\n(0, _chai.expect)(await KISS.contract.balanceOf(positions.address)).to.equal(0);\n(0, _chai.expect)(await KISS.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(expectedKissBalance.add(expectedKissBalance2)); // 1764\nconst [positionNFT1] = await positions.getPosition(1);\n(0, _chai.expect)(positionNFT1.leverage).to.equal(newLeverage);\n(0, _chai.expect)(positionNFT1.collateral).to.equal(KISS.address);\n(0, _chai.expect)(positionNFT1.borrowed).to.equal(krETH.address);\n(0, _chai.expect)(positionNFT1.account).to.equal(users[1].address);\n(0, _chai.expect)(positionNFT1.creationTimestamp).to.be.equal(timestamp1);\n(0, _chai.expect)(positionNFT1.lastUpdateTimestamp).to.be.equal(timestamp1);\n(0, _chai.expect)(positionNFT1.collateralAmount).to.equal(expectedKissBalance2);\n(0, _chai.expect)(positionNFT1.borrowedAmount).to.equal(borrowAmountWithoutFees.sub(fees));\n(0, _chai.expect)(positionNFT1.nonce).to.equal(0);",
                  "err": {},
                  "uuid": "5610ae8e-c6c1-4dd8-8909-06472c7e43c8",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should increase pool debt and collateral accordingly",
                  "fullTitle": "Leverage Positions NFT Positions should increase pool debt and collateral accordingly",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst poolStatsBefore = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(poolStatsBefore.cr).to.be.eq(0);\nawait (0, _chai.expect)(PositionsUser.createPosition(position)).to.not.be.reverted;\nconst [pos] = await positions.getPosition(0);\nconst poolStats = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(poolStats.debtValue).to.equal(pos.borrowedAmount.wadMul((0, _lib.toBig)(ETHPrice, 8)));\n(0, _chai.expect)(poolStats.cr).to.be.gt(0);\n(0, _chai.expect)(poolStats.collateralValue).to.equal(poolStatsBefore.collateralValue.add((0, _lib.fromBig)(pos.collateralAmount, 10)));",
                  "err": {},
                  "uuid": "9140db3c-3c11-46d2-bac9-589eea8878f3",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to close a position",
                  "fullTitle": "Leverage Positions NFT Positions should be able to close a position",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\n(0, _chai.expect)(await KISS.contract.balanceOf(users[1].address)).to.equal(depositAmount18Dec);\nconst poolStatsBefore = await _hardhat.default.Diamond.getPoolStats(true);\nawait PositionsUser.createPosition(position);\nawait PositionsUser.closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.equal(poolStatsBefore.debtValue);\n(0, _chai.expect)(poolStatsAfter.collateralValue).to.equal(poolStatsBefore.collateralValue);\n(0, _chai.expect)(poolStatsAfter.cr).to.equal(0);\n(0, _chai.expect)(await KISS.contract.balanceOf(users[1].address)).to.equal((0, _lib.toBig)(9928.72));",
                  "err": {},
                  "uuid": "a1adb7cc-1993-449b-a7f1-3b0a92666601",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should receive profit",
                  "fullTitle": "Leverage Positions NFT Positions should receive profit",
                  "timedOut": false,
                  "duration": 309,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst balBefore = await KISS.contract.balanceOf(users[1].address);\n(0, _chai.expect)(await KISS.contract.balanceOf(users[1].address)).to.equal(depositAmount18Dec);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(2),\n    borrowAmountMin: 0\n});\nconst poolStatsBefore = await _hardhat.default.Diamond.getPoolStats(true);\nkrETH.setPrice(2000);\nawait PositionsUser.closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst balAfter = await KISS.contract.balanceOf(users[1].address);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.eq((0, _lib.toBig)(392));\n(0, _chai.expect)(balAfter).to.be.gt(balBefore);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.eq((0, _lib.toBig)(392, 8));\n(0, _chai.expect)(poolStatsAfter.collateralValue).to.be.lt(poolStatsBefore.collateralValue);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.gt(poolStatsBefore.cr);",
                  "err": {},
                  "uuid": "a66f4017-1fc4-43ee-a8c9-e13426ee1716",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should incur losses",
                  "fullTitle": "Leverage Positions NFT Positions should incur losses",
                  "timedOut": false,
                  "duration": 337,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst balBefore = await KISS.contract.balanceOf(users[1].address);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(2),\n    borrowAmountMin: 0\n});\nconst poolStatsBefore = await _hardhat.default.Diamond.getPoolStats(true);\nkrETH.setPrice(1600);\nawait PositionsUser.closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst balAfter = await KISS.contract.balanceOf(users[1].address);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.eq(0);\n(0, _chai.expect)(balAfter).to.be.lt(balBefore);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.collateralValue).to.be.lt(poolStatsBefore.collateralValue);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.eq(0);",
                  "err": {},
                  "uuid": "68bfde75-6f4d-45c1-ab1e-8dd1af33a7bd",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should offset wins by losses",
                  "fullTitle": "Leverage Positions NFT Positions should offset wins by losses",
                  "timedOut": false,
                  "duration": 493,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(2),\n    borrowAmountMin: 0\n});\nkrETH.setPrice(1600);\nawait PositionsUser.closePosition(0);\nkrETH.setPrice(1800);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(2),\n    borrowAmountMin: 0\n});\nkrETH.setPrice(2000);\nawait PositionsUser.closePosition(1);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.eq(0);",
                  "err": {},
                  "uuid": "9ffd443e-389b-4e47-8656-48ac66d9f15f",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to liquidate a losing position",
                  "fullTitle": "Leverage Positions NFT Positions should be able to liquidate a losing position",
                  "timedOut": false,
                  "duration": 334,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(3),\n    borrowAmountMin: 0\n});\nconst liquidator = users[0];\nkrETH.setPrice(1500); // 2.5\nconst [pos, ratio] = await positions.getPosition(0);\n(0, _chai.expect)(ratio).to.be.lt(pos.leverage);\nconst [isLiquidatable] = await positions.isLiquidatable([\n    0\n]);\n(0, _chai.expect)(isLiquidatable).to.be.true;\nawait positions.connect(liquidator).closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.eq(0);",
                  "err": {},
                  "uuid": "9f0cfd9a-c2f0-4d17-8916-c5bfa480e342",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to close a winning position",
                  "fullTitle": "Leverage Positions NFT Positions should be able to close a winning position",
                  "timedOut": false,
                  "duration": 405,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: (0, _lib.toBig)(3),\n    borrowAmountMin: 0\n});\nconst closer = users[0];\nkrETH.setPrice(2100); // 2.5\nconst [pos, ratio] = await positions.getPosition(0);\n(0, _chai.expect)(ratio).to.be.gt(pos.leverage);\nconst [isClosable] = await positions.isClosable([\n    0\n]);\n(0, _chai.expect)(isClosable).to.be.true;\nawait positions.connect(closer).closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.gt(0);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.gt(0);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.gt(0);",
                  "err": {},
                  "uuid": "511fae10-1aad-4ef8-9ccb-98477b97283f",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit into a position",
                  "fullTitle": "Leverage Positions NFT Positions should be able to deposit into a position",
                  "timedOut": false,
                  "duration": 234,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst initialLeverage = (0, _lib.toBig)(2);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: initialLeverage,\n    borrowAmountMin: 0\n});\nawait PositionsUser.deposit(0, (0, _lib.toBig)(100));\nconst [pos, ratio] = await PositionsUser.getPosition(0);\n(0, _chai.expect)(ratio).to.be.lt(initialLeverage);\n(0, _chai.expect)(pos.leverage).to.be.lt(initialLeverage);",
                  "err": {},
                  "uuid": "f7c0ae21-08a1-4bff-8168-6695a4f0fbf0",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit a lot into a position",
                  "fullTitle": "Leverage Positions NFT Positions should be able to deposit a lot into a position",
                  "timedOut": false,
                  "duration": 246,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst initialLeverage = (0, _lib.toBig)(2);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: initialLeverage,\n    borrowAmountMin: 0\n});\nkrETH.setPrice(900);\nawait PositionsUser.deposit(0, (0, _lib.toBig)(1800)); // save it from liquidation\nconst [pos, ratio] = await PositionsUser.getPosition(0);\n(0, _chai.expect)(ratio).to.be.lt(initialLeverage);\n(0, _chai.expect)(pos.leverage).to.be.lt(initialLeverage);",
                  "err": {},
                  "uuid": "0dec977c-7acc-4f2b-97b0-3bcdfa76148a",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct ratios",
                  "fullTitle": "Leverage Positions NFT Positions calculates correct ratios",
                  "timedOut": false,
                  "duration": 268,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst initialLeverage = (0, _lib.toBig)(2);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage: initialLeverage,\n    borrowAmountMin: 0\n});\n// long asset goes up, so goes ratio\nkrETH.setPrice(3600);\nconst [, ratio] = await PositionsUser.getPosition(0);\n(0, _chai.expect)(ratio).to.equal((0, _lib.toBig)(4));\n// long asset goes down, so goes ratio\nkrETH.setPrice(900);\nconst [, ratio1] = await PositionsUser.getPosition(0);\n(0, _chai.expect)(ratio1).to.equal((0, _lib.toBig)(1));\nkrETH.setPrice(1800); // normalize price\n// short asset goes up, ratio goes DOWN\nKISS.setPrice(2);\nconst [, ratio3] = await PositionsUser.getPosition(0);\n(0, _chai.expect)(ratio3).to.equal((0, _lib.toBig)(1));\n// short asset goes down, ratio goes UP\nKISS.setPrice(0.5);\nconst [, ratio4] = await PositionsUser.getPosition(0);\n(0, _chai.expect)(ratio4).to.equal((0, _lib.toBig)(4));",
                  "err": {},
                  "uuid": "5ad56a2a-12e6-4c6e-8758-3d2cb4b3dafc",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw from a position",
                  "fullTitle": "Leverage Positions NFT Positions should be able to withdraw from a position",
                  "timedOut": false,
                  "duration": 470,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst leverage = (0, _lib.toBig)(2);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage,\n    borrowAmountMin: 0\n});\nkrETH.setPrice(1600);\nawait PositionsUser.withdraw(0, (0, _lib.toBig)(450));\nawait PositionsUser.closePosition(0);\nconst poolStatsAfter = await _hardhat.default.Diamond.getPoolStats(true);\nconst debtKISS = await _hardhat.default.Diamond.getPoolDebt(KISS.address);\nconst debtkrETH = await _hardhat.default.Diamond.getPoolDebt(krETH.address);\n(0, _chai.expect)(debtkrETH).to.be.eq(0);\n(0, _chai.expect)(debtKISS).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.debtValue).to.be.eq(0);\n(0, _chai.expect)(poolStatsAfter.cr).to.be.eq(0);",
                  "err": {},
                  "uuid": "33dac7e5-509c-4ae9-9dc3-819fac79a4c4",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing too much from a position",
                  "fullTitle": "Leverage Positions NFT Positions should revert withdrawing too much from a position",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PositionsUser = positions.connect(users[1]);\nconst leverage = (0, _lib.toBig)(2);\nawait PositionsUser.createPosition({\n    ...position,\n    leverage,\n    borrowAmountMin: 0\n});\nkrETH.setPrice(1600);\nawait (0, _chai.expect)(PositionsUser.withdraw(0, (0, _lib.toBig)(550))).to.be.revertedWith(\"!leverage\");",
                  "err": {},
                  "uuid": "0bd83eff-9155-4443-9141-fce1cf532c95",
                  "parentUUID": "a66a5e37-4c1b-405b-80c9-ce6185d63232",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40b051f8-a167-46f2-8d3c-0906eb7b4fd9",
                "5610ae8e-c6c1-4dd8-8909-06472c7e43c8",
                "9140db3c-3c11-46d2-bac9-589eea8878f3",
                "a1adb7cc-1993-449b-a7f1-3b0a92666601",
                "a66f4017-1fc4-43ee-a8c9-e13426ee1716",
                "68bfde75-6f4d-45c1-ab1e-8dd1af33a7bd",
                "9ffd443e-389b-4e47-8656-48ac66d9f15f",
                "9f0cfd9a-c2f0-4d17-8916-c5bfa480e342",
                "511fae10-1aad-4ef8-9ccb-98477b97283f",
                "f7c0ae21-08a1-4bff-8168-6695a4f0fbf0",
                "0dec977c-7acc-4f2b-97b0-3bcdfa76148a",
                "5ad56a2a-12e6-4c6e-8758-3d2cb4b3dafc",
                "33dac7e5-509c-4ae9-9dc3-819fac79a4c4",
                "0bd83eff-9155-4443-9141-fce1cf532c95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4015,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [
            "78da18c8-9f6a-40a7-8d06-367cbf9e174a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}