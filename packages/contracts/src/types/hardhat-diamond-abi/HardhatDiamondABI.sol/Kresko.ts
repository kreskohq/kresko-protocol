/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export type CollateralAssetStruct = {
    factor: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
    anchor: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    exists: PromiseOrValue<boolean>;
    liquidationIncentive: PromiseOrValue<BigNumberish>;
    redstoneId: PromiseOrValue<BytesLike>;
};

export type CollateralAssetStructOutput = [BigNumber, string, string, number, boolean, BigNumber, string] & {
    factor: BigNumber;
    oracle: string;
    anchor: string;
    decimals: number;
    exists: boolean;
    liquidationIncentive: BigNumber;
    redstoneId: string;
};

export type KrAssetStruct = {
    kFactor: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
    supplyLimit: PromiseOrValue<BigNumberish>;
    anchor: PromiseOrValue<string>;
    closeFee: PromiseOrValue<BigNumberish>;
    openFee: PromiseOrValue<BigNumberish>;
    exists: PromiseOrValue<boolean>;
    redstoneId: PromiseOrValue<BytesLike>;
};

export type KrAssetStructOutput = [BigNumber, string, BigNumber, string, BigNumber, BigNumber, boolean, string] & {
    kFactor: BigNumber;
    oracle: string;
    supplyLimit: BigNumber;
    anchor: string;
    closeFee: BigNumber;
    openFee: BigNumber;
    exists: boolean;
    redstoneId: string;
};

export type MinterInitArgsStruct = {
    admin: PromiseOrValue<string>;
    council: PromiseOrValue<string>;
    treasury: PromiseOrValue<string>;
    extOracleDecimals: PromiseOrValue<BigNumberish>;
    minimumCollateralizationRatio: PromiseOrValue<BigNumberish>;
    minimumDebtValue: PromiseOrValue<BigNumberish>;
    liquidationThreshold: PromiseOrValue<BigNumberish>;
    oracleDeviationPct: PromiseOrValue<BigNumberish>;
    sequencerUptimeFeed: PromiseOrValue<string>;
    sequencerGracePeriodTime: PromiseOrValue<BigNumberish>;
    oracleTimeout: PromiseOrValue<BigNumberish>;
};

export type MinterInitArgsStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
] & {
    admin: string;
    council: string;
    treasury: string;
    extOracleDecimals: number;
    minimumCollateralizationRatio: BigNumber;
    minimumDebtValue: BigNumber;
    liquidationThreshold: BigNumber;
    oracleDeviationPct: BigNumber;
    sequencerUptimeFeed: string;
    sequencerGracePeriodTime: BigNumber;
    oracleTimeout: BigNumber;
};

export type PauseStruct = {
    enabled: PromiseOrValue<boolean>;
    timestamp0: PromiseOrValue<BigNumberish>;
    timestamp1: PromiseOrValue<BigNumberish>;
};

export type PauseStructOutput = [boolean, BigNumber, BigNumber] & {
    enabled: boolean;
    timestamp0: BigNumber;
    timestamp1: BigNumber;
};

export type SafetyStateStruct = { pause: PauseStruct };

export type SafetyStateStructOutput = [PauseStructOutput] & {
    pause: PauseStructOutput;
};

export type StabilityRateConfigStruct = {
    debtIndex: PromiseOrValue<BigNumberish>;
    optimalPriceRate: PromiseOrValue<BigNumberish>;
    rateSlope1: PromiseOrValue<BigNumberish>;
    rateSlope2: PromiseOrValue<BigNumberish>;
    priceRateDelta: PromiseOrValue<BigNumberish>;
    stabilityRate: PromiseOrValue<BigNumberish>;
    stabilityRateBase: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    lastUpdateTimestamp: PromiseOrValue<BigNumberish>;
};

export type StabilityRateConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
] & {
    debtIndex: BigNumber;
    optimalPriceRate: BigNumber;
    rateSlope1: BigNumber;
    rateSlope2: BigNumber;
    priceRateDelta: BigNumber;
    stabilityRate: BigNumber;
    stabilityRateBase: BigNumber;
    asset: string;
    lastUpdateTimestamp: number;
};

export type StabilityRateParamsStruct = {
    stabilityRateBase: PromiseOrValue<BigNumberish>;
    rateSlope1: PromiseOrValue<BigNumberish>;
    rateSlope2: PromiseOrValue<BigNumberish>;
    optimalPriceRate: PromiseOrValue<BigNumberish>;
    priceRateDelta: PromiseOrValue<BigNumberish>;
};

export type StabilityRateParamsStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    stabilityRateBase: BigNumber;
    rateSlope1: BigNumber;
    rateSlope2: BigNumber;
    optimalPriceRate: BigNumber;
    priceRateDelta: BigNumber;
};

export type MinterParamsStruct = {
    minimumCollateralizationRatio: PromiseOrValue<BigNumberish>;
    minimumDebtValue: PromiseOrValue<BigNumberish>;
    liquidationThreshold: PromiseOrValue<BigNumberish>;
    liquidationOverflowPercentage: PromiseOrValue<BigNumberish>;
    feeRecipient: PromiseOrValue<string>;
    extOracleDecimals: PromiseOrValue<BigNumberish>;
    oracleDeviationPct: PromiseOrValue<BigNumberish>;
};

export type MinterParamsStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, string, number, BigNumber] & {
    minimumCollateralizationRatio: BigNumber;
    minimumDebtValue: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationOverflowPercentage: BigNumber;
    feeRecipient: string;
    extOracleDecimals: number;
    oracleDeviationPct: BigNumber;
};

export declare namespace IDiamondCutFacet {
    export type FacetCutStruct = {
        facetAddress: PromiseOrValue<string>;
        action: PromiseOrValue<BigNumberish>;
        functionSelectors: PromiseOrValue<BytesLike>[];
    };

    export type FacetCutStructOutput = [string, number, string[]] & {
        facetAddress: string;
        action: number;
        functionSelectors: string[];
    };
}

export declare namespace IDiamondLoupeFacet {
    export type FacetStruct = {
        facetAddress: PromiseOrValue<string>;
        functionSelectors: PromiseOrValue<BytesLike>[];
    };

    export type FacetStructOutput = [string, string[]] & {
        facetAddress: string;
        functionSelectors: string[];
    };
}

export declare namespace LibUI {
    export type PriceStruct = {
        price: PromiseOrValue<BigNumberish>;
        redstonePrice: PromiseOrValue<BigNumberish>;
        timestamp: PromiseOrValue<BigNumberish>;
        assetAddress: PromiseOrValue<string>;
        roundId: PromiseOrValue<BigNumberish>;
        marketOpen: PromiseOrValue<boolean>;
    };

    export type PriceStructOutput = [BigNumber, BigNumber, BigNumber, string, BigNumber, boolean] & {
        price: BigNumber;
        redstonePrice: BigNumber;
        timestamp: BigNumber;
        assetAddress: string;
        roundId: BigNumber;
        marketOpen: boolean;
    };

    export type KrAssetInfoUserStruct = {
        assetAddress: PromiseOrValue<string>;
        oracleAddress: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        amountScaled: PromiseOrValue<BigNumberish>;
        priceRate: PromiseOrValue<BigNumberish>;
        stabilityRate: PromiseOrValue<BigNumberish>;
        amountUSD: PromiseOrValue<BigNumberish>;
        index: PromiseOrValue<BigNumberish>;
        kFactor: PromiseOrValue<BigNumberish>;
        price: PromiseOrValue<BigNumberish>;
        ammPrice: PromiseOrValue<BigNumberish>;
        symbol: PromiseOrValue<string>;
        name: PromiseOrValue<string>;
        openFee: PromiseOrValue<BigNumberish>;
        closeFee: PromiseOrValue<BigNumberish>;
        redstoneId: PromiseOrValue<BytesLike>;
    };

    export type KrAssetInfoUserStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
    ] & {
        assetAddress: string;
        oracleAddress: string;
        amount: BigNumber;
        amountScaled: BigNumber;
        priceRate: BigNumber;
        stabilityRate: BigNumber;
        amountUSD: BigNumber;
        index: BigNumber;
        kFactor: BigNumber;
        price: BigNumber;
        ammPrice: BigNumber;
        symbol: string;
        name: string;
        openFee: BigNumber;
        closeFee: BigNumber;
        redstoneId: string;
    };

    export type CollateralAssetInfoUserStruct = {
        assetAddress: PromiseOrValue<string>;
        oracleAddress: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        amountUSD: PromiseOrValue<BigNumberish>;
        cFactor: PromiseOrValue<BigNumberish>;
        liquidationIncentive: PromiseOrValue<BigNumberish>;
        decimals: PromiseOrValue<BigNumberish>;
        index: PromiseOrValue<BigNumberish>;
        price: PromiseOrValue<BigNumberish>;
        symbol: PromiseOrValue<string>;
        name: PromiseOrValue<string>;
        redstoneId: PromiseOrValue<BytesLike>;
    };

    export type CollateralAssetInfoUserStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
    ] & {
        assetAddress: string;
        oracleAddress: string;
        amount: BigNumber;
        amountUSD: BigNumber;
        cFactor: BigNumber;
        liquidationIncentive: BigNumber;
        decimals: number;
        index: BigNumber;
        price: BigNumber;
        symbol: string;
        name: string;
        redstoneId: string;
    };

    export type KreskoUserStruct = {
        krAssets: LibUI.KrAssetInfoUserStruct[];
        collateralAssets: LibUI.CollateralAssetInfoUserStruct[];
        redstoneIds: PromiseOrValue<BytesLike>[];
        healthFactor: PromiseOrValue<BigNumberish>;
        debtUSD: PromiseOrValue<BigNumberish>;
        collateralUSD: PromiseOrValue<BigNumberish>;
        minCollateralUSD: PromiseOrValue<BigNumberish>;
        borrowingPowerUSD: PromiseOrValue<BigNumberish>;
    };

    export type KreskoUserStructOutput = [
        LibUI.KrAssetInfoUserStructOutput[],
        LibUI.CollateralAssetInfoUserStructOutput[],
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
    ] & {
        krAssets: LibUI.KrAssetInfoUserStructOutput[];
        collateralAssets: LibUI.CollateralAssetInfoUserStructOutput[];
        redstoneIds: string[];
        healthFactor: BigNumber;
        debtUSD: BigNumber;
        collateralUSD: BigNumber;
        minCollateralUSD: BigNumber;
        borrowingPowerUSD: BigNumber;
    };

    export type BalanceStruct = {
        token: PromiseOrValue<string>;
        balance: PromiseOrValue<BigNumberish>;
    };

    export type BalanceStructOutput = [string, BigNumber] & {
        token: string;
        balance: BigNumber;
    };

    export type StakingDataStruct = {
        pid: PromiseOrValue<BigNumberish>;
        depositToken: PromiseOrValue<string>;
        totalDeposits: PromiseOrValue<BigNumberish>;
        allocPoint: PromiseOrValue<BigNumberish>;
        rewardPerBlocks: PromiseOrValue<BigNumberish>;
        lastRewardBlock: PromiseOrValue<BigNumberish>;
        depositAmount: PromiseOrValue<BigNumberish>;
        rewardTokens: PromiseOrValue<string>[];
        rewardAmounts: PromiseOrValue<BigNumberish>[];
    };

    export type StakingDataStructOutput = [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
    ] & {
        pid: BigNumber;
        depositToken: string;
        totalDeposits: BigNumber;
        allocPoint: BigNumber;
        rewardPerBlocks: BigNumber;
        lastRewardBlock: BigNumber;
        depositAmount: BigNumber;
        rewardTokens: string[];
        rewardAmounts: BigNumber[];
    };

    export type TokenMetadataStruct = {
        decimals: PromiseOrValue<BigNumberish>;
        symbol: PromiseOrValue<string>;
        name: PromiseOrValue<string>;
        totalSupply: PromiseOrValue<BigNumberish>;
    };

    export type TokenMetadataStructOutput = [number, string, string, BigNumber] & {
        decimals: number;
        symbol: string;
        name: string;
        totalSupply: BigNumber;
    };

    export type CollateralAssetInfoStruct = {
        assetAddress: PromiseOrValue<string>;
        oracleAddress: PromiseOrValue<string>;
        price: PromiseOrValue<BigNumberish>;
        value: PromiseOrValue<BigNumberish>;
        liquidationIncentive: PromiseOrValue<BigNumberish>;
        cFactor: PromiseOrValue<BigNumberish>;
        decimals: PromiseOrValue<BigNumberish>;
        symbol: PromiseOrValue<string>;
        name: PromiseOrValue<string>;
        marketOpen: PromiseOrValue<boolean>;
        redstoneId: PromiseOrValue<BytesLike>;
    };

    export type CollateralAssetInfoStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        boolean,
        string,
    ] & {
        assetAddress: string;
        oracleAddress: string;
        price: BigNumber;
        value: BigNumber;
        liquidationIncentive: BigNumber;
        cFactor: BigNumber;
        decimals: number;
        symbol: string;
        name: string;
        marketOpen: boolean;
        redstoneId: string;
    };

    export type KrAssetInfoStruct = {
        oracleAddress: PromiseOrValue<string>;
        assetAddress: PromiseOrValue<string>;
        price: PromiseOrValue<BigNumberish>;
        ammPrice: PromiseOrValue<BigNumberish>;
        priceRate: PromiseOrValue<BigNumberish>;
        stabilityRate: PromiseOrValue<BigNumberish>;
        value: PromiseOrValue<BigNumberish>;
        openFee: PromiseOrValue<BigNumberish>;
        closeFee: PromiseOrValue<BigNumberish>;
        kFactor: PromiseOrValue<BigNumberish>;
        symbol: PromiseOrValue<string>;
        name: PromiseOrValue<string>;
        marketOpen: PromiseOrValue<boolean>;
        redstoneId: PromiseOrValue<BytesLike>;
    };

    export type KrAssetInfoStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        string,
    ] & {
        oracleAddress: string;
        assetAddress: string;
        price: BigNumber;
        ammPrice: BigNumber;
        priceRate: BigNumber;
        stabilityRate: BigNumber;
        value: BigNumber;
        openFee: BigNumber;
        closeFee: BigNumber;
        kFactor: BigNumber;
        symbol: string;
        name: string;
        marketOpen: boolean;
        redstoneId: string;
    };

    export type ProtocolParamsStruct = {
        minDebtValue: PromiseOrValue<BigNumberish>;
        minCollateralRatio: PromiseOrValue<BigNumberish>;
        liquidationThreshold: PromiseOrValue<BigNumberish>;
    };

    export type ProtocolParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
        minDebtValue: BigNumber;
        minCollateralRatio: BigNumber;
        liquidationThreshold: BigNumber;
    };

    export type PairDataStruct = {
        decimals0: PromiseOrValue<BigNumberish>;
        decimals1: PromiseOrValue<BigNumberish>;
        reserve0: PromiseOrValue<BigNumberish>;
        reserve1: PromiseOrValue<BigNumberish>;
        totalSupply: PromiseOrValue<BigNumberish>;
    };

    export type PairDataStructOutput = [number, number, BigNumber, BigNumber, BigNumber] & {
        decimals0: number;
        decimals1: number;
        reserve0: BigNumber;
        reserve1: BigNumber;
        totalSupply: BigNumber;
    };
}

export interface KreskoInterface extends utils.Interface {
    functions: {
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getRoleMember(bytes32,uint256)": FunctionFragment;
        "getRoleMemberCount(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
        "upgradeState(address,bytes)": FunctionFragment;
        "facetAddress(bytes4)": FunctionFragment;
        "facetAddresses()": FunctionFragment;
        "facetFunctionSelectors(address)": FunctionFragment;
        "facets()": FunctionFragment;
        "acceptOwnership()": FunctionFragment;
        "initialized()": FunctionFragment;
        "owner()": FunctionFragment;
        "pendingOwner()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "setERC165(bytes4[],bytes4[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "calcExpectedFee(address,address,uint256,uint256)": FunctionFragment;
        "collateralDeposits(address,address)": FunctionFragment;
        "getAccountCollateralRatio(address)": FunctionFragment;
        "getAccountCollateralValue(address)": FunctionFragment;
        "getAccountKrAssetValue(address)": FunctionFragment;
        "getAccountMinimumCollateralValueAtRatio(address,uint256)": FunctionFragment;
        "getCollateralAdjustedAndRealValue(address,address)": FunctionFragment;
        "getCollateralRatiosFor(address[])": FunctionFragment;
        "getDepositedCollateralAssetIndex(address,address)": FunctionFragment;
        "getDepositedCollateralAssets(address)": FunctionFragment;
        "getMintedKreskoAssets(address)": FunctionFragment;
        "getMintedKreskoAssetsIndex(address,address)": FunctionFragment;
        "kreskoAssetDebt(address,address)": FunctionFragment;
        "kreskoAssetDebtInterest(address,address)": FunctionFragment;
        "kreskoAssetDebtInterestTotal(address)": FunctionFragment;
        "kreskoAssetDebtPrincipal(address,address)": FunctionFragment;
        "burnKreskoAsset(address,address,uint256,uint256)": FunctionFragment;
        "batchCloseKrAssetDebtPositions(address)": FunctionFragment;
        "closeKrAssetDebtPosition(address,address)": FunctionFragment;
        "addCollateralAsset(address,(uint256,address,address,uint8,bool,uint256,bytes32))": FunctionFragment;
        "addKreskoAsset(address,(uint256,address,uint256,address,uint256,uint256,bool,bytes32))": FunctionFragment;
        "initialize((address,address,address,uint8,uint256,uint256,uint256,uint256,address,uint256,uint256))": FunctionFragment;
        "updateAMMOracle(address)": FunctionFragment;
        "updateCFactor(address,uint256)": FunctionFragment;
        "updateCollateralAsset(address,(uint256,address,address,uint8,bool,uint256,bytes32))": FunctionFragment;
        "updateExtOracleDecimals(uint8)": FunctionFragment;
        "updateFeeRecipient(address)": FunctionFragment;
        "updateKFactor(address,uint256)": FunctionFragment;
        "updateKreskoAsset(address,(uint256,address,uint256,address,uint256,uint256,bool,bytes32))": FunctionFragment;
        "updateLiquidationIncentiveMultiplier(address,uint256)": FunctionFragment;
        "updateLiquidationThreshold(uint256)": FunctionFragment;
        "updateMaxLiquidationMultiplier(uint256)": FunctionFragment;
        "updateMinimumCollateralizationRatio(uint256)": FunctionFragment;
        "updateMinimumDebtValue(uint256)": FunctionFragment;
        "updateOracleDeviationPct(uint256)": FunctionFragment;
        "updateOracleTimeout(uint256)": FunctionFragment;
        "updateSequencerGracePeriodTime(uint256)": FunctionFragment;
        "updateSequencerUptimeFeed(address)": FunctionFragment;
        "depositCollateral(address,address,uint256)": FunctionFragment;
        "withdrawCollateral(address,address,uint256,uint256)": FunctionFragment;
        "withdrawCollateralUnchecked(address,address,uint256,uint256,bytes)": FunctionFragment;
        "batchLiquidateInterest(address,address,bool)": FunctionFragment;
        "liquidateInterest(address,address,address,bool)": FunctionFragment;
        "getMaxLiquidation(address,address,address)": FunctionFragment;
        "isAccountLiquidatable(address)": FunctionFragment;
        "liquidate(address,address,uint256,address,uint256,uint256,bool)": FunctionFragment;
        "mintKreskoAsset(address,address,uint256)": FunctionFragment;
        "assetActionPaused(uint8,address)": FunctionFragment;
        "safetyStateFor(address,uint8)": FunctionFragment;
        "safetyStateSet()": FunctionFragment;
        "setSafetyStateSet(bool)": FunctionFragment;
        "toggleAssetsPaused(address[],uint8,bool,uint256)": FunctionFragment;
        "batchRepayFullStabilityRateInterest(address)": FunctionFragment;
        "getDebtIndexForAsset(address)": FunctionFragment;
        "getLastDebtIndexForAccount(address,address)": FunctionFragment;
        "getPriceRateForAsset(address)": FunctionFragment;
        "getStabilityRateConfigurationForAsset(address)": FunctionFragment;
        "getStabilityRateForAsset(address)": FunctionFragment;
        "kiss()": FunctionFragment;
        "repayFullStabilityRateInterest(address,address)": FunctionFragment;
        "repayStabilityRateInterestPartial(address,address,uint256)": FunctionFragment;
        "setupStabilityRateParams(address,(uint128,uint128,uint128,uint128,uint128))": FunctionFragment;
        "updateKiss(address)": FunctionFragment;
        "updateStabilityRateAndIndexForAsset(address)": FunctionFragment;
        "updateStabilityRateParams(address,(uint128,uint128,uint128,uint128,uint128))": FunctionFragment;
        "ammOracle()": FunctionFragment;
        "collateralAsset(address)": FunctionFragment;
        "collateralExists(address)": FunctionFragment;
        "domainSeparator()": FunctionFragment;
        "extOracleDecimals()": FunctionFragment;
        "feeRecipient()": FunctionFragment;
        "getAllParams()": FunctionFragment;
        "getCollateralValueAndOraclePrice(address,uint256,bool)": FunctionFragment;
        "getKrAssetValue(address,uint256,bool)": FunctionFragment;
        "krAssetExists(address)": FunctionFragment;
        "kreskoAsset(address)": FunctionFragment;
        "liquidationIncentiveMultiplier()": FunctionFragment;
        "liquidationThreshold()": FunctionFragment;
        "maxLiquidationMultiplier()": FunctionFragment;
        "minimumCollateralizationRatio()": FunctionFragment;
        "minimumDebtValue()": FunctionFragment;
        "minterInitializations()": FunctionFragment;
        "oracleDeviationPct()": FunctionFragment;
        "batchOracleValues(address[])": FunctionFragment;
        "getAccountData(address,address[],address)": FunctionFragment;
        "getTokenData(address[],address[])": FunctionFragment;
        "getGlobalData(address[],address[])": FunctionFragment;
        "getPairsData(address[])": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "getRoleAdmin"
            | "getRoleMember"
            | "getRoleMemberCount"
            | "grantRole"
            | "hasRole"
            | "renounceRole"
            | "revokeRole"
            | "diamondCut"
            | "upgradeState"
            | "facetAddress"
            | "facetAddresses"
            | "facetFunctionSelectors"
            | "facets"
            | "acceptOwnership"
            | "initialized"
            | "owner"
            | "pendingOwner"
            | "transferOwnership"
            | "setERC165"
            | "supportsInterface"
            | "calcExpectedFee"
            | "collateralDeposits"
            | "getAccountCollateralRatio"
            | "getAccountCollateralValue"
            | "getAccountKrAssetValue"
            | "getAccountMinimumCollateralValueAtRatio"
            | "getCollateralAdjustedAndRealValue"
            | "getCollateralRatiosFor"
            | "getDepositedCollateralAssetIndex"
            | "getDepositedCollateralAssets"
            | "getMintedKreskoAssets"
            | "getMintedKreskoAssetsIndex"
            | "kreskoAssetDebt"
            | "kreskoAssetDebtInterest"
            | "kreskoAssetDebtInterestTotal"
            | "kreskoAssetDebtPrincipal"
            | "burnKreskoAsset"
            | "batchCloseKrAssetDebtPositions"
            | "closeKrAssetDebtPosition"
            | "addCollateralAsset"
            | "addKreskoAsset"
            | "initialize"
            | "updateAMMOracle"
            | "updateCFactor"
            | "updateCollateralAsset"
            | "updateExtOracleDecimals"
            | "updateFeeRecipient"
            | "updateKFactor"
            | "updateKreskoAsset"
            | "updateLiquidationIncentiveMultiplier"
            | "updateLiquidationThreshold"
            | "updateMaxLiquidationMultiplier"
            | "updateMinimumCollateralizationRatio"
            | "updateMinimumDebtValue"
            | "updateOracleDeviationPct"
            | "updateOracleTimeout"
            | "updateSequencerGracePeriodTime"
            | "updateSequencerUptimeFeed"
            | "depositCollateral"
            | "withdrawCollateral"
            | "withdrawCollateralUnchecked"
            | "batchLiquidateInterest"
            | "liquidateInterest"
            | "getMaxLiquidation"
            | "isAccountLiquidatable"
            | "liquidate"
            | "mintKreskoAsset"
            | "assetActionPaused"
            | "safetyStateFor"
            | "safetyStateSet"
            | "setSafetyStateSet"
            | "toggleAssetsPaused"
            | "batchRepayFullStabilityRateInterest"
            | "getDebtIndexForAsset"
            | "getLastDebtIndexForAccount"
            | "getPriceRateForAsset"
            | "getStabilityRateConfigurationForAsset"
            | "getStabilityRateForAsset"
            | "kiss"
            | "repayFullStabilityRateInterest"
            | "repayStabilityRateInterestPartial"
            | "setupStabilityRateParams"
            | "updateKiss"
            | "updateStabilityRateAndIndexForAsset"
            | "updateStabilityRateParams"
            | "ammOracle"
            | "collateralAsset"
            | "collateralExists"
            | "domainSeparator"
            | "extOracleDecimals"
            | "feeRecipient"
            | "getAllParams"
            | "getCollateralValueAndOraclePrice"
            | "getKrAssetValue"
            | "krAssetExists"
            | "kreskoAsset"
            | "liquidationIncentiveMultiplier"
            | "liquidationThreshold"
            | "maxLiquidationMultiplier"
            | "minimumCollateralizationRatio"
            | "minimumDebtValue"
            | "minterInitializations"
            | "oracleDeviationPct"
            | "batchOracleValues"
            | "getAccountData"
            | "getTokenData"
            | "getGlobalData"
            | "getPairsData",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "getRoleMember",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "getRoleMemberCount", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "diamondCut",
        values: [IDiamondCutFacet.FacetCutStruct[], PromiseOrValue<string>, PromiseOrValue<BytesLike>],
    ): string;
    encodeFunctionData(
        functionFragment: "upgradeState",
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
    ): string;
    encodeFunctionData(functionFragment: "facetAddress", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "facetAddresses", values?: undefined): string;
    encodeFunctionData(functionFragment: "facetFunctionSelectors", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "facets", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialized", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "setERC165",
        values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]],
    ): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "calcExpectedFee",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "collateralDeposits",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getAccountCollateralRatio", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getAccountCollateralValue", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getAccountKrAssetValue", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "getAccountMinimumCollateralValueAtRatio",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "getCollateralAdjustedAndRealValue",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getCollateralRatiosFor", values: [PromiseOrValue<string>[]]): string;
    encodeFunctionData(
        functionFragment: "getDepositedCollateralAssetIndex",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getDepositedCollateralAssets", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getMintedKreskoAssets", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "getMintedKreskoAssetsIndex",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "kreskoAssetDebt",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "kreskoAssetDebtInterest",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "kreskoAssetDebtInterestTotal", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "kreskoAssetDebtPrincipal",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "burnKreskoAsset",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
        ],
    ): string;
    encodeFunctionData(functionFragment: "batchCloseKrAssetDebtPositions", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "closeKrAssetDebtPosition",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "addCollateralAsset",
        values: [PromiseOrValue<string>, CollateralAssetStruct],
    ): string;
    encodeFunctionData(functionFragment: "addKreskoAsset", values: [PromiseOrValue<string>, KrAssetStruct]): string;
    encodeFunctionData(functionFragment: "initialize", values: [MinterInitArgsStruct]): string;
    encodeFunctionData(functionFragment: "updateAMMOracle", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "updateCFactor",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "updateCollateralAsset",
        values: [PromiseOrValue<string>, CollateralAssetStruct],
    ): string;
    encodeFunctionData(functionFragment: "updateExtOracleDecimals", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateFeeRecipient", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "updateKFactor",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "updateKreskoAsset", values: [PromiseOrValue<string>, KrAssetStruct]): string;
    encodeFunctionData(
        functionFragment: "updateLiquidationIncentiveMultiplier",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "updateLiquidationThreshold", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "updateMaxLiquidationMultiplier",
        values: [PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "updateMinimumCollateralizationRatio",
        values: [PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "updateMinimumDebtValue", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateOracleDeviationPct", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateOracleTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "updateSequencerGracePeriodTime",
        values: [PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "updateSequencerUptimeFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "depositCollateral",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "withdrawCollateral",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "withdrawCollateralUnchecked",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "batchLiquidateInterest",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
    ): string;
    encodeFunctionData(
        functionFragment: "liquidateInterest",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
    ): string;
    encodeFunctionData(
        functionFragment: "getMaxLiquidation",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "isAccountLiquidatable", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "liquidate",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<boolean>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "mintKreskoAsset",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "assetActionPaused",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "safetyStateFor",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "safetyStateSet", values?: undefined): string;
    encodeFunctionData(functionFragment: "setSafetyStateSet", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(
        functionFragment: "toggleAssetsPaused",
        values: [
            PromiseOrValue<string>[],
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<boolean>,
            PromiseOrValue<BigNumberish>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "batchRepayFullStabilityRateInterest",
        values: [PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getDebtIndexForAsset", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "getLastDebtIndexForAccount",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getPriceRateForAsset", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "getStabilityRateConfigurationForAsset",
        values: [PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getStabilityRateForAsset", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "kiss", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "repayFullStabilityRateInterest",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "repayStabilityRateInterestPartial",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "setupStabilityRateParams",
        values: [PromiseOrValue<string>, StabilityRateParamsStruct],
    ): string;
    encodeFunctionData(functionFragment: "updateKiss", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "updateStabilityRateAndIndexForAsset",
        values: [PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "updateStabilityRateParams",
        values: [PromiseOrValue<string>, StabilityRateParamsStruct],
    ): string;
    encodeFunctionData(functionFragment: "ammOracle", values?: undefined): string;
    encodeFunctionData(functionFragment: "collateralAsset", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "collateralExists", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "domainSeparator", values?: undefined): string;
    encodeFunctionData(functionFragment: "extOracleDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "feeRecipient", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAllParams", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getCollateralValueAndOraclePrice",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
    ): string;
    encodeFunctionData(
        functionFragment: "getKrAssetValue",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
    ): string;
    encodeFunctionData(functionFragment: "krAssetExists", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "kreskoAsset", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "liquidationIncentiveMultiplier", values?: undefined): string;
    encodeFunctionData(functionFragment: "liquidationThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxLiquidationMultiplier", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumCollateralizationRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumDebtValue", values?: undefined): string;
    encodeFunctionData(functionFragment: "minterInitializations", values?: undefined): string;
    encodeFunctionData(functionFragment: "oracleDeviationPct", values?: undefined): string;
    encodeFunctionData(functionFragment: "batchOracleValues", values: [PromiseOrValue<string>[]]): string;
    encodeFunctionData(
        functionFragment: "getAccountData",
        values: [PromiseOrValue<string>, PromiseOrValue<string>[], PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "getTokenData",
        values: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
    ): string;
    encodeFunctionData(
        functionFragment: "getGlobalData",
        values: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
    ): string;
    encodeFunctionData(functionFragment: "getPairsData", values: [PromiseOrValue<string>[]]): string;

    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMemberCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeState", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "facetAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "facetAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "facetFunctionSelectors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setERC165", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calcExpectedFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountCollateralRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountCollateralValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountKrAssetValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountMinimumCollateralValueAtRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCollateralAdjustedAndRealValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCollateralRatiosFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDepositedCollateralAssetIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDepositedCollateralAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMintedKreskoAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMintedKreskoAssetsIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssetDebt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssetDebtInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssetDebtInterestTotal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssetDebtPrincipal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchCloseKrAssetDebtPositions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "closeKrAssetDebtPosition", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addCollateralAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateAMMOracle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateCFactor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateCollateralAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateExtOracleDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateFeeRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateKFactor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLiquidationIncentiveMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLiquidationThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMaxLiquidationMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMinimumCollateralizationRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMinimumDebtValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateOracleDeviationPct", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateOracleTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSequencerGracePeriodTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSequencerUptimeFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawCollateralUnchecked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchLiquidateInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidateInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMaxLiquidation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAccountLiquidatable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assetActionPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safetyStateFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safetyStateSet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSafetyStateSet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleAssetsPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchRepayFullStabilityRateInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDebtIndexForAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLastDebtIndexForAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriceRateForAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStabilityRateConfigurationForAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStabilityRateForAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kiss", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repayFullStabilityRateInterest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repayStabilityRateInterestPartial", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setupStabilityRateParams", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateKiss", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateStabilityRateAndIndexForAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateStabilityRateParams", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ammOracle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "domainSeparator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "extOracleDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllParams", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCollateralValueAndOraclePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getKrAssetValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "krAssetExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidationIncentiveMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidationThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxLiquidationMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumCollateralizationRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumDebtValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minterInitializations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracleDeviationPct", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchOracleValues", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGlobalData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPairsData", data: BytesLike): Result;

    events: {};
}

export interface Kresko extends BaseContract {
    contractName: "Kresko";

    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: KreskoInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        diamondCut(
            _diamondCut: IDiamondCutFacet.FacetCutStruct[],
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        upgradeState(
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        facetAddress(
            _functionSelector: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<[string] & { facetAddress_: string }>;

        facetAddresses(overrides?: CallOverrides): Promise<[string[]] & { facetAddresses_: string[] }>;

        facetFunctionSelectors(
            _facet: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

        facets(overrides?: CallOverrides): Promise<
            [IDiamondLoupeFacet.FacetStructOutput[]] & {
                facets_: IDiamondLoupeFacet.FacetStructOutput[];
            }
        >;

        acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

        initialized(overrides?: CallOverrides): Promise<[boolean] & { initialized_: boolean }>;

        owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

        pendingOwner(overrides?: CallOverrides): Promise<[string] & { pendingOwner_: string }>;

        transferOwnership(
            _newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        setERC165(
            interfaceIds: PromiseOrValue<BytesLike>[],
            interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

        calcExpectedFee(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
            _feeType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[string[], BigNumber[]]>;

        collateralDeposits(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        getAccountCollateralRatio(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { ratio: BigNumber }>;

        getAccountCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        getAccountKrAssetValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        getAccountMinimumCollateralValueAtRatio(
            _account: PromiseOrValue<string>,
            _ratio: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        getCollateralAdjustedAndRealValue(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                adjustedValue: BigNumber;
                realValue: BigNumber;
            }
        >;

        getCollateralRatiosFor(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<[BigNumber[]]>;

        getDepositedCollateralAssetIndex(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { i: BigNumber }>;

        getDepositedCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

        getMintedKreskoAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

        getMintedKreskoAssetsIndex(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        kreskoAssetDebt(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        kreskoAssetDebtInterest(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { assetAmount: BigNumber; kissAmount: BigNumber }>;

        kreskoAssetDebtInterestTotal(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { kissAmount: BigNumber }>;

        kreskoAssetDebtPrincipal(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        burnKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _burnAmount: PromiseOrValue<BigNumberish>,
            _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        batchCloseKrAssetDebtPositions(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        closeKrAssetDebtPosition(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        addCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        addKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        initialize(
            args: MinterInitArgsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateAMMOracle(
            _ammOracle: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateCFactor(
            _collateralAsset: PromiseOrValue<string>,
            _cFactor: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateExtOracleDecimals(
            _decimals: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateFeeRecipient(
            _feeRecipient: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateKFactor(
            _kreskoAsset: PromiseOrValue<string>,
            _kFactor: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateLiquidationIncentiveMultiplier(
            _collateralAsset: PromiseOrValue<string>,
            _liquidationIncentiveMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateLiquidationThreshold(
            _liquidationThreshold: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateMaxLiquidationMultiplier(
            _maxLiquidationMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateMinimumDebtValue(
            _minimumDebtValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateOracleDeviationPct(
            _oracleDeviationPct: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateOracleTimeout(
            _oracleTimeout: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateSequencerGracePeriodTime(
            _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateSequencerUptimeFeed(
            _sequencerUptimeFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        depositCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _depositAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        withdrawCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        withdrawCollateralUnchecked(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            _userData: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        batchLiquidateInterest(
            _account: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        liquidateInterest(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        getMaxLiquidation(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { maxLiquidatableUSD: BigNumber }>;

        isAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

        liquidate(
            _account: PromiseOrValue<string>,
            _repayAsset: PromiseOrValue<string>,
            _repayAmount: PromiseOrValue<BigNumberish>,
            _seizeAsset: PromiseOrValue<string>,
            _repayAssetIndex: PromiseOrValue<BigNumberish>,
            _seizeAssetIndex: PromiseOrValue<BigNumberish>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        mintKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _mintAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        assetActionPaused(
            _action: PromiseOrValue<BigNumberish>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        safetyStateFor(
            _asset: PromiseOrValue<string>,
            _action: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[SafetyStateStructOutput]>;

        safetyStateSet(overrides?: CallOverrides): Promise<[boolean]>;

        setSafetyStateSet(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        toggleAssetsPaused(
            _assets: PromiseOrValue<string>[],
            _action: PromiseOrValue<BigNumberish>,
            _withDuration: PromiseOrValue<boolean>,
            _duration: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        batchRepayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        getDebtIndexForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { debtIndex: BigNumber }>;

        getLastDebtIndexForAccount(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { lastDebtIndex: BigNumber }>;

        getPriceRateForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { priceRate: BigNumber }>;

        getStabilityRateConfigurationForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[StabilityRateConfigStructOutput]>;

        getStabilityRateForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { stabilityRate: BigNumber }>;

        kiss(overrides?: CallOverrides): Promise<[string]>;

        repayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        repayStabilityRateInterestPartial(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kissRepayAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        setupStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateKiss(
            _kiss: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateStabilityRateAndIndexForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        ammOracle(overrides?: CallOverrides): Promise<[string]>;

        collateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[CollateralAssetStructOutput] & { asset: CollateralAssetStructOutput }>;

        collateralExists(
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean] & { exists: boolean }>;

        domainSeparator(overrides?: CallOverrides): Promise<[string]>;

        extOracleDecimals(overrides?: CallOverrides): Promise<[number]>;

        feeRecipient(overrides?: CallOverrides): Promise<[string]>;

        getAllParams(overrides?: CallOverrides): Promise<[MinterParamsStructOutput]>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreCollateralFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { value: BigNumber; oraclePrice: BigNumber }>;

        getKrAssetValue(
            _kreskoAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreKFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { value: BigNumber }>;

        krAssetExists(
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean] & { exists: boolean }>;

        kreskoAsset(
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[KrAssetStructOutput] & { asset: KrAssetStructOutput }>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

        liquidationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

        maxLiquidationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

        minimumDebtValue(overrides?: CallOverrides): Promise<[BigNumber]>;

        minterInitializations(overrides?: CallOverrides): Promise<[BigNumber]>;

        oracleDeviationPct(overrides?: CallOverrides): Promise<[BigNumber]>;

        batchOracleValues(
            _assets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<[LibUI.PriceStructOutput[]] & { result: LibUI.PriceStructOutput[] }>;

        getAccountData(
            _account: PromiseOrValue<string>,
            _tokens: PromiseOrValue<string>[],
            _staking: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<
            [LibUI.KreskoUserStructOutput, LibUI.BalanceStructOutput[], LibUI.StakingDataStructOutput[], BigNumber] & {
                user: LibUI.KreskoUserStructOutput;
                balances: LibUI.BalanceStructOutput[];
                stakingData: LibUI.StakingDataStructOutput[];
                ethBalance: BigNumber;
            }
        >;

        getTokenData(
            _allTokens: PromiseOrValue<string>[],
            _assets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<
            [LibUI.TokenMetadataStructOutput[], LibUI.PriceStructOutput[]] & {
                metadatas: LibUI.TokenMetadataStructOutput[];
                prices: LibUI.PriceStructOutput[];
            }
        >;

        getGlobalData(
            _collateralAssets: PromiseOrValue<string>[],
            _krAssets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<
            [
                LibUI.CollateralAssetInfoStructOutput[],
                LibUI.KrAssetInfoStructOutput[],
                LibUI.ProtocolParamsStructOutput,
            ] & {
                collateralAssets: LibUI.CollateralAssetInfoStructOutput[];
                krAssets: LibUI.KrAssetInfoStructOutput[];
                protocolParams: LibUI.ProtocolParamsStructOutput;
            }
        >;

        getPairsData(
            _pairAddresses: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<[LibUI.PairDataStructOutput[]] & { result: LibUI.PairDataStructOutput[] }>;
    };

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
        role: PromiseOrValue<BytesLike>,
        index: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    renounceRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    diamondCut(
        _diamondCut: IDiamondCutFacet.FacetCutStruct[],
        _init: PromiseOrValue<string>,
        _calldata: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeState(
        _init: PromiseOrValue<string>,
        _calldata: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    facetAddress(_functionSelector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(_facet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<IDiamondLoupeFacet.FacetStructOutput[]>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
        _newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setERC165(
        interfaceIds: PromiseOrValue<BytesLike>[],
        interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    calcExpectedFee(
        _account: PromiseOrValue<string>,
        _kreskoAsset: PromiseOrValue<string>,
        _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
        _feeType: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    collateralDeposits(
        _account: PromiseOrValue<string>,
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAccountCollateralRatio(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountKrAssetValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountMinimumCollateralValueAtRatio(
        _account: PromiseOrValue<string>,
        _ratio: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCollateralAdjustedAndRealValue(
        _account: PromiseOrValue<string>,
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { adjustedValue: BigNumber; realValue: BigNumber }>;

    getCollateralRatiosFor(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    getDepositedCollateralAssetIndex(
        _account: PromiseOrValue<string>,
        _collateralAsset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDepositedCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getMintedKreskoAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getMintedKreskoAssetsIndex(
        _account: PromiseOrValue<string>,
        _kreskoAsset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    kreskoAssetDebt(
        _account: PromiseOrValue<string>,
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    kreskoAssetDebtInterest(
        _account: PromiseOrValue<string>,
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assetAmount: BigNumber; kissAmount: BigNumber }>;

    kreskoAssetDebtInterestTotal(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    kreskoAssetDebtPrincipal(
        _account: PromiseOrValue<string>,
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burnKreskoAsset(
        _account: PromiseOrValue<string>,
        _kreskoAsset: PromiseOrValue<string>,
        _burnAmount: PromiseOrValue<BigNumberish>,
        _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    batchCloseKrAssetDebtPositions(
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeKrAssetDebtPosition(
        _account: PromiseOrValue<string>,
        _kreskoAsset: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addCollateralAsset(
        _collateralAsset: PromiseOrValue<string>,
        _config: CollateralAssetStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addKreskoAsset(
        _krAsset: PromiseOrValue<string>,
        _config: KrAssetStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
        args: MinterInitArgsStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAMMOracle(
        _ammOracle: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateCFactor(
        _collateralAsset: PromiseOrValue<string>,
        _cFactor: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateCollateralAsset(
        _collateralAsset: PromiseOrValue<string>,
        _config: CollateralAssetStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateExtOracleDecimals(
        _decimals: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
        _feeRecipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateKFactor(
        _kreskoAsset: PromiseOrValue<string>,
        _kFactor: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateKreskoAsset(
        _krAsset: PromiseOrValue<string>,
        _config: KrAssetStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationIncentiveMultiplier(
        _collateralAsset: PromiseOrValue<string>,
        _liquidationIncentiveMultiplier: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationThreshold(
        _liquidationThreshold: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxLiquidationMultiplier(
        _maxLiquidationMultiplier: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinimumCollateralizationRatio(
        _minimumCollateralizationRatio: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinimumDebtValue(
        _minimumDebtValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleDeviationPct(
        _oracleDeviationPct: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOracleTimeout(
        _oracleTimeout: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSequencerGracePeriodTime(
        _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSequencerUptimeFeed(
        _sequencerUptimeFeed: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositCollateral(
        _account: PromiseOrValue<string>,
        _collateralAsset: PromiseOrValue<string>,
        _depositAmount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
        _account: PromiseOrValue<string>,
        _collateralAsset: PromiseOrValue<string>,
        _withdrawAmount: PromiseOrValue<BigNumberish>,
        _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateralUnchecked(
        _account: PromiseOrValue<string>,
        _collateralAsset: PromiseOrValue<string>,
        _withdrawAmount: PromiseOrValue<BigNumberish>,
        _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
        _userData: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    batchLiquidateInterest(
        _account: PromiseOrValue<string>,
        _collateralAssetToSeize: PromiseOrValue<string>,
        _allowSeizeUnderflow: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateInterest(
        _account: PromiseOrValue<string>,
        _repayKreskoAsset: PromiseOrValue<string>,
        _collateralAssetToSeize: PromiseOrValue<string>,
        _allowSeizeUnderflow: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getMaxLiquidation(
        _account: PromiseOrValue<string>,
        _repayKreskoAsset: PromiseOrValue<string>,
        _collateralAssetToSeize: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    liquidate(
        _account: PromiseOrValue<string>,
        _repayAsset: PromiseOrValue<string>,
        _repayAmount: PromiseOrValue<BigNumberish>,
        _seizeAsset: PromiseOrValue<string>,
        _repayAssetIndex: PromiseOrValue<BigNumberish>,
        _seizeAssetIndex: PromiseOrValue<BigNumberish>,
        _allowSeizeUnderflow: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintKreskoAsset(
        _account: PromiseOrValue<string>,
        _kreskoAsset: PromiseOrValue<string>,
        _mintAmount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    assetActionPaused(
        _action: PromiseOrValue<BigNumberish>,
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    safetyStateFor(
        _asset: PromiseOrValue<string>,
        _action: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<SafetyStateStructOutput>;

    safetyStateSet(overrides?: CallOverrides): Promise<boolean>;

    setSafetyStateSet(
        val: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    toggleAssetsPaused(
        _assets: PromiseOrValue<string>[],
        _action: PromiseOrValue<BigNumberish>,
        _withDuration: PromiseOrValue<boolean>,
        _duration: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    batchRepayFullStabilityRateInterest(
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getDebtIndexForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getLastDebtIndexForAccount(
        _account: PromiseOrValue<string>,
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPriceRateForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getStabilityRateConfigurationForAsset(
        _asset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<StabilityRateConfigStructOutput>;

    getStabilityRateForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    kiss(overrides?: CallOverrides): Promise<string>;

    repayFullStabilityRateInterest(
        _account: PromiseOrValue<string>,
        _kreskoAsset: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayStabilityRateInterestPartial(
        _account: PromiseOrValue<string>,
        _kreskoAsset: PromiseOrValue<string>,
        _kissRepayAmount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setupStabilityRateParams(
        _asset: PromiseOrValue<string>,
        _setup: StabilityRateParamsStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateKiss(
        _kiss: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStabilityRateAndIndexForAsset(
        _asset: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStabilityRateParams(
        _asset: PromiseOrValue<string>,
        _setup: StabilityRateParamsStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    ammOracle(overrides?: CallOverrides): Promise<string>;

    collateralAsset(
        _collateralAsset: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<CollateralAssetStructOutput>;

    collateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    extOracleDecimals(overrides?: CallOverrides): Promise<number>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getAllParams(overrides?: CallOverrides): Promise<MinterParamsStructOutput>;

    getCollateralValueAndOraclePrice(
        _collateralAsset: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        _ignoreCollateralFactor: PromiseOrValue<boolean>,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; oraclePrice: BigNumber }>;

    getKrAssetValue(
        _kreskoAsset: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        _ignoreKFactor: PromiseOrValue<boolean>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    krAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    kreskoAsset(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<KrAssetStructOutput>;

    liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minimumCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

    minterInitializations(overrides?: CallOverrides): Promise<BigNumber>;

    oracleDeviationPct(overrides?: CallOverrides): Promise<BigNumber>;

    batchOracleValues(_assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<LibUI.PriceStructOutput[]>;

    getAccountData(
        _account: PromiseOrValue<string>,
        _tokens: PromiseOrValue<string>[],
        _staking: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<
        [LibUI.KreskoUserStructOutput, LibUI.BalanceStructOutput[], LibUI.StakingDataStructOutput[], BigNumber] & {
            user: LibUI.KreskoUserStructOutput;
            balances: LibUI.BalanceStructOutput[];
            stakingData: LibUI.StakingDataStructOutput[];
            ethBalance: BigNumber;
        }
    >;

    getTokenData(
        _allTokens: PromiseOrValue<string>[],
        _assets: PromiseOrValue<string>[],
        overrides?: CallOverrides,
    ): Promise<
        [LibUI.TokenMetadataStructOutput[], LibUI.PriceStructOutput[]] & {
            metadatas: LibUI.TokenMetadataStructOutput[];
            prices: LibUI.PriceStructOutput[];
        }
    >;

    getGlobalData(
        _collateralAssets: PromiseOrValue<string>[],
        _krAssets: PromiseOrValue<string>[],
        overrides?: CallOverrides,
    ): Promise<
        [LibUI.CollateralAssetInfoStructOutput[], LibUI.KrAssetInfoStructOutput[], LibUI.ProtocolParamsStructOutput] & {
            collateralAssets: LibUI.CollateralAssetInfoStructOutput[];
            krAssets: LibUI.KrAssetInfoStructOutput[];
            protocolParams: LibUI.ProtocolParamsStructOutput;
        }
    >;

    getPairsData(
        _pairAddresses: PromiseOrValue<string>[],
        overrides?: CallOverrides,
    ): Promise<LibUI.PairDataStructOutput[]>;

    callStatic: {
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<string>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        diamondCut(
            _diamondCut: IDiamondCutFacet.FacetCutStruct[],
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<void>;

        upgradeState(
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<void>;

        facetAddress(_functionSelector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        facetAddresses(overrides?: CallOverrides): Promise<string[]>;

        facetFunctionSelectors(_facet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

        facets(overrides?: CallOverrides): Promise<IDiamondLoupeFacet.FacetStructOutput[]>;

        acceptOwnership(overrides?: CallOverrides): Promise<void>;

        initialized(overrides?: CallOverrides): Promise<boolean>;

        owner(overrides?: CallOverrides): Promise<string>;

        pendingOwner(overrides?: CallOverrides): Promise<string>;

        transferOwnership(_newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        setERC165(
            interfaceIds: PromiseOrValue<BytesLike>[],
            interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
            overrides?: CallOverrides,
        ): Promise<void>;

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

        calcExpectedFee(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
            _feeType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[string[], BigNumber[]]>;

        collateralDeposits(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getAccountCollateralRatio(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountKrAssetValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountMinimumCollateralValueAtRatio(
            _account: PromiseOrValue<string>,
            _ratio: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getCollateralAdjustedAndRealValue(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                adjustedValue: BigNumber;
                realValue: BigNumber;
            }
        >;

        getCollateralRatiosFor(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

        getDepositedCollateralAssetIndex(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getDepositedCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

        getMintedKreskoAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

        getMintedKreskoAssetsIndex(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        kreskoAssetDebt(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        kreskoAssetDebtInterest(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { assetAmount: BigNumber; kissAmount: BigNumber }>;

        kreskoAssetDebtInterestTotal(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssetDebtPrincipal(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        burnKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _burnAmount: PromiseOrValue<BigNumberish>,
            _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        batchCloseKrAssetDebtPositions(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        closeKrAssetDebtPosition(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        addCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: CallOverrides,
        ): Promise<void>;

        addKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: CallOverrides,
        ): Promise<void>;

        initialize(args: MinterInitArgsStruct, overrides?: CallOverrides): Promise<void>;

        updateAMMOracle(_ammOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        updateCFactor(
            _collateralAsset: PromiseOrValue<string>,
            _cFactor: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateExtOracleDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        updateFeeRecipient(_feeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        updateKFactor(
            _kreskoAsset: PromiseOrValue<string>,
            _kFactor: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateLiquidationIncentiveMultiplier(
            _collateralAsset: PromiseOrValue<string>,
            _liquidationIncentiveMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateLiquidationThreshold(
            _liquidationThreshold: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateMaxLiquidationMultiplier(
            _maxLiquidationMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateMinimumDebtValue(
            _minimumDebtValue: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateOracleDeviationPct(
            _oracleDeviationPct: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateOracleTimeout(_oracleTimeout: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        updateSequencerGracePeriodTime(
            _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateSequencerUptimeFeed(
            _sequencerUptimeFeed: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        depositCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _depositAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        withdrawCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        withdrawCollateralUnchecked(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            _userData: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<void>;

        batchLiquidateInterest(
            _account: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<void>;

        liquidateInterest(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<void>;

        getMaxLiquidation(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        isAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        liquidate(
            _account: PromiseOrValue<string>,
            _repayAsset: PromiseOrValue<string>,
            _repayAmount: PromiseOrValue<BigNumberish>,
            _seizeAsset: PromiseOrValue<string>,
            _repayAssetIndex: PromiseOrValue<BigNumberish>,
            _seizeAssetIndex: PromiseOrValue<BigNumberish>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<void>;

        mintKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _mintAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        assetActionPaused(
            _action: PromiseOrValue<BigNumberish>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        safetyStateFor(
            _asset: PromiseOrValue<string>,
            _action: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<SafetyStateStructOutput>;

        safetyStateSet(overrides?: CallOverrides): Promise<boolean>;

        setSafetyStateSet(val: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

        toggleAssetsPaused(
            _assets: PromiseOrValue<string>[],
            _action: PromiseOrValue<BigNumberish>,
            _withDuration: PromiseOrValue<boolean>,
            _duration: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        batchRepayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getDebtIndexForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getLastDebtIndexForAccount(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getPriceRateForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getStabilityRateConfigurationForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<StabilityRateConfigStructOutput>;

        getStabilityRateForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        kiss(overrides?: CallOverrides): Promise<string>;

        repayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        repayStabilityRateInterestPartial(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kissRepayAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        setupStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateKiss(_kiss: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        updateStabilityRateAndIndexForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        updateStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: CallOverrides,
        ): Promise<void>;

        ammOracle(overrides?: CallOverrides): Promise<string>;

        collateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<CollateralAssetStructOutput>;

        collateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        domainSeparator(overrides?: CallOverrides): Promise<string>;

        extOracleDecimals(overrides?: CallOverrides): Promise<number>;

        feeRecipient(overrides?: CallOverrides): Promise<string>;

        getAllParams(overrides?: CallOverrides): Promise<MinterParamsStructOutput>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreCollateralFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { value: BigNumber; oraclePrice: BigNumber }>;

        getKrAssetValue(
            _kreskoAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreKFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        krAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        kreskoAsset(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<KrAssetStructOutput>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

        liquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

        maxLiquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

        minimumDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

        minterInitializations(overrides?: CallOverrides): Promise<BigNumber>;

        oracleDeviationPct(overrides?: CallOverrides): Promise<BigNumber>;

        batchOracleValues(
            _assets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<LibUI.PriceStructOutput[]>;

        getAccountData(
            _account: PromiseOrValue<string>,
            _tokens: PromiseOrValue<string>[],
            _staking: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<
            [LibUI.KreskoUserStructOutput, LibUI.BalanceStructOutput[], LibUI.StakingDataStructOutput[], BigNumber] & {
                user: LibUI.KreskoUserStructOutput;
                balances: LibUI.BalanceStructOutput[];
                stakingData: LibUI.StakingDataStructOutput[];
                ethBalance: BigNumber;
            }
        >;

        getTokenData(
            _allTokens: PromiseOrValue<string>[],
            _assets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<
            [LibUI.TokenMetadataStructOutput[], LibUI.PriceStructOutput[]] & {
                metadatas: LibUI.TokenMetadataStructOutput[];
                prices: LibUI.PriceStructOutput[];
            }
        >;

        getGlobalData(
            _collateralAssets: PromiseOrValue<string>[],
            _krAssets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<
            [
                LibUI.CollateralAssetInfoStructOutput[],
                LibUI.KrAssetInfoStructOutput[],
                LibUI.ProtocolParamsStructOutput,
            ] & {
                collateralAssets: LibUI.CollateralAssetInfoStructOutput[];
                krAssets: LibUI.KrAssetInfoStructOutput[];
                protocolParams: LibUI.ProtocolParamsStructOutput;
            }
        >;

        getPairsData(
            _pairAddresses: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<LibUI.PairDataStructOutput[]>;
    };

    filters: {};

    estimateGas: {
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        diamondCut(
            _diamondCut: IDiamondCutFacet.FacetCutStruct[],
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        upgradeState(
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        facetAddress(_functionSelector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

        facetFunctionSelectors(_facet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        facets(overrides?: CallOverrides): Promise<BigNumber>;

        acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        initialized(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            _newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        setERC165(
            interfaceIds: PromiseOrValue<BytesLike>[],
            interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        calcExpectedFee(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
            _feeType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        collateralDeposits(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getAccountCollateralRatio(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountCollateralValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountKrAssetValue(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountMinimumCollateralValueAtRatio(
            _account: PromiseOrValue<string>,
            _ratio: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getCollateralAdjustedAndRealValue(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getCollateralRatiosFor(_accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;

        getDepositedCollateralAssetIndex(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getDepositedCollateralAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getMintedKreskoAssets(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getMintedKreskoAssetsIndex(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        kreskoAssetDebt(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        kreskoAssetDebtInterest(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        kreskoAssetDebtInterestTotal(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssetDebtPrincipal(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        burnKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _burnAmount: PromiseOrValue<BigNumberish>,
            _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        batchCloseKrAssetDebtPositions(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        closeKrAssetDebtPosition(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        addCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        addKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        initialize(
            args: MinterInitArgsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateAMMOracle(
            _ammOracle: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateCFactor(
            _collateralAsset: PromiseOrValue<string>,
            _cFactor: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateExtOracleDecimals(
            _decimals: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateFeeRecipient(
            _feeRecipient: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateKFactor(
            _kreskoAsset: PromiseOrValue<string>,
            _kFactor: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateLiquidationIncentiveMultiplier(
            _collateralAsset: PromiseOrValue<string>,
            _liquidationIncentiveMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateLiquidationThreshold(
            _liquidationThreshold: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateMaxLiquidationMultiplier(
            _maxLiquidationMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateMinimumDebtValue(
            _minimumDebtValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateOracleDeviationPct(
            _oracleDeviationPct: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateOracleTimeout(
            _oracleTimeout: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateSequencerGracePeriodTime(
            _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateSequencerUptimeFeed(
            _sequencerUptimeFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        depositCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _depositAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        withdrawCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        withdrawCollateralUnchecked(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            _userData: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        batchLiquidateInterest(
            _account: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        liquidateInterest(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        getMaxLiquidation(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        isAccountLiquidatable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        liquidate(
            _account: PromiseOrValue<string>,
            _repayAsset: PromiseOrValue<string>,
            _repayAmount: PromiseOrValue<BigNumberish>,
            _seizeAsset: PromiseOrValue<string>,
            _repayAssetIndex: PromiseOrValue<BigNumberish>,
            _seizeAssetIndex: PromiseOrValue<BigNumberish>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        mintKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _mintAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        assetActionPaused(
            _action: PromiseOrValue<BigNumberish>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        safetyStateFor(
            _asset: PromiseOrValue<string>,
            _action: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        safetyStateSet(overrides?: CallOverrides): Promise<BigNumber>;

        setSafetyStateSet(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        toggleAssetsPaused(
            _assets: PromiseOrValue<string>[],
            _action: PromiseOrValue<BigNumberish>,
            _withDuration: PromiseOrValue<boolean>,
            _duration: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        batchRepayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        getDebtIndexForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getLastDebtIndexForAccount(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getPriceRateForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getStabilityRateConfigurationForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getStabilityRateForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        kiss(overrides?: CallOverrides): Promise<BigNumber>;

        repayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        repayStabilityRateInterestPartial(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kissRepayAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        setupStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateKiss(
            _kiss: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateStabilityRateAndIndexForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        ammOracle(overrides?: CallOverrides): Promise<BigNumber>;

        collateralAsset(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        collateralExists(_collateralAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

        extOracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

        feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

        getAllParams(overrides?: CallOverrides): Promise<BigNumber>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreCollateralFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getKrAssetValue(
            _kreskoAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreKFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        krAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAsset(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

        liquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

        maxLiquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

        minimumDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

        minterInitializations(overrides?: CallOverrides): Promise<BigNumber>;

        oracleDeviationPct(overrides?: CallOverrides): Promise<BigNumber>;

        batchOracleValues(_assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;

        getAccountData(
            _account: PromiseOrValue<string>,
            _tokens: PromiseOrValue<string>[],
            _staking: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getTokenData(
            _allTokens: PromiseOrValue<string>[],
            _assets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getGlobalData(
            _collateralAssets: PromiseOrValue<string>[],
            _krAssets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getPairsData(_pairAddresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        diamondCut(
            _diamondCut: IDiamondCutFacet.FacetCutStruct[],
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        upgradeState(
            _init: PromiseOrValue<string>,
            _calldata: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        facetAddress(
            _functionSelector: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        facetFunctionSelectors(
            _facet: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

        initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            _newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        setERC165(
            interfaceIds: PromiseOrValue<BytesLike>[],
            interfaceIdsToRemove: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            _interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        calcExpectedFee(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kreskoAssetAmount: PromiseOrValue<BigNumberish>,
            _feeType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        collateralDeposits(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getAccountCollateralRatio(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getAccountCollateralValue(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getAccountKrAssetValue(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getAccountMinimumCollateralValueAtRatio(
            _account: PromiseOrValue<string>,
            _ratio: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getCollateralAdjustedAndRealValue(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getCollateralRatiosFor(
            _accounts: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getDepositedCollateralAssetIndex(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getDepositedCollateralAssets(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMintedKreskoAssets(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMintedKreskoAssetsIndex(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        kreskoAssetDebt(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        kreskoAssetDebtInterest(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        kreskoAssetDebtInterestTotal(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        kreskoAssetDebtPrincipal(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        burnKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _burnAmount: PromiseOrValue<BigNumberish>,
            _mintedKreskoAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        batchCloseKrAssetDebtPositions(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        closeKrAssetDebtPosition(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        addCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        addKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        initialize(
            args: MinterInitArgsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateAMMOracle(
            _ammOracle: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateCFactor(
            _collateralAsset: PromiseOrValue<string>,
            _cFactor: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateCollateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            _config: CollateralAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateExtOracleDecimals(
            _decimals: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateFeeRecipient(
            _feeRecipient: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateKFactor(
            _kreskoAsset: PromiseOrValue<string>,
            _kFactor: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateKreskoAsset(
            _krAsset: PromiseOrValue<string>,
            _config: KrAssetStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateLiquidationIncentiveMultiplier(
            _collateralAsset: PromiseOrValue<string>,
            _liquidationIncentiveMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateLiquidationThreshold(
            _liquidationThreshold: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateMaxLiquidationMultiplier(
            _maxLiquidationMultiplier: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateMinimumDebtValue(
            _minimumDebtValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateOracleDeviationPct(
            _oracleDeviationPct: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateOracleTimeout(
            _oracleTimeout: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateSequencerGracePeriodTime(
            _sequencerGracePeriodTime: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateSequencerUptimeFeed(
            _sequencerUptimeFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        depositCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _depositAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        withdrawCollateral(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        withdrawCollateralUnchecked(
            _account: PromiseOrValue<string>,
            _collateralAsset: PromiseOrValue<string>,
            _withdrawAmount: PromiseOrValue<BigNumberish>,
            _depositedCollateralAssetIndex: PromiseOrValue<BigNumberish>,
            _userData: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        batchLiquidateInterest(
            _account: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        liquidateInterest(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        getMaxLiquidation(
            _account: PromiseOrValue<string>,
            _repayKreskoAsset: PromiseOrValue<string>,
            _collateralAssetToSeize: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        isAccountLiquidatable(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        liquidate(
            _account: PromiseOrValue<string>,
            _repayAsset: PromiseOrValue<string>,
            _repayAmount: PromiseOrValue<BigNumberish>,
            _seizeAsset: PromiseOrValue<string>,
            _repayAssetIndex: PromiseOrValue<BigNumberish>,
            _seizeAssetIndex: PromiseOrValue<BigNumberish>,
            _allowSeizeUnderflow: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        mintKreskoAsset(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _mintAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        assetActionPaused(
            _action: PromiseOrValue<BigNumberish>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        safetyStateFor(
            _asset: PromiseOrValue<string>,
            _action: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        safetyStateSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setSafetyStateSet(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        toggleAssetsPaused(
            _assets: PromiseOrValue<string>[],
            _action: PromiseOrValue<BigNumberish>,
            _withDuration: PromiseOrValue<boolean>,
            _duration: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        batchRepayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        getDebtIndexForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getLastDebtIndexForAccount(
            _account: PromiseOrValue<string>,
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getPriceRateForAsset(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getStabilityRateConfigurationForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getStabilityRateForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        kiss(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        repayFullStabilityRateInterest(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        repayStabilityRateInterestPartial(
            _account: PromiseOrValue<string>,
            _kreskoAsset: PromiseOrValue<string>,
            _kissRepayAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        setupStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateKiss(
            _kiss: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateStabilityRateAndIndexForAsset(
            _asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateStabilityRateParams(
            _asset: PromiseOrValue<string>,
            _setup: StabilityRateParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        ammOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        collateralAsset(
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        collateralExists(
            _collateralAsset: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        extOracleDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAllParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreCollateralFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getKrAssetValue(
            _kreskoAsset: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            _ignoreKFactor: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        krAssetExists(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        kreskoAsset(_kreskoAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        liquidationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxLiquidationMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumDebtValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minterInitializations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        oracleDeviationPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        batchOracleValues(_assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAccountData(
            _account: PromiseOrValue<string>,
            _tokens: PromiseOrValue<string>[],
            _staking: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getTokenData(
            _allTokens: PromiseOrValue<string>[],
            _assets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getGlobalData(
            _collateralAssets: PromiseOrValue<string>[],
            _krAssets: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getPairsData(
            _pairAddresses: PromiseOrValue<string>[],
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;
    };
}
