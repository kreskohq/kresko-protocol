/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";

export declare namespace IKrStaking {
    export type RewardStruct = {
        pid: PromiseOrValue<BigNumberish>;
        tokens: PromiseOrValue<string>[];
        amounts: PromiseOrValue<BigNumberish>[];
    };

    export type RewardStructOutput = [BigNumber, string[], BigNumber[]] & {
        pid: BigNumber;
        tokens: string[];
        amounts: BigNumber[];
    };

    export type PoolInfoStruct = {
        depositToken: PromiseOrValue<string>;
        allocPoint: PromiseOrValue<BigNumberish>;
        lastRewardBlock: PromiseOrValue<BigNumberish>;
        accRewardPerShares: PromiseOrValue<BigNumberish>[];
        rewardTokens: PromiseOrValue<string>[];
    };

    export type PoolInfoStructOutput = [string, BigNumber, BigNumber, BigNumber[], string[]] & {
        depositToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShares: BigNumber[];
        rewardTokens: string[];
    };

    export type UserInfoStruct = {
        amount: PromiseOrValue<BigNumberish>;
        rewardDebts: PromiseOrValue<BigNumberish>[];
    };

    export type UserInfoStructOutput = [BigNumber, BigNumber[]] & {
        amount: BigNumber;
        rewardDebts: BigNumber[];
    };
}

export interface KrStakingInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "OPERATOR_ROLE()": FunctionFragment;
        "addPool(address[],address,uint128,uint128)": FunctionFragment;
        "allPendingRewards(address)": FunctionFragment;
        "claim(uint256,address)": FunctionFragment;
        "claimFor(address,uint256,address)": FunctionFragment;
        "deposit(address,uint256,uint256)": FunctionFragment;
        "emergencyWithdraw(uint256)": FunctionFragment;
        "getPidFor(address)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "initialize(address[],uint256[],address,uint128,uint128,address,address)": FunctionFragment;
        "massUpdatePools()": FunctionFragment;
        "pendingRewards(uint256,address)": FunctionFragment;
        "poolInfo(uint256)": FunctionFragment;
        "poolLength()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "rescueNative()": FunctionFragment;
        "rescueNonPoolToken(address,uint256)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "rewardPerBlockFor(address)": FunctionFragment;
        "setPool(uint256,uint128)": FunctionFragment;
        "setRewardPerBlockFor(address,uint256)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "totalAllocPoint()": FunctionFragment;
        "updatePool(uint256)": FunctionFragment;
        "userInfo(uint256,address)": FunctionFragment;
        "withdraw(uint256,uint256,address)": FunctionFragment;
        "withdrawFor(address,uint256,uint256,address)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "DEFAULT_ADMIN_ROLE"
            | "OPERATOR_ROLE"
            | "addPool"
            | "allPendingRewards"
            | "claim"
            | "claimFor"
            | "deposit"
            | "emergencyWithdraw"
            | "getPidFor"
            | "getRoleAdmin"
            | "grantRole"
            | "hasRole"
            | "initialize"
            | "massUpdatePools"
            | "pendingRewards"
            | "poolInfo"
            | "poolLength"
            | "renounceRole"
            | "rescueNative"
            | "rescueNonPoolToken"
            | "revokeRole"
            | "rewardPerBlockFor"
            | "setPool"
            | "setRewardPerBlockFor"
            | "supportsInterface"
            | "totalAllocPoint"
            | "updatePool"
            | "userInfo"
            | "withdraw"
            | "withdrawFor",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OPERATOR_ROLE", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "addPool",
        values: [
            PromiseOrValue<string>[],
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
        ],
    ): string;
    encodeFunctionData(functionFragment: "allPendingRewards", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "claim",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "claimFor",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "deposit",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "emergencyWithdraw", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPidFor", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [
            PromiseOrValue<string>[],
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
        ],
    ): string;
    encodeFunctionData(functionFragment: "massUpdatePools", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "pendingRewards",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "poolInfo", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "poolLength", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "rescueNative", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "rescueNonPoolToken",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "rewardPerBlockFor", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "setPool",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "setRewardPerBlockFor",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "totalAllocPoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "updatePool", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "userInfo",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "withdraw",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "withdrawFor",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
        ],
    ): string;

    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OPERATOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allPendingRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emergencyWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPidFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "massUpdatePools", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rescueNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rescueNonPoolToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardPerBlockFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRewardPerBlockFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalAllocPoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFor", data: BytesLike): Result;

    events: {
        "ClaimRewards(address,address,uint256)": EventFragment;
        "Deposit(address,uint256,uint256)": EventFragment;
        "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "Withdraw(address,uint256,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "ClaimRewards"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClaimRewardsEventObject {
    user: string;
    rewardToken: string;
    amount: BigNumber;
}
export type ClaimRewardsEvent = TypedEvent<[string, string, BigNumber], ClaimRewardsEventObject>;

export type ClaimRewardsEventFilter = TypedEventFilter<ClaimRewardsEvent>;

export interface DepositEventObject {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface WithdrawEventObject {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface KrStaking extends BaseContract {
    contractName: "KrStaking";

    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: KrStakingInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

        addPool(
            _rewardTokens: PromiseOrValue<string>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        allPendingRewards(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<
            [IKrStaking.RewardStructOutput[]] & {
                allRewards: IKrStaking.RewardStructOutput[];
            }
        >;

        claim(
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        claimFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        deposit(
            _to: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        emergencyWithdraw(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        getPidFor(
            _depositToken: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, boolean] & { pid: BigNumber; found: boolean }>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        initialize(
            _rewardTokens: PromiseOrValue<string>[],
            _rewardPerBlocks: PromiseOrValue<BigNumberish>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            _admin: PromiseOrValue<string>,
            _operator: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        massUpdatePools(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

        pendingRewards(
            _pid: PromiseOrValue<BigNumberish>,
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<
            [IKrStaking.RewardStructOutput] & {
                rewards: IKrStaking.RewardStructOutput;
            }
        >;

        poolInfo(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[IKrStaking.PoolInfoStructOutput]>;

        poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        rescueNative(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

        rescueNonPoolToken(
            _tokenToRescue: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        rewardPerBlockFor(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        setPool(
            _pid: PromiseOrValue<BigNumberish>,
            _newAllocPoint: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        setRewardPerBlockFor(
            _rewardToken: PromiseOrValue<string>,
            _rewardPerBlock: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

        totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

        updatePool(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        userInfo(
            _pid: PromiseOrValue<BigNumberish>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[IKrStaking.UserInfoStructOutput]>;

        withdraw(
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        withdrawFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;
    };

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    addPool(
        _rewardTokens: PromiseOrValue<string>[],
        _depositToken: PromiseOrValue<string>,
        _allocPoint: PromiseOrValue<BigNumberish>,
        _startBlock: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allPendingRewards(
        _account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<IKrStaking.RewardStructOutput[]>;

    claim(
        _pid: PromiseOrValue<BigNumberish>,
        _rewardRecipient: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimFor(
        _for: PromiseOrValue<string>,
        _pid: PromiseOrValue<BigNumberish>,
        _rewardRecipient: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
        _to: PromiseOrValue<string>,
        _pid: PromiseOrValue<BigNumberish>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
        _pid: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPidFor(
        _depositToken: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { pid: BigNumber; found: boolean }>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    grantRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
        _rewardTokens: PromiseOrValue<string>[],
        _rewardPerBlocks: PromiseOrValue<BigNumberish>[],
        _depositToken: PromiseOrValue<string>,
        _allocPoint: PromiseOrValue<BigNumberish>,
        _startBlock: PromiseOrValue<BigNumberish>,
        _admin: PromiseOrValue<string>,
        _operator: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    massUpdatePools(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pendingRewards(
        _pid: PromiseOrValue<BigNumberish>,
        _user: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<IKrStaking.RewardStructOutput>;

    poolInfo(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IKrStaking.PoolInfoStructOutput>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rescueNative(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rescueNonPoolToken(
        _tokenToRescue: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardPerBlockFor(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setPool(
        _pid: PromiseOrValue<BigNumberish>,
        _newAllocPoint: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardPerBlockFor(
        _rewardToken: PromiseOrValue<string>,
        _rewardPerBlock: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(
        _pid: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(
        _pid: PromiseOrValue<BigNumberish>,
        _account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<IKrStaking.UserInfoStructOutput>;

    withdraw(
        _pid: PromiseOrValue<BigNumberish>,
        _amount: PromiseOrValue<BigNumberish>,
        _rewardRecipient: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawFor(
        _for: PromiseOrValue<string>,
        _pid: PromiseOrValue<BigNumberish>,
        _amount: PromiseOrValue<BigNumberish>,
        _rewardRecipient: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

        addPool(
            _rewardTokens: PromiseOrValue<string>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        allPendingRewards(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<IKrStaking.RewardStructOutput[]>;

        claim(
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        claimFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        deposit(
            _to: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        emergencyWithdraw(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        getPidFor(
            _depositToken: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, boolean] & { pid: BigNumber; found: boolean }>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        initialize(
            _rewardTokens: PromiseOrValue<string>[],
            _rewardPerBlocks: PromiseOrValue<BigNumberish>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            _admin: PromiseOrValue<string>,
            _operator: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        massUpdatePools(overrides?: CallOverrides): Promise<void>;

        pendingRewards(
            _pid: PromiseOrValue<BigNumberish>,
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<IKrStaking.RewardStructOutput>;

        poolInfo(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<IKrStaking.PoolInfoStructOutput>;

        poolLength(overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        rescueNative(overrides?: CallOverrides): Promise<void>;

        rescueNonPoolToken(
            _tokenToRescue: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        rewardPerBlockFor(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        setPool(
            _pid: PromiseOrValue<BigNumberish>,
            _newAllocPoint: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        setRewardPerBlockFor(
            _rewardToken: PromiseOrValue<string>,
            _rewardPerBlock: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

        totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

        updatePool(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<IKrStaking.PoolInfoStructOutput>;

        userInfo(
            _pid: PromiseOrValue<BigNumberish>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<IKrStaking.UserInfoStructOutput>;

        withdraw(
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        withdrawFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {
        "ClaimRewards(address,address,uint256)"(
            user?: PromiseOrValue<string> | null,
            rewardToken?: PromiseOrValue<string> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): ClaimRewardsEventFilter;
        ClaimRewards(
            user?: PromiseOrValue<string> | null,
            rewardToken?: PromiseOrValue<string> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): ClaimRewardsEventFilter;

        "Deposit(address,uint256,uint256)"(
            user?: PromiseOrValue<string> | null,
            pid?: PromiseOrValue<BigNumberish> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): DepositEventFilter;
        Deposit(
            user?: PromiseOrValue<string> | null,
            pid?: PromiseOrValue<BigNumberish> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): DepositEventFilter;

        "EmergencyWithdraw(address,uint256,uint256)"(
            user?: PromiseOrValue<string> | null,
            pid?: PromiseOrValue<BigNumberish> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): EmergencyWithdrawEventFilter;
        EmergencyWithdraw(
            user?: PromiseOrValue<string> | null,
            pid?: PromiseOrValue<BigNumberish> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): EmergencyWithdrawEventFilter;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;

        "Withdraw(address,uint256,uint256)"(
            user?: PromiseOrValue<string> | null,
            pid?: PromiseOrValue<BigNumberish> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): WithdrawEventFilter;
        Withdraw(
            user?: PromiseOrValue<string> | null,
            pid?: PromiseOrValue<BigNumberish> | null,
            amount?: PromiseOrValue<BigNumberish> | null,
        ): WithdrawEventFilter;
    };

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        addPool(
            _rewardTokens: PromiseOrValue<string>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        allPendingRewards(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        claim(
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        claimFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        deposit(
            _to: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        emergencyWithdraw(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        getPidFor(_depositToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        initialize(
            _rewardTokens: PromiseOrValue<string>[],
            _rewardPerBlocks: PromiseOrValue<BigNumberish>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            _admin: PromiseOrValue<string>,
            _operator: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        massUpdatePools(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        pendingRewards(
            _pid: PromiseOrValue<BigNumberish>,
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        poolInfo(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        poolLength(overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        rescueNative(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        rescueNonPoolToken(
            _tokenToRescue: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        rewardPerBlockFor(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        setPool(
            _pid: PromiseOrValue<BigNumberish>,
            _newAllocPoint: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        setRewardPerBlockFor(
            _rewardToken: PromiseOrValue<string>,
            _rewardPerBlock: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

        updatePool(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        userInfo(
            _pid: PromiseOrValue<BigNumberish>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        withdraw(
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        withdrawFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        addPool(
            _rewardTokens: PromiseOrValue<string>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        allPendingRewards(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        claim(
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        claimFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        deposit(
            _to: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        emergencyWithdraw(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        getPidFor(_depositToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        initialize(
            _rewardTokens: PromiseOrValue<string>[],
            _rewardPerBlocks: PromiseOrValue<BigNumberish>[],
            _depositToken: PromiseOrValue<string>,
            _allocPoint: PromiseOrValue<BigNumberish>,
            _startBlock: PromiseOrValue<BigNumberish>,
            _admin: PromiseOrValue<string>,
            _operator: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        massUpdatePools(
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        pendingRewards(
            _pid: PromiseOrValue<BigNumberish>,
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        poolInfo(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        rescueNative(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

        rescueNonPoolToken(
            _tokenToRescue: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        rewardPerBlockFor(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setPool(
            _pid: PromiseOrValue<BigNumberish>,
            _newAllocPoint: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        setRewardPerBlockFor(
            _rewardToken: PromiseOrValue<string>,
            _rewardPerBlock: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        updatePool(
            _pid: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        userInfo(
            _pid: PromiseOrValue<BigNumberish>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        withdraw(
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        withdrawFor(
            _for: PromiseOrValue<string>,
            _pid: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardRecipient: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;
    };
}
