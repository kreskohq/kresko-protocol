/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";

export interface KISSInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "DOMAIN_SEPARATOR()": FunctionFragment;
        "MINTER_ROLE()": FunctionFragment;
        "OPERATOR_ROLE()": FunctionFragment;
        "PAUSER_ROLE()": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "convertToAssets(uint256)": FunctionFragment;
        "convertToShares(uint256)": FunctionFragment;
        "decimals()": FunctionFragment;
        "destroy(uint256,address)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getRoleMember(bytes32,uint256)": FunctionFragment;
        "getRoleMemberCount(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "initialize(string,string,uint8,address,address)": FunctionFragment;
        "issue(uint256,address)": FunctionFragment;
        "kresko()": FunctionFragment;
        "maxOperators()": FunctionFragment;
        "mint(address,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "nonces(address)": FunctionFragment;
        "pause()": FunctionFragment;
        "paused()": FunctionFragment;
        "pendingOperator()": FunctionFragment;
        "pendingOperatorUnlockTime()": FunctionFragment;
        "pendingOperatorWaitPeriod()": FunctionFragment;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setMaxOperators(uint256)": FunctionFragment;
        "setPendingOperatorWaitPeriod(uint256)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "unpause()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "DEFAULT_ADMIN_ROLE"
            | "DOMAIN_SEPARATOR"
            | "MINTER_ROLE"
            | "OPERATOR_ROLE"
            | "PAUSER_ROLE"
            | "allowance"
            | "approve"
            | "balanceOf"
            | "convertToAssets"
            | "convertToShares"
            | "decimals"
            | "destroy"
            | "getRoleAdmin"
            | "getRoleMember"
            | "getRoleMemberCount"
            | "grantRole"
            | "hasRole"
            | "initialize"
            | "issue"
            | "kresko"
            | "maxOperators"
            | "mint"
            | "name"
            | "nonces"
            | "pause"
            | "paused"
            | "pendingOperator"
            | "pendingOperatorUnlockTime"
            | "pendingOperatorWaitPeriod"
            | "permit"
            | "renounceRole"
            | "revokeRole"
            | "setMaxOperators"
            | "setPendingOperatorWaitPeriod"
            | "supportsInterface"
            | "symbol"
            | "totalSupply"
            | "transfer"
            | "transferFrom"
            | "unpause",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "MINTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OPERATOR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "approve",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "convertToAssets", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "convertToShares", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "destroy",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "getRoleMember",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "getRoleMemberCount", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "issue",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "kresko", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxOperators", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOperator", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOperatorUnlockTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOperatorWaitPeriod", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "permit",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "setMaxOperators", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "setPendingOperatorWaitPeriod",
        values: [PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "transfer",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "transferFrom",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MINTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OPERATOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToShares", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMemberCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kresko", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxOperators", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOperatorUnlockTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOperatorWaitPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxOperators", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPendingOperatorWaitPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "NewMaxOperators(uint256)": EventFragment;
        "NewOperator(address)": EventFragment;
        "NewOperatorInitialized(address,uint256)": EventFragment;
        "NewPendingOperatorWaitPeriod(uint256)": EventFragment;
        "Paused(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
        "Unpaused(address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewMaxOperators"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewOperator"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewOperatorInitialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewPendingOperatorWaitPeriod"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
    owner: string;
    spender: string;
    amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewMaxOperatorsEventObject {
    newMaxOperators: BigNumber;
}
export type NewMaxOperatorsEvent = TypedEvent<[BigNumber], NewMaxOperatorsEventObject>;

export type NewMaxOperatorsEventFilter = TypedEventFilter<NewMaxOperatorsEvent>;

export interface NewOperatorEventObject {
    newOperator: string;
}
export type NewOperatorEvent = TypedEvent<[string], NewOperatorEventObject>;

export type NewOperatorEventFilter = TypedEventFilter<NewOperatorEvent>;

export interface NewOperatorInitializedEventObject {
    pendingNewOperator: string;
    unlockTimestamp: BigNumber;
}
export type NewOperatorInitializedEvent = TypedEvent<[string, BigNumber], NewOperatorInitializedEventObject>;

export type NewOperatorInitializedEventFilter = TypedEventFilter<NewOperatorInitializedEvent>;

export interface NewPendingOperatorWaitPeriodEventObject {
    newPeriod: BigNumber;
}
export type NewPendingOperatorWaitPeriodEvent = TypedEvent<[BigNumber], NewPendingOperatorWaitPeriodEventObject>;

export type NewPendingOperatorWaitPeriodEventFilter = TypedEventFilter<NewPendingOperatorWaitPeriodEvent>;

export interface PausedEventObject {
    account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
    from: string;
    to: string;
    amount: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
    account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface KISS extends BaseContract {
    contractName: "KISS";

    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: KISSInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

        MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

        PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        destroy(
            _amount: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        initialize(
            name_: PromiseOrValue<string>,
            symbol_: PromiseOrValue<string>,
            dec_: PromiseOrValue<BigNumberish>,
            admin_: PromiseOrValue<string>,
            kresko_: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        issue(
            _amount: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        kresko(overrides?: CallOverrides): Promise<[string]>;

        maxOperators(overrides?: CallOverrides): Promise<[BigNumber]>;

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

        paused(overrides?: CallOverrides): Promise<[boolean]>;

        pendingOperator(overrides?: CallOverrides): Promise<[string]>;

        pendingOperatorUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

        pendingOperatorWaitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        setMaxOperators(
            _maxOperators: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        setPendingOperatorWaitPeriod(
            _newPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
    };

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    allowance(
        _owner: PromiseOrValue<string>,
        _spender: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    destroy(
        _amount: PromiseOrValue<BigNumberish>,
        _from: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
        role: PromiseOrValue<BytesLike>,
        index: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
        _role: PromiseOrValue<BytesLike>,
        _to: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        dec_: PromiseOrValue<BigNumberish>,
        admin_: PromiseOrValue<string>,
        kresko_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    issue(
        _amount: PromiseOrValue<BigNumberish>,
        _to: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    kresko(overrides?: CallOverrides): Promise<string>;

    maxOperators(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOperator(overrides?: CallOverrides): Promise<string>;

    pendingOperatorUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOperatorWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        deadline: PromiseOrValue<BigNumberish>,
        v: PromiseOrValue<BigNumberish>,
        r: PromiseOrValue<BytesLike>,
        s: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxOperators(
        _maxOperators: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPendingOperatorWaitPeriod(
        _newPeriod: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

        MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

        PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<number>;

        destroy(
            _amount: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<string>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _to: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        initialize(
            name_: PromiseOrValue<string>,
            symbol_: PromiseOrValue<string>,
            dec_: PromiseOrValue<BigNumberish>,
            admin_: PromiseOrValue<string>,
            kresko_: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        issue(
            _amount: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        kresko(overrides?: CallOverrides): Promise<string>;

        maxOperators(overrides?: CallOverrides): Promise<BigNumber>;

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        name(overrides?: CallOverrides): Promise<string>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        pause(overrides?: CallOverrides): Promise<void>;

        paused(overrides?: CallOverrides): Promise<boolean>;

        pendingOperator(overrides?: CallOverrides): Promise<string>;

        pendingOperatorUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

        pendingOperatorWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<void>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        setMaxOperators(_maxOperators: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        setPendingOperatorWaitPeriod(
            _newPeriod: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

        symbol(overrides?: CallOverrides): Promise<string>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        unpause(overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "Approval(address,address,uint256)"(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            amount?: null,
        ): ApprovalEventFilter;
        Approval(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            amount?: null,
        ): ApprovalEventFilter;

        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;

        "NewMaxOperators(uint256)"(newMaxOperators?: null): NewMaxOperatorsEventFilter;
        NewMaxOperators(newMaxOperators?: null): NewMaxOperatorsEventFilter;

        "NewOperator(address)"(newOperator?: PromiseOrValue<string> | null): NewOperatorEventFilter;
        NewOperator(newOperator?: PromiseOrValue<string> | null): NewOperatorEventFilter;

        "NewOperatorInitialized(address,uint256)"(
            pendingNewOperator?: PromiseOrValue<string> | null,
            unlockTimestamp?: null,
        ): NewOperatorInitializedEventFilter;
        NewOperatorInitialized(
            pendingNewOperator?: PromiseOrValue<string> | null,
            unlockTimestamp?: null,
        ): NewOperatorInitializedEventFilter;

        "NewPendingOperatorWaitPeriod(uint256)"(newPeriod?: null): NewPendingOperatorWaitPeriodEventFilter;
        NewPendingOperatorWaitPeriod(newPeriod?: null): NewPendingOperatorWaitPeriodEventFilter;

        "Paused(address)"(account?: null): PausedEventFilter;
        Paused(account?: null): PausedEventFilter;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;

        "RoleGranted(bytes32,address,address)"(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleGrantedEventFilter;
        RoleGranted(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleGrantedEventFilter;

        "RoleRevoked(bytes32,address,address)"(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleRevokedEventFilter;
        RoleRevoked(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleRevokedEventFilter;

        "Transfer(address,address,uint256)"(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null,
        ): TransferEventFilter;
        Transfer(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null,
        ): TransferEventFilter;

        "Unpaused(address)"(account?: null): UnpausedEventFilter;
        Unpaused(account?: null): UnpausedEventFilter;
    };

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

        MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        destroy(
            _amount: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        initialize(
            name_: PromiseOrValue<string>,
            symbol_: PromiseOrValue<string>,
            dec_: PromiseOrValue<BigNumberish>,
            admin_: PromiseOrValue<string>,
            kresko_: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        issue(
            _amount: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        kresko(overrides?: CallOverrides): Promise<BigNumber>;

        maxOperators(overrides?: CallOverrides): Promise<BigNumber>;

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        paused(overrides?: CallOverrides): Promise<BigNumber>;

        pendingOperator(overrides?: CallOverrides): Promise<BigNumber>;

        pendingOperatorUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

        pendingOperatorWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        setMaxOperators(
            _maxOperators: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        setPendingOperatorWaitPeriod(
            _newPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
    };

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        destroy(
            _amount: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        initialize(
            name_: PromiseOrValue<string>,
            symbol_: PromiseOrValue<string>,
            dec_: PromiseOrValue<BigNumberish>,
            admin_: PromiseOrValue<string>,
            kresko_: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        issue(
            _amount: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        kresko(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pendingOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pendingOperatorUnlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pendingOperatorWaitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        setMaxOperators(
            _maxOperators: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        setPendingOperatorWaitPeriod(
            _newPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
    };
}
