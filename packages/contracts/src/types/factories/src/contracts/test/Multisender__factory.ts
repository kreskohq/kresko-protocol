/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { Multisender, MultisenderInterface, TokenStruct } from "../../../../src/contracts/test/Multisender";

const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "token",
                        type: "address",
                    },
                ],
                internalType: "struct Token[]",
                name: "_tokens",
                type: "tuple[]",
            },
            {
                internalType: "address",
                name: "_weth",
                type: "address",
            },
            {
                internalType: "address",
                name: "_kiss",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "Funded",
        type: "event",
    },
    {
        stateMutability: "payable",
        type: "fallback",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "token",
                        type: "address",
                    },
                ],
                internalType: "struct Token",
                name: "_token",
                type: "tuple",
            },
        ],
        name: "addToken",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address[]",
                name: "accounts",
                type: "address[]",
            },
            {
                internalType: "uint256",
                name: "wethAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "ethAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "kissAmount",
                type: "uint256",
            },
        ],
        name: "distribute",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "drain",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "drainERC20",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "funded",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "owners",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "token",
                        type: "address",
                    },
                ],
                internalType: "struct Token[]",
                name: "_tokens",
                type: "tuple[]",
            },
        ],
        name: "setTokens",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address[]",
                name: "accounts",
                type: "address[]",
            },
        ],
        name: "toggleOwners",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        stateMutability: "payable",
        type: "receive",
    },
] as const;

const _bytecode =
    "";

type MultisenderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MultisenderConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class Multisender__factory extends ContractFactory {
    constructor(...args: MultisenderConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "Multisender";
    }

    override deploy(
        _tokens: TokenStruct[],
        _weth: PromiseOrValue<string>,
        _kiss: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<Multisender> {
        return super.deploy(_tokens, _weth, _kiss, overrides || {}) as Promise<Multisender>;
    }
    override getDeployTransaction(
        _tokens: TokenStruct[],
        _weth: PromiseOrValue<string>,
        _kiss: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): TransactionRequest {
        return super.getDeployTransaction(_tokens, _weth, _kiss, overrides || {});
    }
    override attach(address: string): Multisender {
        return super.attach(address) as Multisender;
    }
    override connect(signer: Signer): Multisender__factory {
        return super.connect(signer) as Multisender__factory;
    }
    static readonly contractName: "Multisender";

    public readonly contractName: "Multisender";

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MultisenderInterface {
        return new utils.Interface(_abi) as MultisenderInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): Multisender {
        return new Contract(address, _abi, signerOrProvider) as Multisender;
    }
}
