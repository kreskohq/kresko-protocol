/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { Funder, FunderInterface } from "../../../../src/contracts/test/Funder";

const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_kresko",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "Funded",
        type: "event",
    },
    {
        stateMutability: "payable",
        type: "fallback",
    },
    {
        inputs: [
            {
                internalType: "address[]",
                name: "accounts",
                type: "address[]",
            },
            {
                internalType: "uint256",
                name: "ethAmount",
                type: "uint256",
            },
        ],
        name: "distribute",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "drain",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "funded",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "isEligible",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "kresko",
        outputs: [
            {
                internalType: "contract IAccountStateFacet",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "owners",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address[]",
                name: "accounts",
                type: "address[]",
            },
        ],
        name: "toggleOwners",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        stateMutability: "payable",
        type: "receive",
    },
] as const;

const _bytecode =
    "0x6080346100b557601f6108ab388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff8311848410176100ba578084926020946040528339810103126100b5575173ffffffffffffffffffffffffffffffffffffffff8116908190036100b5573360005260006020526040600020600160ff1982541617905560018060a01b031960025416176002556040516107da90816100d18239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001f575b505050361561001d57005b005b600092833560e01c918263022914a714610497575081631826c1191461031c57816345f9fc78146102b357816366e305fd1461024b5781637a9f788d14610142575080639890220b146100d15763d77e128c1461007c5780610012565b346100cd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100cd5760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5080fd5b50346100cd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100cd573382528160205261011660ff8284205416610531565b8180808047818115610139575b3390f11561012f575080f35b51903d90823e3d90fd5b506108fc610123565b90503461024757602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102435780359067ffffffffffffffff821161023f57610193913691016104fb565b9233855284835260ff926101ab848388205416610531565b855b8581106101b8578680f35b61023a9073ffffffffffffffffffffffffffffffffffffffff806101e56101e0848b8a6105f2565b610631565b16895288845286858a20541615906102016101e0848b8a6105f2565b16895288845284892090877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055610596565b6101ad565b8480fd5b8380fd5b8280fd5b9050346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757359173ffffffffffffffffffffffffffffffffffffffff831683036102b057506102a7602092610652565b90519015158152f35b80fd5b9050346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610247573573ffffffffffffffffffffffffffffffffffffffff811680910361024757818360ff92602095526001855220541690519015158152f35b90503461024757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475780359067ffffffffffffffff82116102435761036a913691016104fb565b906024359233855260209385855261038760ff8388205416610531565b8015865b858110610396578780f35b8688848689896103b26103ad6101e08985856105f2565b610652565b1561048857928493926104256101e089879695879673ffffffffffffffffffffffffffffffffffffffff9b8c96876103ee6101e08787876105f2565b168a5260018092528920907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790556105f2565b16828961047f575bf1156104755790610470916104466101e0838a8a6105f2565b167fb436c2bf863ccd7b8f63171201efd4792066b4ce8e543dde9c3e9e9ab98e216c8a80a2610596565b61038b565b84513d8a823e3d90fd5b506108fc61042d565b50505050505061047090610596565b929150346102435760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610243573573ffffffffffffffffffffffffffffffffffffffff8116809103610243578352602083815292205460ff1615158152f35b9181601f8401121561052c5782359167ffffffffffffffff831161052c576020808501948460051b01011161052c57565b600080fd5b1561053857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f216f0000000000000000000000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105c35760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908110156106025760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3573ffffffffffffffffffffffffffffffffffffffff8116810361052c5790565b66038d7ea4c68000813110908161069a575b8161066d575090565b73ffffffffffffffffffffffffffffffffffffffff915016600052600160205260ff604060002054161590565b905073ffffffffffffffffffffffffffffffffffffffff60208160025416916024604051809481937fff1389c5000000000000000000000000000000000000000000000000000000008352871660048301525afa90811561079857600091610706575b50151590610664565b9060203d8111610791575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116830183811067ffffffffffffffff821117610764576020918491604052810103126102b0575051386106fd565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b503d610711565b6040513d6000823e3d90fdfea264697066735822122042eee62077b8296110aa65464b5997abf5b0c4ca3bddcae122256b454fd60f5364736f6c63430008130033";

type FunderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: FunderConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Funder__factory extends ContractFactory {
    constructor(...args: FunderConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "Funder";
    }

    override deploy(
        _kresko: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<Funder> {
        return super.deploy(_kresko, overrides || {}) as Promise<Funder>;
    }
    override getDeployTransaction(
        _kresko: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): TransactionRequest {
        return super.getDeployTransaction(_kresko, overrides || {});
    }
    override attach(address: string): Funder {
        return super.attach(address) as Funder;
    }
    override connect(signer: Signer): Funder__factory {
        return super.connect(signer) as Funder__factory;
    }
    static readonly contractName: "Funder";

    public readonly contractName: "Funder";

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): FunderInterface {
        return new utils.Interface(_abi) as FunderInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): Funder {
        return new Contract(address, _abi, signerOrProvider) as Funder;
    }
}
