/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  UniswapMath,
  UniswapMathInterface,
} from "../../../../../src/contracts/test/markets/UniswapMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "factory_",
        type: "address",
      },
      {
        internalType: "contract IUniswapV2Router02",
        name: "router_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    name: "computeProfitMaximizingTrade",
    outputs: [
      {
        internalType: "bool",
        name: "aToB",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityAmount",
        type: "uint256",
      },
    ],
    name: "getGasCostOfGetLiquidityValueAfterArbitrageToPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidityAmount",
        type: "uint256",
      },
    ],
    name: "getLiquidityValue",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityAmount",
        type: "uint256",
      },
    ],
    name: "getLiquidityValueAfterArbitrageToPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
    ],
    name: "getReservesAfterArbitrage",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
    ],
    name: "profitMaximizingTrade",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "aToB",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSpendTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSpendTokenB",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapToPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0346100e957601f6119d6388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff8311848410176100ed5780849260409485528339810103126100e957805173ffffffffffffffffffffffffffffffffffffffff9182821682036100e9576020015191821682036100e95760a0526080526040516118d4908161010282396080518181816101060152818161058401526106e0015260a0518181816101860152818161036e015281816103dc015281816104af01528181610a6e01528181610abc0152610b050152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c80633558e94c14610aec57806369a2fcbd14610aa357806380caa35314610a4d578063bef90fd314610418578063c45a0155146103a9578063ca66e65214610352578063d9b7a6e714610142578063f887ea40146100d35763fa6531541461007c575f80fd5b346100cf576080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100cf5760406100c1606435604435602435600435610c1d565b825191151582526020820152f35b5f80fd5b346100cf575f367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100cf576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b346100cf576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100cf57610179610b29565b6101d6610184610b4c565b7f0000000000000000000000000000000000000000000000000000000000000000926101b1828286611582565b73ffffffffffffffffffffffffffffffffffffffff94909391928592839291886114e6565b169460405190622fcfcb60e31b8252816004816020988994165afa9081156102e1575f91610325575b5016158015929061031a576040517f7464fc3d000000000000000000000000000000000000000000000000000000008152908482600481895afa80156102e15785905f906102ec575b60049350965b6040517f18160ddd00000000000000000000000000000000000000000000000000000000815293849182905afa9182156102e1575f926102a9575b509161029d93916040969360443592611020565b90918351928352820152f35b93915094918484813d83116102da575b6102c38183610e3e565b810103126100cf5792519194909291906040610289565b503d6102b9565b6040513d5f823e3d90fd5b5082813d8311610313575b6103018183610e3e565b810103126100cf578460049251610248565b503d6102f7565b600490845f9661024e565b6103459150853d871161034b575b61033d8183610e3e565b810190610ff4565b866101ff565b503d610333565b346100cf57604061039a61039261036836610b6f565b939190927f0000000000000000000000000000000000000000000000000000000000000000611582565b929091610c1d565b90825191825215156020820152f35b346100cf575f367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100cf576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b346100cf57610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100cf57610450610b29565b610458610b4c565b60a435916084359160c4359160443560643573ffffffffffffffffffffffffffffffffffffffff851685036100cf5781151580610a44575b156109e55785158015906109dc575b1561097d576104d39161039285857f0000000000000000000000000000000000000000000000000000000000000000611582565b90948196865f14610974575080915b1161096c575b5083156109655780935b1561095e57505b604051602081016323b872dd60e01b81523360248301523060448301528560648301526064825260a082019082821067ffffffffffffffff83111761079f575f928392604052519082875af161054d610e60565b8161092f575b50156108aa576040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1660248201526044808201869052815267ffffffffffffffff608082019081119082111761079f575f81608082930160405260208151910182875af16105fc610e60565b8161087b575b50156107f657604051926060840184811067ffffffffffffffff82111761079f576040526002845260403660208601378351156107e25773ffffffffffffffffffffffffffffffffffffffff1660208401528251600110156107e257839060018060a01b031660408401526040519283916338ed173960e01b835260a483019060048401525f602484015260a060448401528151809152602060c484019201905f5b8181106107b35750505073ffffffffffffffffffffffffffffffffffffffff928316606483015260e43560848301525f929082900390829084907f0000000000000000000000000000000000000000000000000000000000000000165af180156102e15761070e57005b3d805f833e61071d8183610e3e565b8101906020818303126100cf5780519067ffffffffffffffff82116100cf57019080601f830112156100cf5781519167ffffffffffffffff831161079f576020808460051b946040519061077383880183610e3e565b815201938201019182116100cf57602001915b81831061078f57005b8251815260209283019201610786565b634e487b7160e01b5f52604160045260245ffd5b825173ffffffffffffffffffffffffffffffffffffffff168452869450602093840193909201916001016106a4565b634e487b7160e01b5f52603260045260245ffd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152608490fd5b8051801592508215610890575b505085610602565b6108a39250602080918301019101610ebd565b8580610888565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608490fd5b8051801592508215610944575b505085610553565b6109579250602080918301019101610ebd565b858061093c565b90506104f9565b81936104f2565b9450856104e8565b905080916104e2565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f5350454e4400006044820152606490fd5b5086151561049f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f505249434500006044820152606490fd5b50801515610490565b346100cf576020610a9b610a92610a6336610bb5565b929493949190915a957f0000000000000000000000000000000000000000000000000000000000000000611141565b50505a90610ed5565b604051908152f35b346100cf576040610ae0610ab636610bb5565b939290927f0000000000000000000000000000000000000000000000000000000000000000611141565b82519182526020820152f35b346100cf576040610ae0610aff36610b6f565b929190917f0000000000000000000000000000000000000000000000000000000000000000610ee2565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100cf57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036100cf57565b60809060031901126100cf5773ffffffffffffffffffffffffffffffffffffffff9060043582811681036100cf579160243590811681036100cf57906044359060643590565b60a09060031901126100cf5773ffffffffffffffffffffffffffffffffffffffff9060043582811681036100cf579160243590811681036100cf5790604435906064359060843590565b8115610c09570490565b634e487b7160e01b5f52601260045260245ffd5b610c9a92610c82610c7d6103e59397969497610c7781610c4688610c418d896114aa565b610bff565b1099610c6a610c65610c588a896114aa565b8d15610cb35785906114aa565b61146c565b928b15610cac575061148b565b90610bff565b610cdb565b928615610c9d5750610c939061146c565b04906113f8565b90565b610ca7915061146c565b610c93565b905061148b565b83906114aa565b91908201809211610cc757565b634e487b7160e01b5f52601160045260245ffd5b8015610e3957600181700100000000000000000000000000000000811015610e22575b610db3610da6610d99610d8c610d7f610d72610dca9760088868010000000000000000610dc09a1015610e15575b640100000000811015610e08575b62010000811015610dfc575b610100811015610df0575b6010811015610de3575b1015610ddb575b610d6c818b610bff565b90610cba565b60011c610d6c818a610bff565b60011c610d6c8189610bff565b60011c610d6c8188610bff565b60011c610d6c8187610bff565b60011c610d6c8186610bff565b60011c610d6c8185610bff565b60011c8092610bff565b80821015610dd6575090565b905090565b60011b610d62565b60041c9160021b91610d5b565b811c9160041b91610d51565b60101c91811b91610d46565b60201c9160101b91610d3a565b60401c9160201b91610d2c565b50680100000000000000009050608082901c610cfe565b505f90565b90601f8019910116810190811067ffffffffffffffff82111761079f57604052565b3d15610eb8573d9067ffffffffffffffff821161079f5760405191610ead601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610e3e565b82523d5f602084013e565b606090565b908160209103126100cf575180151581036100cf5790565b91908203918211610cc757565b90610ef1929195949395611582565b908194819382151580610feb575b15610f6657828491610f1093610c1d565b9290918315610f5d57505015610f3f5790610f3982610f338684610c9a9661174f565b92610cba565b93610ed5565b92610f5484610f338484610f5a96979861174f565b92610ed5565b91565b95509392505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f556e697377617056324172626974726167654c6962726172793a205a45524f5f60448201527f504149525f5245534552564553000000000000000000000000000000000000006064820152608490fd5b50831515610eff565b908160209103126100cf575173ffffffffffffffffffffffffffffffffffffffff811681036100cf5790565b939594909592919280611138575b61104f575b508061104983610c41610c4194610c9a976114aa565b956114aa565b61106561105f610c7d88876114aa565b91610cdb565b90818111611074575b50611033565b6110828282959394956113f8565b94600582029180830460051481151715610cc75760058304036110d957610c416110ce86946110c8610c9a99610c416110c1610c419a61104999611384565b91846114aa565b90611384565b95945050945061106e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606490fd5b5080151561102e565b604080517f017e7e580000000000000000000000000000000000000000000000000000000081529097959660209573ffffffffffffffffffffffffffffffffffffffff9591949093919290919087816004818a86165afa801561137a5787915f9161135d575b50161515956111b78484846114e6565b16965f871561134d57508a517f7464fc3d0000000000000000000000000000000000000000000000000000000081529a818c6004818c5afa9b8c15611314575f9c61131e575b508160049798999a9b9c9a5b82517f18160ddd00000000000000000000000000000000000000000000000000000000815298899182905afa968715611314575f976112e2575b5087871015806112d9575b1561127057505091611266939161126c999a93610ee2565b90611020565b9091565b60849250519062461bcd60e51b82526004820152602760248201527f436f6d707574654c697175696469747956616c75653a204c495155494449545960448201527f5f414d4f554e54000000000000000000000000000000000000000000000000006064820152fd5b5087151561124e565b90968282813d831161130d575b6112f98183610e3e565b8101031261130a575051955f611243565b80fd5b503d6112ef565b50513d5f823e3d90fd5b9b828d813d8311611346575b6113348183610e3e565b8101031261130a57509a519a816111fd565b503d61132a565b9a8160049798999a9b9c9a611209565b6113749150893d8b1161034b5761033d8183610e3e565b5f6111a7565b8b513d5f823e3d90fd5b91906113909083610cba565b91821061139957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606490fd5b91906114049083610ed5565b91821161140d57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152606490fd5b906103e89182810292818404811482151715610cc7578304036110d957565b906103e59182810292818404811482151715610cc7578304036110d957565b5f929180159182156114c0575b5050156110d957565b80820294509150811582850482141715610cc7576114de9084610bff565b145f806114b7565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152928216602484015260209183916044918391165afa9081156102e1575f9161154f575090565b610c9a915060203d811161034b5761033d8183610e3e565b51906dffffffffffffffffffffffffffff821682036100cf57565b73ffffffffffffffffffffffffffffffffffffffff8083169392908084168581146116ca578510156116c35780825b16928315611664576004946060936115c8926114e6565b1660405193848092630240bc6b60e21b82525afa9182156102e1575f90819361160c575b506dffffffffffffffffffffffffffff809116921692145f1461126c5791565b92506060833d821161165c575b8161162660609383610e3e565b8101031261130a5761163783611567565b90604061164660208601611567565b94015163ffffffff81160361130a57505f6115ec565b3d9150611619565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b80846115b1565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608490fd5b80156118195781151580611810575b1561178b57610c9a92611786611780611779610c779461148b565b92836114aa565b9361146c565b611384565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608490fd5b5082151561175e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608490fdfea2646970667358221220a65401ee40ed527ff82d88882c43f6959c241a2cae5866d3931be21c389837e864736f6c63430008140033";

type UniswapMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapMath__factory extends ContractFactory {
  constructor(...args: UniswapMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniswapMath";
  }

  override deploy(
    factory_: PromiseOrValue<string>,
    router_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapMath> {
    return super.deploy(
      factory_,
      router_,
      overrides || {}
    ) as Promise<UniswapMath>;
  }
  override getDeployTransaction(
    factory_: PromiseOrValue<string>,
    router_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(factory_, router_, overrides || {});
  }
  override attach(address: string): UniswapMath {
    return super.attach(address) as UniswapMath;
  }
  override connect(signer: Signer): UniswapMath__factory {
    return super.connect(signer) as UniswapMath__factory;
  }
  static readonly contractName: "UniswapMath";

  public readonly contractName: "UniswapMath";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapMathInterface {
    return new utils.Interface(_abi) as UniswapMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapMath {
    return new Contract(address, _abi, signerOrProvider) as UniswapMath;
  }
}
