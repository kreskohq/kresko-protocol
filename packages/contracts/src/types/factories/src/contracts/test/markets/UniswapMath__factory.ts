/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type { UniswapMath, UniswapMathInterface } from "../../../../../src/contracts/test/markets/UniswapMath";

const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "factory_",
                type: "address",
            },
            {
                internalType: "contract IUniswapV2Router02",
                name: "router_",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveB",
                type: "uint256",
            },
        ],
        name: "computeProfitMaximizingTrade",
        outputs: [
            {
                internalType: "bool",
                name: "aToB",
                type: "bool",
            },
            {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "factory",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getGasCostOfGetLiquidityValueAfterArbitrageToPrice",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getLiquidityValue",
        outputs: [
            {
                internalType: "uint256",
                name: "tokenAAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "tokenBAmount",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getLiquidityValueAfterArbitrageToPrice",
        outputs: [
            {
                internalType: "uint256",
                name: "tokenAAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "tokenBAmount",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
        ],
        name: "getReservesAfterArbitrage",
        outputs: [
            {
                internalType: "uint256",
                name: "reserveA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveB",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
        ],
        name: "profitMaximizingTrade",
        outputs: [
            {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "aToB",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "router",
        outputs: [
            {
                internalType: "contract IUniswapV2Router02",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxSpendTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxSpendTokenB",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
            },
        ],
        name: "swapToPrice",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
] as const;

const _bytecode =
    "0x60c0346100e957601f6119ff388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff8311848410176100ee5780849260409485528339810103126100e957805173ffffffffffffffffffffffffffffffffffffffff9182821682036100e9576020015191821682036100e95760a0526080526040516118fa9081610105823960805181818161010b0152818161059101526106f1015260a05181818161018b01528181610378015281816103e7015281816104ba01528181610a8401528181610ad20152610b1b0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80633558e94c14610b0257806369a2fcbd14610ab957806380caa35314610a63578063bef90fd314610423578063c45a0155146103b3578063ca66e6521461035c578063d9b7a6e714610147578063f887ea40146100d75763fa6531541461007f57600080fd5b346100d2576080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100d25760406100c4606435604435602435600435610c35565b825191151582526020820152f35b600080fd5b346100d2576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100d2576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b346100d2576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100d25761017e610b3f565b6101db610189610b62565b7f0000000000000000000000000000000000000000000000000000000000000000926101b68282866115a6565b73ffffffffffffffffffffffffffffffffffffffff9490939192859283929188611509565b169460405190622fcfcb60e31b8252816004816020988994165afa9081156102e95760009161032f575b50161580159290610323576040517f7464fc3d000000000000000000000000000000000000000000000000000000008152908482600481895afa80156102e95785906000906102f5575b60049350965b6040517f18160ddd00000000000000000000000000000000000000000000000000000000815293849182905afa9182156102e9576000926102b1575b50916102a59391604096936044359261103c565b90918351928352820152f35b93915094918484813d83116102e2575b6102cb8183610e59565b810103126100d25792519194909291906040610291565b503d6102c1565b6040513d6000823e3d90fd5b5082813d831161031c575b61030a8183610e59565b810103126100d257846004925161024f565b503d610300565b60049084600096610255565b61034f9150853d8711610355575b6103478183610e59565b810190611010565b86610205565b503d61033d565b346100d25760406103a461039c61037236610b85565b939190927f00000000000000000000000000000000000000000000000000000000000000006115a6565b929091610c35565b90825191825215156020820152f35b346100d2576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100d2576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b346100d257610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100d25761045b610b3f565b610463610b62565b60a435916084359160c4359160443560643573ffffffffffffffffffffffffffffffffffffffff851685036100d25781151580610a5a575b156109fb5785158015906109f2575b15610993576104de9161039c85857f00000000000000000000000000000000000000000000000000000000000000006115a6565b909481968660001461098a575080915b11610982575b50831561097b5780935b1561097457505b604051602081016323b872dd60e01b81523360248301523060448301528560648301526064825260a082019082821067ffffffffffffffff8311176107b1576000928392604052519082875af161055a610e7b565b81610945575b50156108c0576040517f095ea7b30000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1660248201526044808201869052815267ffffffffffffffff60808201908111908211176107b157600081608082930160405260208151910182875af161060a610e7b565b81610891575b501561080c57604051926060840184811067ffffffffffffffff8211176107b1576040526002845260403660208601378351156107f65773ffffffffffffffffffffffffffffffffffffffff1660208401528251600110156107f657839060018060a01b031660408401526040519283916338ed173960e01b835260a483019060048401526000602484015260a060448401528151809152602060c4840192019060005b8181106107c75750505073ffffffffffffffffffffffffffffffffffffffff928316606483015260e43560848301526000929082900390829084907f0000000000000000000000000000000000000000000000000000000000000000165af180156102e95761071f57005b3d806000833e61072f8183610e59565b8101906020818303126100d25780519067ffffffffffffffff82116100d257019080601f830112156100d25781519167ffffffffffffffff83116107b1576020808460051b946040519061078583880183610e59565b815201938201019182116100d257602001915b8183106107a157005b8251815260209283019201610798565b634e487b7160e01b600052604160045260246000fd5b825173ffffffffffffffffffffffffffffffffffffffff168452869450602093840193909201916001016106b4565b634e487b7160e01b600052603260045260246000fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152608490fd5b80518015925082156108a6575b505085610610565b6108b99250602080918301019101610ed9565b858061089e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608490fd5b805180159250821561095a575b505085610560565b61096d9250602080918301019101610ed9565b8580610952565b9050610505565b81936104fe565b9450856104f4565b905080916104ee565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f5350454e4400006044820152606490fd5b508615156104aa565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f505249434500006044820152606490fd5b5080151561049b565b346100d2576020610ab1610aa8610a7936610bcb565b929493949190915a957f000000000000000000000000000000000000000000000000000000000000000061115d565b50505a90610ef1565b604051908152f35b346100d2576040610af6610acc36610bcb565b939290927f000000000000000000000000000000000000000000000000000000000000000061115d565b82519182526020820152f35b346100d2576040610af6610b1536610b85565b929190917f0000000000000000000000000000000000000000000000000000000000000000610efe565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100d257565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036100d257565b60809060031901126100d25773ffffffffffffffffffffffffffffffffffffffff9060043582811681036100d2579160243590811681036100d257906044359060643590565b60a09060031901126100d25773ffffffffffffffffffffffffffffffffffffffff9060043582811681036100d2579160243590811681036100d25790604435906064359060843590565b8115610c1f570490565b634e487b7160e01b600052601260045260246000fd5b610cb292610c9a610c956103e59397969497610c8f81610c5e88610c598d896114cc565b610c15565b1099610c82610c7d610c708a896114cc565b8d15610ccb5785906114cc565b61148e565b928b15610cc457506114ad565b90610c15565b610cf5565b928615610cb55750610cab9061148e565b049061141a565b90565b610cbf915061148e565b610cab565b90506114ad565b83906114cc565b91908201809211610cdf57565b634e487b7160e01b600052601160045260246000fd5b8015610e5357600181700100000000000000000000000000000000811015610e3c575b610dcd610dc0610db3610da6610d99610d8c610de49760088868010000000000000000610dda9a1015610e2f575b640100000000811015610e22575b62010000811015610e16575b610100811015610e0a575b6010811015610dfd575b1015610df5575b610d86818b610c15565b90610cd2565b60011c610d86818a610c15565b60011c610d868189610c15565b60011c610d868188610c15565b60011c610d868187610c15565b60011c610d868186610c15565b60011c610d868185610c15565b60011c8092610c15565b80821015610df0575090565b905090565b60011b610d7c565b60041c9160021b91610d75565b811c9160041b91610d6b565b60101c91811b91610d60565b60201c9160101b91610d54565b60401c9160201b91610d46565b50680100000000000000009050608082901c610d18565b50600090565b90601f8019910116810190811067ffffffffffffffff8211176107b157604052565b3d15610ed4573d9067ffffffffffffffff82116107b15760405191610ec8601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610e59565b82523d6000602084013e565b606090565b908160209103126100d2575180151581036100d25790565b91908203918211610cdf57565b90610f0d9291959493956115a6565b908194819382151580611007575b15610f8257828491610f2c93610c35565b9290918315610f7957505015610f5b5790610f5582610f4f8684610cb296611775565b92610cd2565b93610ef1565b92610f7084610f4f8484610f76969798611775565b92610ef1565b91565b95509392505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f556e697377617056324172626974726167654c6962726172793a205a45524f5f60448201527f504149525f5245534552564553000000000000000000000000000000000000006064820152608490fd5b50831515610f1b565b908160209103126100d2575173ffffffffffffffffffffffffffffffffffffffff811681036100d25790565b939594909592919280611154575b61106b575b508061106583610c59610c5994610cb2976114cc565b956114cc565b61108161107b610c9588876114cc565b91610cf5565b90818111611090575b5061104f565b61109e82829593949561141a565b94600582029180830460051481151715610cdf5760058304036110f557610c596110ea86946110e4610cb299610c596110dd610c599a611065996113a6565b91846114cc565b906113a6565b95945050945061108a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606490fd5b5080151561104a565b604080517f017e7e580000000000000000000000000000000000000000000000000000000081529097959660209573ffffffffffffffffffffffffffffffffffffffff9591949093919290919087816004818a86165afa801561139b57879160009161137e575b50161515956111d4848484611509565b16966000871561136e57508a517f7464fc3d0000000000000000000000000000000000000000000000000000000081529a818c6004818c5afa9b8c156113345760009c61133f575b508160049798999a9b9c9a5b82517f18160ddd00000000000000000000000000000000000000000000000000000000815298899182905afa96871561133457600097611302575b5087871015806112f9575b1561129057505091611286939161128c999a93610efe565b9061103c565b9091565b60849250519062461bcd60e51b82526004820152602760248201527f436f6d707574654c697175696469747956616c75653a204c495155494449545960448201527f5f414d4f554e54000000000000000000000000000000000000000000000000006064820152fd5b5087151561126e565b90968282813d831161132d575b6113198183610e59565b8101031261132a5750519538611263565b80fd5b503d61130f565b50513d6000823e3d90fd5b9b828d813d8311611367575b6113558183610e59565b8101031261132a57509a519a8161121c565b503d61134b565b9a8160049798999a9b9c9a611228565b6113959150893d8b11610355576103478183610e59565b386111c4565b8b513d6000823e3d90fd5b91906113b29083610cd2565b9182106113bb57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606490fd5b91906114269083610ef1565b91821161142f57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152606490fd5b906103e89182810292818404811482151715610cdf578304036110f557565b906103e59182810292818404811482151715610cdf578304036110f557565b6000929180159182156114e3575b5050156110f557565b80820294509150811582850482141715610cdf576115019084610c15565b1438806114da565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152928216602484015260209183916044918391165afa9081156102e957600091611573575090565b610cb2915060203d8111610355576103478183610e59565b51906dffffffffffffffffffffffffffff821682036100d257565b73ffffffffffffffffffffffffffffffffffffffff8083169392908084168581146116f0578510156116e95780825b1692831561168a576004946060936115ec92611509565b1660405193848092630240bc6b60e21b82525afa9182156102e9576000908193611632575b506dffffffffffffffffffffffffffff8091169216921460001461128c5791565b92506060833d8211611682575b8161164c60609383610e59565b8101031261132a5761165d8361158b565b90604061166c6020860161158b565b94015163ffffffff81160361132a575038611611565b3d915061163f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b80846115d5565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608490fd5b801561183f5781151580611836575b156117b157610cb2926117ac6117a661179f610c8f946114ad565b92836114cc565b9361148e565b6113a6565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608490fd5b50821515611784565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608490fdfea264697066735822122086f4bfdbe619a0870f52480a8b4f0df6dcd3dd6519b4186924b02d29e9e95e1664736f6c63430008130033";

type UniswapMathConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: UniswapMathConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class UniswapMath__factory extends ContractFactory {
    constructor(...args: UniswapMathConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "UniswapMath";
    }

    override deploy(
        factory_: PromiseOrValue<string>,
        router_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<UniswapMath> {
        return super.deploy(factory_, router_, overrides || {}) as Promise<UniswapMath>;
    }
    override getDeployTransaction(
        factory_: PromiseOrValue<string>,
        router_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): TransactionRequest {
        return super.getDeployTransaction(factory_, router_, overrides || {});
    }
    override attach(address: string): UniswapMath {
        return super.attach(address) as UniswapMath;
    }
    override connect(signer: Signer): UniswapMath__factory {
        return super.connect(signer) as UniswapMath__factory;
    }
    static readonly contractName: "UniswapMath";

    public readonly contractName: "UniswapMath";

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): UniswapMathInterface {
        return new utils.Interface(_abi) as UniswapMathInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): UniswapMath {
        return new Contract(address, _abi, signerOrProvider) as UniswapMath;
    }
}
