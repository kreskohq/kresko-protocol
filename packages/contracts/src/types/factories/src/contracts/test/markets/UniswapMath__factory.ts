/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type { UniswapMath, UniswapMathInterface } from "../../../../../src/contracts/test/markets/UniswapMath";

const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "factory_",
                type: "address",
            },
            {
                internalType: "contract IUniswapV2Router02",
                name: "router_",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveB",
                type: "uint256",
            },
        ],
        name: "computeProfitMaximizingTrade",
        outputs: [
            {
                internalType: "bool",
                name: "aToB",
                type: "bool",
            },
            {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "factory",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getGasCostOfGetLiquidityValueAfterArbitrageToPrice",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getLiquidityValue",
        outputs: [
            {
                internalType: "uint256",
                name: "tokenAAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "tokenBAmount",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getLiquidityValueAfterArbitrageToPrice",
        outputs: [
            {
                internalType: "uint256",
                name: "tokenAAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "tokenBAmount",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
        ],
        name: "getReservesAfterArbitrage",
        outputs: [
            {
                internalType: "uint256",
                name: "reserveA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveB",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
        ],
        name: "profitMaximizingTrade",
        outputs: [
            {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "aToB",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "router",
        outputs: [
            {
                internalType: "contract IUniswapV2Router02",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxSpendTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxSpendTokenB",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
            },
        ],
        name: "swapToPrice",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
] as const;

const _bytecode =
    "0x60c0346100d557601f62001b3c388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff8311848410176100da5780849260409485528339810103126100d55780602061008392519161006f836100f0565b01519061007b826100f0565b60a052608052565b604051611a2d90816200010f82396080518181816103360152610752015260a05181818160de015281816101ae015281816101f1015281816102d001528181610492015281816104eb015261056b0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116036100d55756fe60806040526004361015610013575b600080fd5b60003560e01c80633558e94c146100c757806369a2fcbd146100be57806380caa353146100b5578063bef90fd3146100ac578063c45a0155146100a3578063ca66e6521461009a578063d9b7a6e714610091578063f887ea40146100885763fa6531541461008057600080fd5b61000e61078e565b5061000e61071d565b5061000e61051e565b5061000e6104ce565b5061000e61045d565b5061000e610236565b5061000e6101d2565b5061000e610196565b3461000e576101026100d836610132565b929190917f0000000000000000000000000000000000000000000000000000000000000000610fb2565b60408051928352602083019190915290f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b608090600319011261000e5760043561014a81610114565b9060243561015781610114565b906044359060643590565b60a090600319011261000e5760043561017a81610114565b9060243561018781610114565b90604435906064359060843590565b503461000e576101026101a836610162565b939290927f00000000000000000000000000000000000000000000000000000000000000006112a5565b503461000e5760206102156101e636610162565b929493949190915a957f00000000000000000000000000000000000000000000000000000000000000006112a5565b50505a808210610229575b60405191038152f35b6102316107e2565b610220565b503461000e57610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576103ef600060043561027881610114565b6024359061028582610114565b60443560643592608435926102fc60a4359560c435946102a486610114565b80151580610454575b6102b690610a21565b861580159061044b575b6102c990610a87565b6102f485857f00000000000000000000000000000000000000000000000000000000000000006116c2565b929091610819565b90948196868914610442575080915b1161043a575b509085918483146104335780945b831461042b5750925b61033485303384610e8a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16936103b59061037b878785610d83565b6103ac610386610b92565b9361039085610bcd565b73ffffffffffffffffffffffffffffffffffffffff9091169052565b61039083610bf0565b6040517f38ed17390000000000000000000000000000000000000000000000000000000081529687958694859360e4359260048601610c7a565b03925af1801561041e575b61040057005b61041c903d806000833e6104148183610b49565b810190610c00565b005b610426610cf2565b6103fa565b905092610328565b819461031f565b945085610311565b9050809161030b565b508715156102c0565b508115156102ad565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b503461000e57604061050f6102f46104e536610132565b939190927f00000000000000000000000000000000000000000000000000000000000000006116c2565b90825191825215156020820152f35b503461000e576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5761010260043561055d81610114565b60243561056981610114565b7f0000000000000000000000000000000000000000000000000000000000000000916105be6105a561059c8484876116c2565b949093866115e1565b73ffffffffffffffffffffffffffffffffffffffff1690565b9260405192622fcfcb60e31b8452602091848381600460018060a01b0398898096165afa908115610710575b6000916106e3575b5016151593826000866000146106dd57506040517f7464fc3d00000000000000000000000000000000000000000000000000000000815281816004818b87165afa9081156106d0575b6000916106b3575b50965b6004604051809481936318160ddd60e01b8352165afa9283156106a6575b600093610677575b5050604435926110e8565b610697929350803d1061069f575b61068f8183610b49565b8101906110d9565b90388061066c565b503d610685565b6106ae610cf2565b610664565b6106ca9150823d841161069f5761068f8183610b49565b38610643565b6106d8610cf2565b61063b565b96610646565b6107039150843d8611610709575b6106fb8183610b49565b8101906110c4565b386105f2565b503d6106f1565b610718610cf2565b6105ea565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b503461000e576080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760406107d4606435604435602435600435610819565b825191151582526020820152f35b50634e487b7160e01b600052601160045260246000fd5b8115610803570490565b634e487b7160e01b600052601260045260246000fd5b6108969261087e6108796103e59397969497610873816108428861083d8d89611594565b6107f9565b10996108666108616108548a89611594565b8d156108af578590611594565b611544565b928b156108a85750611573565b906107f9565b6108ce565b928615610899575061088f90611544565b04906114c3565b90565b6108a39150611544565b61088f565b9050611573565b8390611594565b811981116108c2570190565b6108ca6107e2565b0190565b8015610a1b5780600181700100000000000000000000000000000000811015610a03575b6109866109806109706109806109a16109806109976109806109809861097a6109906109806109866109ab9f6109909f600882680100000000000000006109809410156109f6575b6401000000008110156109e9575b620100008110156109dd575b6101008110156109d1575b60108110156109c4575b10156109bc575b61097a81886107f9565b906108b6565b60011c90565b61097a81866107f9565b80926107f9565b61097a818c6107f9565b61097a818a6107f9565b808210156109b7575090565b905090565b60011b610970565b60041c9160021b91610969565b811c9160041b9161095f565b60101c91811b91610954565b60201c9160101b91610948565b60401c9160201b9161093a565b608081901c92506801000000000000000091506108f2565b50600090565b15610a2857565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f505249434500006044820152606490fd5b15610a8e57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f5350454e4400006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117610b2057604052565b610b28610aed565b604052565b60a0810190811067ffffffffffffffff821117610b2057604052565b90601f8019910116810190811067ffffffffffffffff821117610b2057604052565b60209067ffffffffffffffff8111610b85575b60051b0190565b610b8d610aed565b610b7e565b604051906060820182811067ffffffffffffffff821117610bc0575b60405260028252604082602036910137565b610bc8610aed565b610bae565b805115610bda5760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015610bda5760400190565b602090818184031261000e5780519067ffffffffffffffff821161000e57019180601f8401121561000e578251610c3681610b6b565b93610c446040519586610b49565b818552838086019260051b82010192831161000e578301905b828210610c6b575050505090565b81518152908301908301610c5d565b91909493929460a0830190835260209060008285015260a0604085015282518091528160c0850193019160005b828110610cc85750505050906080919460018060a01b031660608201520152565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610ca7565b506040513d6000823e3d90fd5b3d15610d66573d9067ffffffffffffffff8211610d59575b60405191610d4d601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184610b49565b82523d6000602084013e565b610d61610aed565b610d17565b606090565b9081602091031261000e5751801515810361000e5790565b6000929183809360405190602082019363095ea7b360e01b855260018060a01b03166024830152604482015260448152610dbc81610b04565b51925af1610dc8610cff565b81610e5b575b5015610dd657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152608490fd5b8051801592508215610e70575b505038610dce565b610e839250602080918301019101610d6b565b3880610e68565b9091600080949381946040519160208301946323b872dd60e01b865260018060a01b038092166024850152166044830152606482015260648152610ecd81610b2d565b51925af1610ed9610cff565b81610f6c575b5015610ee757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608490fd5b8051801592508215610f81575b505038610edf565b610f949250602080918301019101610d6b565b3880610f79565b818110610fa6570390565b610fae6107e2565b0390565b90610fc19291959493956116c2565b9081948193821515806110bb575b1561103657828491610fe093610819565b929091831561102d5750501561100f5790611009826110038684610896966118a8565b926108b6565b93610f9b565b9261102484611003848461102a9697986118a8565b92610f9b565b91565b95509392505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f556e697377617056324172626974726167654c6962726172793a205a45524f5f60448201527f504149525f5245534552564553000000000000000000000000000000000000006064820152608490fd5b50831515610fcf565b9081602091031261000e575161089681610114565b9081602091031261000e575190565b939594909592919280611210575b611117575b50806111118361083d61083d9461089697611594565b95611594565b61112d6111276108798887611594565b916108ce565b9081811161113c575b506110fb565b61114a8282959394956114c3565b94816000190460051182151516611203575b600582029160058304036111a45761083d61119986946111936108969961083d61118c61083d9a6111119961144f565b9184611594565b9061144f565b959450509450611136565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606490fd5b61120b6107e2565b61115c565b508015156110f6565b1561122057565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f436f6d707574654c697175696469747956616c75653a204c495155494449545960448201527f5f414d4f554e54000000000000000000000000000000000000000000000000006064820152608490fd5b6040517f017e7e580000000000000000000000000000000000000000000000000000000081526113b89673ffffffffffffffffffffffffffffffffffffffff96939590949293602093909288908581600481858b165afa908115611442575b600091611425575b501615159661131f6105a58383896115e1565b988560008a1561141f57506040517f7464fc3d00000000000000000000000000000000000000000000000000000000815281816004818f87165afa908115611412575b6000916113f5575b509a5b6004604051809481936318160ddd60e01b8352165afa9586156113e8575b6000966113c5575b50508495876113b2961015806113bc575b6113ad90611219565b610fb2565b906110e8565b9091565b508715156113a4565b6113b2965090816113e192903d1061069f5761068f8183610b49565b9438611393565b6113f0610cf2565b61138b565b61140c9150823d841161069f5761068f8183610b49565b3861136a565b61141a610cf2565b611362565b9a61136d565b61143c9150863d8811610709576106fb8183610b49565b3861130c565b61144a610cf2565b611304565b919061145b90836108b6565b91821061146457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606490fd5b9190808310611537575b82039182116114d857565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152606490fd5b61153f6107e2565b6114cd565b906103e8918060001904831181151516611566575b828102928304036111a457565b61156e6107e2565b611559565b906103e591806000190483118115151661156657828102928304036111a457565b6000929180159182156115ab575b5050156111a457565b9150925080600019048311811515166115d4575b6115cc83820293846107f9565b1438806115a2565b6115dc6107e2565b6115bf565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152928216602484015260209183916044918391165afa908115611664575b60009161164c575090565b610896915060203d8111610709576106fb8183610b49565b61166c610cf2565b611641565b51906dffffffffffffffffffffffffffff8216820361000e57565b9081606091031261000e576116a081611671565b9160406116af60208401611671565b92015163ffffffff8116810361000e5790565b73ffffffffffffffffffffffffffffffffffffffff828116938082169390918585146117bd576105a5606093611716936105a5936004988a106000146117b757815b1696611711881515611842565b6115e1565b6040517f0902f1ac00000000000000000000000000000000000000000000000000000000815293849182905afa9182156117aa575b6000908193611776575b506dffffffffffffffffffffffffffff809116921692146000146113b85791565b905061179a91925060603d81116117a3575b6117928183610b49565b81019061168c565b50919038611755565b503d611788565b6117b2610cf2565b61174b565b82611704565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608490fd5b1561184957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b80156119725781151580611969575b156118e457610896926118df6118d96118d261087394611573565b9283611594565b93611544565b61144f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608490fd5b508215156118b7565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608490fdfea2646970667358221220897e4413390cbc35d609650e3094093808f780eaedca148b40dd6fe0ff5be4ca64736f6c634300080e0033";

type UniswapMathConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: UniswapMathConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class UniswapMath__factory extends ContractFactory {
    constructor(...args: UniswapMathConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "UniswapMath";
    }

    override deploy(
        factory_: PromiseOrValue<string>,
        router_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<UniswapMath> {
        return super.deploy(factory_, router_, overrides || {}) as Promise<UniswapMath>;
    }
    override getDeployTransaction(
        factory_: PromiseOrValue<string>,
        router_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): TransactionRequest {
        return super.getDeployTransaction(factory_, router_, overrides || {});
    }
    override attach(address: string): UniswapMath {
        return super.attach(address) as UniswapMath;
    }
    override connect(signer: Signer): UniswapMath__factory {
        return super.connect(signer) as UniswapMath__factory;
    }
    static readonly contractName: "UniswapMath";

    public readonly contractName: "UniswapMath";

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): UniswapMathInterface {
        return new utils.Interface(_abi) as UniswapMathInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): UniswapMath {
        return new Contract(address, _abi, signerOrProvider) as UniswapMath;
    }
}
