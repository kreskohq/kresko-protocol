/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type { UniswapMath, UniswapMathInterface } from "../../../../../src/contracts/test/markets/UniswapMath";

const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "factory_",
                type: "address",
            },
            {
                internalType: "contract IUniswapV2Router02",
                name: "router_",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveB",
                type: "uint256",
            },
        ],
        name: "computeProfitMaximizingTrade",
        outputs: [
            {
                internalType: "bool",
                name: "aToB",
                type: "bool",
            },
            {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "factory",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getGasCostOfGetLiquidityValueAfterArbitrageToPrice",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getLiquidityValue",
        outputs: [
            {
                internalType: "uint256",
                name: "tokenAAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "tokenBAmount",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "liquidityAmount",
                type: "uint256",
            },
        ],
        name: "getLiquidityValueAfterArbitrageToPrice",
        outputs: [
            {
                internalType: "uint256",
                name: "tokenAAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "tokenBAmount",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
        ],
        name: "getReservesAfterArbitrage",
        outputs: [
            {
                internalType: "uint256",
                name: "reserveA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "reserveB",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
        ],
        name: "profitMaximizingTrade",
        outputs: [
            {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "aToB",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "router",
        outputs: [
            {
                internalType: "contract IUniswapV2Router02",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "truePriceTokenB",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxSpendTokenA",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maxSpendTokenB",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
            },
        ],
        name: "swapToPrice",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
] as const;

const _bytecode =
    "0x60c0346100e957601f611b45388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff8311848410176100ee5780849260409485528339810103126100e957805173ffffffffffffffffffffffffffffffffffffffff9182821682036100e9576020015191821682036100e95760a052608052604051611a4090816101058239608051818181610122015281816105d40152610756015260a05181818161018a0152818161038e01528181610414015281816104cf01528181610b1701528181610b650152610bae0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80633558e94c14610b9557806369a2fcbd14610b4c57806380caa35314610af6578063bef90fd314610438578063c45a0155146103c9578063ca66e65214610372578063d9b7a6e714610146578063f887ea40146100d75763fa6531541461007f57600080fd5b346100d25760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d25760406100c4606435604435602435600435610d1d565b825191151582526020820152f35b600080fd5b346100d25760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100d25760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d25761017d610bd2565b6101d8610188610bf5565b7f0000000000000000000000000000000000000000000000000000000000000000926101b58282866116d7565b92909173ffffffffffffffffffffffffffffffffffffffff94859283928861163a565b1694604051907f017e7e58000000000000000000000000000000000000000000000000000000008252816004816020988994165afa9081156102ff57600091610345575b5016158015929061033957604051907f7464fc3d0000000000000000000000000000000000000000000000000000000082528482600481895afa80156102ff57859060009061030b575b60049350965b604051938480927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa9182156102ff576000926102c7575b50916102bb9391604096936044359261115b565b90918351928352820152f35b93915094918484813d83116102f8575b6102e18183610f5a565b810103126100d257925191949092919060406102a7565b503d6102d7565b6040513d6000823e3d90fd5b5082813d8311610332575b6103208183610f5a565b810103126100d2578460049251610266565b503d610316565b6004908460009661026c565b6103659150853d871161036b575b61035d8183610f5a565b81019061112f565b8661021c565b503d610353565b346100d25760406103ba6103b261038836610c18565b939190927f00000000000000000000000000000000000000000000000000000000000000006116d7565b929091610d1d565b90825191825215156020820152f35b346100d25760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100d2576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d257610470610bd2565b610478610bf5565b60a435916084359160c4359160443560643573ffffffffffffffffffffffffffffffffffffffff851685036100d25781151580610aed575b15610a8f578515801590610a86575b15610a28576104f3916103b285857f00000000000000000000000000000000000000000000000000000000000000006116d7565b9094819686600014610a1f575080915b11610a17575b508315610a105780935b15610a0957505b604051602081017f23b872dd0000000000000000000000000000000000000000000000000000000081523360248301523060448301528560648301526064825260a082019082821067ffffffffffffffff831117610816576000928392604052519082875af1610588610f9b565b816109da575b5015610956576040517f095ea7b300000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201528460448201526044815280608081011067ffffffffffffffff60808301111761081657600081608082930160405260208151910182875af1610639610f9b565b81610927575b50156108a357604051926060840184811067ffffffffffffffff821117610816576040526002845260403660208601378351156108745773ffffffffffffffffffffffffffffffffffffffff1660208401528251600110156108745773ffffffffffffffffffffffffffffffffffffffff84911660408401526040519283917f38ed173900000000000000000000000000000000000000000000000000000000835260a483019060048401526000602484015260a060448401528151809152602060c4840192019060005b81811061084557505050819073ffffffffffffffffffffffffffffffffffffffff60009416606483015260e435608483015203818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156102ff5761078457005b3d806000833e6107948183610f5a565b8101906020818303126100d25780519067ffffffffffffffff82116100d257019080601f830112156100d25781519167ffffffffffffffff8311610816576020808460051b94604051906107ea83880183610f5a565b815201938201019182116100d257602001915b81831061080657005b82518152602092830192016107fd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b825173ffffffffffffffffffffffffffffffffffffffff1684528694506020938401939092019160010161070a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152fd5b805180159250821561093c575b50508561063f565b61094f9250602080918301019101610ff9565b8580610934565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152fd5b80518015925082156109ef575b50508561058e565b610a029250602080918301019101610ff9565b85806109e7565b905061051a565b8193610513565b945085610509565b90508091610503565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f5350454e4400006044820152fd5b508615156104bf565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f505249434500006044820152fd5b508015156104b0565b346100d2576020610b44610b3b610b0c36610c7c565b929493949190915a957f000000000000000000000000000000000000000000000000000000000000000061127b565b50505a90611011565b604051908152f35b346100d2576040610b89610b5f36610c7c565b939290927f000000000000000000000000000000000000000000000000000000000000000061127b565b82519182526020820152f35b346100d2576040610b89610ba836610c18565b929190917f000000000000000000000000000000000000000000000000000000000000000061101e565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100d257565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036100d257565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60809101126100d25773ffffffffffffffffffffffffffffffffffffffff9060043582811681036100d2579160243590811681036100d257906044359060643590565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126100d25773ffffffffffffffffffffffffffffffffffffffff9060043582811681036100d2579160243590811681036100d25790604435906064359060843590565b8115610cee570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610d9a92610d82610d7d6103e59397969497610d7781610d4688610d418d896115fd565b610ce4565b1099610d6a610d65610d588a896115fd565b8d15610db35785906115fd565b6115bf565b928b15610dac57506115de565b90610ce4565b610df6565b928615610d9d5750610d93906115bf565b049061154c565b90565b610da791506115bf565b610d93565b90506115de565b83906115fd565b91908201809211610dc757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8015610f5457600181700100000000000000000000000000000000811015610f3d575b610ece610ec1610eb4610ea7610e9a610e8d610ee59760088868010000000000000000610edb9a1015610f30575b640100000000811015610f23575b62010000811015610f17575b610100811015610f0b575b6010811015610efe575b1015610ef6575b610e87818b610ce4565b90610dba565b60011c610e87818a610ce4565b60011c610e878189610ce4565b60011c610e878188610ce4565b60011c610e878187610ce4565b60011c610e878186610ce4565b60011c610e878185610ce4565b60011c8092610ce4565b80821015610ef1575090565b905090565b60011b610e7d565b60041c9160021b91610e76565b811c9160041b91610e6c565b60101c91811b91610e61565b60201c9160101b91610e55565b60401c9160201b91610e47565b50680100000000000000009050608082901c610e19565b50600090565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761081657604052565b3d15610ff4573d9067ffffffffffffffff82116108165760405191610fe860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610f5a565b82523d6000602084013e565b606090565b908160209103126100d2575180151581036100d25790565b91908203918211610dc757565b9061102d9291959493956116d7565b908194819382151580611126575b156110a25782849161104c93610d1d565b92909183156110995750501561107b57906110758261106f8684610d9a966118bd565b92610dba565b93611011565b926110908461106f84846110969697986118bd565b92611011565b91565b95509392505050565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f556e697377617056324172626974726167654c6962726172793a205a45524f5f60448201527f504149525f5245534552564553000000000000000000000000000000000000006064820152fd5b5083151561103b565b908160209103126100d2575173ffffffffffffffffffffffffffffffffffffffff811681036100d25790565b939594909592919280611272575b61118a575b508061118483610d41610d4194610d9a976115fd565b956115fd565b6111a061119a610d7d88876115fd565b91610df6565b908181116111af575b5061116e565b6111bd82829593949561154c565b94600582029180830460051481151715610dc757600583040361121457610d416112098694611203610d9a99610d416111fc610d419a611184996114d9565b91846115fd565b906114d9565b9594505094506111a9565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152fd5b50801515611169565b929593949091956040968751937f017e7e5800000000000000000000000000000000000000000000000000000000855260209573ffffffffffffffffffffffffffffffffffffffff9587816004818a86165afa80156114ce5787916000916114b1575b50161515956112ee84848461163a565b1696600087156114a157508a519a7f7464fc3d000000000000000000000000000000000000000000000000000000008c52818c6004818c5afa9b8c156114675760009c611472575b508160049798999a9b9c9a5b8251988980927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa96871561146757600097611435575b50878710158061142c575b156113a95750509161139f93916113a5999a9361101e565b9061115b565b9091565b6084925051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602760248201527f436f6d707574654c697175696469747956616c75653a204c495155494449545960448201527f5f414d4f554e54000000000000000000000000000000000000000000000000006064820152fd5b50871515611387565b90968282813d8311611460575b61144c8183610f5a565b8101031261145d575051953861137c565b80fd5b503d611442565b50513d6000823e3d90fd5b9b828d813d831161149a575b6114888183610f5a565b8101031261145d57509a519a81611336565b503d61147e565b9a8160049798999a9b9c9a611342565b6114c89150893d8b1161036b5761035d8183610f5a565b386112de565b8b513d6000823e3d90fd5b91906114e59083610dba565b9182106114ee57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152fd5b91906115589083611011565b91821161156157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152fd5b906103e89182810292818404811482151715610dc75783040361121457565b906103e59182810292818404811482151715610dc75783040361121457565b600092918015918215611614575b50501561121457565b80820294509150811582850482141715610dc7576116329084610ce4565b14388061160b565b604460209260405194859384927fe6a4390500000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff92838092166004860152166024840152165afa9081156102ff576000916116a4575090565b610d9a915060203d811161036b5761035d8183610f5a565b51906dffffffffffffffffffffffffffff821682036100d257565b73ffffffffffffffffffffffffffffffffffffffff808316939290808416858114611839578510156118325780825b169283156117d45760049460609361171d9261163a565b16604051938480927f0902f1ac0000000000000000000000000000000000000000000000000000000082525afa9182156102ff57600090819361177c575b506dffffffffffffffffffffffffffff809116921692146000146113a55791565b92506060833d82116117cc575b8161179660609383610f5a565b8101031261145d576117a7836116bc565b9060406117b6602086016116bc565b94015163ffffffff81160361145d57503861175b565b3d9150611789565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fd5b8084611706565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b8015611986578115158061197d575b156118f957610d9a926118f46118ee6118e7610d77946115de565b92836115fd565b936115bf565b6114d9565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152fd5b508215156118cc565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152fdfea26469706673582212203ec915b042ce450d0771ae50d889d794c756a7d9e2bc5818b38cb353f3d7fda564736f6c63430008130033";

type UniswapMathConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: UniswapMathConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class UniswapMath__factory extends ContractFactory {
    constructor(...args: UniswapMathConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "UniswapMath";
    }

    override deploy(
        factory_: PromiseOrValue<string>,
        router_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<UniswapMath> {
        return super.deploy(factory_, router_, overrides || {}) as Promise<UniswapMath>;
    }
    override getDeployTransaction(
        factory_: PromiseOrValue<string>,
        router_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): TransactionRequest {
        return super.getDeployTransaction(factory_, router_, overrides || {});
    }
    override attach(address: string): UniswapMath {
        return super.attach(address) as UniswapMath;
    }
    override connect(signer: Signer): UniswapMath__factory {
        return super.connect(signer) as UniswapMath__factory;
    }
    static readonly contractName: "UniswapMath";

    public readonly contractName: "UniswapMath";

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): UniswapMathInterface {
        return new utils.Interface(_abi) as UniswapMathInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): UniswapMath {
        return new Contract(address, _abi, signerOrProvider) as UniswapMath;
    }
}
