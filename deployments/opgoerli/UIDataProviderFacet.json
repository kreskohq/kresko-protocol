{
  "address": "0xDf84261130B865447eDaF99D141b0C78538c20B0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_marketStatusOracles",
          "type": "address[]"
        }
      ],
      "name": "batchOracleValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint80",
              "name": "roundId",
              "type": "uint80"
            },
            {
              "internalType": "bool",
              "name": "marketOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct LibUI.Price[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "getAccountData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracleAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "anchorAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "priceRate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilityRate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountUSD",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "kFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ammPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "openFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "closeFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibUI.krAssetInfoUser[]",
              "name": "krAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracleAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "anchorAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountUSD",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "cFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationIncentive",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct LibUI.CollateralAssetInfoUser[]",
              "name": "collateralAssets",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtActualUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralActualUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minCollateralUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingPowerUSD",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.KreskoUser",
          "name": "user",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.Balance[]",
          "name": "balances",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerBlocks",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "rewardTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct LibUI.StakingData[]",
          "name": "stakingData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_allTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_priceFeeds",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_marketStatusOracles",
          "type": "address[]"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.TokenMetadata[]",
          "name": "metadatas",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint80",
              "name": "roundId",
              "type": "uint80"
            },
            {
              "internalType": "bool",
              "name": "marketOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct LibUI.Price[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x44f2f5866e099b1f7204cd98e74b4bdb5ac511dd9a65ef203e604769af59500c",
  "receipt": {
    "to": null,
    "from": "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d",
    "contractAddress": "0xDf84261130B865447eDaF99D141b0C78538c20B0",
    "transactionIndex": 6,
    "gasUsed": "3103953",
    "logsBloom": "0x
    "blockHash": "0x3fa706cdd9bf2ccfbb58709545efd134a723b82a39ccbf35f20b13fa1761f75c",
    "transactionHash": "0x44f2f5866e099b1f7204cd98e74b4bdb5ac511dd9a65ef203e604769af59500c",
    "logs": [],
    "blockNumber": 9748916,
    "cumulativeGasUsed": "5498216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "da64b2514f06331329702e90140ebd5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_marketStatusOracles\",\"type\":\"address[]\"}],\"name\":\"batchOracleValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"bool\",\"name\":\"marketOpen\",\"type\":\"bool\"}],\"internalType\":\"struct LibUI.Price[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"getAccountData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ammPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"openFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFee\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.krAssetInfoUser[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct LibUI.CollateralAssetInfoUser[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtActualUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralActualUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingPowerUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.KreskoUser\",\"name\":\"user\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct LibUI.StakingData[]\",\"name\":\"stakingData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_marketStatusOracles\",\"type\":\"address[]\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.TokenMetadata[]\",\"name\":\"metadatas\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"bool\",\"name\":\"marketOpen\",\"type\":\"bool\"}],\"internalType\":\"struct LibUI.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kresko\",\"kind\":\"dev\",\"methods\":{},\"title\":\"UIDataProviderFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"UI data aggregation views\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/minter/facets/UIDataProviderFacet.sol\":\"UIDataProviderFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\nimport {DiamondEvent} from \\\"../../libs/Events.sol\\\";\\n\\ninterface IDiamondCutFacet {\\n    /// @dev  Add=0, Replace=1, Remove=2\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /**\\n     *@notice Add/replace/remove any number of functions, optionally execute a function with delegatecall\\n     * @param _diamondCut Contains the facet addresses and function selectors\\n     * @param _init The address of the contract or facet to execute _calldata\\n     * @param _calldata A function call, including function selector and arguments\\n     *                  _calldata is executed with delegatecall on _init\\n     */\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n    /**\\n     * @notice Use an initializer contract without doing modifications\\n     * @param _init The address of the contract or facet to execute _calldata\\n     * @param _calldata A function call, including function selector and arguments\\n     * - _calldata is executed with delegatecall on _init\\n     */\\n    function upgradeState(address _init, bytes calldata _calldata) external;\\n}\\n\",\"keccak256\":\"0x4a1102f4dc50aecbf6d5c20d685466e44df60150bb6b91a3650bfe0fe1863193\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.19;\\n\\nimport {IKreskoAsset} from \\\"./IKreskoAsset.sol\\\";\\n\\ninterface IERC4626Upgradeable {\\n    /**\\n     * @notice The underlying Kresko Asset\\n     */\\n    function asset() external view returns (IKreskoAsset);\\n\\n    /**\\n     * @notice Deposit KreskoAssets for equivalent amount of anchor tokens\\n     * @param assets Amount of KreskoAssets to deposit\\n     * @param receiver Address to send shares to\\n     * @return shares Amount of shares minted\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Withdraw KreskoAssets for equivalent amount of anchor tokens\\n     * @param assets Amount of KreskoAssets to withdraw\\n     * @param receiver Address to send KreskoAssets to\\n     * @param owner Address to burn shares from\\n     * @return shares Amount of shares burned\\n     * @dev shares are burned from owner, not msg.sender\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256 assets);\\n\\n    function maxRedeem(address owner) external view returns (uint256 assets);\\n\\n    function maxWithdraw(address owner) external view returns (uint256 assets);\\n\\n    /**\\n     * @notice Mint shares of anchor tokens for equivalent amount of KreskoAssets\\n     * @param shares Amount of shares to mint\\n     * @param receiver Address to send shares to\\n     * @return assets Amount of KreskoAssets redeemed\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Track the underlying amount\\n     * @return Total supply for the underlying\\n     */\\n    function totalAssets() external view returns (uint256);\\n\\n    /**\\n     * @notice Redeem shares of anchor for KreskoAssets\\n     * @param shares Amount of shares to redeem\\n     * @param receiver Address to send KreskoAssets to\\n     * @param owner Address to burn shares from\\n     * @return assets Amount of KreskoAssets redeemed\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xdf7c2b3274b00db9981933ce1a47fba69de716bcee67d92bb72e9dae0ec3dadc\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/kreskoasset/IKreskoAsset.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC20Permit} from \\\"../shared/IERC20Permit.sol\\\";\\nimport {IERC165} from \\\"../shared/IERC165.sol\\\";\\n\\ninterface IKreskoAsset is IERC20Permit, IAccessControlEnumerableUpgradeable, IERC165 {\\n    /**\\n     * @notice Rebase information\\n     * @param positive supply increasing/reducing rebase\\n     * @param denominator the denumerator for the operator, 1 ether = 1\\n     */\\n    struct Rebase {\\n        bool positive;\\n        uint256 denominator;\\n    }\\n\\n    /**\\n     * @notice Initializes a KreskoAsset ERC20 token.\\n     * @dev Intended to be operated by the Kresko smart contract.\\n     * @param _name The name of the KreskoAsset.\\n     * @param _symbol The symbol of the KreskoAsset.\\n     * @param _decimals Decimals for the asset.\\n     * @param _admin The adminstrator of this contract.\\n     * @param _kresko The protocol, can perform mint and burn.\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _admin,\\n        address _kresko\\n    ) external;\\n\\n    function kresko() external view returns (address);\\n\\n    function rebaseInfo() external view returns (Rebase memory);\\n\\n    function isRebased() external view returns (bool);\\n\\n    /**\\n     * @notice Perform a rebase, changing the denumerator and its operator\\n     * @param _denominator the denumerator for the operator, 1 ether = 1\\n     * @param _positive supply increasing/reducing rebase\\n     * @param _pools UniswapV2Pair address to sync so we wont get rekt by skim() calls.\\n     * @dev denumerator values 0 and 1 ether will disable the rebase\\n     */\\n    function rebase(uint256 _denominator, bool _positive, address[] calldata _pools) external;\\n\\n    /**\\n     * @notice Updates ERC20 metadata for the token in case eg. a ticker change\\n     * @param _name new name for the asset\\n     * @param _symbol new symbol for the asset\\n     * @param _version number that must be greater than latest emitted `Initialized` version\\n     */\\n    function reinitializeERC20(string memory _name, string memory _symbol, uint8 _version) external;\\n\\n    /**\\n     * @notice Returns the total supply of the token.\\n     * @notice This amount is adjusted by rebases.\\n     * @inheritdoc IERC20Permit\\n     */\\n    function totalSupply() external view override(IERC20Permit) returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of @param _account\\n     * @notice This amount is adjusted by rebases.\\n     * @inheritdoc IERC20Permit\\n     */\\n    function balanceOf(address _account) external view override(IERC20Permit) returns (uint256);\\n\\n    /// @inheritdoc IERC20Permit\\n    function allowance(address _owner, address _account) external view override(IERC20Permit) returns (uint256);\\n\\n    /// @inheritdoc IERC20Permit\\n    function approve(address spender, uint256 amount) external override returns (bool);\\n\\n    /// @inheritdoc IERC20Permit\\n    function transfer(address _to, uint256 _amount) external override(IERC20Permit) returns (bool);\\n\\n    /// @inheritdoc IERC20Permit\\n    function transferFrom(address _from, address _to, uint256 _amount) external override(IERC20Permit) returns (bool);\\n\\n    /**\\n     * @notice Mints tokens to an address.\\n     * @dev Only callable by operator.\\n     * @dev Internal balances are always unrebased, events emitted are not.\\n     * @param _to The address to mint tokens to.\\n     * @param _amount The amount of tokens to mint.\\n     */\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burns tokens from an address.\\n     * @dev Only callable by operator.\\n     * @dev Internal balances are always unrebased, events emitted are not.\\n     * @param _from The address to burn tokens from.\\n     * @param _amount The amount of tokens to burn.\\n     */\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x67a5d95257fe396a6b60412f395b0abfc150c14c7f86e96289b830cc2fd597fe\",\"license\":\"BUSL-1.1\"},\"src/contracts/kreskoasset/IKreskoAssetAnchor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC165} from \\\"../shared/IERC165.sol\\\";\\nimport {IERC20Permit} from \\\"../shared/IERC20Permit.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"./IKreskoAssetIssuer.sol\\\";\\nimport {IKreskoAsset} from \\\"./IKreskoAsset.sol\\\";\\nimport {IERC4626Upgradeable} from \\\"./IERC4626Upgradeable.sol\\\";\\n\\ninterface IKreskoAssetAnchor is\\n    IKreskoAssetIssuer,\\n    IERC4626Upgradeable,\\n    IERC20Permit,\\n    IAccessControlEnumerableUpgradeable,\\n    IERC165\\n{\\n    function totalAssets() external view override(IERC4626Upgradeable) returns (uint256);\\n\\n    /**\\n     * @notice Initializes the Kresko Asset Anchor.\\n     *\\n     * @param _asset The underlying (Kresko) Asset\\n     * @param _name Name of the anchor token\\n     * @param _symbol Symbol of the anchor token\\n     * @param _admin The adminstrator of this contract.\\n     * @dev Decimals are not supplied as they are read from the underlying Kresko Asset\\n     */\\n    function initialize(IKreskoAsset _asset, string memory _name, string memory _symbol, address _admin) external;\\n\\n    /**\\n     * @notice Updates ERC20 metadata for the token in case eg. a ticker change\\n     * @param _name new name for the asset\\n     * @param _symbol new symbol for the asset\\n     * @param _version number that must be greater than latest emitted `Initialized` version\\n     */\\n    function reinitializeERC20(string memory _name, string memory _symbol, uint8 _version) external;\\n}\\n\",\"keccak256\":\"0x73d8fcfc54759a7e8c1eed4e00e22760f2c04757a33f12339232afb8e747a8a1\",\"license\":\"BUSL-1.1\"},\"src/contracts/kreskoasset/IKreskoAssetIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n/// @title KreskoAsset issuer interface\\n/// @author Kresko\\n/// @notice Contract that can issue/destroy Kresko Assets through Kresko\\n/// @dev This interface is used by KISS & KreskoAssetAnchor\\ninterface IKreskoAssetIssuer {\\n    /**\\n     * @notice Mints @param _assets of krAssets for @param _to,\\n     * @notice Mints relative @return _shares of wkrAssets\\n     */\\n    function issue(uint256 _assets, address _to) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Burns @param _assets of krAssets from @param _from,\\n     * @notice Burns relative @return _shares of wkrAssets\\n     */\\n    function destroy(uint256 _assets, address _from) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Returns the total amount of anchor tokens out\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Returns the total amount of krAssets out\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x623d38271ac967e40374d7fb7f0bafe887a6b80ec65a5a02150675c1fc85d18c\",\"license\":\"BUSL-1.1\"},\"src/contracts/kreskoasset/Rebase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {IKreskoAsset} from \\\"../kreskoasset/IKreskoAsset.sol\\\";\\n\\nlibrary RebaseMath {\\n    using FixedPointMathLib for uint256;\\n\\n    /**\\n     * @notice Unrebase a value by a given rebase struct.\\n     * @param self The value to unrebase.\\n     * @param _rebase The rebase struct.\\n     * @return The unrebased value.\\n     */\\n    function unrebase(uint256 self, IKreskoAsset.Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.divWadDown(_rebase.denominator) : self.mulWadDown(_rebase.denominator);\\n    }\\n\\n    /**\\n     * @notice Rebase a value by a given rebase struct.\\n     * @param self The value to rebase.\\n     * @param _rebase The rebase struct.\\n     * @return The rebased value.\\n     */\\n    function rebase(uint256 self, IKreskoAsset.Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.mulWadDown(_rebase.denominator) : self.divWadDown(_rebase.denominator);\\n    }\\n}\\n\",\"keccak256\":\"0xf981ad23fd87634a6da3089d58cee01cd81da20aceee12963daab307a28a1ad1\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.19;\\n\\nimport {Error} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Library for operations on arrays\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Removes an element by copying the last element to the element to remove's place and removing\\n     * the last element.\\n     * @param _addresses The address array containing the item to be removed.\\n     * @param _elementToRemove The element to be removed.\\n     * @param _elementIndex The index of the element to be removed.\\n     */\\n    function removeAddress(address[] storage _addresses, address _elementToRemove, uint256 _elementIndex) internal {\\n        require(_addresses[_elementIndex] == _elementToRemove, Error.ARRAY_OUT_OF_BOUNDS);\\n\\n        uint256 lastIndex = _addresses.length - 1;\\n        // If the index to remove is not the last one, overwrite the element at the index\\n        // with the last element.\\n        if (_elementIndex != lastIndex) {\\n            _addresses[_elementIndex] = _addresses[lastIndex];\\n        }\\n        // Remove the last element.\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xeefdf188ef12b77fe9c53cc86d064937aa643e90563daaf475a30ae1c80f2afd\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity <0.9.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // KrAsset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_MIN_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // KrAsset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Cannot liquidate zero value\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n    string public constant KRASSET_MARKET_CLOSED = \\\"242\\\"; // KrAsset's market is currently closed\\n    string public constant NO_KRASSETS_MINTED = \\\"243\\\"; // Account has no active KreskoAsset positions\\n    string public constant NO_COLLATERAL_DEPOSITS = \\\"244\\\"; // Account has no active Collateral deposits\\n    string public constant INVALID_ORACLE_DECIMALS = \\\"245\\\"; // Oracle decimals do not match extOracleDecimals\\n    string public constant PARAM_LIQUIDATION_OVERFLOW_LOW = \\\"246\\\"; // Liquidation overflow is less than MIN_LIQUIDATION_OVERFLOW\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n    string public constant PRICEFEEDS_MUST_MATCH_STATUS_FEEDS = \\\"401\\\"; // Supplied price feeds must match status feeds in length\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n    string public constant INVALID_SCALED_AMOUNT = \\\"511\\\"; // amount of debt scaled must be greater than 0\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              6. STABILITY RATES                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant STABILITY_RATES_ALREADY_INITIALIZED = \\\"601\\\"; // stability rates for the asset are already initialized\\n    string public constant INVALID_OPTIMAL_RATE = \\\"602\\\"; // the optimal price rate configured is less than 1e27 for the asset\\n    string public constant INVALID_PRICE_RATE_DELTA = \\\"603\\\"; // the price rate delta configured is less than 1e27 for the asset\\n    string public constant STABILITY_RATES_NOT_INITIALIZED = \\\"604\\\"; // the stability rates for the asset are not initialized\\n    string public constant STABILITY_RATE_OVERFLOW = \\\"605\\\"; // the stability rates is > max uint128\\n    string public constant DEBT_INDEX_OVERFLOW = \\\"606\\\"; // the debt index is > max uint128\\n    string public constant KISS_NOT_SET = \\\"607\\\"; // the debt index is > max uint128\\n    string public constant STABILITY_RATE_REPAYMENT_AMOUNT_ZERO = \\\"608\\\"; // interest being repaid cannot be 0\\n    string public constant STABILITY_RATE_INTEREST_IS_ZERO = \\\"609\\\"; // account must have accrued interest to repay it\\n    string public constant INTEREST_REPAY_NOT_PARTIAL = \\\"610\\\"; // account must have accrued interest to repay it\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              7. AMM ORACLE                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant PAIR_ADDRESS_IS_ZERO = \\\"701\\\"; // Pair address to configure cannot be zero\\n    string public constant INVALID_UPDATE_PERIOD = \\\"702\\\"; // Update period must be greater than the minimum\\n    string public constant PAIR_ALREADY_EXISTS = \\\"703\\\"; // Pair with the address is already initialized\\n    string public constant PAIR_DOES_NOT_EXIST = \\\"704\\\"; // Pair supplied does not exist\\n    string public constant INVALID_LIQUIDITY = \\\"706\\\"; // Pair initializaition requires that the pair has liquidity\\n    string public constant UPDATE_PERIOD_NOT_FINISHED = \\\"707\\\"; // Update can only be called once per update period\\n    string public constant INVALID_PAIR = \\\"708\\\"; // Pair being consulted does not have the token that the price was requested for\\n    string public constant CALLER_NOT_ADMIN = \\\"709\\\"; // Caller must be the admin\\n    string public constant CONSTRUCTOR_INVALID_ADMIN = \\\"710\\\"; // Admin cannot be zero address in the constructor\\n    string public constant CONSTRUCTOR_INVALID_FACTORY = \\\"711\\\"; // Factory cannot be the zero address\\n    string public constant NO_INCENTIVES_LEFT = \\\"712\\\"; // No incentives left for updating the price\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              8. KISS                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant OPERATOR_WAIT_PERIOD_NOT_OVER = \\\"800\\\"; // Operator role has a cooldown period which has not passed\\n    string public constant OPERATOR_LIMIT_REACHED = \\\"801\\\"; // More minters cannot be assigned before existing one is removed\\n    string public constant CALLER_NOT_CONTRACT = \\\"802\\\"; // Caller of the function must be a contract\\n    string public constant OPERATOR_NOT_CONTRACT = \\\"803\\\"; // Operator role can only be granted to a contract\\n    string public constant KRESKO_NOT_CONTRACT = \\\"804\\\"; // Operator role can only be granted to a contract\\n    string public constant ADMIN_NOT_A_CONTRACT = \\\"805\\\"; // Operator role can only be granted to a contract\\n    string public constant OPERATOR_WAIT_PERIOD_TOO_SHORT = \\\"806\\\"; // Operator assignment cooldown period must be greater than 15 minutes\\n}\\n\",\"keccak256\":\"0x1bdc58128ed5c5ad443d039b89cc3abf6545c4cb5578135fb949065667b42f42\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/Events.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IDiamondCutFacet} from \\\"../diamond/interfaces/IDiamondCutFacet.sol\\\";\\nimport {Action} from \\\"../minter/MinterTypes.sol\\\";\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @author Kresko\\n * @title Events\\n * @notice Event definitions\\n */\\n\\nlibrary GeneralEvent {\\n    /**\\n     * @dev Triggered when the contract has been deployed\\n     */\\n    event Deployed(address indexed owner, uint8 version);\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(address indexed operator, uint8 version);\\n}\\n\\nlibrary DiamondEvent {\\n    event DiamondCut(IDiamondCutFacet.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\nlibrary MinterEvent {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Collateral                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a collateral asset is added to the protocol.\\n     * @dev Can only be emitted once for a given collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param liquidationIncentive The liquidation incentive\\n     */\\n    event CollateralAssetAdded(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        address anchor,\\n        uint256 liquidationIncentive\\n    );\\n\\n    /**\\n     * @notice Emitted when a collateral asset is updated.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The oracle address.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param liquidationIncentive The liquidation incentive\\n     */\\n    event CollateralAssetUpdated(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        address anchor,\\n        uint256 liquidationIncentive\\n    );\\n\\n    /**\\n     * @notice Emitted when an account deposits collateral.\\n     * @param account The address of the account depositing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was deposited.\\n     */\\n    event CollateralDeposited(address indexed account, address indexed collateralAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an account withdraws collateral.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event CollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when AMM helper withdraws account collateral without MCR checks.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event UncheckedCollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when AMM oracle is set.\\n     * @param ammOracle The address of the AMM oracle.\\n     */\\n    event AMMOracleUpdated(address indexed ammOracle);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a KreskoAsset is added to the protocol.\\n     * @dev Can only be emitted once for a given Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param anchor anchor token\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetAdded(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a Kresko asset's oracle is updated.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetUpdated(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when an account mints a Kresko asset.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the KreskoAsset that was minted.\\n     */\\n    event KreskoAssetMinted(address indexed account, address indexed kreskoAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the KreskoAsset that was burned.\\n     */\\n    event KreskoAssetBurned(address indexed account, address indexed kreskoAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the KreskoAsset that was burned.\\n     * @param interestRepaid The amount of the KISS repaid due to interest accrual\\n     */\\n    event DebtPositionClosed(\\n        address indexed account,\\n        address indexed kreskoAsset,\\n        uint256 amount,\\n        uint256 interestRepaid\\n    );\\n\\n    /**\\n     * @notice Emitted when cFactor is updated for a collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param cFactor The new cFactor\\n     */\\n    event CFactorUpdated(address indexed collateralAsset, uint256 cFactor);\\n    /**\\n     * @notice Emitted when kFactor is updated for a KreskoAsset.\\n     * @param kreskoAsset The address of the KreskoAsset.\\n     * @param kFactor The new kFactor\\n     */\\n    event KFactorUpdated(address indexed kreskoAsset, uint256 kFactor);\\n\\n    /**\\n     * @notice Emitted when an account pays a close fee with a collateral asset upon burning a KreskoAsset.\\n     * @dev This can be emitted multiple times for a single KreskoAsset burn.\\n     * @param account The address of the account burning the KreskoAsset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the close fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event CloseFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when an account pays an open fee with a collateral asset upon minting a KreskoAsset.\\n     * @dev This can be emitted multiple times for a single KreskoAsset mint.\\n     * @param account The address of the account minting the KreskoAsset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the open fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event OpenFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param repayAmount The amount of the repay KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event LiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayAmount,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param repayUSD The value of the repay KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event InterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayUSD,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n    /**\\n     * @notice Emitted when a batch liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param repayUSD The value of the repay KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event BatchInterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed seizedCollateralAsset,\\n        uint256 repayUSD,\\n        uint256 collateralSent\\n    );\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Parameters                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a safety state is triggered for an asset\\n     * @param action Target action\\n     * @param asset Asset affected\\n     * @param description change description\\n     */\\n    event SafetyStateChange(Action indexed action, address indexed asset, string indexed description);\\n\\n    /**\\n     * @notice Emitted when the fee recipient is updated.\\n     * @param feeRecipient The new fee recipient.\\n     */\\n    event FeeRecipientUpdated(address indexed feeRecipient);\\n\\n    /**\\n     * @notice Emitted when the liquidation incentive multiplier is updated.\\n     * @param asset The collateral asset being updated.\\n     * @param liquidationIncentiveMultiplier The new liquidation incentive multiplier raw value.\\n     */\\n    event LiquidationIncentiveMultiplierUpdated(address indexed asset, uint256 liquidationIncentiveMultiplier);\\n\\n    /**\\n     * @notice Emitted when the liquidation overflow multiplier is updated.\\n     * @param maxLiquidationMultiplier The new liquidation overflow multiplier value.\\n     */\\n    event maxLiquidationMultiplierUpdated(uint256 maxLiquidationMultiplier);\\n\\n    /**\\n     * @notice Emitted when the minimum collateralization ratio is updated.\\n     * @param minimumCollateralizationRatio The new minimum collateralization ratio raw value.\\n     */\\n    event MinimumCollateralizationRatioUpdated(uint256 minimumCollateralizationRatio);\\n\\n    /**\\n     * @notice Emitted when the minimum debt value updated.\\n     * @param minimumDebtValue The new minimum debt value.\\n     */\\n    event MinimumDebtValueUpdated(uint256 minimumDebtValue);\\n\\n    /**\\n     * @notice Emitted when the liquidation threshold value is updated\\n     * @param liquidationThreshold The new liquidation threshold value.\\n     */\\n    event LiquidationThresholdUpdated(uint256 liquidationThreshold);\\n}\\n\\nlibrary StakingEvent {\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n    event ClaimRewardsMulti(address indexed to);\\n}\\n\\nlibrary AuthEvent {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\\nlibrary InterestRateEvent {\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateConfigured(\\n        address indexed asset,\\n        uint256 stabilityRateBase,\\n        uint256 priceRateDelta,\\n        uint256 rateSlope1,\\n        uint256 rateSlope2\\n    );\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateInterestRepaid(address indexed account, address indexed asset, uint256 value);\\n    /**\\n     * @dev Emitted when @param account repaid all interest @param value\\n     */\\n    event StabilityRateInterestBatchRepaid(address indexed account, uint256 value);\\n\\n    /**\\n     * @notice Emitted when KISS address is set.\\n     * @param KISS The address of KISS.\\n     */\\n    event KISSUpdated(address indexed KISS);\\n}\\n\",\"keccak256\":\"0x9ab0bf466d22bbb6c9fc7242de94b5c5e76df3c7a02c18a27e680eb3e9cbf1de\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/WadRay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRay {\\n    // HALF_WAD and HALF_RAY expressed with extended notation\\n    // as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccf0652e967667a457836300e6fd1ef4e790e7db3f2cb183a74ba9b79337e2c9\",\"license\":\"MIT\"},\"src/contracts/minter/InterestRateState.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {LibStabilityRate} from \\\"./libs/LibStabilityRate.sol\\\";\\n\\nusing LibStabilityRate for StabilityRateConfig global;\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n// Asset data\\nstruct StabilityRateConfig {\\n    // Interest index for debt\\n    uint128 debtIndex;\\n    // Represents the optimal price rate between an oracle report and an AMM twap\\n    uint128 optimalPriceRate;\\n    // Slope of the variable interest curve when rate > 0 and <= optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope1;\\n    // Slope of the variable interest curve when rate > optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope2;\\n    /**\\n     * Represents the excess price premium in either direction.\\n     * Expressed in ray\\n     * Eg. 1/20 ray = 5% price premium in either direction is considered excess\\n     */\\n    uint128 priceRateDelta;\\n    // Current accrual rate for debt\\n    uint128 stabilityRate;\\n    // Base accrual rate for debt\\n    uint128 stabilityRateBase;\\n    // Asset to configure\\n    address asset;\\n    // Last update for the asset\\n    uint40 lastUpdateTimestamp;\\n}\\n\\n// User data\\nstruct StabilityRateUser {\\n    uint128 debtScaled;\\n    uint128 lastDebtIndex;\\n}\\n\\n// Storage layout\\nstruct InterestRateState {\\n    // asset address -> asset data\\n    mapping(address => StabilityRateConfig) srAssets;\\n    // account address -> asset address -> user data\\n    mapping(address => mapping(address => StabilityRateUser)) srUserInfo;\\n    // interest repayment token is KISS\\n    address kiss;\\n}\\n\\n// Storage position\\nbytes32 constant INTEREST_RATE_STORAGE_POSITION = keccak256(\\\"kresko.interest.rate.storage\\\");\\n\\n// solhint-disable func-visibility\\nfunction irs() pure returns (InterestRateState storage state) {\\n    bytes32 position = INTEREST_RATE_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x83295d5e5eceaed370af95d39b179ac0c38c5fd44e3278770083c33cdb4493e5\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/MinterState.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {LibKrAsset} from \\\"./libs/LibKrAsset.sol\\\";\\nimport {LibAccount} from \\\"./libs/LibAccount.sol\\\";\\nimport {LibCollateral} from \\\"./libs/LibCollateral.sol\\\";\\nimport {LibCalculation} from \\\"./libs/LibCalculation.sol\\\";\\nimport {LibBurn} from \\\"./libs/LibBurn.sol\\\";\\nimport {LibMint} from \\\"./libs/LibMint.sol\\\";\\nimport {Action, SafetyState, CollateralAsset, KrAsset} from \\\"./MinterTypes.sol\\\";\\n\\n/* solhint-disable state-visibility */\\nusing LibCalculation for MinterState global;\\nusing LibKrAsset for MinterState global;\\nusing LibCollateral for MinterState global;\\nusing LibAccount for MinterState global;\\nusing LibBurn for MinterState global;\\nusing LibMint for MinterState global;\\n\\n/**\\n * @title Storage layout for the minter state\\n * @author Kresko\\n */\\nstruct MinterState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Initialization version\\n    uint256 initializations;\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                           Configurable Parameters                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The recipient of protocol fees.\\n    address feeRecipient;\\n    /// @notice The factor used to calculate the incentive a liquidator receives in the form of seized collateral.\\n    uint256 liquidationIncentiveMultiplier;\\n    /// @notice The minimum ratio of collateral to debt that can be taken by direct action.\\n    uint256 minimumCollateralizationRatio;\\n    /// @notice The minimum USD value of an individual synthetic asset debt position.\\n    uint256 minimumDebtValue;\\n    /// @notice The collateralization ratio at which positions may be liquidated.\\n    uint256 liquidationThreshold;\\n    /// @notice Flag tells if there is a need to perform safety checks on user actions\\n    bool safetyStateSet;\\n    /// @notice asset -> action -> state\\n    mapping(address => mapping(Action => SafetyState)) safetyState;\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Collateral Assets                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of collateral asset token address to information on the collateral asset.\\n    mapping(address => CollateralAsset) collateralAssets;\\n    /**\\n     * @notice Mapping of account -> asset -> deposit amount\\n     */\\n    mapping(address => mapping(address => uint256)) collateralDeposits;\\n    /// @notice Mapping of account -> collateral asset addresses deposited\\n    mapping(address => address[]) depositedCollateralAssets;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of kresko asset token address to information on the Kresko asset.\\n    mapping(address => KrAsset) kreskoAssets;\\n    /// @notice Mapping of account -> krAsset -> debt amount owed to the protocol\\n    mapping(address => mapping(address => uint256)) kreskoAssetDebt;\\n    /// @notice Mapping of account -> addresses of borrowed krAssets\\n    mapping(address => address[]) mintedKreskoAssets;\\n    /// @notice The AMM oracle address.\\n    address ammOracle;\\n    /// @notice Offchain oracle decimals\\n    uint8 extOracleDecimals;\\n    /// @notice Liquidation Overflow Multiplier, multiplies max liquidatable value.\\n    uint256 maxLiquidationMultiplier;\\n}\\n\",\"keccak256\":\"0x7179d8fb7de920499cb81aeecbbd8782b838f305be1d24d3a57e2b0c6702e7e2\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.19;\\n\\nimport {MinterState} from \\\"./MinterState.sol\\\";\\n\\n// Storage position\\nbytes32 constant MINTER_STORAGE_POSITION = keccak256(\\\"kresko.minter.storage\\\");\\n\\nfunction ms() pure returns (MinterState storage state) {\\n    bytes32 position = MINTER_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x960701164cf10f551b8e7c4b3d8d29cf6b0a45fa4212b329c6f28b36e7ee7b4a\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/MinterTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {AggregatorV2V3Interface} from \\\"../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {LibAssetUtility} from \\\"./libs/LibAssetUtility.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                  CONSTANTS                                 */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Constants {\\n    uint256 constant FP_DECIMALS = 18;\\n\\n    uint256 constant FP_SCALING_FACTOR = 10 ** FP_DECIMALS;\\n\\n    uint256 constant ONE_HUNDRED_PERCENT = 1 ether;\\n\\n    uint256 constant BASIS_POINT = 1e14;\\n\\n    /// @dev The maximum configurable close fee.\\n    uint256 constant MAX_CLOSE_FEE = 0.1 ether; // 10%\\n\\n    /// @dev The maximum configurable open fee.\\n    uint256 constant MAX_OPEN_FEE = 0.1 ether; // 10%\\n\\n    /// @dev The maximum configurable protocol fee per asset for collateral pool swaps.\\n    uint256 constant MAX_COLLATERAL_POOL_PROTOCOL_FEE = 0.5 ether; // 50%\\n\\n    /// @dev Overflow over maximum liquidatable value to allow leeway for users after one happens.\\n    uint256 constant MIN_MAX_LIQUIDATION_MULTIPLIER = ONE_HUNDRED_PERCENT + BASIS_POINT; // 100.01% or .01% over\\n\\n    /// @dev The minimum configurable minimum collateralization ratio.\\n    uint256 constant MIN_COLLATERALIZATION_RATIO = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The minimum configurable liquidation incentive multiplier.\\n    /// This means liquidator only receives equal amount of collateral to debt repaid.\\n    uint256 constant MIN_LIQUIDATION_INCENTIVE_MULTIPLIER = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The maximum configurable liquidation incentive multiplier.\\n    /// This means liquidator receives 25% bonus collateral compared to the debt repaid.\\n    uint256 constant MAX_LIQUIDATION_INCENTIVE_MULTIPLIER = 1.25 ether; // 125%\\n\\n    /// @dev The maximum configurable minimum debt USD value. 8 decimals.\\n    uint256 constant MAX_MIN_DEBT_VALUE = 1000 gwei; // $1,000\\n}\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    ENUM                                    */\\n/* -------------------------------------------------------------------------- */\\n\\n/**\\n * @dev Protocol user facing actions\\n *\\n * Deposit = 0\\n * Withdraw = 1,\\n * Repay = 2,\\n * Borrow = 3,\\n * Liquidate = 4\\n */\\nenum Action {\\n    Deposit,\\n    Withdraw,\\n    Repay,\\n    Borrow,\\n    Liquidation\\n}\\n/**\\n * @dev Fee types\\n *\\n * Open = 0\\n * Close = 1\\n */\\nenum Fee {\\n    Open,\\n    Close\\n}\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\n/**\\n * @notice Initialization arguments for the protocol\\n */\\nstruct MinterInitArgs {\\n    address admin;\\n    address council;\\n    address treasury;\\n    uint8 extOracleDecimals;\\n    uint256 minimumCollateralizationRatio;\\n    uint256 minimumDebtValue;\\n    uint256 liquidationThreshold;\\n}\\n\\n/**\\n * @notice Configurable parameters within the protocol\\n */\\n\\nstruct MinterParams {\\n    uint256 minimumCollateralizationRatio;\\n    uint256 minimumDebtValue;\\n    uint256 liquidationThreshold;\\n    uint256 liquidationOverflowPercentage;\\n    address feeRecipient;\\n    uint8 extOracleDecimals;\\n}\\n\\n/**\\n * @notice Information on a token that is a KreskoAsset.\\n * @dev Each KreskoAsset has 18 decimals.\\n * @param kFactor The k-factor used for calculating the required collateral value for KreskoAsset debt.\\n * @param oracle The oracle that provides the USD price of one KreskoAsset.\\n * @param supplyLimit The total supply limit of the KreskoAsset.\\n * @param anchor The anchor address\\n * @param closeFee The percentage paid in fees when closing a debt position of this type.\\n * @param openFee The percentage paid in fees when opening a debt position of this type.\\n * @param exists Whether the KreskoAsset exists within the protocol.\\n */\\nstruct KrAsset {\\n    uint256 kFactor;\\n    AggregatorV2V3Interface oracle;\\n    AggregatorV2V3Interface marketStatusOracle;\\n    uint256 supplyLimit;\\n    address anchor;\\n    uint256 closeFee;\\n    uint256 openFee;\\n    bool exists;\\n}\\nusing LibAssetUtility for KrAsset global;\\n/**\\n * @notice Information on a token that can be used as collateral.\\n * @dev Setting the factor to zero effectively makes the asset useless as collateral while still allowing\\n * it to be deposited and withdrawn.\\n * @param factor The collateral factor used for calculating the value of the collateral.\\n * @param oracle The oracle that provides the USD price of one collateral asset.\\n * @param anchor If the collateral is a KreskoAsset, the anchor address\\n * @param decimals The decimals for the token, stored here to avoid repetitive external calls.\\n * @param exists Whether the collateral asset exists within the protocol.\\n * @param liquidationIncentive The liquidation incentive for the asset\\n */\\nstruct CollateralAsset {\\n    uint256 factor;\\n    AggregatorV2V3Interface oracle;\\n    AggregatorV2V3Interface marketStatusOracle;\\n    address anchor;\\n    uint8 decimals;\\n    bool exists;\\n    uint256 liquidationIncentive;\\n}\\nusing LibAssetUtility for CollateralAsset global;\\n\\n/// @notice Configuration for pausing `Action`\\nstruct Pause {\\n    bool enabled;\\n    uint256 timestamp0;\\n    uint256 timestamp1;\\n}\\n\\n/// @notice Safety configuration for assets\\nstruct SafetyState {\\n    Pause pause;\\n}\\n\",\"keccak256\":\"0xafb73561008616d6d2e73a67ffb6da4a52c304aaf80766f00a981088c98cdfb7\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/amm-oracle/IUniswapV2OracleCompat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\nimport {IERC20Minimal} from \\\"../../vendor/uniswap/v2-core/interfaces/IERC20Minimal.sol\\\";\\nimport {IUniswapV2Factory} from \\\"../../vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\\\";\\n\\n/// @notice without UQ values\\ninterface IUniswapV2OracleCompat {\\n    event NewAdmin(address indexed newAdmin);\\n    event NewMinUpdatePeriod(uint256 newMinUpdatePeriod);\\n    event NewPair(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n    event PairUpdated(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n\\n    event NewKrAssetPair(address indexed krAsset, address indexed pairAddress);\\n\\n    /// @notice returns the connected univ2 factory\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    /// @notice returns the incentive token for the incentivized update\\n    function incentiveToken() external view returns (IERC20Minimal);\\n\\n    /// @notice returns the amount of incentive tokens sent using the incentivized update\\n    function incentiveAmount() external view returns (uint256);\\n\\n    /// @notice returns the current admin of the oracle\\n    function admin() external view returns (address);\\n\\n    /// @notice returns the TWAP time period in seconds\\n    function minUpdatePeriod() external view returns (uint256);\\n\\n    /// @notice returns the pair address for a given krAsset\\n    function krAssets(address) external returns (address);\\n\\n    /**\\n     *\\n     * @param _newIncentiveToken new incentive token for updater\\n     * @param amount amount of incentive tokens\\n     */\\n    function setIncentiveToken(address _newIncentiveToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Configures existing values of an AMM pair\\n     * @param _pairAddress Pair address\\n     * @param _updatePeriod Update period (TWAP)\\n     */\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external;\\n\\n    /**\\n     * @notice Get the AMM price for an amount of krAsset\\n     * @param _kreskoAsset Kresko asset address\\n     * @param _amountIn Amount of Kresko Asset to get value for\\n     */\\n    function consultKrAsset(address _kreskoAsset, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    /**\\n     * @notice General consult function, gets a value for `_amountIn` of `_token` in terms of `_tokenOut`\\n     * @param _pairAddress Address of the pair that contains the token\\n     * @param _token Address of the token to get value for\\n     * @param _amountIn Amount of token to get value for\\n     * @return amountOut Amount of tokenOut that `_amountIn` of `_token` is worth\\n     */\\n    function consult(address _pairAddress, address _token, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Initializes an Uniswap V2 pair to be tracked by this oracle.\\n     *\\n     * The criteria for a pair to be tracked:\\n     * The pair must not already be tracked by this oracle.\\n     * The pair must exist.\\n     * The pair must have reserves.\\n     * The update period must be greater than the minimum update period.\\n     * @param _pairAddress Liquidity token address for the pair\\n     * @param _krAsset Kresko Asset in the pair we want to add helper functionality for\\n     * @param _updatePeriod The update period (TWAP) for this AMM pair\\n     *\\n     */\\n    function initPair(address _pairAddress, address _krAsset, uint256 _updatePeriod) external;\\n\\n    /**\\n     * @notice Updates the oracle values for a pair\\n     * @param _pairAddress Pair address\\n     */\\n    function update(address _pairAddress) external;\\n\\n    /**\\n     * @notice Sets a new admin\\n     * @param _newAdmin New admin address\\n     */\\n    function setAdmin(address _newAdmin) external;\\n\\n    /**\\n     * @notice Set a new min update period\\n     * @param _minUpdatePeriod The new minimum period that can be set for a pair\\n     */\\n    function setMinUpdatePeriod(uint256 _minUpdatePeriod) external;\\n\\n    /**\\n     * @notice Move any missent tokens\\n     * @param _erc20 drain any sent tokens\\n     * @param _to drain any sent tokens\\n     */\\n    function drainERC20(address _erc20, address _to) external;\\n\\n    /**\\n     * Update pair data with incentives sent\\n     * @param _kreskoAsset Kresko Asset in the pair we want to update pair data for\\n     */\\n    function updateWithIncentive(address _kreskoAsset) external;\\n}\\n\",\"keccak256\":\"0x1e4c82cdbda55571ce72e1ce3386afdd7326d020c6009590193b985d460789ef\",\"license\":\"MIT\"},\"src/contracts/minter/collateral-pool/CollateralPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {LibCollateralPool} from \\\"./libs/LibCollateralPool.sol\\\";\\nimport {LibSwap} from \\\"./libs/LibSwap.sol\\\";\\nimport {LibAmounts} from \\\"./libs/LibAmounts.sol\\\";\\nimport {IPositionsFacet} from \\\"./position/interfaces/IPositionsFacet.sol\\\";\\n\\n/* solhint-disable var-name-mixedcase */\\n\\nusing LibCollateralPool for CollateralPoolState global;\\nusing LibAmounts for CollateralPoolState global;\\nusing LibSwap for CollateralPoolState global;\\n\\nstruct PoolCollateral {\\n    uint256 liquidationIncentive;\\n    uint128 liquidityIndex;\\n    uint8 decimals;\\n}\\n\\nstruct PoolKrAsset {\\n    uint256 protocolFee; // Taken from the open/close fee. Goes to protocol.\\n    uint256 openFee;\\n    uint256 closeFee;\\n    uint256 supplyLimit;\\n}\\n\\n// Storage layout\\nstruct CollateralPoolState {\\n    /// @notice The minimum ratio of collateral to debt that can be taken by direct action.\\n    uint256 minimumCollateralizationRatio;\\n    /// @notice The collateralization ratio at which positions may be liquidated.\\n    uint256 liquidationThreshold;\\n    /// @notice Mapping of krAsset -> pooled debt\\n    mapping(address => uint256) debt;\\n    /// @notice Mapping of collateral -> pooled deposits\\n    mapping(address => uint256) totalDeposits;\\n    /// @notice Mapping of asset -> swap owned collateral deposits\\n    mapping(address => uint256) swapDeposits;\\n    /// @notice Mapping of account -> collateral -> collateral deposits.\\n    mapping(address => mapping(address => uint256)) deposits;\\n    /// @notice Mapping of account -> collateral -> principal collateral deposits.\\n    mapping(address => mapping(address => uint256)) depositsPrincipal;\\n    /// @notice Mapping of collateral -> PoolCollateral\\n    mapping(address => PoolCollateral) poolCollateral;\\n    /// @notice Mapping of krAsset -> PoolKreskoAsset\\n    mapping(address => PoolKrAsset) poolKrAsset;\\n    /// @notice Mapping of asset -> asset -> swap enabled\\n    mapping(address => mapping(address => bool)) isSwapEnabled;\\n    /// @notice Mapping of asset -> enabled\\n    mapping(address => bool) isEnabled;\\n    /// @notice Array of collateral assets that can be deposited\\n    address[] collaterals;\\n    /// @notice Array of kresko assets that can be minted and swapped.\\n    address[] krAssets;\\n    /// @notice User swap fee receiver\\n    address swapFeeRecipient;\\n    /// @notice Positions NFT\\n    IPositionsFacet positions;\\n}\\n\\n// Storage position\\nbytes32 constant COLLATEREAL_POOL_STORAGE_POSITION = keccak256(\\\"kresko.collateral.pool.storage\\\");\\n\\n// solhint-disable func-visibility\\nfunction cps() pure returns (CollateralPoolState storage state) {\\n    bytes32 position = COLLATEREAL_POOL_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x1b26920398d20320ef417ebee5d02a30104ad127a137cb5d8f91c73a85b1da32\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/collateral-pool/interfaces/ICollateralPoolSwapFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {Position, NewPosition} from \\\"../position/state/PositionsStorage.sol\\\";\\n\\ninterface ICollateralPoolSwapFacet {\\n    event Swap(\\n        address indexed who,\\n        address indexed assetIn,\\n        address indexed assetOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event SwapFee(address indexed assetIn, uint256 feeAmount, uint256 protocolFeeAmount);\\n\\n    event Income(address asset, uint256 amount);\\n\\n    /// @notice Get a price for an asset. It is `extOracleDecimals()` of precision.\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /**\\n     * @notice Preview the amount out received.\\n     * @param _assetIn The asset to pay with.\\n     * @param _assetOut The asset to receive.\\n     * @param _amountIn The amount of _assetIn to pay.\\n     * @param _leverage The leverage to use. 1e18 = 1x, 2e18 = 2x, etc.\\n     * @return amountOut The amount of `_assetOut` to receive according to `_amountIn`.\\n     */\\n    function previewSwap(\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn,\\n        uint256 _leverage\\n    ) external view returns (uint256 amountOut, uint256 feeAmount, uint256 protocolFee);\\n\\n    /**\\n     * @notice Swap kresko assets with KISS using the shared collateral pool.\\n     * Uses oracle pricing of _amountIn to determine how much _assetOut to send.\\n     * @param _account The receiver of amount out.\\n     * @param _assetIn The asset to pay with.\\n     * @param _assetOut The asset to receive.\\n     * @param _amountIn The amount of _assetIn to pay.\\n     * @param _amountOutMin The minimum amount of _assetOut to receive, this is due to possible oracle price change.\\n     */\\n    function swap(\\n        address _account,\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /// @notice deposit collateral into a position\\n    function positionDepositA(address _to, uint256 _amountA, Position memory _pos) external;\\n\\n    /// @notice withdraw collateral from a position\\n    function positionWithdrawA(address _from, uint256 _amountA, Position memory _pos) external;\\n\\n    /**\\n     * @notice Swap in to leverage. This is only callable by the positions NFT.\\n     * @param _sender The account that funds the position.\\n     * @param _pos The position to swap into.\\n     * @return amountAInAfterFee Amount in after fees are paid.\\n     * @return amountBOut Amount of `_assetOut` received.\\n     */\\n    function swapIntoLeverage(\\n        address _sender,\\n        NewPosition memory _pos\\n    ) external returns (uint256 amountAInAfterFee, uint256 amountBOut);\\n\\n    /**\\n     * @notice Swaps out of leverage. This is only callable by the positions NFT.\\n     * @notice Called by the position contract.\\n     * @param _pos The position to swap out of.\\n     * @param _liquidator The incentive receiver if position is liquidated or closed by external caller.\\n     * @return amountAOut The amount of `_assetOut` to receive.\\n     */\\n    function swapOutOfLeverage(Position memory _pos, address _liquidator) external returns (uint256 amountAOut);\\n\\n    /**\\n     * @notice Accumulates fees to deposits as a fixed, instantaneous income.\\n     * @param _incomeAsset the income asset\\n     * @param _amount amount to accumulate\\n     */\\n    function cumulateIncome(address _incomeAsset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x4b3374025742235349fabc6d24ce735212d4c460008c5e2d1d9a8b144a0de766\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/collateral-pool/libs/LibAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {CollateralPoolState} from \\\"../CollateralPoolState.sol\\\";\\nimport {ms} from \\\"../../MinterStorage.sol\\\";\\nimport {WadRay} from \\\"../../../libs/WadRay.sol\\\";\\n\\nlibrary LibAmounts {\\n    using WadRay for uint256;\\n    using WadRay for uint128;\\n    using LibAmounts for CollateralPoolState;\\n\\n    /**\\n     * @notice Get accounts interested scaled debt amount for a KreskoAsset.\\n     * @param _asset The asset address\\n     * @param _account The account to get the amount for\\n     * @return Amount of scaled debt.\\n     */\\n    function getAccountDepositsWithFees(\\n        CollateralPoolState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        uint256 deposits = getCollateralAmountRead(_asset, self.deposits[_account][_asset]);\\n        if (deposits == 0) {\\n            return 0;\\n        }\\n        return deposits.rayMul(self.poolCollateral[_asset].liquidityIndex).rayToWad();\\n    }\\n\\n    /**\\n     * @notice Get accounts principle collateral deposits.\\n     * @param _account The account to get the amount for\\n     * @param _collateralAsset The collateral asset address\\n     * @return Amount of scaled debt.\\n     */\\n    function getAccountPrincipalDeposits(\\n        CollateralPoolState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256) {\\n        uint256 deposits = self.getAccountDepositsWithFees(_account, _collateralAsset);\\n        uint256 depositsPrincipal = getCollateralAmountRead(\\n            _collateralAsset,\\n            self.depositsPrincipal[_account][_collateralAsset]\\n        );\\n\\n        if (deposits == 0) {\\n            return 0;\\n        } else if (deposits < depositsPrincipal) {\\n            return deposits;\\n        }\\n        return depositsPrincipal;\\n    }\\n\\n    /**\\n     * @notice Get pool collateral deposits of an asset.\\n     * @param _asset The asset address\\n     * @return Amount of scaled debt.\\n     */\\n    function getPoolDeposits(CollateralPoolState storage self, address _asset) internal view returns (uint256) {\\n        return getCollateralAmountRead(_asset, self.totalDeposits[_asset]);\\n    }\\n\\n    /**\\n     * @notice Get \\\"swap\\\" collateral deposits.\\n     * @param _asset The asset address\\n     * @return Amount of scaled debt.\\n     */\\n    function getPoolSwapDeposits(CollateralPoolState storage self, address _asset) internal view returns (uint256) {\\n        return getCollateralAmountRead(_asset, self.swapDeposits[_asset]);\\n    }\\n\\n    /**\\n     * @notice Get collateral asset amount for saving, it will be unrebased if the asset is a KreskoAsset\\n     * @param _asset The asset address\\n     * @param _amount The asset amount\\n     * @return possiblyUnrebasedAmount The possibly unrebased amount\\n     */\\n    function getCollateralAmountWrite(\\n        address _asset,\\n        uint256 _amount\\n    ) internal view returns (uint256 possiblyUnrebasedAmount) {\\n        return ms().collateralAssets[_asset].toNonRebasingAmount(_amount);\\n    }\\n\\n    /**\\n     * @notice Get collateral asset amount for viewing, since if the asset is a KreskoAsset, it can be rebased.\\n     * @param _asset The asset address\\n     * @param _amount The asset amount\\n     * @return possiblyRebasedAmount amount of collateral for `_asset`\\n     */\\n    function getCollateralAmountRead(\\n        address _asset,\\n        uint256 _amount\\n    ) internal view returns (uint256 possiblyRebasedAmount) {\\n        return ms().collateralAssets[_asset].toRebasingAmount(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x603dd1f1ab3c6fdc1b388100a11a021022b21ede3dec564c3b524b8bf3285544\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/collateral-pool/libs/LibCollateralPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {SafeERC20, IERC20Permit} from \\\"../../../shared/SafeERC20.sol\\\";\\nimport {WadRay} from \\\"../../../libs/WadRay.sol\\\";\\nimport {LibAmounts} from \\\"./LibAmounts.sol\\\";\\nimport {cps, CollateralPoolState} from \\\"../CollateralPoolState.sol\\\";\\nimport {ms} from \\\"../../MinterStorage.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @author Kresko\\n * @title Internal functions for shared collateral pool.\\n */\\nlibrary LibCollateralPool {\\n    using WadRay for uint256;\\n    using WadRay for uint128;\\n    using LibAmounts for CollateralPoolState;\\n    using LibCollateralPool for CollateralPoolState;\\n\\n    /**\\n     * @notice Records a deposit of collateral asset.\\n     * @dev Saves principal, scaled and global deposit amounts.\\n     * @param _account depositor\\n     * @param _collateralAsset the collateral asset\\n     * @param _depositAmount amount of collateral asset to deposit\\n     */\\n    function recordCollateralDeposit(\\n        CollateralPoolState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _depositAmount\\n    ) internal {\\n        require(self.isEnabled[_collateralAsset], \\\"asset-disabled\\\");\\n        uint256 depositAmount = LibAmounts.getCollateralAmountWrite(_collateralAsset, _depositAmount);\\n        unchecked {\\n            // Save global deposits.\\n            self.totalDeposits[_collateralAsset] += depositAmount;\\n            // Save principal deposits.\\n            self.depositsPrincipal[_account][_collateralAsset] += depositAmount;\\n            // Save scaled deposits.\\n            self.deposits[_account][_collateralAsset] += depositAmount.wadToRay().rayDiv(\\n                self.poolCollateral[_collateralAsset].liquidityIndex\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Records a withdrawal of collateral asset.\\n     * @param self Collateral Pool State\\n     * @param _account withdrawer\\n     * @param _collateralAsset collateral asset\\n     * @param collateralOut The actual amount of collateral withdrawn\\n     */\\n    function recordCollateralWithdrawal(\\n        CollateralPoolState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) internal returns (uint256 collateralOut, uint256 feesOut) {\\n        // Do not check for isEnabled, always allow withdrawals.\\n\\n        // Get accounts principal deposits.\\n        uint256 depositsPrincipal = self.getAccountPrincipalDeposits(_account, _collateralAsset);\\n\\n        if (depositsPrincipal >= _amount) {\\n            // == Principal can cover possibly rebased `_amount` requested.\\n            // 1. We send out the requested amount.\\n            collateralOut = _amount;\\n            // 2. No fees.\\n            // 3. Possibly un-rebased amount for internal bookeeping.\\n            uint256 withdrawAmountInternal = LibAmounts.getCollateralAmountWrite(_collateralAsset, _amount);\\n            unchecked {\\n                // 4. Reduce global deposits.\\n                self.totalDeposits[_collateralAsset] -= withdrawAmountInternal;\\n                // 5. Reduce principal deposits.\\n                self.depositsPrincipal[_account][_collateralAsset] -= withdrawAmountInternal;\\n                // 6. Reduce scaled deposits.\\n                self.deposits[_account][_collateralAsset] -= withdrawAmountInternal.wadToRay().rayDiv(\\n                    self.poolCollateral[_collateralAsset].liquidityIndex\\n                );\\n            }\\n        } else {\\n            // == Principal can't cover possibly rebased `_amount` requested, send full collateral available.\\n            // 1. We send all collateral.\\n            collateralOut = depositsPrincipal;\\n            // 2. With fees.\\n            feesOut = self.getAccountDepositsWithFees(_account, _collateralAsset) - depositsPrincipal;\\n            // 3. Ensure this is actually the case.\\n            require(feesOut > 0, \\\"withdrawal-violation\\\");\\n            // 4. Wipe account collateral deposits.\\n            self.depositsPrincipal[_account][_collateralAsset] = 0;\\n            self.deposits[_account][_collateralAsset] = 0;\\n            // 5. Reduce global by ONLY by the principal, fees are not collateral.\\n            self.totalDeposits[_collateralAsset] -= LibAmounts.getCollateralAmountWrite(\\n                _collateralAsset,\\n                depositsPrincipal\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the collateral ratio is equal to or above to ratio supplied.\\n     * @param self Collateral Pool State\\n     * @param _collateralRatio ratio to check\\n     */\\n    function checkRatio(CollateralPoolState storage self, uint256 _collateralRatio) internal view returns (bool) {\\n        return\\n            self.getTotalPoolDepositValue(\\n                false // dont ignore cFactor\\n            ) >= self.getTotalPoolKrAssetValueAtRatio(_collateralRatio, false); // dont ignore kFactors or MCR;\\n    }\\n\\n    /**\\n     * @notice Checks whether the collateral ratio is equal to or above to ratio supplied after withdrawal.\\n     * @param self Collateral Pool State\\n     * @param _collateralAsset collateral asset\\n     * @param _withdrawalAmount amount of collateral asset to withdraw\\n     * @param _collateralRatio ratio to check\\n     */\\n    function checkRatio(\\n        CollateralPoolState storage self,\\n        address _collateralAsset,\\n        uint256 _withdrawalAmount,\\n        uint256 _collateralRatio\\n    ) internal view returns (bool) {\\n        // total collateral and withdrawal value\\n        (uint256 totalValue, uint256 withdrawalValue) = self.getTotalPoolDepositValue(\\n            _collateralAsset,\\n            _withdrawalAmount,\\n            false // dont ignore cFactor\\n        );\\n        return totalValue - withdrawalValue >= self.getTotalPoolKrAssetValueAtRatio(_collateralRatio, false); // dont ignore collaterRatio.\\n    }\\n\\n    /**\\n     * @notice Checks whether the shared debt pool can be liquidated.\\n     * @param self Collateral Pool State\\n     */\\n    function isLiquidatable(CollateralPoolState storage self) internal view returns (bool) {\\n        return !self.checkRatio(self.liquidationThreshold);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             Value Calculations                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Returns the value of the krAsset held in the pool at a ratio.\\n     * @param self Collateral Pool State\\n     * @param _ratio ratio\\n     * @param _ignorekFactor ignore kFactor\\n     * @return value in USD\\n     */\\n    function getTotalPoolKrAssetValueAtRatio(\\n        CollateralPoolState storage self,\\n        uint256 _ratio,\\n        bool _ignorekFactor\\n    ) internal view returns (uint256 value) {\\n        address[] memory assets = self.krAssets;\\n        for (uint256 i; i < assets.length; i++) {\\n            address asset = assets[i];\\n            value += ms().getKrAssetValue(asset, ms().getKreskoAssetAmount(asset, self.debt[asset]), _ignorekFactor);\\n        }\\n\\n        // We dont need to multiply this.\\n        if (_ratio == 1 ether) {\\n            return value;\\n        }\\n\\n        return value.wadMul(_ratio);\\n    }\\n\\n    /**\\n     * @notice Calculates the total collateral value of collateral assets in the pool.\\n     * @param self Collateral Pool State\\n     * @param _ignoreFactors whether to ignore factors\\n     * @return value in USD\\n     */\\n    function getTotalPoolDepositValue(\\n        CollateralPoolState storage self,\\n        bool _ignoreFactors\\n    ) internal view returns (uint256 value) {\\n        address[] memory assets = self.collaterals;\\n        for (uint256 i; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 assetValue, ) = ms().getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getPoolDeposits(asset),\\n                _ignoreFactors\\n            );\\n            value += assetValue;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of the collateral asset in the pool and the value of the amount.\\n     * Saves gas for getting the values in the same execution.\\n     * @param _collateralAsset collateral asset\\n     * @param _amount amount of collateral asset\\n     * @param _ignoreFactors whether to ignore cFactor and kFactor\\n     */\\n    function getTotalPoolDepositValue(\\n        CollateralPoolState storage self,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreFactors\\n    ) internal view returns (uint256 totalValue, uint256 amountValue) {\\n        address[] memory assets = self.collaterals;\\n        for (uint256 i; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 assetValue, uint256 price) = ms().getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getPoolDeposits(asset),\\n                _ignoreFactors\\n            );\\n\\n            totalValue += assetValue;\\n            if (asset == _collateralAsset) {\\n                amountValue = _amount.wadMul(\\n                    _ignoreFactors ? price : price.wadMul(ms().collateralAssets[asset].factor)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of the collateral assets in the pool for `_account`.\\n     * @param _account account\\n     * @param _ignoreFactors whether to ignore cFactor and kFactor\\n     */\\n    function getAccountTotalDepositValuePrincipal(\\n        CollateralPoolState storage self,\\n        address _account,\\n        bool _ignoreFactors\\n    ) internal view returns (uint256 totalValue) {\\n        address[] memory assets = self.collaterals;\\n        for (uint256 i; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 assetValue, ) = ms().getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getAccountPrincipalDeposits(_account, asset),\\n                _ignoreFactors\\n            );\\n\\n            totalValue += assetValue;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of the collateral assets in the pool for `_account` with fees.\\n     * @notice Ignores all factors.\\n     * @param _account account\\n     */\\n    function getAccountTotalDepositValueWithFees(\\n        CollateralPoolState storage self,\\n        address _account\\n    ) internal view returns (uint256 totalValue) {\\n        address[] memory assets = self.collaterals;\\n        for (uint256 i; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 assetValue, ) = ms().getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getAccountDepositsWithFees(_account, asset),\\n                true\\n            );\\n\\n            totalValue += assetValue;\\n        }\\n    }\\n\\n    /// @notice This function seizes collateral from the shared pool\\n    /// @notice Adjusts everyones deposits if swap deposits do not cover the amount.\\n    function adjustSeizedCollateral(\\n        CollateralPoolState storage self,\\n        address _seizeAsset,\\n        uint256 _seizeAmount\\n    ) internal {\\n        uint256 swapDeposits = self.getPoolSwapDeposits(_seizeAsset); // current \\\"swap\\\" collateral\\n\\n        if (swapDeposits >= _seizeAmount) {\\n            uint256 amountOutInternal = LibAmounts.getCollateralAmountWrite(_seizeAsset, _seizeAmount);\\n            // swap deposits cover the amount\\n            self.swapDeposits[_seizeAsset] -= amountOutInternal;\\n            self.totalDeposits[_seizeAsset] -= amountOutInternal;\\n        } else {\\n            // swap deposits do not cover the amount\\n            uint256 amountToCover = _seizeAmount - swapDeposits;\\n            self.swapDeposits[_seizeAsset] = 0;\\n\\n            // reduce everyones deposits by the same ratio\\n            self.poolCollateral[_seizeAsset].liquidityIndex -= uint128(\\n                amountToCover.wadToRay().rayDiv(self.getPoolDeposits(_seizeAsset).wadToRay())\\n            );\\n\\n            self.totalDeposits[_seizeAsset] -= LibAmounts.getCollateralAmountWrite(_seizeAsset, amountToCover);\\n        }\\n    }\\n\\n    // /**\\n    //  * @notice Returns the krAsset value of a single asset in the pool.\\n    //  * Performs possible rebasing conversions for the pool balance.\\n    //  * @param self Collateral Pool State\\n    //  * @param _kreskoAsset krAsset\\n    //  * @param _ignorekFactor whether to ignore the k factor\\n    //  * @return value The krAsset value in USD\\n    //  */\\n    // function getPoolKrAssetValue(\\n    //     CollateralPoolState storage self,\\n    //     address _kreskoAsset,\\n    //     bool _ignorekFactor\\n    // ) internal view returns (uint256 value) {\\n\\n    // }\\n\\n    // /**\\n    //  * @notice Get the current price rate between AMM and oracle pricing\\n    //  * @dev Raw return value of ammPrice == 0 when no AMM pair exists OR liquidity of the pair does not qualify\\n    //  * @param self rate configuration for the asset\\n    //  * @return priceRate the current price rate\\n    //  */\\n    // function getPriceRate(StabilityRateConfig storage self) internal view returns (uint256 priceRate) {\\n    //     FixedPoint.Unsigned memory oraclePrice = ms().getKrAssetValue(self.asset, 1 ether, true);\\n    //     FixedPoint.Unsigned memory ammPrice = ms().getKrAssetAMMPrice(self.asset, 1 ether);\\n    //     // no pair, no effect\\n    //     if (ammPrice.rawValue == 0) {\\n    //         return 0;\\n    //     }\\n    //     return ammPrice.div(oraclePrice).div(10).rawValue;\\n    // }\\n}\\n\",\"keccak256\":\"0xa07ec223cd17f9e32afd85498ef2e73c3d0202280c82462da7e2da33b90de5d8\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/collateral-pool/libs/LibSwap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {SafeERC20, IERC20Permit} from \\\"../../../shared/SafeERC20.sol\\\";\\n\\nimport {WadRay} from \\\"../../../libs/WadRay.sol\\\";\\nimport {Error} from \\\"../../../libs/Errors.sol\\\";\\n\\nimport {LibAmounts} from \\\"./LibAmounts.sol\\\";\\nimport {cps, CollateralPoolState, PoolKrAsset} from \\\"../CollateralPoolState.sol\\\";\\nimport {ms} from \\\"../../MinterStorage.sol\\\";\\nimport {irs} from \\\"../../InterestRateState.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @author Kresko\\n * @title Internal functions for shared collateral pool.\\n */\\nlibrary LibSwap {\\n    using WadRay for uint256;\\n    using WadRay for uint128;\\n    using SafeERC20 for IERC20Permit;\\n\\n    /**\\n     * @notice Check that assets can be swapped.\\n     * @return feePercentage fee percentage for this swap\\n     */\\n    function checkAssets(\\n        CollateralPoolState storage self,\\n        address _assetIn,\\n        address _assetOut\\n    ) internal view returns (uint256 feePercentage, uint256 protocolFee) {\\n        require(self.isSwapEnabled[_assetIn][_assetOut], \\\"swap-disabled\\\");\\n        require(self.isEnabled[_assetIn], \\\"asset-in-disabled\\\");\\n        require(self.isEnabled[_assetOut], \\\"asset-out-disabled\\\");\\n        require(_assetIn != _assetOut, \\\"same-asset\\\");\\n        PoolKrAsset memory assetIn = self.poolKrAsset[_assetIn];\\n        PoolKrAsset memory assetOut = self.poolKrAsset[_assetOut];\\n\\n        feePercentage = assetOut.openFee + assetIn.closeFee;\\n        protocolFee = assetIn.protocolFee + assetOut.protocolFee;\\n    }\\n\\n    /**\\n     * @notice Records the assets received from account in a swap.\\n     * Burning any existing shared debt or increasing collateral deposits.\\n     * @param _assetIn The asset received.\\n     * @param _amountIn The amount of the asset received.\\n     * @param _assetsFrom The account that holds the assets to burn.\\n     * @return valueIn The value of the assets received into the protocol, used to calculate assets out.\\n     */\\n    function handleAssetsIn(\\n        CollateralPoolState storage self,\\n        address _assetIn,\\n        uint256 _amountIn,\\n        address _assetsFrom\\n    ) internal returns (uint256 valueIn) {\\n        uint256 debt = ms().getKreskoAssetAmount(_assetIn, self.debt[_assetIn]);\\n        valueIn = ms().getKrAssetValue(_assetIn, _amountIn, true); // ignore kFactor here\\n\\n        uint256 collateralIn; // assets used increase \\\"swap\\\" owned collateral\\n        uint256 debtOut; // assets used to burn debt\\n\\n        // Bookkeeping\\n        if (debt >= _amountIn) {\\n            // == Debt is equal to or greater than the amount.\\n            // 1. Burn full amount received.\\n            debtOut = _amountIn;\\n            // 2. No increase in collateral.\\n        } else if (debt < _amountIn) {\\n            // == Debt is less than the amount received.\\n            // 1. Burn full debt.\\n            debtOut = debt;\\n            // 2. Increase collateral by remainder.\\n            collateralIn = _amountIn - debt;\\n        } else {\\n            // == Debt is 0.\\n            // 1. Burn nothing.\\n            // 2. Increase collateral by full amount.\\n            collateralIn = _amountIn;\\n        }\\n\\n        if (collateralIn > 0) {\\n            uint256 collateralInInternal = LibAmounts.getCollateralAmountWrite(_assetIn, collateralIn);\\n            // 1. Increase collateral deposits.\\n            self.totalDeposits[_assetIn] += collateralInInternal;\\n            // 2. Increase \\\"swap\\\" collateral.\\n            self.swapDeposits[_assetIn] += collateralInInternal;\\n        }\\n\\n        if (debtOut > 0) {\\n            // 1. Burn debt that was repaid from the assets received.\\n            self.debt[_assetIn] -= ms().repaySwap(_assetIn, debtOut, _assetsFrom);\\n        }\\n\\n        require(_amountIn == debtOut + collateralIn, \\\"assets-in-mismatch\\\");\\n    }\\n\\n    /**\\n     * @notice Records the assets to send out in a swap.\\n     * Increasing debt of the pool by minting new assets when required.\\n     * @param _assetOut The asset to send out.\\n     * @param _valueIn The value received in.\\n     * @param _assetsTo The asset receiver.\\n     * @return amountOut The amount of the asset out.\\n     */\\n    function handleAssetsOut(\\n        CollateralPoolState storage self,\\n        address _assetOut,\\n        uint256 _valueIn,\\n        address _assetsTo\\n    ) internal returns (uint256 amountOut) {\\n        // Calculate amount to send out from value received in.\\n        amountOut = _valueIn.wadDiv(ms().kreskoAssets[_assetOut].uintPrice());\\n        // Well, should be more than 0.\\n        require(amountOut > 0, \\\"amount-out-is-zero\\\");\\n\\n        uint256 swapDeposits = self.getPoolSwapDeposits(_assetOut); // current \\\"swap\\\" collateral\\n\\n        uint256 collateralOut; // decrease in \\\"swap\\\" collateral\\n        uint256 debtIn; // new debt required to mint\\n\\n        // Bookkeeping\\n        if (swapDeposits == 0) {\\n            // == No \\\"swap\\\" owned collateral available.\\n            // 1. Issue full amount as debt.\\n            debtIn = amountOut;\\n            // 2. No decrease in collateral.\\n        } else if (swapDeposits >= amountOut) {\\n            // == \\\"Swap\\\" owned collateral exceeds requested amount\\n            // 1. No debt issued.\\n            // 2. Decrease collateral by full amount.\\n            collateralOut = amountOut;\\n        } else {\\n            // == \\\"Swap\\\" owned collateral is less than requested amount.\\n            // 1. Issue debt for remainder.\\n            debtIn = amountOut - swapDeposits;\\n            // 2. Reduce \\\"swap\\\" owned collateral to zero.\\n            collateralOut = swapDeposits;\\n        }\\n        if (collateralOut > 0) {\\n            uint256 amountOutInternal = LibAmounts.getCollateralAmountWrite(_assetOut, collateralOut);\\n            // 1. Decrease collateral deposits.\\n            self.totalDeposits[_assetOut] -= amountOutInternal;\\n            // 2. Decrease \\\"swap\\\" owned collateral.\\n            self.swapDeposits[_assetOut] -= amountOutInternal;\\n            if (_assetsTo != address(this)) {\\n                // 3. Transfer collateral to receiver if it is not this contract.\\n                IERC20Permit(_assetOut).safeTransfer(_assetsTo, collateralOut);\\n            }\\n        }\\n\\n        if (debtIn > 0) {\\n            // 1. Issue required debt to the pool, minting new assets to receiver.\\n            self.debt[_assetOut] += ms().mintSwap(_assetOut, debtIn, _assetsTo);\\n        }\\n\\n        require(amountOut == debtIn + collateralOut, \\\"amount-out-mismatch\\\");\\n    }\\n\\n    function handleProfitsOut(\\n        CollateralPoolState storage self,\\n        address _assetOut,\\n        uint256 _balanceOut,\\n        uint256 _profitsOut,\\n        address _assetsTo\\n    ) internal returns (uint256 transferOut) {\\n        // Well, should be more than 0.\\n        require(_profitsOut > 0, \\\"amount-out-is-zero\\\");\\n        require(_assetsTo != address(this), \\\"profit-to-this\\\");\\n\\n        uint256 swapDeposits = self.getPoolSwapDeposits(_assetOut); // current \\\"swap\\\" collateral\\n\\n        uint256 collateralOut; // decrease in \\\"swap\\\" collateral\\n        uint256 debtIn; // new debt required to mint\\n\\n        // Bookkeeping\\n        if (swapDeposits == 0) {\\n            // == No \\\"swap\\\" owned collateral available.\\n            // 1. Issue full amount as debt.\\n            debtIn = _profitsOut;\\n            // 2. No decrease in collateral.\\n        } else if (swapDeposits >= _profitsOut) {\\n            // == \\\"Swap\\\" owned collateral exceeds requested amount\\n            // 1. No debt issued.\\n            // 2. Decrease collateral by full amount.\\n            collateralOut = _profitsOut;\\n        } else {\\n            // == \\\"Swap\\\" owned collateral is less than requested amount.\\n            // 1. Issue debt for remainder.\\n            debtIn = _profitsOut - swapDeposits;\\n            // 2. Reduce \\\"swap\\\" owned collateral to zero.\\n            collateralOut = swapDeposits;\\n        }\\n        if (collateralOut > 0) {\\n            uint256 amountOutInternal = LibAmounts.getCollateralAmountWrite(_assetOut, collateralOut);\\n            // 1. Decrease collateral deposits.\\n            self.totalDeposits[_assetOut] -= amountOutInternal;\\n            // 2. Decrease \\\"swap\\\" owned collateral.\\n            self.swapDeposits[_assetOut] -= amountOutInternal;\\n        }\\n        if (debtIn > 0) {\\n            // 1. Issue required debt to the pool, minting new assets to receiver.\\n            self.debt[_assetOut] += ms().mintSwap(_assetOut, debtIn, _assetsTo);\\n        }\\n\\n        require(_profitsOut == debtIn + collateralOut, \\\"profit-out-mismatch\\\");\\n        transferOut = collateralOut > 0 ? _balanceOut + collateralOut : _balanceOut;\\n    }\\n\\n    /**\\n     * @notice Accumulates fees to deposits as a fixed, instantaneous income.\\n     * @param _collateralAsset asset\\n     * @param _amount amount to accumulate\\n     * @return nextLiquidityIndex The next liquidity index of the reserve\\n     */\\n    function cumulateIncome(\\n        CollateralPoolState storage self,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) internal returns (uint256 nextLiquidityIndex) {\\n        //next liquidity index is calculated this way: `((amount / totalLiquidity) + 1) * liquidityIndex`\\n        //division `amount / totalLiquidity` done in ray for precision\\n        uint256 result = (_amount.wadToRay().rayDiv(self.getPoolDeposits(_collateralAsset).wadToRay()) + WadRay.RAY)\\n            .rayMul(self.poolCollateral[_collateralAsset].liquidityIndex);\\n        self.poolCollateral[_collateralAsset].liquidityIndex = uint128(result);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3ec95207555d15d6f844e0322def6e9c4a05297d93d8d82dcd27d4b94de26e2f\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/collateral-pool/position/interfaces/IPositionsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity <=0.8.19;\\nimport {NewPosition, Position} from \\\"../state/PositionsStorage.sol\\\";\\n\\ninterface IPositionsFacet {\\n    /**\\n     * @notice Creates a new leveraged position\\n     * @param _position The parameters of the new position\\n     * @return id The ID of the new position\\n     */\\n    function createPosition(NewPosition memory _position) external returns (uint256 id);\\n\\n    /**\\n     * @notice Close a leveraged position\\n     * @param _id The ID of the position to close\\n     */\\n    function closePosition(uint256 _id) external;\\n\\n    /**\\n     * @notice Deposit collateral into a leveraged position.\\n     * @param _id The ID of the position to deposit collateral into.\\n     * @param _amount The amount of collateral to deposit.\\n     */\\n    function deposit(uint256 _id, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw collateral from a leveraged position\\n     * @param _id The ID of the position to withdraw collateral from\\n     * @param _amount The amount of collateral to withdraw\\n     */\\n    function withdraw(uint256 _id, uint256 _amount) external;\\n\\n    /**\\n     * @notice Borrow more assets to a position, keeps the leverage.\\n     * @param _id The ID of the position to borrow more from\\n     * @param _sellAmount The amount of collateral to sell\\n     * @param _buyAmount The min amount of asset to buy\\n     */\\n    function buy(uint256 _id, uint256 _sellAmount, uint256 _buyAmount) external;\\n\\n    /**\\n     * @notice Repay borrowed asset in a position\\n     * @param _id The ID of the position to repay borrowed asset to\\n     * @param _amount The amount of borrowed asset\\n     */\\n    function buyback(uint256 _id, uint256 _amount) external;\\n\\n    /// @notice returns the info of a position for `_id`\\n    /// @return position the position when last modified\\n    /// @return profitPercentage the current profit of the position\\n    function getPosition(uint256 _id) external view returns (Position memory, int128 profitPercentage);\\n\\n    /**\\n     * @notice Get the liquidatable status of a lever positions\\n     * @param _ids The IDs of the positions\\n     * @return array of liquidatable results\\n     */\\n    function isLiquidatable(uint256[] calldata _ids) external view returns (bool[] memory);\\n\\n    /// @notice returns the closable status for positions\\n    function isClosable(uint256[] calldata _ids) external view returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x7eeebc275bbe11739452a36318e8ee4785e9856685fc0c46993c1970d714e55d\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/collateral-pool/position/libs/LibPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity <=0.8.19;\\nimport {WadRay} from \\\"../../../../libs/WadRay.sol\\\";\\nimport {pos, PositionStorage, Position} from \\\"../state/PositionsStorage.sol\\\";\\n\\nlibrary LibPositions {\\n    using WadRay for uint256;\\n    using LibPositions for PositionStorage;\\n\\n    string internal constant INVALID_LT = \\\"PC0\\\";\\n    string internal constant INVALID_MAX_LEVERAGE = \\\"PC1\\\";\\n    string internal constant INVALID_KRESKO = \\\"PC2\\\";\\n    string internal constant ERROR_NOT_OWNER = \\\"PC3\\\";\\n    string internal constant ERROR_POSITION_NOT_OWNED_BY_CALLER = \\\"PC4\\\";\\n    string internal constant ERROR_POSITION_NOT_FOUND = \\\"PC5\\\";\\n    string internal constant INVALID_NAME = \\\"PC6\\\";\\n    string internal constant LEVERAGE_TOO_HIGH = \\\"PC7\\\";\\n    string internal constant LEVERAGE_TOO_LOW = \\\"PC8\\\";\\n\\n    function getPosition(PositionStorage storage self, uint256 _id) internal view returns (Position memory) {\\n        return self.positions[_id];\\n    }\\n\\n    function getLeverage(PositionStorage storage self, uint256 _id) internal view returns (uint256 leverage) {\\n        Position memory position = self.positions[_id];\\n        uint256 priceA = self.kresko.getPrice(position.assetA);\\n        uint256 priceB = self.kresko.getPrice(position.assetB);\\n\\n        if (priceA == 0 || priceB == 0 || position.amountA == 0) return 0;\\n\\n        return position.amountB.wadMul(priceB).wadDiv(position.amountA.wadMul(priceA));\\n    }\\n\\n    function getRatio(PositionStorage storage self, uint256 _id) internal view returns (int256 ratio) {\\n        return int256(self.getLeverage(_id)) - int256(self.positions[_id].leverage);\\n    }\\n\\n    function isLiquidatable(PositionStorage storage self, uint256 _id) internal view returns (bool) {\\n        return self.getRatio(_id) <= self.liquidationThreshold;\\n    }\\n\\n    function isCloseable(PositionStorage storage self, uint256 _id) internal view returns (bool) {\\n        return self.getRatio(_id) >= self.closeThreshold;\\n    }\\n\\n    function getAndIncrementNonce(PositionStorage storage self, uint256 id) internal returns (uint256) {\\n        return uint256(self.positions[id].nonce++);\\n    }\\n}\\n\",\"keccak256\":\"0x3737f34cb726aa4e620e68620f34a31257645e8a402657d285d421b3a8d5a84c\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/collateral-pool/position/state/PositionsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {LibPositions} from \\\"../libs/LibPositions.sol\\\";\\nimport {ICollateralPoolSwapFacet} from \\\"../../interfaces/ICollateralPoolSwapFacet.sol\\\";\\n\\nstruct NewPosition {\\n    address account;\\n    address assetA;\\n    address assetB;\\n    uint256 amountA;\\n    uint256 amountBMin;\\n    uint256 leverage;\\n}\\n\\nstruct Position {\\n    address account;\\n    address assetA;\\n    address assetB;\\n    uint256 amountA;\\n    uint256 amountB;\\n    uint256 valueBCache;\\n    uint256 leverage;\\n    uint256 liquidationIncentive;\\n    uint256 closeIncentive;\\n    uint256 creationTimestamp;\\n    uint256 lastUpdateTimestamp;\\n    uint256 nonce;\\n}\\n\\nstruct PositionsInitializer {\\n    ICollateralPoolSwapFacet kresko;\\n    string name;\\n    string symbol;\\n    int128 liquidationThreshold;\\n    int128 closeThreshold;\\n    uint256 maxLeverage;\\n    uint256 minLeverage;\\n}\\n\\nstruct PositionStorage {\\n    ICollateralPoolSwapFacet kresko;\\n    uint256 minLeverage;\\n    uint256 maxLeverage;\\n    int128 liquidationThreshold;\\n    int128 closeThreshold;\\n    mapping(uint256 => Position) positions;\\n}\\n\\nusing LibPositions for PositionStorage global;\\n\\n// Storage position\\nbytes32 constant POSITIONS_STORAGE = keccak256(\\\"kresko.positions.positions.storage\\\");\\n\\nfunction pos() pure returns (PositionStorage storage state) {\\n    bytes32 position = POSITIONS_STORAGE;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x26f410dd92b57a1278fc85dd8615c827d1d1b837193ab126a45816e74f6e3359\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/facets/UIDataProviderFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n/* solhint-disable max-line-length */\\n/* solhint-disable var-name-mixedcase */\\n/* solhint-disable func-name-mixedcase */\\n/* solhint-disable contract-name-camelcase */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\nimport {LibUI, IKrStaking, IUniswapV2Pair, IERC20Permit, AggregatorV2V3Interface, ms} from \\\"../libs/LibUI.sol\\\";\\n\\n/**\\n * @author Kresko\\n * @title UIDataProviderFacet\\n * @notice UI data aggregation views\\n */\\ncontract UIDataProviderFacet {\\n    function getAccountData(\\n        address _account,\\n        address[] memory _tokens,\\n        address _staking\\n    )\\n        external\\n        view\\n        returns (LibUI.KreskoUser memory user, LibUI.Balance[] memory balances, LibUI.StakingData[] memory stakingData)\\n    {\\n        user = LibUI.kreskoUser(_account);\\n        balances = LibUI.getBalances(_tokens, _account);\\n        stakingData = LibUI.getStakingData(_account, _staking);\\n    }\\n\\n    function batchOracleValues(\\n        address[] memory _assets,\\n        address[] memory _oracles,\\n        address[] memory _marketStatusOracles\\n    ) public view returns (LibUI.Price[] memory result) {\\n        return LibUI.batchOracleValues(_assets, _oracles, _marketStatusOracles);\\n    }\\n\\n    function getTokenData(\\n        address[] memory _allTokens,\\n        address[] memory _assets,\\n        address[] memory _priceFeeds,\\n        address[] memory _marketStatusOracles\\n    ) external view returns (LibUI.TokenMetadata[] memory metadatas, LibUI.Price[] memory prices) {\\n        metadatas = new LibUI.TokenMetadata[](_allTokens.length);\\n        for (uint256 i; i < _allTokens.length; i++) {\\n            metadatas[i] = LibUI.TokenMetadata({\\n                decimals: IERC20Permit(_allTokens[i]).decimals(),\\n                name: IERC20Permit(_allTokens[i]).name(),\\n                symbol: IERC20Permit(_allTokens[i]).symbol(),\\n                totalSupply: IERC20Permit(_allTokens[i]).totalSupply()\\n            });\\n        }\\n        prices = LibUI.batchOracleValues(_assets, _priceFeeds, _marketStatusOracles);\\n    }\\n}\\n\",\"keccak256\":\"0xe0139b315d8f45ea5a8e5b4ce59d244ba687c0d0444203149d4e25a1e06a0844\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibAccount.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {RebaseMath} from \\\"../../kreskoasset/Rebase.sol\\\";\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nlibrary LibAccount {\\n    using RebaseMath for uint256;\\n    using WadRay for uint256;\\n    using LibDecimals for uint256;\\n\\n    /**\\n     * @notice Gets an array of Kresko assets the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @return An array of addresses of Kresko assets the account has minted.\\n     */\\n    function getMintedKreskoAssets(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (address[] memory) {\\n        return self.mintedKreskoAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Gets an array of collateral assets the account has deposited.\\n     * @param _account The account to get the deposited collateral assets for.\\n     * @return An array of addresses of collateral assets the account has deposited.\\n     */\\n    function getDepositedCollateralAssets(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (address[] memory) {\\n        return self.depositedCollateralAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Get deposited collateral asset amount for an account\\n     * @notice Performs rebasing conversion for KreskoAssets\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return uint256 amount of collateral for `_asset`\\n     */\\n    function getCollateralDeposits(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.collateralAssets[_asset].toRebasingAmount(self.collateralDeposits[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Checks if accounts collateral value is less than required.\\n     * @param _account The account to check.\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(MinterState storage self, address _account) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account) <\\n            (self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold));\\n    }\\n\\n    /**\\n     * @notice Overload for calculating liquidatable status with a future liquidated collateral value\\n     * @param _account The account to check.\\n     * @param _valueLiquidated Value liquidated, eg. in a batch liquidation\\n     * @return bool indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(\\n        MinterState storage self,\\n        address _account,\\n        uint256 _valueLiquidated\\n    ) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account) - _valueLiquidated <\\n            (self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold));\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @return totalCollateralValue The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (uint256 totalCollateralValue) {\\n        address[] memory assets = self.depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 collateralValue, ) = self.getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getCollateralDeposits(_account, asset),\\n                false // Take the collateral factor into consideration.\\n            );\\n            totalCollateralValue += collateralValue;\\n        }\\n\\n        return totalCollateralValue;\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account including extra return value for specific collateral.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @param _collateralAsset The collateral asset to get the collateral value.\\n     * @return totalCollateralValue The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256 totalCollateralValue, uint256 specificValue) {\\n        address[] memory assets = self.depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 collateralValue, ) = self.getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getCollateralDeposits(_account, asset),\\n                false // Take the collateral factor into consideration.\\n            );\\n            totalCollateralValue += collateralValue;\\n            if (asset == _collateralAsset) {\\n                specificValue = collateralValue;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets accounts min collateral value required to cover debt at a given collateralization ratio.\\n     * @dev 1. Account with min collateral value under MCR will not borrow.\\n     *      2. Account with min collateral value under LT can be liquidated.\\n     * @param _account The account to calculate the minimum collateral value for.\\n     * @param _ratio The collateralization ratio to get min collateral value against.\\n     * @return The min collateral value at given collateralization ratio for the account.\\n     */\\n    function getAccountMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _account,\\n        uint256 _ratio\\n    ) internal view returns (uint256) {\\n        return self.getAccountKrAssetValue(_account).wadMul(_ratio);\\n    }\\n\\n    /**\\n     * @notice Gets the total KreskoAsset value in USD for an account.\\n     * @param _account The account to calculate the KreskoAsset value for.\\n     * @return value The KreskoAsset value of the account.\\n     */\\n    function getAccountKrAssetValue(MinterState storage self, address _account) internal view returns (uint256 value) {\\n        address[] memory assets = self.mintedKreskoAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            value += self.getKrAssetValue(asset, self.getKreskoAssetDebtScaled(_account, asset), false);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Get accounts interested scaled debt amount for a KreskoAsset.\\n     * @param _asset The asset address\\n     * @param _account The account to get the amount for\\n     * @return Amount of scaled debt.\\n     */\\n    function getKreskoAssetDebtScaled(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        uint256 debt = self.kreskoAssets[_asset].toRebasingAmount(irs().srUserInfo[_account][_asset].debtScaled);\\n        if (debt == 0) {\\n            return 0;\\n        }\\n\\n        return debt.rayMul(irs().srAssets[_asset].getNormalizedDebtIndex()).rayToWad();\\n    }\\n\\n    /**\\n     * @notice Get `_account` principal debt amount for `_asset`\\n     * @dev Principal debt is rebase adjusted due to possible stock splits/reverse splits\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of principal debt for `_asset`\\n     */\\n    function getKreskoAssetDebtPrincipal(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.kreskoAssets[_asset].toRebasingAmount(self.kreskoAssetDebt[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Get the total interest accrued on top of debt: Scaled Debt - Principal Debt\\n     * @return assetAmount Interest denominated in _asset\\n     * @return kissAmount Interest denominated in KISS. Ignores K-factor: $1 of interest = 1 KISS\\n     **/\\n    function getKreskoAssetDebtInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256 assetAmount, uint256 kissAmount) {\\n        assetAmount =\\n            self.getKreskoAssetDebtScaled(_account, _asset) -\\n            self.getKreskoAssetDebtPrincipal(_account, _asset);\\n        kissAmount = self.getKrAssetValue(_asset, assetAmount, true).oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Gets an index for the Kresko asset the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @param _kreskoAsset The asset lookup address.\\n     * @return i = index of the minted Kresko asset.\\n     */\\n    function getMintedKreskoAssetsIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal view returns (uint256 i) {\\n        uint256 length = self.mintedKreskoAssets[_account].length;\\n        require(length > 0, Error.NO_KRASSETS_MINTED);\\n        for (i; i < length; i++) {\\n            if (self.mintedKreskoAssets[_account][i] == _kreskoAsset) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets an index for the collateral asset the account has deposited.\\n     * @param _account The account to get the index for.\\n     * @param _collateralAsset The asset lookup address.\\n     * @return i = index of the minted collateral asset.\\n     */\\n    function getDepositedCollateralAssetIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256 i) {\\n        uint256 length = self.depositedCollateralAssets[_account].length;\\n        require(length > 0, Error.NO_COLLATERAL_DEPOSITS);\\n        for (i; i < length; i++) {\\n            if (self.depositedCollateralAssets[_account][i] == _collateralAsset) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c9468def9b6d5c76b0f123f18cb342fc49ee06c9f2fe7b82367ffc91c4526bb\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibAssetUtility.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {CollateralAsset, KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\n/**\\n * @title LibAssetUtility\\n * @author Kresko\\n * @notice Utility functions for KrAsset and CollateralAsset structs\\n */\\nlibrary LibAssetUtility {\\n    using WadRay for uint256;\\n    using LibDecimals for int256;\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(KrAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(CollateralAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        if (self.anchor == address(0)) return _nonRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(KrAsset memory self, uint256 _maybeRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(\\n        CollateralAsset memory self,\\n        uint256 _maybeRebasedAmount\\n    ) internal view returns (uint256) {\\n        if (self.anchor == address(0)) return _maybeRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return uint256(self.oracle.latestAnswer());\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(KrAsset memory self) internal view returns (uint256) {\\n        return uint256(self.oracle.latestAnswer());\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return self.oracle.latestAnswer().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(KrAsset memory self) internal view returns (uint256) {\\n        return self.oracle.latestAnswer().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(CollateralAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice().wadMul(_assetAmount);\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(KrAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice().wadMul(_assetAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x59d7561f5ffad4fca3e95b533f3dd24e29a9e016277cfc1c4c961b67ebec5614\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibBurn.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n// solhint-disable not-rely-on-time\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent, InterestRateEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {IERC20Permit} from \\\"../../shared/IERC20Permit.sol\\\";\\nimport {SafeERC20} from \\\"../../shared/SafeERC20.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\n\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibBurn {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using SafeERC20 for IERC20Permit;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Repay user kresko asset debt with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being repaid\\n    /// @param _burnAmount the asset amount being burned\\n    /// @param _account the account the debt is subtracted from\\n    function burn(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _burnAmount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the possibly rebalanced amount of destroyed tokens\\n        uint256 destroyed = IKreskoAssetIssuer(_anchor).destroy(_burnAmount, msg.sender);\\n        // Calculate the debt index scaled amount\\n        uint256 amountScaled = destroyed.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n\\n        // Decrease the principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] -= destroyed;\\n        // Decrease the scaled debt and set user asset's last debt index\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled -= uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the stability rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /// @notice Repay user global asset debt. Updates rates for regular market.\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _burnAmount the asset amount being burned\\n    function repaySwap(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _burnAmount,\\n        address _from\\n    ) internal returns (uint256 destroyed) {\\n        // Burn assets from the protocol, as they are sent in. Get the destroyed shares.\\n        destroyed = IKreskoAssetIssuer(self.kreskoAssets[_kreskoAsset].anchor).destroy(_burnAmount, _from);\\n        require(destroyed != 0, \\\"repay-destroyed-amount-invalid\\\");\\n    }\\n\\n    /**\\n     * @notice Repays accrued stability rate interest for a single asset\\n     * @param _account Account to repay interest for\\n     * @param _kreskoAsset Kresko asset to repay interest for\\n     * @return kissRepayAmount amount repaid\\n     */\\n    function repayFullStabilityRateInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal returns (uint256 kissRepayAmount) {\\n        // Update debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the accrued interest in repayment token\\n        (, kissRepayAmount) = self.getKreskoAssetDebtInterest(_account, _kreskoAsset);\\n\\n        // If no interest has accrued no further operations needed\\n        // Do not revert because we want the preserve new debt index and stability rate\\n        if (kissRepayAmount == 0) {\\n            // Update stability rate for asset\\n            irs().srAssets[_kreskoAsset].updateStabilityRate();\\n            return 0;\\n        }\\n\\n        // Transfer the accrued interest\\n        IERC20Permit(irs().kiss).safeTransferFrom(msg.sender, self.feeRecipient, kissRepayAmount);\\n\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled = uint128(\\n            self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset).wadToRay().rayDiv(newDebtIndex)\\n        );\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n\\n        // Remove from minted kresko assets if debt is cleared\\n        if (self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset) == 0) {\\n            self.mintedKreskoAssets[_account].removeAddress(\\n                _kreskoAsset,\\n                self.getMintedKreskoAssetsIndex(_account, _kreskoAsset)\\n            );\\n        }\\n\\n        // Update stability rates\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n        // Emit event with the account, asset and amount repaid\\n        emit InterestRateEvent.StabilityRateInterestRepaid(_account, _kreskoAsset, kissRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Charges the protocol close fee based off the value of the burned asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the close fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount of the kresko asset being burned.\\n     */\\n    function chargeCloseFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _burnAmount\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being burned.\\n        uint256 feeValue = krAsset.uintUSD(_burnAmount).wadMul(krAsset.closeFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, uint256 feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Permit(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.CloseFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid);\\n\\n            feeValue = feeValue - feeValuePaid;\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that debt repaid does not leave a dust position, if it does:\\n     * return an amount that pays up to minDebtValue\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount being burned\\n     * @param _debtAmount The debt amount of `_account`\\n     * @return amount == 0 or >= minDebtAmount\\n     */\\n    function ensureNotDustPosition(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _burnAmount,\\n        uint256 _debtAmount\\n    ) internal view returns (uint256 amount) {\\n        // If the requested burn would put the user's debt position below the minimum\\n        // debt value, close up to the minimum debt value instead.\\n        uint256 krAssetValue = self.getKrAssetValue(_kreskoAsset, _debtAmount - _burnAmount, true);\\n        if (krAssetValue > 0 && krAssetValue < self.minimumDebtValue) {\\n            uint256 minDebtValue = self.minimumDebtValue.wadDiv(self.kreskoAssets[_kreskoAsset].uintPrice());\\n            amount = _debtAmount - minDebtValue;\\n        } else {\\n            amount = _burnAmount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3c8135a5515f07db399c5df8174e53b0d447639966242183c5cf670dd95ee4b\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset, CollateralAsset, Constants} from \\\"../MinterTypes.sol\\\";\\nimport {cps} from \\\"../collateral-pool/CollateralPoolState.sol\\\";\\n\\n/**\\n * @title Calculation library for liquidation & fee values\\n * @author Kresko\\n */\\nlibrary LibCalculation {\\n    struct MaxLiquidationVars {\\n        CollateralAsset collateral;\\n        uint256 accountCollateralValue;\\n        uint256 minCollateralValue;\\n        uint256 seizeCollateralAccountValue;\\n        uint256 maxLiquidationMultiplier;\\n        uint256 minimumDebtValue;\\n        uint256 liquidationThreshold;\\n        uint256 debtFactor;\\n    }\\n\\n    using Arrays for address[];\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    /**\\n     * @dev Calculates the total value that can be liquidated for a liquidation pair\\n     * @param _account address to liquidate\\n     * @param _repayKreskoAsset address of the kreskoAsset being repaid on behalf of the liquidatee\\n     * @param _seizedCollateral The collateral asset being seized in the liquidation\\n     * @return maxLiquidatableUSD USD value that can be liquidated, 0 if the pair has no liquidatable value\\n     */\\n    function getMaxLiquidation(\\n        MinterState storage self,\\n        address _account,\\n        KrAsset memory _repayKreskoAsset,\\n        address _seizedCollateral\\n    ) internal view returns (uint256 maxLiquidatableUSD) {\\n        MaxLiquidationVars memory vars = _account != address(0)\\n            ? _getMaxLiquidationParams(self, _account, _repayKreskoAsset, _seizedCollateral)\\n            : _getMaxLiquidationParamsShared(self, _repayKreskoAsset, _seizedCollateral);\\n        // Account is not liquidatable\\n        if (vars.accountCollateralValue >= (vars.minCollateralValue)) {\\n            return 0;\\n        }\\n\\n        maxLiquidatableUSD = _getMaxLiquidatableUSD(vars, _repayKreskoAsset);\\n\\n        if (vars.seizeCollateralAccountValue < maxLiquidatableUSD) {\\n            return vars.seizeCollateralAccountValue;\\n        } else if (maxLiquidatableUSD < vars.minimumDebtValue) {\\n            return vars.minimumDebtValue;\\n        } else {\\n            return maxLiquidatableUSD;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate amount of collateral to seize during the liquidation procesself.\\n     * @param _liquidationIncentiveMultiplier The liquidation incentive multiplier.\\n     * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n     * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n     */\\n    function calculateAmountToSeize(\\n        uint256 _liquidationIncentiveMultiplier,\\n        uint256 _collateralOraclePriceUSD,\\n        uint256 _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (uint256) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return _kreskoAssetRepayAmountUSD.wadMul(_liquidationIncentiveMultiplier).wadDiv(_collateralOraclePriceUSD);\\n    }\\n\\n    /**\\n     * @notice Calculates the fee to be taken from a user's deposited collateral assetself.\\n     * @param _collateralAsset The collateral asset from which to take to the fee.\\n     * @param _account The owner of the collateral.\\n     * @param _feeValue The original value of the fee.\\n     * @param _collateralAssetIndex The collateral asset's index in the user's depositedCollateralAssets array.\\n     *\\n     * @return transferAmount to be received as a uint256\\n     * @return feeValuePaid wad representing the fee value paid.\\n     */\\n    function calcFee(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        address _account,\\n        uint256 _feeValue,\\n        uint256 _collateralAssetIndex\\n    ) internal returns (uint256 transferAmount, uint256 feeValuePaid) {\\n        uint256 depositAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n\\n        // Don't take the collateral asset's collateral factor into consideration.\\n        (uint256 depositValue, uint256 oraclePrice) = self.getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            depositAmount,\\n            true\\n        );\\n\\n        if (_feeValue < depositValue) {\\n            // If feeValue < depositValue, the entire fee can be charged for this collateral asset.\\n            transferAmount = self.collateralAssets[_collateralAsset].decimals.fromWad(_feeValue.wadDiv(oraclePrice));\\n            feeValuePaid = _feeValue;\\n        } else {\\n            // If the feeValue >= depositValue, the entire deposit should be taken as the fee.\\n            transferAmount = depositAmount;\\n            feeValuePaid = depositValue;\\n            // Because the entire deposit is taken, remove it from the depositCollateralAssets array.\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _collateralAssetIndex);\\n        }\\n\\n        return (transferAmount, feeValuePaid);\\n    }\\n\\n    /**\\n     * @notice Calculates the maximum USD value of a given kreskoAsset that can be liquidated given a liquidation pair\\n     *\\n     * 1. Calculates the value gained per USD repaid in liquidation for a given kreskoAsset\\n     *\\n     * debtFactor = debtFactor = k * LT / cFactor;\\n     *\\n     * valPerUSD = (DebtFactor - Asset closeFee - liquidationIncentive) / DebtFactor\\n     *\\n     * 2. Calculates the maximum amount of USD value that can be liquidated given the account's collateral value\\n     *\\n     * maxLiquidatableUSD = (MCV - ACV) / valPerUSD / debtFactor / cFactor * LOM\\n     *\\n     * @dev This function is used by getMaxLiquidation and is factored out for readability\\n     * @param vars liquidation variables struct\\n     * @param _repayKreskoAsset The kreskoAsset being repaid in the liquidation\\n     */\\n    function _getMaxLiquidatableUSD(\\n        MaxLiquidationVars memory vars,\\n        KrAsset memory _repayKreskoAsset\\n    ) private pure returns (uint256) {\\n        uint256 valuePerUSDRepaid = (vars.debtFactor -\\n            vars.collateral.liquidationIncentive -\\n            _repayKreskoAsset.closeFee).wadDiv(vars.debtFactor);\\n        return\\n            (vars.minCollateralValue - vars.accountCollateralValue)\\n                .wadDiv(valuePerUSDRepaid)\\n                .wadDiv(vars.debtFactor)\\n                .wadDiv(vars.collateral.factor)\\n                .wadMul(vars.maxLiquidationMultiplier);\\n    }\\n\\n    function _getMaxLiquidationParams(\\n        MinterState storage state,\\n        address _account,\\n        KrAsset memory _repayKreskoAsset,\\n        address _seizedCollateral\\n    ) private view returns (MaxLiquidationVars memory) {\\n        uint256 liquidationThreshold = state.liquidationThreshold;\\n        uint256 minCollateralValue = state.getAccountMinimumCollateralValueAtRatio(_account, liquidationThreshold);\\n\\n        (uint256 accountCollateralValue, uint256 seizeCollateralAccountValue) = state.getAccountCollateralValue(\\n            _account,\\n            _seizedCollateral\\n        );\\n\\n        CollateralAsset memory collateral = state.collateralAssets[_seizedCollateral];\\n\\n        return\\n            MaxLiquidationVars({\\n                collateral: collateral,\\n                accountCollateralValue: accountCollateralValue,\\n                debtFactor: _repayKreskoAsset.kFactor.wadMul(liquidationThreshold).wadDiv(collateral.factor),\\n                minCollateralValue: minCollateralValue,\\n                minimumDebtValue: state.minimumDebtValue,\\n                seizeCollateralAccountValue: seizeCollateralAccountValue,\\n                liquidationThreshold: liquidationThreshold,\\n                maxLiquidationMultiplier: Constants.MIN_MAX_LIQUIDATION_MULTIPLIER\\n            });\\n    }\\n\\n    function _getMaxLiquidationParamsShared(\\n        MinterState storage state,\\n        KrAsset memory _repayKreskoAsset,\\n        address _seizedCollateral\\n    ) private view returns (MaxLiquidationVars memory) {\\n        uint256 liquidationThreshold = cps().liquidationThreshold;\\n        uint256 minCollateralValue = cps().getTotalPoolKrAssetValueAtRatio(liquidationThreshold, false);\\n\\n        (uint256 totalCollateralValue, uint256 seizeCollateralValue) = cps().getTotalPoolDepositValue(\\n            _seizedCollateral,\\n            cps().totalDeposits[_seizedCollateral],\\n            false\\n        );\\n\\n        CollateralAsset memory collateral = state.collateralAssets[_seizedCollateral];\\n\\n        return\\n            MaxLiquidationVars({\\n                collateral: collateral,\\n                accountCollateralValue: totalCollateralValue,\\n                debtFactor: _repayKreskoAsset.kFactor.wadMul(liquidationThreshold).wadDiv(collateral.factor),\\n                minCollateralValue: minCollateralValue,\\n                minimumDebtValue: state.minimumDebtValue,\\n                seizeCollateralAccountValue: seizeCollateralValue,\\n                liquidationThreshold: liquidationThreshold,\\n                maxLiquidationMultiplier: Constants.MIN_MAX_LIQUIDATION_MULTIPLIER\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x8a1970334f17c8c789e47e056d7f8677311f3e5d481ad89d6841c53daaca3494\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {AggregatorV2V3Interface} from \\\"../../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\n/**\\n * @title Library for collateral related operations\\n * @author Kresko\\n */\\nlibrary LibCollateral {\\n    using LibDecimals for uint8;\\n    using Arrays for address[];\\n    using WadRay for uint256;\\n\\n    /**\\n     * In case a collateral asset is also a kresko asset, convert an amount to anchor shares\\n     * @param _amount amount to possibly convert\\n     * @param _collateralAsset address of the collateral asset\\n     */\\n    function normalizeCollateralAmount(\\n        MinterState storage self,\\n        uint256 _amount,\\n        address _collateralAsset\\n    ) internal view returns (uint256 amount) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n        if (asset.anchor != address(0)) {\\n            return IKreskoAssetAnchor(asset.anchor).convertToShares(_amount);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice Get the state of a specific collateral asset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `CollateralAsset` struct\\n     */\\n    function collateralAsset(MinterState storage self, address _asset) internal view returns (CollateralAsset memory) {\\n        return self.collateralAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value for a single collateral asset and amount.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to calculate the collateral value for.\\n     * @param _ignoreCollateralFactor Boolean indicating if the asset's collateral factor should be ignored.\\n     * @return The collateral value for the provided amount of the collateral asset.\\n     */\\n    function getCollateralValueAndOraclePrice(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) internal view returns (uint256, uint256) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n\\n        uint256 oraclePrice = asset.uintPrice();\\n        uint256 value = asset.decimals.toWad(_amount).wadMul(oraclePrice);\\n\\n        if (!_ignoreCollateralFactor) {\\n            value = value.wadMul(asset.factor);\\n        }\\n        return (value, oraclePrice);\\n    }\\n\\n    /**\\n     * @notice verifies that the account has sufficient collateral for the requested amount and records the collateral\\n     * @param _account The address of the account to verify the collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _withdrawAmount The amount of the collateral asset to withdraw.\\n     * @param _collateralDeposits Collateral deposits for the account.\\n     * @param _depositedCollateralAssetIndex Index of the collateral asset in the account's deposited collateral assets array.\\n     */\\n    function verifyAndRecordCollateralWithdrawal(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount,\\n        uint256 _collateralDeposits,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_withdrawAmount > 0, Error.ZERO_WITHDRAW);\\n        require(\\n            _depositedCollateralAssetIndex <= self.depositedCollateralAssets[_account].length - 1,\\n            Error.ARRAY_OUT_OF_BOUNDS\\n        );\\n\\n        // Ensure that the operation passes checks MCR checks\\n        verifyAccountCollateral(self, _account, _collateralAsset, _withdrawAmount);\\n\\n        // Record the withdrawal.\\n        self.collateralDeposits[_account][_collateralAsset] = self\\n            .collateralAssets[_collateralAsset]\\n            .toNonRebasingAmount(_collateralDeposits - _withdrawAmount);\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (_withdrawAmount == _collateralDeposits) {\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        emit MinterEvent.CollateralWithdrawn(_account, _collateralAsset, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Records account as having deposited an amount of a collateral asset.\\n     * @dev Token transfers are expected to be done by the caller.\\n     * @param _account The address of the collateral asset.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _depositAmount The amount of the collateral asset deposited.\\n     */\\n    function recordCollateralDeposit(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _depositAmount\\n    ) internal {\\n        // Because the depositedCollateralAssets[_account] is pushed to if the existing\\n        // deposit amount is 0, require the amount to be > 0. Otherwise, the depositedCollateralAssets[_account]\\n        // could be filled with duplicates, causing collateral to be double-counted in the collateral value.\\n        require(_depositAmount > 0, Error.ZERO_DEPOSIT);\\n\\n        // If the account does not have an existing deposit for this collateral asset,\\n        // push it to the list of the account's deposited collateral assets.\\n        uint256 existingDepositAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n        if (existingDepositAmount == 0) {\\n            self.depositedCollateralAssets[_account].push(_collateralAsset);\\n        }\\n        // Record the deposit.\\n        unchecked {\\n            self.collateralDeposits[_account][_collateralAsset] = self\\n                .collateralAssets[_collateralAsset]\\n                .toNonRebasingAmount(existingDepositAmount + _depositAmount);\\n        }\\n\\n        emit MinterEvent.CollateralDeposited(_account, _collateralAsset, _depositAmount);\\n    }\\n\\n    /**\\n     * @notice records the collateral withdrawal\\n     * @param _account The address of the account to verify the collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _withdrawAmount The amount of the collateral asset to withdraw.\\n     * @param _collateralDeposits Collateral deposits for the account.\\n     * @param _depositedCollateralAssetIndex Index of the collateral asset in the account's deposited collateral assets array.\\n     */\\n    function recordCollateralWithdrawal(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount,\\n        uint256 _collateralDeposits,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_withdrawAmount > 0, Error.ZERO_WITHDRAW);\\n        require(\\n            _depositedCollateralAssetIndex <= self.depositedCollateralAssets[_account].length - 1,\\n            Error.ARRAY_OUT_OF_BOUNDS\\n        );\\n        // ensure that the handler does not attempt to withdraw more collateral than the account has\\n        require(_collateralDeposits >= _withdrawAmount, Error.COLLATERAL_INSUFFICIENT_AMOUNT);\\n\\n        // Record the withdrawal.\\n        self.collateralDeposits[_account][_collateralAsset] = self\\n            .collateralAssets[_collateralAsset]\\n            .toNonRebasingAmount(_collateralDeposits - _withdrawAmount);\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (_withdrawAmount == _collateralDeposits) {\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        emit MinterEvent.UncheckedCollateralWithdrawn(_account, _collateralAsset, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice verifies that the account collateral\\n     * @param _account The address of the account to verify the collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _withdrawAmount The amount of the collateral asset to withdraw.\\n     */\\n    function verifyAccountCollateral(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount\\n    ) internal view {\\n        // Ensure the withdrawal does not result in the account having a collateral value\\n        // under the minimum collateral amount required to maintain a healthy position.\\n        // I.e. the new account's collateral value must still exceed the account's minimum\\n        // collateral value.\\n        // Get the account's current collateral value.\\n        uint256 accountCollateralValue = self.getAccountCollateralValue(_account);\\n        // Get the collateral value that the account will lose as a result of this withdrawal.\\n        (uint256 withdrawnCollateralValue, ) = self.getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            _withdrawAmount,\\n            false // Take the collateral factor into consideration.\\n        );\\n        // Get the account's minimum collateral value.\\n        uint256 accountMinCollateralValue = self.getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            self.minimumCollateralizationRatio\\n        );\\n        // Require accountMinCollateralValue <= accountCollateralValue - withdrawnCollateralValue.\\n        require(\\n            accountMinCollateralValue <= accountCollateralValue - withdrawnCollateralValue,\\n            Error.COLLATERAL_INSUFFICIENT_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x80f24c2b27d4d2fd40f57a9daeaff4d69e57db432a0ee57c07a61712f9dc6fa8\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\n\\n/**\\n * @title Library for Kresko specific decimals\\n */\\nlibrary LibDecimals {\\n    /**\\n     * @notice For a given collateral asset and amount, returns a wad represenatation.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals > 18, there may be a loss of precision.\\n     * @param _decimals The collateral asset's number of decimals\\n     * @param _amount The amount of the collateral asset.\\n     * @return A fp of amount scaled according to the collateral asset's decimals.\\n     */\\n    function toWad(uint256 _decimals, uint256 _amount) internal pure returns (uint256) {\\n        // Initially, use the amount as the raw value for the fixed point.\\n        // which internally uses 18 decimals.\\n        // Most collateral assets will have 18 decimals.\\n\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_decimals < 18) {\\n            // If the decimals are less than 18, multiply the amount\\n            // to get the correct wad value.\\n            // E.g. 1 full token of a 17 decimal token will  cause the\\n            // initial setting of amount to be 0.1, so we multiply\\n            // by 10 ** (18 - 17) = 10 to get it to 0.1 * 10 = 1.\\n            return _amount * (10 ** (18 - _decimals));\\n        } else if (_decimals > 18) {\\n            // If the decimals are greater than 18, divide the amount\\n            // to get the correct fixed point value.\\n            // Note because wad numbers are 18 decimals, this results\\n            // in loss of precision. E.g. if the collateral asset has 19\\n            // decimals and the deposit amount is only 1 uint, this will divide\\n            // 1 by 10 ** (19 - 18), resulting in 1 / 10 = 0\\n            return _amount / (10 ** (_decimals - 18));\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice For a given collateral asset and wad amount, returns the collateral amount.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals < 18, there may be a loss of precision.\\n     * @param _decimals The collateral asset's number of decimals\\n     * @param _wadAmount The wad amount of the collateral asset.\\n     * @return An amount that is compatible with the collateral asset's decimals.\\n     */\\n    function fromWad(uint256 _decimals, uint256 _wadAmount) internal pure returns (uint256) {\\n        // Initially, use the rawValue, which internally uses 18 decimals.\\n        // Most collateral assets will have 18 decimals.\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_decimals < 18) {\\n            // If the decimals are less than 18, divide the depositAmount\\n            // to get the correct collateral amount.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 17 decimals, divide by 10 ** (18 - 17) = 10\\n            // to get a value of 1e17.\\n            // This may result in a loss of precision.\\n            return _wadAmount / (10 ** (18 - _decimals));\\n        } else if (_decimals > 18) {\\n            // If the decimals are greater than 18, multiply the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 19 decimals, multiply by 10 ** (19 - 18) = 10\\n            // to get a value of 1e19.\\n            return _wadAmount * (10 ** (_decimals - 18));\\n        }\\n        return _wadAmount;\\n    }\\n\\n    /**\\n     * @notice Divides an uint256 @param _value with @param _priceWithOracleDecimals\\n     * @param _value Left side value of the division\\n     * @param wadValue result with 18 decimals\\n     */\\n    function divByPrice(uint256 _value, uint256 _priceWithOracleDecimals) internal view returns (uint256 wadValue) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return _priceWithOracleDecimals;\\n        return (_value / _priceWithOracleDecimals) * 10 ** (oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _wadPrice value with extOracleDecimals\\n     */\\n    function fromWadPriceToUint(uint256 _wadPrice) internal view returns (uint256 priceWithOracleDecimals) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) return _wadPrice;\\n        return _wadPrice / 10 ** (18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice with 18 decimals\\n     */\\n    function oraclePriceToWad(uint256 _priceWithOracleDecimals) internal view returns (uint256) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) {\\n            return _priceWithOracleDecimals;\\n        }\\n        return _priceWithOracleDecimals * 10 ** (18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an int256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function oraclePriceToWad(int256 _priceWithOracleDecimals) internal view returns (uint256) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return uint256(_priceWithOracleDecimals);\\n        return uint256(_priceWithOracleDecimals) * 10 ** (18 - oracleDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0x518ecb00d349ad5584ac44b92d30be488f51c1359111000c54bf4c45f01b7c5a\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibKrAsset.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {IUniswapV2OracleCompat} from \\\"../amm-oracle/IUniswapV2OracleCompat.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibKrAsset {\\n    using WadRay for uint256;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Functions                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Get the state of a specific krAsset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `KrAsset` struct\\n     */\\n    function kreskoAsset(MinterState storage self, address _asset) internal view returns (KrAsset memory) {\\n        return self.kreskoAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Get possibly rebased amount of kreskoAssets. Use when saving to storage.\\n     * @param _asset The asset address\\n     * @param _amount The account to query amount for\\n     * @return amount Amount of principal debt for `_asset`\\n     */\\n    function getKreskoAssetAmount(\\n        MinterState storage self,\\n        address _asset,\\n        uint256 _amount\\n    ) internal view returns (uint256 amount) {\\n        return self.kreskoAssets[_asset].toRebasingAmount(_amount);\\n    }\\n\\n    /**\\n     * @notice Gets the USD value for a single Kresko asset and amount.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @param _ignoreKFactor Boolean indicating if the asset's k-factor should be ignored.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetValue(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKFactor\\n    ) internal view returns (uint256) {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        uint256 value = krAsset.uintUSD(_amount);\\n\\n        if (!_ignoreKFactor) {\\n            value = value.wadMul(krAsset.kFactor);\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Gets the AMM price for a Kresko asset.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetAMMPrice(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        if (self.ammOracle == address(0)) {\\n            return 0;\\n        }\\n        return IUniswapV2OracleCompat(self.ammOracle).consultKrAsset(_kreskoAsset, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the minimum collateral value required to\\n     * back a Kresko asset amount at a given collateralization ratio.\\n     * @param _krAsset The address of the Kresko asset.\\n     * @param _amount The Kresko Asset debt amount.\\n     * @return minCollateralValue is the minimum collateral value required for this Kresko Asset amount.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required.\\n     */\\n    function getMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _krAsset,\\n        uint256 _amount,\\n        uint256 _ratio\\n    ) internal view returns (uint256 minCollateralValue) {\\n        // Calculate the collateral value required to back this Kresko asset amount at the given ratio\\n        return self.getKrAssetValue(_krAsset, _amount, false).wadMul(_ratio);\\n    }\\n}\\n\",\"keccak256\":\"0xfd242b5e422dbf511498ae2c27bce92e256dff3f3e99f2fc2fc146fc804e7ecb\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibMint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n// solhint-disable not-rely-on-time\\n// solhint-disable-next-line\\nimport {SafeERC20, IERC20Permit} from \\\"../../shared/SafeERC20.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\n\\nlibrary LibMint {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using SafeERC20 for IERC20Permit;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Mint kresko assets with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being issued\\n    /// @param _amount the asset amount being minted\\n    /// @param _account the account to mint the assets to\\n    function mint(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _amount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get possibly rebalanced amount of kresko asset\\n        uint256 issued = IKreskoAssetIssuer(_anchor).issue(_amount, _account);\\n        // Calculate debt index scaled value\\n        uint256 amountScaled = issued.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n        // Increase principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] += issued;\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled += uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the global rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /// @notice Mint kresko assets for shared debt pool.\\n    /// @dev Updates general markets stability rates and debt index.\\n    /// @param _kreskoAsset the asset requested\\n    /// @param _amount the asset amount requested\\n    /// @param _to the account to mint the assets to\\n    function mintSwap(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        address _to\\n    ) internal returns (uint256 issued) {\\n        issued = IKreskoAssetIssuer(self.kreskoAssets[_kreskoAsset].anchor).issue(_amount, _to);\\n        require(issued != 0, \\\"invalid-shared-pool-mint\\\");\\n    }\\n\\n    /**\\n     * @notice Charges the protocol open fee based off the value of the minted asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the open fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _kreskoAssetAmountMinted The amount of the kresko asset being minted.\\n     */\\n    function chargeOpenFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _kreskoAssetAmountMinted\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being minted.\\n        uint256 feeValue = krAsset.uintUSD(_kreskoAssetAmountMinted).wadMul(krAsset.openFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, uint256 feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Permit(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.OpenFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid);\\n\\n            feeValue = feeValue - feeValuePaid;\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2c7d10c1690d76b6cac4264e3194eac5de53665ada372278d12093b35238b693\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibStabilityRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IERC20Permit} from \\\"../../shared/IERC20Permit.sol\\\";\\n\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {LibKrAsset} from \\\"../libs/LibKrAsset.sol\\\";\\n\\nimport {StabilityRateConfig} from \\\"../InterestRateState.sol\\\";\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @author Kresko\\n * @title AMM price stability rate library, derived from Aave Protocols VariableDebtToken calculations\\n * @notice Library for performing stability rate related operations\\n */\\nlibrary LibStabilityRate {\\n    using WadRay for uint256;\\n    using WadRay for uint128;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @notice Cumulates the stability rate from previous update and multiplies the debt index with it.\\n     * @dev Updates the updated timestamp\\n     * @dev New debt index cannot overflow uint128\\n     * @param self configuration for the asset\\n     * @return newDebtIndex the updated index\\n     */\\n    function updateDebtIndex(StabilityRateConfig storage self) internal returns (uint256 newDebtIndex) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n\\n        newDebtIndex = self.debtIndex;\\n        // only cumulating if there is any assets minted and rate is over 0\\n        if (IERC20Permit(self.asset).totalSupply() != 0) {\\n            uint256 cumulatedStabilityRate = self.calculateCompoundedInterest(block.timestamp);\\n            newDebtIndex = cumulatedStabilityRate.rayMul(self.debtIndex);\\n            require(newDebtIndex <= type(uint128).max, Error.DEBT_INDEX_OVERFLOW);\\n            self.debtIndex = uint128(newDebtIndex);\\n        }\\n\\n        self.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Updates the current stability rate for an asset\\n     * @dev New stability rate cannot overflow uint128\\n     * @param self rate configuration for the asset\\n     */\\n    function updateStabilityRate(StabilityRateConfig storage self) internal {\\n        if (self.asset == address(0)) return;\\n\\n        uint256 stabilityRate = calculateStabilityRate(self);\\n        require(stabilityRate <= type(uint128).max, Error.STABILITY_RATE_OVERFLOW);\\n        self.stabilityRate = uint128(stabilityRate);\\n    }\\n\\n    /**\\n     * @notice Get the current price rate between AMM and oracle pricing\\n     * @dev Raw return value of ammPrice == 0 when no AMM pair exists OR liquidity of the pair does not qualify\\n     * @param self rate configuration for the asset\\n     * @return priceRate the current price rate\\n     */\\n    function getPriceRate(StabilityRateConfig storage self) internal view returns (uint256 priceRate) {\\n        uint256 oraclePrice = ms().getKrAssetValue(self.asset, 1 ether, true);\\n        uint256 ammPrice = ms().getKrAssetAMMPrice(self.asset, 1 ether);\\n        // no pair, no effect\\n        if (ammPrice == 0) {\\n            return 0;\\n        }\\n        return ammPrice.wadDiv(oraclePrice) / 10;\\n    }\\n\\n    /**\\n     * @notice Calculate new stability rate from the current price rate\\n     * @dev Separate calculations exist for following cases:\\n     * case 1: AMM premium < optimal\\n     * case 2: AMM premium > optimal\\n     * @param self rate configuration for the asset\\n     * @return stabilityRate the current stability rate\\n     */\\n    function calculateStabilityRate(StabilityRateConfig storage self) internal view returns (uint256 stabilityRate) {\\n        uint256 priceRate = self.getPriceRate(); // 0.95 RAY = -5% PREMIUM, 1.05 RAY = +5% PREMIUM\\n        // Return base rate if no AMM price exists\\n        if (priceRate == 0) {\\n            return self.stabilityRateBase;\\n        }\\n        bool rateIsGTOptimal = priceRate > self.optimalPriceRate;\\n\\n        uint256 rateDiff = rateIsGTOptimal ? priceRate - self.optimalPriceRate : self.optimalPriceRate - priceRate;\\n        uint256 rateDiffAdjusted = rateDiff.rayMul(self.rateSlope2.rayDiv(self.rateSlope1 + self.priceRateDelta));\\n\\n        if (!rateIsGTOptimal) {\\n            // Case: AMM price is lower than priceRate\\n            return self.stabilityRateBase + rateDiffAdjusted;\\n        } else {\\n            // Case: AMM price is higher than priceRate\\n            return self.stabilityRateBase.rayDiv(WadRay.RAY + rateDiffAdjusted);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers\\n     * with the advantage of great gas cost reductions\\n     * The Aave whitepaper contains reference to the approximation\\n     * with a table showing the margin of error per different time periods\\n     *\\n     * @param self rate configuration for the asset\\n     * @param _currentTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        StabilityRateConfig storage self,\\n        uint256 _currentTimestamp\\n    ) internal view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = _currentTimestamp - uint256(self.lastUpdateTimestamp);\\n\\n        if (exp == 0) {\\n            return WadRay.RAY;\\n        }\\n\\n        uint256 expMinusOne;\\n        uint256 expMinusTwo;\\n        uint256 basePowerTwo;\\n        uint256 basePowerThree;\\n        unchecked {\\n            expMinusOne = exp - 1;\\n\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n            basePowerTwo = self.stabilityRate.rayMul(self.stabilityRate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n            basePowerThree = basePowerTwo.rayMul(self.stabilityRate) / SECONDS_PER_YEAR;\\n        }\\n\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n        unchecked {\\n            secondTerm /= 2;\\n        }\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n        unchecked {\\n            thirdTerm /= 6;\\n        }\\n\\n        return WadRay.RAY + (self.stabilityRate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n    }\\n\\n    /**\\n     * @dev Returns the ongoing normalized debt index for the borrowers\\n     * A value of 1e27 means there is no interest. As time passes, the interest is accrued\\n     * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n     * @param self rate configuration for the asset\\n     * @return The normalized debt index. expressed in ray\\n     **/\\n    function getNormalizedDebtIndex(StabilityRateConfig storage self) internal view returns (uint256) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n        //solium-disable-next-line\\n        if (self.lastUpdateTimestamp == uint40(block.timestamp)) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return self.debtIndex;\\n        }\\n\\n        return self.calculateCompoundedInterest(block.timestamp).rayMul(self.debtIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x181e9a4c3c7e578e95c37f2fe2ae7d6b4b0d147667ab26ee0ffe023e2c4c8214\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibUI.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n// solhint-disable-next-line\\nimport {IERC20Permit} from \\\"../../shared/IERC20Permit.sol\\\";\\nimport {AggregatorV2V3Interface} from \\\"../../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {IUniswapV2Pair} from \\\"../../vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport {IKrStaking} from \\\"../../staking/interfaces/IKrStaking.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {IUniswapV2OracleCompat} from \\\"../amm-oracle/IUniswapV2OracleCompat.sol\\\";\\nimport {KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState, ms} from \\\"../MinterStorage.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\n\\n/* solhint-disable contract-name-camelcase */\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @title Library for UI related views\\n * @author Kresko\\n */\\nlibrary LibUI {\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    struct CollateralAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        address anchorAddress;\\n        uint256 amount;\\n        uint256 amountUSD;\\n        uint256 cFactor;\\n        uint256 liquidationIncentive;\\n        uint8 decimals;\\n        uint256 index;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfo {\\n        address assetAddress;\\n        address oracleAddress;\\n        address anchorAddress;\\n        uint256 price;\\n        uint256 value;\\n        uint256 liquidationIncentive;\\n        uint256 cFactor;\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n        bool marketOpen;\\n    }\\n\\n    struct ProtocolParams {\\n        uint256 minDebtValue;\\n        uint256 minCollateralRatio;\\n        uint256 liquidationThreshold;\\n    }\\n\\n    struct krAssetInfo {\\n        address oracleAddress;\\n        address assetAddress;\\n        address anchorAddress;\\n        uint256 price;\\n        uint256 ammPrice;\\n        uint256 priceRate;\\n        uint256 stabilityRate;\\n        uint256 value;\\n        uint256 openFee;\\n        uint256 closeFee;\\n        uint256 kFactor;\\n        string symbol;\\n        string name;\\n        bool marketOpen;\\n    }\\n\\n    struct KreskoUser {\\n        krAssetInfoUser[] krAssets;\\n        CollateralAssetInfoUser[] collateralAssets;\\n        uint256 healthFactor;\\n        uint256 debtActualUSD;\\n        uint256 debtUSD;\\n        uint256 collateralActualUSD;\\n        uint256 collateralUSD;\\n        uint256 minCollateralUSD;\\n        uint256 borrowingPowerUSD;\\n    }\\n\\n    struct PairData {\\n        uint8 decimals0;\\n        uint8 decimals1;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 totalSupply;\\n    }\\n\\n    struct GenericInfo {\\n        address assetAddress;\\n        uint256 kFactor;\\n        uint256 cFactor;\\n        uint256 price;\\n        bool isKrAsset;\\n        bool isCollateral;\\n        uint256 debtAmount;\\n        uint256 depositAmount;\\n        uint256 walletBalance;\\n    }\\n\\n    struct Price {\\n        uint256 price;\\n        uint256 timestamp;\\n        address assetAddress;\\n        uint80 roundId;\\n        bool marketOpen;\\n    }\\n\\n    struct Allowance {\\n        address owner;\\n        address spender;\\n        uint256 allowance;\\n    }\\n\\n    struct Balance {\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    struct TokenMetadata {\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n        uint256 totalSupply;\\n    }\\n\\n    struct StakingData {\\n        uint256 pid;\\n        address depositToken;\\n        uint256 totalDeposits;\\n        uint256 allocPoint;\\n        uint256 rewardPerBlocks;\\n        uint256 lastRewardBlock;\\n        uint256 depositAmount;\\n        address[] rewardTokens;\\n        uint256[] rewardAmounts;\\n    }\\n\\n    struct krAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        address anchorAddress;\\n        uint256 amount;\\n        uint256 amountScaled;\\n        uint256 priceRate;\\n        uint256 stabilityRate;\\n        uint256 amountUSD;\\n        uint256 index;\\n        uint256 kFactor;\\n        uint256 price;\\n        uint256 ammPrice;\\n        string symbol;\\n        string name;\\n        uint256 openFee;\\n        uint256 closeFee;\\n    }\\n\\n    function getBalances(address[] memory _tokens, address account) internal view returns (Balance[] memory balances) {\\n        balances = new Balance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            balances[i] = Balance({token: address(_tokens[i]), balance: IERC20Permit(_tokens[i]).balanceOf(account)});\\n        }\\n    }\\n\\n    function getAllowances(\\n        address[] memory _tokens,\\n        address owner,\\n        address spender\\n    ) internal view returns (Allowance[] memory allowances) {\\n        allowances = new Allowance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            allowances[i] = Allowance({\\n                allowance: IERC20Permit(_tokens[i]).allowance(owner, spender),\\n                spender: spender,\\n                owner: owner\\n            });\\n        }\\n    }\\n\\n    function getStakingData(address _account, address _staking) internal view returns (StakingData[] memory result) {\\n        IKrStaking staking = IKrStaking(_staking);\\n        IKrStaking.Reward[] memory rewards = staking.allPendingRewards(_account);\\n        result = new StakingData[](rewards.length);\\n\\n        for (uint256 i; i < rewards.length; i++) {\\n            IKrStaking.PoolInfo memory poolInfo = staking.poolInfo(rewards[i].pid);\\n            address depositTokenAddress = address(poolInfo.depositToken);\\n            result[i] = StakingData({\\n                pid: rewards[i].pid,\\n                totalDeposits: poolInfo.depositToken.balanceOf(_staking),\\n                allocPoint: poolInfo.allocPoint,\\n                depositToken: depositTokenAddress,\\n                depositAmount: staking.userInfo(rewards[i].pid, _account).amount,\\n                rewardTokens: rewards[i].tokens,\\n                rewardAmounts: rewards[i].amounts,\\n                rewardPerBlocks: staking.rewardPerBlockFor(depositTokenAddress),\\n                lastRewardBlock: poolInfo.lastRewardBlock\\n            });\\n        }\\n    }\\n\\n    function borrowingPowerUSD(address _account) internal view returns (uint256) {\\n        uint256 minCollateral = ms().getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            ms().minimumCollateralizationRatio\\n        );\\n        uint256 collateral = ms().getAccountCollateralValue(_account);\\n\\n        if (collateral < minCollateral) {\\n            return 0;\\n        } else {\\n            return collateral - minCollateral;\\n        }\\n    }\\n\\n    function batchOracleValues(\\n        address[] memory _assets,\\n        address[] memory _priceFeeds,\\n        address[] memory _marketStatusFeeds\\n    ) internal view returns (Price[] memory result) {\\n        require(_marketStatusFeeds.length == _priceFeeds.length, Error.PRICEFEEDS_MUST_MATCH_STATUS_FEEDS);\\n        result = new Price[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            result[i] = Price({\\n                price: uint256(AggregatorV2V3Interface(_priceFeeds[i]).latestAnswer()),\\n                timestamp: AggregatorV2V3Interface(_priceFeeds[i]).latestTimestamp(),\\n                assetAddress: _assets[i],\\n                roundId: uint80(AggregatorV2V3Interface(_priceFeeds[i]).latestRound()),\\n                marketOpen: AggregatorV2V3Interface(_marketStatusFeeds[i]).latestMarketOpen()\\n            });\\n        }\\n    }\\n\\n    function krAssetInfos(address[] memory assetAddresses) internal view returns (krAssetInfo[] memory result) {\\n        result = new krAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n            KrAsset memory krAsset = ms().kreskoAssets[assetAddress];\\n            uint256 ammPrice;\\n            uint256 stabilityRate;\\n            uint256 priceRate;\\n            if (irs().srAssets[assetAddress].asset != address(0)) {\\n                ammPrice = IUniswapV2OracleCompat(ms().ammOracle).consultKrAsset(assetAddress, 1 ether);\\n                stabilityRate = irs().srAssets[assetAddress].calculateStabilityRate();\\n                priceRate = irs().srAssets[assetAddress].getPriceRate();\\n            }\\n            result[i] = krAssetInfo({\\n                value: ms().getKrAssetValue(assetAddress, 1 ether, false),\\n                oracleAddress: address(krAsset.oracle),\\n                anchorAddress: krAsset.anchor,\\n                assetAddress: assetAddress,\\n                closeFee: krAsset.closeFee,\\n                openFee: krAsset.openFee,\\n                kFactor: krAsset.kFactor,\\n                price: uint256(krAsset.oracle.latestAnswer()),\\n                stabilityRate: stabilityRate,\\n                priceRate: priceRate,\\n                ammPrice: ammPrice,\\n                marketOpen: krAsset.marketStatusOracle.latestMarketOpen(),\\n                symbol: IERC20Permit(assetAddress).symbol(),\\n                name: IERC20Permit(assetAddress).name()\\n            });\\n        }\\n    }\\n\\n    function collateralAssetInfos(\\n        address[] memory assetAddresses\\n    ) internal view returns (CollateralAssetInfo[] memory result) {\\n        result = new CollateralAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n            CollateralAsset memory collateralAsset = ms().collateralAssets[assetAddress];\\n            uint8 decimals = IERC20Permit(assetAddress).decimals();\\n\\n            (uint256 value, uint256 price) = ms().getCollateralValueAndOraclePrice(\\n                assetAddress,\\n                1 * 10 ** decimals,\\n                false\\n            );\\n\\n            result[i] = CollateralAssetInfo({\\n                value: value,\\n                oracleAddress: address(collateralAsset.oracle),\\n                anchorAddress: collateralAsset.anchor,\\n                assetAddress: assetAddress,\\n                liquidationIncentive: collateralAsset.liquidationIncentive,\\n                cFactor: collateralAsset.factor,\\n                decimals: decimals,\\n                price: price,\\n                marketOpen: collateralAsset.marketStatusOracle.latestMarketOpen(),\\n                symbol: IERC20Permit(assetAddress).symbol(),\\n                name: IERC20Permit(assetAddress).name()\\n            });\\n        }\\n    }\\n\\n    function collateralAssetInfoFor(\\n        address _account\\n    ) internal view returns (CollateralAssetInfoUser[] memory result, uint256 totalCollateralUSD) {\\n        address[] memory collateralAssetAddresses = ms().getDepositedCollateralAssets(_account);\\n        if (collateralAssetAddresses.length > 0) {\\n            result = new CollateralAssetInfoUser[](collateralAssetAddresses.length);\\n            for (uint256 i; i < collateralAssetAddresses.length; i++) {\\n                address assetAddress = collateralAssetAddresses[i];\\n                uint8 decimals = IERC20Permit(assetAddress).decimals();\\n\\n                uint256 amount = ms().getCollateralDeposits(_account, assetAddress);\\n\\n                (uint256 amountUSD, uint256 price) = ms().getCollateralValueAndOraclePrice(assetAddress, amount, true);\\n\\n                totalCollateralUSD + amountUSD;\\n                result[i] = CollateralAssetInfoUser({\\n                    amount: amount,\\n                    amountUSD: amountUSD,\\n                    liquidationIncentive: ms().collateralAssets[assetAddress].liquidationIncentive,\\n                    anchorAddress: ms().collateralAssets[assetAddress].anchor,\\n                    oracleAddress: address(ms().collateralAssets[assetAddress].oracle),\\n                    assetAddress: assetAddress,\\n                    cFactor: ms().collateralAssets[assetAddress].factor,\\n                    decimals: decimals,\\n                    index: i,\\n                    price: price,\\n                    symbol: IERC20Permit(assetAddress).symbol(),\\n                    name: IERC20Permit(assetAddress).name()\\n                });\\n            }\\n        }\\n    }\\n\\n    function krAssetInfoFor(\\n        address _account\\n    ) internal view returns (krAssetInfoUser[] memory result, uint256 totalDebtUSD) {\\n        address[] memory krAssetAddresses = ms().mintedKreskoAssets[_account];\\n        if (krAssetAddresses.length > 0) {\\n            result = new krAssetInfoUser[](krAssetAddresses.length);\\n            for (uint256 i; i < krAssetAddresses.length; i++) {\\n                address assetAddress = krAssetAddresses[i];\\n                KrAsset memory krAsset = ms().kreskoAssets[assetAddress];\\n                uint256 amount = ms().getKreskoAssetDebtPrincipal(_account, assetAddress);\\n                uint256 amountScaled = ms().getKreskoAssetDebtScaled(_account, assetAddress);\\n\\n                uint256 amountUSD = ms().getKrAssetValue(assetAddress, amount, true);\\n                uint256 ammPrice;\\n                uint256 stabilityRate;\\n                uint256 priceRate;\\n                if (irs().srAssets[assetAddress].asset != address(0)) {\\n                    stabilityRate = irs().srAssets[assetAddress].calculateStabilityRate();\\n                    priceRate = irs().srAssets[assetAddress].getPriceRate();\\n                    ammPrice = IUniswapV2OracleCompat(ms().ammOracle).consultKrAsset(assetAddress, 1 ether);\\n                }\\n                totalDebtUSD + amountUSD;\\n                result[i] = krAssetInfoUser({\\n                    assetAddress: assetAddress,\\n                    oracleAddress: address(krAsset.oracle),\\n                    anchorAddress: krAsset.anchor,\\n                    openFee: krAsset.openFee,\\n                    closeFee: krAsset.closeFee,\\n                    amount: amount,\\n                    amountScaled: amountScaled,\\n                    amountUSD: amountUSD,\\n                    stabilityRate: stabilityRate,\\n                    priceRate: priceRate,\\n                    index: i,\\n                    kFactor: krAsset.kFactor,\\n                    price: uint256(krAsset.oracle.latestAnswer()),\\n                    ammPrice: ammPrice,\\n                    symbol: IERC20Permit(assetAddress).symbol(),\\n                    name: IERC20Permit(assetAddress).name()\\n                });\\n            }\\n        }\\n    }\\n\\n    function healthFactorFor(address _account) internal view returns (uint256) {\\n        uint256 userDebt = ms().getAccountKrAssetValue(_account);\\n        uint256 userCollateral = ms().getAccountCollateralValue(_account);\\n\\n        if (userDebt > 0) {\\n            return userCollateral.wadDiv(userDebt);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function kreskoUser(address _account) internal view returns (KreskoUser memory user) {\\n        (krAssetInfoUser[] memory krInfos, uint256 totalDebtUSD) = krAssetInfoFor(_account);\\n        (CollateralAssetInfoUser[] memory collateralInfos, uint256 totalCollateralUSD) = collateralAssetInfoFor(\\n            _account\\n        );\\n\\n        if (krInfos.length > 0 || collateralInfos.length > 0) {\\n            user = KreskoUser({\\n                collateralAssets: collateralInfos,\\n                krAssets: krInfos,\\n                borrowingPowerUSD: borrowingPowerUSD(_account),\\n                healthFactor: healthFactorFor(_account),\\n                debtActualUSD: totalDebtUSD,\\n                debtUSD: ms().getAccountKrAssetValue(_account),\\n                collateralActualUSD: totalCollateralUSD,\\n                collateralUSD: ms().getAccountCollateralValue(_account),\\n                minCollateralUSD: ms().getAccountMinimumCollateralValueAtRatio(\\n                    _account,\\n                    ms().minimumCollateralizationRatio\\n                )\\n            });\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x637bf994049ed91013bcda1dceee8fc36ea77e9143cff3645d51fe473a6ff81d\",\"license\":\"BUSL-1.1\"},\"src/contracts/shared/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.19;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x429fbd28c61fe8369f11daaefc77f0974863b74dd2bd20650c2a32db631c037d\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/shared/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.19;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface IERC20Permit {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e9d58529386d5a2934c822a0c893efa33c528c902a78f81eee8ef0ced178469\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/shared/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Permit token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Permit token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Permit token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Permit token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Permit token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Permit token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcdb25979880d99bc6a47c2ade4399fc9c8bc4dfa7de507c85ed443865696ee2e\",\"license\":\"MIT\"},\"src/contracts/staking/interfaces/IKrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * @notice Get id for a token\\n     * @notice Useful for external contracts\\n     * @param _depositToken depositToken in `_poolInfo`\\n     * @return pid of pool with `_depositToken`\\n     * @return found ensure 0 index\\n     */\\n    function getPidFor(address _depositToken) external view returns (uint256 pid, bool found);\\n\\n    /**\\n     * @notice Amount of pools\\n     */\\n    function poolLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Deposits tokens for @param _to\\n     * @param _to address that msg.sender deposits tokens for\\n     * @param _pid in `_poolInfo`\\n     * @param _amount amount of tokens to deposit\\n     */\\n    function deposit(address _to, uint256 _pid, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Trusted helper contract can withdraw rewards and deposits on behalf of an account\\n     * @notice For eg. withdraw + remove liquidity\\n     * @param _for account to withdraw from\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient reward recipient\\n     */\\n    function withdrawFor(address _for, uint256 _pid, uint256 _amount, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Trusted helper contract can claim rewards on behalf of an account\\n     * @param _for account to claim for\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address that receives rewards\\n     */\\n    function claimFor(address _for, uint256 _pid, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Get all pending rewards for an account\\n     * @param _account to get rewards for\\n     * @return all pending rewards\\n     */\\n    function allPendingRewards(address _account) external view returns (Reward[] memory);\\n\\n    /**\\n     * @notice Get account information on a pool\\n     * @param _pid in `_poolInfo`\\n     * @param _account to get information for\\n     * @return information on the account\\n     */\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory);\\n\\n    /**\\n     * @notice Get pool information\\n     * @param _pid in `_poolInfo`\\n     * @return pool information\\n     */\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function rewardPerBlockFor(address depositTokenAddress) external view returns (uint256 rewardPerBlocks);\\n\\n    /**\\n     * @notice A rescue function for missent msg.value\\n     * @notice Since we are using payable functions to save gas on calls\\n     */\\n    function rescueNative() external payable;\\n\\n    /**\\n     * @notice A rescue function for missent tokens / airdrops\\n     * @notice This cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\\n     */\\n    function rescueNonPoolToken(IERC20 _tokenToRescue, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Set new allocations for a pool\\n     * @notice Set `_newAllocPoint` to 0 to retire a pool\\n     * @param _pid pool to modify\\n     * @param _newAllocPoint new allocation (weight) for rewards\\n     */\\n    function setPool(uint256 _pid, uint128 _newAllocPoint) external payable;\\n\\n    /**\\n     * @notice Adds a new reward pool\\n     * @notice Updates reward token count in case of adding extra tokens\\n     * @param _rewardTokens tokens to reward from this pool\\n     * @param _depositToken token to deposit for rewards\\n     * @param _allocPoint weight of rewards this pool receives\\n     * @param _startBlock block when rewards start\\n     */\\n    function addPool(\\n        address[] calldata _rewardTokens,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock\\n    ) external payable;\\n\\n    /**\\n     * @notice Adjust/Set reward per block for a particular reward token\\n     * @param _rewardToken token to adjust the drip for\\n     * @param _rewardPerBlock tokens to drip per block\\n     */\\n    function setRewardPerBlockFor(address _rewardToken, uint256 _rewardPerBlock) external payable;\\n\\n    /**\\n     * @notice Emergency function, withdraws deposits from a pool\\n     * @notice This will forfeit your rewards.\\n     * @param _pid pool id to withdraw tokens from\\n     */\\n    function emergencyWithdraw(uint256 _pid) external payable;\\n\\n    /**\\n     * @notice Claim rewards only\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function claim(uint256 _pid, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Withdraw deposited tokens and rewards.\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Updates all pools to be up-to date\\n     */\\n    function massUpdatePools() external payable;\\n\\n    /**\\n     * @notice Updates a pools reward variables to be up-to date\\n     * @param _pid pool to update\\n     */\\n    function updatePool(uint256 _pid) external payable returns (PoolInfo memory pool);\\n\\n    /**\\n     * @notice Get pending rewards from a certain pool\\n     * @param _pid id in `_poolInfo`\\n     * @param _user id in `_userInfo[_pid]`\\n     * @return rewards pending rewards\\n     */\\n    function pendingRewards(uint256 _pid, address _user) external view returns (Reward memory rewards);\\n}\\n\",\"keccak256\":\"0xdfe73481838660eebe92d9192716d6881083ee547734135e3aa33d20198b1248\",\"license\":\"BUSL-1.1\"},\"src/contracts/vendor/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestMarketOpen() external view returns (bool);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function getMarketOpen(uint256 roundId) external view returns (bool);\\n\\n    event AnswerUpdated(int256 indexed current, bool marketOpen, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xdb75c655ccf089430cb063b40591f464ba31ce273affc60c4b5a996f8e44fb85\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n/* solhint-disable no-global-import */\\n/* solhint-disable no-empty-blocks */\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xc8b21a8d016a10b74e285489581296197264de86337fb23a441229e0016f8d7c\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n    \\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x5a6b253a6ba193bae6e36ef1e2326727d6e8394cc8d99762f87dbc0193bdc9fb\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Minimal {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x853784573ca029a6654da36764bbd748f2e14547e9cad490a49135543664c77f\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// // SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x17c3cb3c29020835e4e2d281a2dfbbbc3073fb52894bb9632f924259a0c97f14\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.16;\\n\\n/** solhint-disable func-name-mixedcase */\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x61a1ef1aecceeb9cffcb9d6e80ad067b3aa3401f608a04677ebfd793cbc95c4e\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x51b3d315e503d85683fb21c3d858d010e10d8b48959c2e437e7cebf5393692a1\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: APGL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"../../v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../v2-core/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb40321d34bb4450e86527ec738712ff475a88d24d8b16cb2af6fe16a16bec978\",\"license\":\"APGL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613748908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c908163981d11da1461004a57508063ba9c6864146100455763d297f19d1461004057600080fd5b610b02565b610a50565b346101c6576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126101c65760043590610086826101c9565b60243567ffffffffffffffff81116101c2576100a6903690600401610383565b90604435906100b4826101c9565b6100bc610ba5565b5050826100c7610ba5565b926100d182612fba565b6100da84612c49565b918351158015906101b8575b610114575b85886101106101048a6100fe858b6110b3565b94611512565b60405193849384610862565b0390f35b61011096949750916100fe9391869361012f61010498612b4f565b92610139866136f6565b91610143876121f6565b9061014d88611ee4565b936101797f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a980548a6120c9565b956101826102d3565b988952602089015260408801526060870152608086015260a085015260c084015260e083015261010082015295929481946100eb565b50815115156100e6565b5080fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036101e757565b600080fd5b634e487b7160e01b600052604160045260246000fd5b610120810190811067ffffffffffffffff82111761021f57604052565b6101ec565b6040810190811067ffffffffffffffff82111761021f57604052565b6060810190811067ffffffffffffffff82111761021f57604052565b60a0810190811067ffffffffffffffff82111761021f57604052565b60e0810190811067ffffffffffffffff82111761021f57604052565b610180810190811067ffffffffffffffff82111761021f57604052565b90601f8019910116810190811067ffffffffffffffff82111761021f57604052565b604051906102e082610202565b565b604051906080820182811067ffffffffffffffff82111761021f57604052565b604051906102e082610224565b604051906102e08261025c565b60405190610100820182811067ffffffffffffffff82111761021f57604052565b604051906102e082610294565b60405190610200820182811067ffffffffffffffff82111761021f57604052565b67ffffffffffffffff811161021f5760051b60200190565b81601f820112156101e75780359161039a8361036b565b926103a860405194856102b1565b808452602092838086019260051b8201019283116101e7578301905b8282106103d2575050505090565b83809183356103e0816101c9565b8152019101906103c4565b60005b8381106103fe5750506000910152565b81810151838201526020016103ee565b90602091610427815180928185528580860191016103eb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010190565b908082519081815260208091019281808460051b8301019501936000915b84831061047f5750505050505090565b9091929394958480600192601f198582030186528951906104a881835160018060a01b03169052565b8183015173ffffffffffffffffffffffffffffffffffffffff168184015260408281015173ffffffffffffffffffffffffffffffffffffffff1690820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e0808301519082015261010080830151908201526101208083015190820152610140808301519082015261016080830151908201526105766105626101808085015190610200809186015284019061040e565b6101a080850151908483039085015261040e565b916101c080820151908301526101e080910151910152980193019301919493929061046f565b908082519081815260208091019281808460051b8301019501936000915b8483106105ca5750505050505090565b90919293949584806106ad600193601f198682030187528a516105f582825160018060a01b03169052565b8084015173ffffffffffffffffffffffffffffffffffffffff168285015260408181015173ffffffffffffffffffffffffffffffffffffffff1690830152606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015160ff1690830152610100808201519083015261012080820151908301526106996101408083015190610180809186015284019061040e565b91610160809201519181840391015261040e565b98019301930191949392906105ba565b90815180825260208080930193019160005b8281106106dd575050505090565b8351805173ffffffffffffffffffffffffffffffffffffffff16865282015185830152604090940193928101926001016106cf565b90815180825260208080930193019160005b828110610732575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610724565b90815180825260208080930193019160005b82811061077c575050505090565b83518552938101939281019260010161076e565b908082519081815260208091019281808460051b8301019501936000915b8483106107be5750505050505090565b9091929394958480610852600193601f198682030187528a51805182526107f2848201518584019060018060a01b03169052565b60408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015261083e60e080830151906101208091860152840190610712565b91610100809201519181840391015261075c565b98019301930191949392906107ae565b916109259391610917916060855281516108c161088d610120928360608a0152610180890190610451565b60208501518882037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00160808a015261059c565b92604081015160a0880152606081015160c0880152608081015160e088015260a081015191610100928389015260c08201519088015260e0810151610140880152015161016086015284820360208601526106bd565b916040818403910152610790565b90565b90815180825260208080930193019160005b828110610948575050505090565b835180518652808301518684015260408082015173ffffffffffffffffffffffffffffffffffffffff169087015260608082015169ffffffffffffffffffff169087015260809081015115159086015260a0909401939281019260010161093a565b90929160409182810194838252805180965260609586830190878160051b850101956020809401926000915b8383106109f3575050505050610925949550818403910152610928565b909192939785808c600193605f198b82030187528c519160ff835116825280610a3b610a2b868601516080808988015286019061040e565b898601518582038b87015261040e565b9301519101529a0193019301919392906109d6565b346101e7576080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126101e75767ffffffffffffffff6004358181116101e757610aa0903690600401610383565b6024358281116101e757610ab8903690600401610383565b6044358381116101e757610ad0903690600401610383565b906064359384116101e757610aec610af2943690600401610383565b92610d98565b90610110604051928392836109aa565b346101e7576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126101e75767ffffffffffffffff6004358181116101e757610b52903690600401610383565b906024358181116101e757610b6b903690600401610383565b916044359182116101e75761011092610b8b610b91933690600401610383565b91611a4b565b604051918291602083526020830190610928565b60405190610bb282610202565b8160608152606060208201526101006000918260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b90610bf68261036b565b604090610c05825191826102b1565b8381528093610c16601f199161036b565b0190600092835b838110610c2b575050505050565b815190608082019180831067ffffffffffffffff84111761021f576020928452868152606087849180838501528087850152830152828601015201610c1d565b634e487b7160e01b600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610cae5760010190565b610c6b565b8051821015610cc75760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b908160209103126101e7575160ff811681036101e75790565b6040513d6000823e3d90fd5b6020818303126101e757805167ffffffffffffffff918282116101e757019082601f830112156101e757815190811161021f5760405192610d6b601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001856102b1565b818452602082840101116101e75761092591602080850191016103eb565b908160209103126101e7575190565b939092610da58551610bec565b9260005b865181101561104357610df8610ddf610ddf610dc5848b610cb3565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b906040805180809463313ce56760e01b8252602092839160049788915afa928315610f9557848c8793600096610fff575b50610ddf610ddf610dc5600094610e3f94610cb3565b82517f06fdde0300000000000000000000000000000000000000000000000000000000815293849182905afa918215610f9557858d8892600095610fcf575b50610ddf610ddf610dc5600094610e9494610cb3565b83517f95d89b4100000000000000000000000000000000000000000000000000000000815292839182905afa908115610f9557868e8692600094610f9a575b50610ddf610dc5610ee793610ddf93610cb3565b83517f18160ddd00000000000000000000000000000000000000000000000000000000815298899182905afa938415610f9557610f6197600095610f66575b50610f3b610f326102e2565b60ff9097168752565b8501528301526060820152610f508288610cb3565b52610f5b8187610cb3565b50610c81565b610da9565b81610f879296503d8711610f8e575b610f7f81836102b1565b810190610d89565b9338610f26565b503d610f75565b610cf6565b610dc5610ee793610fc4610ddf93610ddf95983d8091833e610fbc81836102b1565b810190610d02565b969350935050610ed3565b610ddf610dc5600094610ff3610ddf94610e94969a3d8091833e610fbc81836102b1565b98945094505050610e7e565b610e3f919650610ddf610dc5600094611030610ddf948a3d8c1161103c575b61102881836102b1565b810190610cdd565b99945094505050610e29565b503d61101e565b50909193610925939550611a4b565b9061105c8261036b565b60409061106b825191826102b1565b838152809361107c601f199161036b565b0191600090815b848110611091575050505050565b602090825161109f81610224565b848152828581830152828701015201611083565b91906110bf8351611052565b92600090815b81518110156111b7576110db610dc58284610cb3565b906110ef610ddf610ddf610dc58487610cb3565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015292906020908190859060249082905afa908115610f9557611193948792611198575b5061117b61115f610302565b73ffffffffffffffffffffffffffffffffffffffff9094168452565b8201526111888289610cb3565b52610f5b8188610cb3565b6110c5565b816111b09293503d8411610f8e57610f7f81836102b1565b9038611153565b50505050565b81601f820112156101e7578051916111d48361036b565b926111e260405194856102b1565b808452602092838086019260051b8201019283116101e7578301905b82821061120c575050505090565b838091835161121a816101c9565b8152019101906111fe565b81601f820112156101e75780519161123c8361036b565b9261124a60405194856102b1565b808452602092838086019260051b8201019283116101e7578301905b828210611274575050505090565b81518152908301908301611266565b60209081818403126101e757805167ffffffffffffffff918282116101e757019083601f830112156101e75781516112ba8161036b565b9460406112c9815197886102b1565b828752858088019360051b860101948286116101e757868101935b8685106112f657505050505050505090565b84518681116101e75782019060609081601f1984880301126101e75784519161131e83610240565b8a8401518352858401518981116101e757878c61133d928701016111bd565b8b840152830151918883116101e75761135d878c80969581960101611225565b868201528152019401936112e4565b906113768261036b565b604090611385825191826102b1565b8381528093611396601f199161036b565b019160005b8381106113a85750505050565b60209082516113b681610202565b6000815282600081830152600085830152606060008184015260006080840152600060a0840152600060c08401528060e084015261010083015282860101520161139b565b51906fffffffffffffffffffffffffffffffff821682036101e757565b906020828203126101e757815167ffffffffffffffff928382116101e757019060a0828203126101e7576040519261144f8461025c565b825161145a816101c9565b8452611468602084016113fb565b6020850152611479604084016113fb565b604085015260608301518181116101e75782611496918501611225565b606085015260808301519081116101e7576114b192016111bd565b608082015290565b906020828203126101e757815167ffffffffffffffff928382116101e75701906040828203126101e757604051926114f084610224565b8251845260208301519081116101e75761150a9201611225565b602082015290565b6040517f5ea3f4fa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152909291906000818060248101038173ffffffffffffffffffffffffffffffffffffffff86165afa908115610f9557600091611919575b50611595815161136c565b9060005b8151811015611912578060006115b26115d39385610cb3565b515160405180948192631526fe2760e01b8352600483019190602083019252565b038173ffffffffffffffffffffffffffffffffffffffff89165afa918215610f95576000926118ed575b50815161161f9073ffffffffffffffffffffffffffffffffffffffff16610ddf565b6116298285610cb3565b5151835190919061164f9073ffffffffffffffffffffffffffffffffffffffff16610ddf565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201529490602090869060249082905afa918215610f9557611730956000936118cc575b5060208201516fffffffffffffffffffffffffffffffff1660008c6116d7888b610cb3565b51516040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff909116602482015297889081906044820190565b038173ffffffffffffffffffffffffffffffffffffffff8e165afa8015610f95578a976000916118a9575b505191602061176a888b610cb3565b51015193604061177a898c610cb3565b5101516040517f68e2f7b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909a9197916020918c916024918391165afa918215610f95576118789a60009361187d575b506040015161182a906fffffffffffffffffffffffffffffffff165b9361180a6102d3565b998a5273ffffffffffffffffffffffffffffffffffffffff1660208a0152565b60408801526fffffffffffffffffffffffffffffffff809316606088015260808701521660a085015260c084015260e083015261010082015261186d8286610cb3565b52610f5b8185610cb3565b611599565b61182a91935060406118a06118019260203d602011610f8e57610f7f81836102b1565b949250506117e5565b6118c691503d806000833e6118be81836102b1565b8101906114b9565b3861175b565b6118e691935060203d602011610f8e57610f7f81836102b1565b91386116b2565b61190b9192503d806000833e61190381836102b1565b810190611418565b90386115fd565b5050925050565b61193691503d806000833e61192e81836102b1565b810190611283565b3861158a565b6040519061194982610224565b600382527f34303100000000000000000000000000000000000000000000000000000000006020830152565b1561197d5750565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201529081906119bb90602483019061040e565b0390fd5b906119c98261036b565b6040906119d8825191826102b1565b83815280936119e9601f199161036b565b019160005b8381106119fb5750505050565b6020908251611a098161025c565b600081528260008183015260008583015260006060830152600060808301528286010152016119ee565b908160209103126101e7575180151581036101e75790565b90929192611a658451825114611a5f61193c565b90611975565b611a6f82516119bf565b60005b8351811015611d3957611a8e610ddf610ddf610dc58487610cb3565b604080517f50d25bcd00000000000000000000000000000000000000000000000000000000815260209392909160049185908490849082905afa928315610f9557600093611d18575b50819085611aee610ddf610ddf610dc5898d610cb3565b82517f8205bf6a00000000000000000000000000000000000000000000000000000000815293849182905afa918215610f9557839187878c8c94600097611cdd575b50610ddf610dc583611b4b610dc5611b5196610ddf96610cb3565b97610cb3565b82517f668a0f0200000000000000000000000000000000000000000000000000000000815294859182905afa928315610f9557878e8a92600096611cac575b50610ddf610dc5611ba493610ddf93610cb3565b82517fc6b050c100000000000000000000000000000000000000000000000000000000815296879182905afa938415610f9557611c5c98611c4796600096611c61575b5092611c3e9492611c2a9269ffffffffffffffffffff95611c0661030f565b9a8b528a015273ffffffffffffffffffffffffffffffffffffffff90911690880152565b1669ffffffffffffffffffff166060850152565b15156080830152565b611c518285610cb3565b52610f5b8184610cb3565b611a72565b81965092611c2a92611c98611c3e979569ffffffffffffffffffff97943d8b11611ca5575b611c9081836102b1565b810190611a33565b9792955092509294611be7565b503d611c86565b610ddf919650610dc5611ba493611cd2610ddf93873d8911610f8e57610f7f81836102b1565b989350935050611b90565b610ddf919750610dc583611b4b610dc5611b5196611d0a610ddf968a3d8c11610f8e57610f7f81836102b1565b9c9650505050935050611b30565b82919350611d3290863d8811610f8e57610f7f81836102b1565b9290611ad7565b5093505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b1896020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9856020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98a6020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9886020526040902090565b9060405191828154918282526020928383019160005283600020936000905b828210611e8d575050506102e0925003836102b1565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958895509381019390910190611e77565b906b033b2e3c9fd0803ce8000000918201809211610cae57565b91908201809211610cae57565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98760205260408120909190604051808281935480845260208094019160005283600020936000905b828210611fac57505050611f5e925003826102b1565b6000925b8151841015611fa557611f99611f9f91611f92611f82610dc58887610cb3565b611f8c8188611fdc565b906125d3565b5090611ed7565b93610c81565b92611f62565b9250505090565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958795509381019390910190611f48565b6120c2610925926120ab611fef82611d86565b93600460405195611fff87610278565b80548752600181015473ffffffffffffffffffffffffffffffffffffffff90811660208901526002820154811660408901526003820154908116606089015260ff60a082901c811660808a015261205e915b60a81c16151560a0890152565b015460c086015273ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9866020526040902090565b9060018060a01b0316600052602052604060002090565b549061257e565b9190916000916120d882611dcc565b90604051808381945480845260208094019188528388209388905b82821061215c57505050612109925003836102b1565b835b825185101561214d576121416121479161213b61212b610dc58988610cb3565b612135818961233e565b9061287a565b90611ed7565b94610c81565b9361210b565b915093915061092592506121c6565b855473ffffffffffffffffffffffffffffffffffffffff16845260019586019588955093810193909101906120f3565b7812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2181116101e7576706f05b59d3b20000670de0b6b3a7640000809202010490565b816706f05b59d3b200001904811115821517156101e757670de0b6b3a764000091026706f05b59d3b20000010490565b60009061220281611dcc565b604051808281935480845260208094019160005283600020936000905b82821061226957505050612235925003826102b1565b6000925b8151841015611fa557611f996122639161213b612259610dc58887610cb3565b612135818861233e565b92612239565b855473ffffffffffffffffffffffffffffffffffffffff168452600195860195879550938101939091019061221f565b906102e061233560076122aa61031c565b85548152600186015473ffffffffffffffffffffffffffffffffffffffff16602082015294600281015473ffffffffffffffffffffffffffffffffffffffff16604087015260038101546060870152600481015473ffffffffffffffffffffffffffffffffffffffff166080870152600581015460a0870152600681015460c0870152015460ff1690565b151560e0840152565b6124749061246e612459612443856120ab61235882611e12565b956123fd6123f4600761236961031c565b8a54815260018b015473ffffffffffffffffffffffffffffffffffffffff16602082015299600281015473ffffffffffffffffffffffffffffffffffffffff1660408c0152600381015460608c0152600481015473ffffffffffffffffffffffffffffffffffffffff1660808c0152600581015460a08c0152600681015460c08c0152015460ff1690565b151560e0890152565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b18a6020526040902090565b546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b90612500565b90811561249e576109259161249361248e61249993611d40565b6129f5565b906124a5565b6124e1565b5050600090565b816b019d971e4fe8401e740000001904811115821517156101e7576b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b90631dcd6500633b9aca00808404930610156124f957565b9060010190565b608001516040517f07a2d13a00000000000000000000000000000000000000000000000000000000815260048101929092526020908290602490829073ffffffffffffffffffffffffffffffffffffffff165afa908115610f9557600091612566575090565b610925915060203d8111610f8e57610f7f81836102b1565b6060015173ffffffffffffffffffffffffffffffffffffffff169081156125ce576020906024604051809481936303d1689d60e11b835260048301525afa908115610f9557600091612566575090565b905090565b6126a792916126b76125e76126bf93611d86565b6126b2604051936125f785610278565b82548552600183015473ffffffffffffffffffffffffffffffffffffffff90811660208701526002840154909360049161264b9086165b73ffffffffffffffffffffffffffffffffffffffff166040890152565b600381015494851673ffffffffffffffffffffffffffffffffffffffff16606088015261268a60ff6080890196612051828260a01c16899060ff169052565b015460c08601526126ad61269d86612766565b9889945160ff1690565b60ff1690565b6127f3565b6121c6565b9051906121c6565b9190565b6126a792916126b26126d76126bf93611d86565b916126ad61275c6040516126ea81610278565b85548152600186015473ffffffffffffffffffffffffffffffffffffffff90811660208301526002870154811660408301526003870154908116606083015260ff60a082901c8116608084019081529760049290916127509160a81c16151560a0850152565b015460c0820152612766565b9687945160ff1690565b6020908101516040517f50d25bcd00000000000000000000000000000000000000000000000000000000815291908290600490829073ffffffffffffffffffffffffffffffffffffffff165afa908115610f9557600091612566575090565b91908203918211610cae57565b604d8111610cae57600a0a90565b81810292918115918404141715610cae57565b601281101561281a576012039060128211610cae57612814610925926127d2565b906127e0565b60128111612826575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8101908111610cae57612859906127d2565b908115612864570490565b634e487b7160e01b600052601260045260246000fd5b906126b761288a61092593611e12565b9161293361292a600761289b61031c565b86548152600187015473ffffffffffffffffffffffffffffffffffffffff1660208201529560028101546128e49073ffffffffffffffffffffffffffffffffffffffff1661262e565b60038101546060880152600481015473ffffffffffffffffffffffffffffffffffffffff166080880152600581015460a0880152600681015460c0880152015460ff1690565b151560e0850152565b6126b283612766565b906126b261294c61092593611e12565b6129f06129e7600761295c61031c565b84548152600185015473ffffffffffffffffffffffffffffffffffffffff16602082015293600281015473ffffffffffffffffffffffffffffffffffffffff16604086015260038101546060860152600481015473ffffffffffffffffffffffffffffffffffffffff166080860152600581015460a0860152600681015460c0860152015460ff1690565b151560e0830152565b612766565b600481015473ffffffffffffffffffffffffffffffffffffffff811615612a515764ffffffffff8042169160a01c161461244357610925906fffffffffffffffffffffffffffffffff612a484283612a63565b915416906124a5565b50506b033b2e3c9fd0803ce800000090565b60048101549091612a7e9160a01c64ffffffffff16906127c5565b8015612a5157612b35612b11612b35612b30612b00612b1695612b2a612b23610925996000198401978891600060028711600014612b3a5750612b11612b1c612ad461245960026001198b01955b015460801c90565b9d8e612b11612b0a612b00612af9612aec85806124a5565b66038882915c4000900490565b93846124a5565b6301e13380900490565b978b6127e0565b6127e0565b60011c90565b9a876127e0565b6006900490565b966127e0565b611ebd565b611ed7565b612b1c612ad46124596002612b119495612acc565b612b86612b807f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a980546126b2846121f6565b91611ee4565b9080821015612b96575050600090565b8103908111610cae5790565b90612bac8261036b565b604090612bbb825191826102b1565b8381528093612bcc601f199161036b565b019160005b838110612bde5750505050565b6020908251612bec81610294565b6000815282600081830152600085830152606060008184015260006080840152600060a0840152600060c0840152600060e08401526000610100840152600061012084015280610140840152610160830152828601015201612bd1565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98760205260408120606093919290612ca190611e58565b611e58565b805180612cad57505050565b612cba9192939550612ba2565b9260005b8251811015612eee57612cd4610dc58285610cb3565b6040517f313ce56700000000000000000000000000000000000000000000000000000000815260049073ffffffffffffffffffffffffffffffffffffffff83169060209081818581865afa908115610f9557600091612ed1575b50612d39858a611fdc565b612d4381876126c3565b939086612d4f89611d86565b015492612d7b6003612d608b611d86565b015473ffffffffffffffffffffffffffffffffffffffff1690565b612d8c610ddf6001612d608d611d86565b612d958b611d86565b5494604051996395d89b4160e01b8b5260008b8d81845afa9a8b15610f955760009b612eb2575b506000906040519c8d80926306fdde0360e01b82525afa9a8b15610f955760009b612e95575b50612deb61033d565b73ffffffffffffffffffffffffffffffffffffffff909c168c5273ffffffffffffffffffffffffffffffffffffffff909116908b015273ffffffffffffffffffffffffffffffffffffffff1660408a01526060890152608088015260a087015260c086015260ff1660e085015284610100850152610120840152610140830152610160820152612e7b8287610cb3565b52612e868186610cb3565b50612e9090610c81565b612cbe565b612eab919b503d806000833e610fbc81836102b1565b9938612de2565b6000919b50612eca903d8084833e610fbc81836102b1565b9a90612dbc565b612ee89150823d841161103c5761102881836102b1565b38612d2e565b509293915050565b90612f008261036b565b604090612f0f825191826102b1565b8381528093612f20601f199161036b565b019160005b838110612f325750505050565b602090612f3d61034a565b6000815282600081830152600085830152606060008184015260006080840152600060a0840152600060c0840152600060e08401526000610100840152600061012084015260006101408401526000610160840152806101808401526101a083015260006101c083015260006101e0830152828601015201612f25565b606091600091612fcc612c9c82611dcc565b805180612fd857505050565b612fe59192939550612ef6565b9260005b8251811015612eee57612fff610dc58285610cb3565b61301061300b82611e12565b612299565b61301a82876133a7565b91613025818861233e565b90613030848261293c565b60009060009560009161304a610ddf6004612d6088611d40565b6132a4575b60208701516004949392919061307a9073ffffffffffffffffffffffffffffffffffffffff16610ddf565b608089015190999073ffffffffffffffffffffffffffffffffffffffff169360c08a01519860a08b01519a519460208d6040519a8b80926350d25bcd60e01b82525afa968715610f9557600499600098613283575b506040517f95d89b41000000000000000000000000000000000000000000000000000000008152996000908b908173ffffffffffffffffffffffffffffffffffffffff8f165afa998a15610f955760009a613266575b506040517f06fdde030000000000000000000000000000000000000000000000000000000081529a60008c60048173ffffffffffffffffffffffffffffffffffffffff85165afa9b8c15610f955760009c613249575b5061318461034a565b73ffffffffffffffffffffffffffffffffffffffff90911681529d8e9073ffffffffffffffffffffffffffffffffffffffff16602082015273ffffffffffffffffffffffffffffffffffffffff9091166040919091015260608d015260808c015260a08b015260c08a015260e0890152886101008901526101208801526101408701526101608601526101808501526101a08401526101c08301526101e082015261322f8287610cb3565b5261323a8186610cb3565b5061324490610c81565b612fe9565b61325f919c503d806000833e610fbc81836102b1565b9a3861317b565b61327c919a503d806000833e610fbc81836102b1565b9838613125565b61329d91985060203d602011610f8e57610f7f81836102b1565b96386130cf565b96509150506132ba6132b583611d40565b6135c8565b946132cc6132c784611d40565b6134ac565b7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98b5461330f90610ddf9073ffffffffffffffffffffffffffffffffffffffff1681565b6040517fb50d882c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152670de0b6b3a764000060248201529390602090859060449082905afa8015610f9557600494600091613388575b509350909161304f565b6133a1915060203d602011610f8e57610f7f81836102b1565b3861337e565b6134a5610925926120ab6133ba82611e12565b9361345f61345660076133cb61031c565b88548152600189015473ffffffffffffffffffffffffffffffffffffffff16602082015297600281015473ffffffffffffffffffffffffffffffffffffffff1660408a0152600381015460608a0152600481015473ffffffffffffffffffffffffffffffffffffffff1660808a0152600581015460a08a0152600681015460c08a0152015460ff1690565b151560e0870152565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9896020526040902090565b5490612500565b6004015473ffffffffffffffffffffffffffffffffffffffff166134e36134dd6134d861294c84611e12565b61218c565b9161351b565b801561249e57600a916134f5916134f9565b0490565b8160011c90670de0b6b3a7640000908183190481118415176101e75702010490565b7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98b5473ffffffffffffffffffffffffffffffffffffffff9081169190821561359c5760446020926040519485938492632d43620b60e21b8452166004830152670de0b6b3a764000060248301525afa908115610f9557600091612566575090565b505050600090565b9190916fffffffffffffffffffffffffffffffff80809416911601918211610cae57565b6135d1816134ac565b80156136b0576136486135e8612459845460801c90565b8083119283156136a257906135fc916127c5565b612493600185015461363f61245961362760028901546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff84166135a4565b9060801c6136d0565b9061367057612b3561245960036109259401546fffffffffffffffffffffffffffffffff1690565b61369c61369661245960036109259501546fffffffffffffffffffffffffffffffff1690565b91611ebd565b906136d0565b6136ab916127c5565b6135fc565b5060030154610925906fffffffffffffffffffffffffffffffff16612459565b8160011c906b033b2e3c9fd0803ce8000000908183190481118415176101e75702010490565b613702612b80826121f6565b90801561249e57610925916134f956fea26469706673582212202c3d80b82f43d62754331b740beb0f020654586995dfba6cf0ca13c2cbc337ce64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c908163981d11da1461004a57508063ba9c6864146100455763d297f19d1461004057600080fd5b610b02565b610a50565b346101c6576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126101c65760043590610086826101c9565b60243567ffffffffffffffff81116101c2576100a6903690600401610383565b90604435906100b4826101c9565b6100bc610ba5565b5050826100c7610ba5565b926100d182612fba565b6100da84612c49565b918351158015906101b8575b610114575b85886101106101048a6100fe858b6110b3565b94611512565b60405193849384610862565b0390f35b61011096949750916100fe9391869361012f61010498612b4f565b92610139866136f6565b91610143876121f6565b9061014d88611ee4565b936101797f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a980548a6120c9565b956101826102d3565b988952602089015260408801526060870152608086015260a085015260c084015260e083015261010082015295929481946100eb565b50815115156100e6565b5080fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036101e757565b600080fd5b634e487b7160e01b600052604160045260246000fd5b610120810190811067ffffffffffffffff82111761021f57604052565b6101ec565b6040810190811067ffffffffffffffff82111761021f57604052565b6060810190811067ffffffffffffffff82111761021f57604052565b60a0810190811067ffffffffffffffff82111761021f57604052565b60e0810190811067ffffffffffffffff82111761021f57604052565b610180810190811067ffffffffffffffff82111761021f57604052565b90601f8019910116810190811067ffffffffffffffff82111761021f57604052565b604051906102e082610202565b565b604051906080820182811067ffffffffffffffff82111761021f57604052565b604051906102e082610224565b604051906102e08261025c565b60405190610100820182811067ffffffffffffffff82111761021f57604052565b604051906102e082610294565b60405190610200820182811067ffffffffffffffff82111761021f57604052565b67ffffffffffffffff811161021f5760051b60200190565b81601f820112156101e75780359161039a8361036b565b926103a860405194856102b1565b808452602092838086019260051b8201019283116101e7578301905b8282106103d2575050505090565b83809183356103e0816101c9565b8152019101906103c4565b60005b8381106103fe5750506000910152565b81810151838201526020016103ee565b90602091610427815180928185528580860191016103eb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010190565b908082519081815260208091019281808460051b8301019501936000915b84831061047f5750505050505090565b9091929394958480600192601f198582030186528951906104a881835160018060a01b03169052565b8183015173ffffffffffffffffffffffffffffffffffffffff168184015260408281015173ffffffffffffffffffffffffffffffffffffffff1690820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e0808301519082015261010080830151908201526101208083015190820152610140808301519082015261016080830151908201526105766105626101808085015190610200809186015284019061040e565b6101a080850151908483039085015261040e565b916101c080820151908301526101e080910151910152980193019301919493929061046f565b908082519081815260208091019281808460051b8301019501936000915b8483106105ca5750505050505090565b90919293949584806106ad600193601f198682030187528a516105f582825160018060a01b03169052565b8084015173ffffffffffffffffffffffffffffffffffffffff168285015260408181015173ffffffffffffffffffffffffffffffffffffffff1690830152606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015160ff1690830152610100808201519083015261012080820151908301526106996101408083015190610180809186015284019061040e565b91610160809201519181840391015261040e565b98019301930191949392906105ba565b90815180825260208080930193019160005b8281106106dd575050505090565b8351805173ffffffffffffffffffffffffffffffffffffffff16865282015185830152604090940193928101926001016106cf565b90815180825260208080930193019160005b828110610732575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610724565b90815180825260208080930193019160005b82811061077c575050505090565b83518552938101939281019260010161076e565b908082519081815260208091019281808460051b8301019501936000915b8483106107be5750505050505090565b9091929394958480610852600193601f198682030187528a51805182526107f2848201518584019060018060a01b03169052565b60408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015261083e60e080830151906101208091860152840190610712565b91610100809201519181840391015261075c565b98019301930191949392906107ae565b916109259391610917916060855281516108c161088d610120928360608a0152610180890190610451565b60208501518882037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00160808a015261059c565b92604081015160a0880152606081015160c0880152608081015160e088015260a081015191610100928389015260c08201519088015260e0810151610140880152015161016086015284820360208601526106bd565b916040818403910152610790565b90565b90815180825260208080930193019160005b828110610948575050505090565b835180518652808301518684015260408082015173ffffffffffffffffffffffffffffffffffffffff169087015260608082015169ffffffffffffffffffff169087015260809081015115159086015260a0909401939281019260010161093a565b90929160409182810194838252805180965260609586830190878160051b850101956020809401926000915b8383106109f3575050505050610925949550818403910152610928565b909192939785808c600193605f198b82030187528c519160ff835116825280610a3b610a2b868601516080808988015286019061040e565b898601518582038b87015261040e565b9301519101529a0193019301919392906109d6565b346101e7576080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126101e75767ffffffffffffffff6004358181116101e757610aa0903690600401610383565b6024358281116101e757610ab8903690600401610383565b6044358381116101e757610ad0903690600401610383565b906064359384116101e757610aec610af2943690600401610383565b92610d98565b90610110604051928392836109aa565b346101e7576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126101e75767ffffffffffffffff6004358181116101e757610b52903690600401610383565b906024358181116101e757610b6b903690600401610383565b916044359182116101e75761011092610b8b610b91933690600401610383565b91611a4b565b604051918291602083526020830190610928565b60405190610bb282610202565b8160608152606060208201526101006000918260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b90610bf68261036b565b604090610c05825191826102b1565b8381528093610c16601f199161036b565b0190600092835b838110610c2b575050505050565b815190608082019180831067ffffffffffffffff84111761021f576020928452868152606087849180838501528087850152830152828601015201610c1d565b634e487b7160e01b600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610cae5760010190565b610c6b565b8051821015610cc75760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b908160209103126101e7575160ff811681036101e75790565b6040513d6000823e3d90fd5b6020818303126101e757805167ffffffffffffffff918282116101e757019082601f830112156101e757815190811161021f5760405192610d6b601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016602001856102b1565b818452602082840101116101e75761092591602080850191016103eb565b908160209103126101e7575190565b939092610da58551610bec565b9260005b865181101561104357610df8610ddf610ddf610dc5848b610cb3565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b906040805180809463313ce56760e01b8252602092839160049788915afa928315610f9557848c8793600096610fff575b50610ddf610ddf610dc5600094610e3f94610cb3565b82517f06fdde0300000000000000000000000000000000000000000000000000000000815293849182905afa918215610f9557858d8892600095610fcf575b50610ddf610ddf610dc5600094610e9494610cb3565b83517f95d89b4100000000000000000000000000000000000000000000000000000000815292839182905afa908115610f9557868e8692600094610f9a575b50610ddf610dc5610ee793610ddf93610cb3565b83517f18160ddd00000000000000000000000000000000000000000000000000000000815298899182905afa938415610f9557610f6197600095610f66575b50610f3b610f326102e2565b60ff9097168752565b8501528301526060820152610f508288610cb3565b52610f5b8187610cb3565b50610c81565b610da9565b81610f879296503d8711610f8e575b610f7f81836102b1565b810190610d89565b9338610f26565b503d610f75565b610cf6565b610dc5610ee793610fc4610ddf93610ddf95983d8091833e610fbc81836102b1565b810190610d02565b969350935050610ed3565b610ddf610dc5600094610ff3610ddf94610e94969a3d8091833e610fbc81836102b1565b98945094505050610e7e565b610e3f919650610ddf610dc5600094611030610ddf948a3d8c1161103c575b61102881836102b1565b810190610cdd565b99945094505050610e29565b503d61101e565b50909193610925939550611a4b565b9061105c8261036b565b60409061106b825191826102b1565b838152809361107c601f199161036b565b0191600090815b848110611091575050505050565b602090825161109f81610224565b848152828581830152828701015201611083565b91906110bf8351611052565b92600090815b81518110156111b7576110db610dc58284610cb3565b906110ef610ddf610ddf610dc58487610cb3565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015292906020908190859060249082905afa908115610f9557611193948792611198575b5061117b61115f610302565b73ffffffffffffffffffffffffffffffffffffffff9094168452565b8201526111888289610cb3565b52610f5b8188610cb3565b6110c5565b816111b09293503d8411610f8e57610f7f81836102b1565b9038611153565b50505050565b81601f820112156101e7578051916111d48361036b565b926111e260405194856102b1565b808452602092838086019260051b8201019283116101e7578301905b82821061120c575050505090565b838091835161121a816101c9565b8152019101906111fe565b81601f820112156101e75780519161123c8361036b565b9261124a60405194856102b1565b808452602092838086019260051b8201019283116101e7578301905b828210611274575050505090565b81518152908301908301611266565b60209081818403126101e757805167ffffffffffffffff918282116101e757019083601f830112156101e75781516112ba8161036b565b9460406112c9815197886102b1565b828752858088019360051b860101948286116101e757868101935b8685106112f657505050505050505090565b84518681116101e75782019060609081601f1984880301126101e75784519161131e83610240565b8a8401518352858401518981116101e757878c61133d928701016111bd565b8b840152830151918883116101e75761135d878c80969581960101611225565b868201528152019401936112e4565b906113768261036b565b604090611385825191826102b1565b8381528093611396601f199161036b565b019160005b8381106113a85750505050565b60209082516113b681610202565b6000815282600081830152600085830152606060008184015260006080840152600060a0840152600060c08401528060e084015261010083015282860101520161139b565b51906fffffffffffffffffffffffffffffffff821682036101e757565b906020828203126101e757815167ffffffffffffffff928382116101e757019060a0828203126101e7576040519261144f8461025c565b825161145a816101c9565b8452611468602084016113fb565b6020850152611479604084016113fb565b604085015260608301518181116101e75782611496918501611225565b606085015260808301519081116101e7576114b192016111bd565b608082015290565b906020828203126101e757815167ffffffffffffffff928382116101e75701906040828203126101e757604051926114f084610224565b8251845260208301519081116101e75761150a9201611225565b602082015290565b6040517f5ea3f4fa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152909291906000818060248101038173ffffffffffffffffffffffffffffffffffffffff86165afa908115610f9557600091611919575b50611595815161136c565b9060005b8151811015611912578060006115b26115d39385610cb3565b515160405180948192631526fe2760e01b8352600483019190602083019252565b038173ffffffffffffffffffffffffffffffffffffffff89165afa918215610f95576000926118ed575b50815161161f9073ffffffffffffffffffffffffffffffffffffffff16610ddf565b6116298285610cb3565b5151835190919061164f9073ffffffffffffffffffffffffffffffffffffffff16610ddf565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201529490602090869060249082905afa918215610f9557611730956000936118cc575b5060208201516fffffffffffffffffffffffffffffffff1660008c6116d7888b610cb3565b51516040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff909116602482015297889081906044820190565b038173ffffffffffffffffffffffffffffffffffffffff8e165afa8015610f95578a976000916118a9575b505191602061176a888b610cb3565b51015193604061177a898c610cb3565b5101516040517f68e2f7b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909a9197916020918c916024918391165afa918215610f95576118789a60009361187d575b506040015161182a906fffffffffffffffffffffffffffffffff165b9361180a6102d3565b998a5273ffffffffffffffffffffffffffffffffffffffff1660208a0152565b60408801526fffffffffffffffffffffffffffffffff809316606088015260808701521660a085015260c084015260e083015261010082015261186d8286610cb3565b52610f5b8185610cb3565b611599565b61182a91935060406118a06118019260203d602011610f8e57610f7f81836102b1565b949250506117e5565b6118c691503d806000833e6118be81836102b1565b8101906114b9565b3861175b565b6118e691935060203d602011610f8e57610f7f81836102b1565b91386116b2565b61190b9192503d806000833e61190381836102b1565b810190611418565b90386115fd565b5050925050565b61193691503d806000833e61192e81836102b1565b810190611283565b3861158a565b6040519061194982610224565b600382527f34303100000000000000000000000000000000000000000000000000000000006020830152565b1561197d5750565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201529081906119bb90602483019061040e565b0390fd5b906119c98261036b565b6040906119d8825191826102b1565b83815280936119e9601f199161036b565b019160005b8381106119fb5750505050565b6020908251611a098161025c565b600081528260008183015260008583015260006060830152600060808301528286010152016119ee565b908160209103126101e7575180151581036101e75790565b90929192611a658451825114611a5f61193c565b90611975565b611a6f82516119bf565b60005b8351811015611d3957611a8e610ddf610ddf610dc58487610cb3565b604080517f50d25bcd00000000000000000000000000000000000000000000000000000000815260209392909160049185908490849082905afa928315610f9557600093611d18575b50819085611aee610ddf610ddf610dc5898d610cb3565b82517f8205bf6a00000000000000000000000000000000000000000000000000000000815293849182905afa918215610f9557839187878c8c94600097611cdd575b50610ddf610dc583611b4b610dc5611b5196610ddf96610cb3565b97610cb3565b82517f668a0f0200000000000000000000000000000000000000000000000000000000815294859182905afa928315610f9557878e8a92600096611cac575b50610ddf610dc5611ba493610ddf93610cb3565b82517fc6b050c100000000000000000000000000000000000000000000000000000000815296879182905afa938415610f9557611c5c98611c4796600096611c61575b5092611c3e9492611c2a9269ffffffffffffffffffff95611c0661030f565b9a8b528a015273ffffffffffffffffffffffffffffffffffffffff90911690880152565b1669ffffffffffffffffffff166060850152565b15156080830152565b611c518285610cb3565b52610f5b8184610cb3565b611a72565b81965092611c2a92611c98611c3e979569ffffffffffffffffffff97943d8b11611ca5575b611c9081836102b1565b810190611a33565b9792955092509294611be7565b503d611c86565b610ddf919650610dc5611ba493611cd2610ddf93873d8911610f8e57610f7f81836102b1565b989350935050611b90565b610ddf919750610dc583611b4b610dc5611b5196611d0a610ddf968a3d8c11610f8e57610f7f81836102b1565b9c9650505050935050611b30565b82919350611d3290863d8811610f8e57610f7f81836102b1565b9290611ad7565b5093505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b1896020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9856020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98a6020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9886020526040902090565b9060405191828154918282526020928383019160005283600020936000905b828210611e8d575050506102e0925003836102b1565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958895509381019390910190611e77565b906b033b2e3c9fd0803ce8000000918201809211610cae57565b91908201809211610cae57565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98760205260408120909190604051808281935480845260208094019160005283600020936000905b828210611fac57505050611f5e925003826102b1565b6000925b8151841015611fa557611f99611f9f91611f92611f82610dc58887610cb3565b611f8c8188611fdc565b906125d3565b5090611ed7565b93610c81565b92611f62565b9250505090565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958795509381019390910190611f48565b6120c2610925926120ab611fef82611d86565b93600460405195611fff87610278565b80548752600181015473ffffffffffffffffffffffffffffffffffffffff90811660208901526002820154811660408901526003820154908116606089015260ff60a082901c811660808a015261205e915b60a81c16151560a0890152565b015460c086015273ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9866020526040902090565b9060018060a01b0316600052602052604060002090565b549061257e565b9190916000916120d882611dcc565b90604051808381945480845260208094019188528388209388905b82821061215c57505050612109925003836102b1565b835b825185101561214d576121416121479161213b61212b610dc58988610cb3565b612135818961233e565b9061287a565b90611ed7565b94610c81565b9361210b565b915093915061092592506121c6565b855473ffffffffffffffffffffffffffffffffffffffff16845260019586019588955093810193909101906120f3565b7812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2181116101e7576706f05b59d3b20000670de0b6b3a7640000809202010490565b816706f05b59d3b200001904811115821517156101e757670de0b6b3a764000091026706f05b59d3b20000010490565b60009061220281611dcc565b604051808281935480845260208094019160005283600020936000905b82821061226957505050612235925003826102b1565b6000925b8151841015611fa557611f996122639161213b612259610dc58887610cb3565b612135818861233e565b92612239565b855473ffffffffffffffffffffffffffffffffffffffff168452600195860195879550938101939091019061221f565b906102e061233560076122aa61031c565b85548152600186015473ffffffffffffffffffffffffffffffffffffffff16602082015294600281015473ffffffffffffffffffffffffffffffffffffffff16604087015260038101546060870152600481015473ffffffffffffffffffffffffffffffffffffffff166080870152600581015460a0870152600681015460c0870152015460ff1690565b151560e0840152565b6124749061246e612459612443856120ab61235882611e12565b956123fd6123f4600761236961031c565b8a54815260018b015473ffffffffffffffffffffffffffffffffffffffff16602082015299600281015473ffffffffffffffffffffffffffffffffffffffff1660408c0152600381015460608c0152600481015473ffffffffffffffffffffffffffffffffffffffff1660808c0152600581015460a08c0152600681015460c08c0152015460ff1690565b151560e0890152565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b18a6020526040902090565b546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b90612500565b90811561249e576109259161249361248e61249993611d40565b6129f5565b906124a5565b6124e1565b5050600090565b816b019d971e4fe8401e740000001904811115821517156101e7576b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b90631dcd6500633b9aca00808404930610156124f957565b9060010190565b608001516040517f07a2d13a00000000000000000000000000000000000000000000000000000000815260048101929092526020908290602490829073ffffffffffffffffffffffffffffffffffffffff165afa908115610f9557600091612566575090565b610925915060203d8111610f8e57610f7f81836102b1565b6060015173ffffffffffffffffffffffffffffffffffffffff169081156125ce576020906024604051809481936303d1689d60e11b835260048301525afa908115610f9557600091612566575090565b905090565b6126a792916126b76125e76126bf93611d86565b6126b2604051936125f785610278565b82548552600183015473ffffffffffffffffffffffffffffffffffffffff90811660208701526002840154909360049161264b9086165b73ffffffffffffffffffffffffffffffffffffffff166040890152565b600381015494851673ffffffffffffffffffffffffffffffffffffffff16606088015261268a60ff6080890196612051828260a01c16899060ff169052565b015460c08601526126ad61269d86612766565b9889945160ff1690565b60ff1690565b6127f3565b6121c6565b9051906121c6565b9190565b6126a792916126b26126d76126bf93611d86565b916126ad61275c6040516126ea81610278565b85548152600186015473ffffffffffffffffffffffffffffffffffffffff90811660208301526002870154811660408301526003870154908116606083015260ff60a082901c8116608084019081529760049290916127509160a81c16151560a0850152565b015460c0820152612766565b9687945160ff1690565b6020908101516040517f50d25bcd00000000000000000000000000000000000000000000000000000000815291908290600490829073ffffffffffffffffffffffffffffffffffffffff165afa908115610f9557600091612566575090565b91908203918211610cae57565b604d8111610cae57600a0a90565b81810292918115918404141715610cae57565b601281101561281a576012039060128211610cae57612814610925926127d2565b906127e0565b60128111612826575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8101908111610cae57612859906127d2565b908115612864570490565b634e487b7160e01b600052601260045260246000fd5b906126b761288a61092593611e12565b9161293361292a600761289b61031c565b86548152600187015473ffffffffffffffffffffffffffffffffffffffff1660208201529560028101546128e49073ffffffffffffffffffffffffffffffffffffffff1661262e565b60038101546060880152600481015473ffffffffffffffffffffffffffffffffffffffff166080880152600581015460a0880152600681015460c0880152015460ff1690565b151560e0850152565b6126b283612766565b906126b261294c61092593611e12565b6129f06129e7600761295c61031c565b84548152600185015473ffffffffffffffffffffffffffffffffffffffff16602082015293600281015473ffffffffffffffffffffffffffffffffffffffff16604086015260038101546060860152600481015473ffffffffffffffffffffffffffffffffffffffff166080860152600581015460a0860152600681015460c0860152015460ff1690565b151560e0830152565b612766565b600481015473ffffffffffffffffffffffffffffffffffffffff811615612a515764ffffffffff8042169160a01c161461244357610925906fffffffffffffffffffffffffffffffff612a484283612a63565b915416906124a5565b50506b033b2e3c9fd0803ce800000090565b60048101549091612a7e9160a01c64ffffffffff16906127c5565b8015612a5157612b35612b11612b35612b30612b00612b1695612b2a612b23610925996000198401978891600060028711600014612b3a5750612b11612b1c612ad461245960026001198b01955b015460801c90565b9d8e612b11612b0a612b00612af9612aec85806124a5565b66038882915c4000900490565b93846124a5565b6301e13380900490565b978b6127e0565b6127e0565b60011c90565b9a876127e0565b6006900490565b966127e0565b611ebd565b611ed7565b612b1c612ad46124596002612b119495612acc565b612b86612b807f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a980546126b2846121f6565b91611ee4565b9080821015612b96575050600090565b8103908111610cae5790565b90612bac8261036b565b604090612bbb825191826102b1565b8381528093612bcc601f199161036b565b019160005b838110612bde5750505050565b6020908251612bec81610294565b6000815282600081830152600085830152606060008184015260006080840152600060a0840152600060c0840152600060e08401526000610100840152600061012084015280610140840152610160830152828601015201612bd1565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98760205260408120606093919290612ca190611e58565b611e58565b805180612cad57505050565b612cba9192939550612ba2565b9260005b8251811015612eee57612cd4610dc58285610cb3565b6040517f313ce56700000000000000000000000000000000000000000000000000000000815260049073ffffffffffffffffffffffffffffffffffffffff83169060209081818581865afa908115610f9557600091612ed1575b50612d39858a611fdc565b612d4381876126c3565b939086612d4f89611d86565b015492612d7b6003612d608b611d86565b015473ffffffffffffffffffffffffffffffffffffffff1690565b612d8c610ddf6001612d608d611d86565b612d958b611d86565b5494604051996395d89b4160e01b8b5260008b8d81845afa9a8b15610f955760009b612eb2575b506000906040519c8d80926306fdde0360e01b82525afa9a8b15610f955760009b612e95575b50612deb61033d565b73ffffffffffffffffffffffffffffffffffffffff909c168c5273ffffffffffffffffffffffffffffffffffffffff909116908b015273ffffffffffffffffffffffffffffffffffffffff1660408a01526060890152608088015260a087015260c086015260ff1660e085015284610100850152610120840152610140830152610160820152612e7b8287610cb3565b52612e868186610cb3565b50612e9090610c81565b612cbe565b612eab919b503d806000833e610fbc81836102b1565b9938612de2565b6000919b50612eca903d8084833e610fbc81836102b1565b9a90612dbc565b612ee89150823d841161103c5761102881836102b1565b38612d2e565b509293915050565b90612f008261036b565b604090612f0f825191826102b1565b8381528093612f20601f199161036b565b019160005b838110612f325750505050565b602090612f3d61034a565b6000815282600081830152600085830152606060008184015260006080840152600060a0840152600060c0840152600060e08401526000610100840152600061012084015260006101408401526000610160840152806101808401526101a083015260006101c083015260006101e0830152828601015201612f25565b606091600091612fcc612c9c82611dcc565b805180612fd857505050565b612fe59192939550612ef6565b9260005b8251811015612eee57612fff610dc58285610cb3565b61301061300b82611e12565b612299565b61301a82876133a7565b91613025818861233e565b90613030848261293c565b60009060009560009161304a610ddf6004612d6088611d40565b6132a4575b60208701516004949392919061307a9073ffffffffffffffffffffffffffffffffffffffff16610ddf565b608089015190999073ffffffffffffffffffffffffffffffffffffffff169360c08a01519860a08b01519a519460208d6040519a8b80926350d25bcd60e01b82525afa968715610f9557600499600098613283575b506040517f95d89b41000000000000000000000000000000000000000000000000000000008152996000908b908173ffffffffffffffffffffffffffffffffffffffff8f165afa998a15610f955760009a613266575b506040517f06fdde030000000000000000000000000000000000000000000000000000000081529a60008c60048173ffffffffffffffffffffffffffffffffffffffff85165afa9b8c15610f955760009c613249575b5061318461034a565b73ffffffffffffffffffffffffffffffffffffffff90911681529d8e9073ffffffffffffffffffffffffffffffffffffffff16602082015273ffffffffffffffffffffffffffffffffffffffff9091166040919091015260608d015260808c015260a08b015260c08a015260e0890152886101008901526101208801526101408701526101608601526101808501526101a08401526101c08301526101e082015261322f8287610cb3565b5261323a8186610cb3565b5061324490610c81565b612fe9565b61325f919c503d806000833e610fbc81836102b1565b9a3861317b565b61327c919a503d806000833e610fbc81836102b1565b9838613125565b61329d91985060203d602011610f8e57610f7f81836102b1565b96386130cf565b96509150506132ba6132b583611d40565b6135c8565b946132cc6132c784611d40565b6134ac565b7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98b5461330f90610ddf9073ffffffffffffffffffffffffffffffffffffffff1681565b6040517fb50d882c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152670de0b6b3a764000060248201529390602090859060449082905afa8015610f9557600494600091613388575b509350909161304f565b6133a1915060203d602011610f8e57610f7f81836102b1565b3861337e565b6134a5610925926120ab6133ba82611e12565b9361345f61345660076133cb61031c565b88548152600189015473ffffffffffffffffffffffffffffffffffffffff16602082015297600281015473ffffffffffffffffffffffffffffffffffffffff1660408a0152600381015460608a0152600481015473ffffffffffffffffffffffffffffffffffffffff1660808a0152600581015460a08a0152600681015460c08a0152015460ff1690565b151560e0870152565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9896020526040902090565b5490612500565b6004015473ffffffffffffffffffffffffffffffffffffffff166134e36134dd6134d861294c84611e12565b61218c565b9161351b565b801561249e57600a916134f5916134f9565b0490565b8160011c90670de0b6b3a7640000908183190481118415176101e75702010490565b7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98b5473ffffffffffffffffffffffffffffffffffffffff9081169190821561359c5760446020926040519485938492632d43620b60e21b8452166004830152670de0b6b3a764000060248301525afa908115610f9557600091612566575090565b505050600090565b9190916fffffffffffffffffffffffffffffffff80809416911601918211610cae57565b6135d1816134ac565b80156136b0576136486135e8612459845460801c90565b8083119283156136a257906135fc916127c5565b612493600185015461363f61245961362760028901546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff84166135a4565b9060801c6136d0565b9061367057612b3561245960036109259401546fffffffffffffffffffffffffffffffff1690565b61369c61369661245960036109259501546fffffffffffffffffffffffffffffffff1690565b91611ebd565b906136d0565b6136ab916127c5565b6135fc565b5060030154610925906fffffffffffffffffffffffffffffffff16612459565b8160011c906b033b2e3c9fd0803ce8000000908183190481118415176101e75702010490565b613702612b80826121f6565b90801561249e57610925916134f956fea26469706673582212202c3d80b82f43d62754331b740beb0f020654586995dfba6cf0ca13c2cbc337ce64736f6c63430008130033",
  "devdoc": {
    "author": "Kresko",
    "kind": "dev",
    "methods": {},
    "title": "UIDataProviderFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "UI data aggregation views",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}