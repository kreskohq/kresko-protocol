{
  "address": "0x873Fa0333823Ab18a8614862969A1Ebc06a52deA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IKrStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ClaimRewardsMulti",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAndStakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAndStakeRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityAndStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewardsMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IKrStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndRemoveLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x95fefeced334755511fe9f599ce947b5d1ba37a4a68084585c95fb43a799587c",
  "receipt": {
    "to": null,
    "from": "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d",
    "contractAddress": "0x873Fa0333823Ab18a8614862969A1Ebc06a52deA",
    "transactionIndex": 1,
    "gasUsed": "1341955",
    "logsBloom": "0x
    "blockHash": "0x193e8d9acdbbbc3f771454b9c812ca5efdee58fb859c8f868419c608751e3f85",
    "transactionHash": "0x95fefeced334755511fe9f599ce947b5d1ba37a4a68084585c95fb43a799587c",
    "logs": [],
    "blockNumber": 30748018,
    "cumulativeGasUsed": "1341955",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x89E1712DEF135BF2a7Fbb4dB30FD6997937f6664",
    "0x6af5142d9102De2C6c1A937f5F317f76598fB04E",
    "0x98220ef713d394d7ffab7af93e52Ce94dbd312CC"
  ],
  "numDeployments": 1,
  "solcInputHash": "2796721ae8ad06f4477f7f47306878f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IKrStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewardsMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IKrStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawAndRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountADesired\":\"optimal amount of token A\",\"amountAMin\":\"min amountA (slippage)\",\"amountBDesired\":\"optimal amount of token B\",\"amountBMin\":\"min amountB (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"to\":\"address to deposit for\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}},\"claimRewardsMulti(address)\":{\"params\":{\"to\":\"address that receives the rewards\"}},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountAMin\":\"min amountA to receive (slippage)\",\"amountBMin\":\"min amountB to receive (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"liquidity\":\"liquidity token amount to remove\",\"to\":\"address that receives the underlying\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAndStakeAdded(address,uint256,uint256)\":{\"notice\":\"================================================== ============ Events ============================== ==================================================\"}},\"kind\":\"user\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity to a pair, deposit liquidity tokens to staking\"},\"claimRewardsMulti(address)\":{\"notice\":\"Claim rewards from each pool\"},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraw liquidity tokens from staking, remove the underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/staking/KrStakingHelper.sol\":\"KrStakingHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"src/contracts/staking/KrStakingHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IUniswapV2Factory} from \\\"../vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Router02} from \\\"../vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport {IKrStaking, IERC20} from \\\"./interfaces/IKrStaking.sol\\\";\\n\\ncontract KrStakingHelper {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router02 public immutable router;\\n    IUniswapV2Factory public immutable factory;\\n    IKrStaking public immutable staking;\\n\\n    constructor(IUniswapV2Router02 _router, IUniswapV2Factory _factory, IKrStaking _staking) {\\n        router = _router;\\n        factory = _factory;\\n        staking = _staking;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============ Events ==============================\\n     * ==================================================\\n     */\\n\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event ClaimRewardsMulti(address indexed to);\\n\\n    /**\\n     * ==================================================\\n     * ============ Public functions ====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Add liquidity to a pair, deposit liquidity tokens to staking\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param amountADesired optimal amount of token A\\n     * @param amountBDesired optimal amount of token B\\n     * @param amountAMin min amountA (slippage)\\n     * @param amountBMin min amountB (slippage)\\n     * @param to address to deposit for\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function addLiquidityAndStake(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountADesired);\\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountBDesired);\\n\\n        IERC20(tokenA).approve(address(router), amountADesired);\\n        IERC20(tokenB).approve(address(router), amountBDesired);\\n\\n        (, , uint256 liquidity) = router.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        IERC20(pair).approve(address(staking), liquidity);\\n        staking.deposit(to, pid, liquidity);\\n\\n        emit LiquidityAndStakeAdded(to, liquidity, pid);\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @notice Withdraw liquidity tokens from staking, remove the underlying\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param liquidity liquidity token amount to remove\\n     * @param amountAMin min amountA to receive (slippage)\\n     * @param amountBMin min amountB to receive (slippage)\\n     * @param to address that receives the underlying\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function withdrawAndRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        staking.withdrawFor(msg.sender, pid, liquidity, to);\\n\\n        IERC20(pair).approve(address(router), liquidity);\\n        router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n\\n        emit LiquidityAndStakeRemoved(to, liquidity, pid);\\n    }\\n\\n    /**\\n     * @notice Claim rewards from each pool\\n     * @param to address that receives the rewards\\n     */\\n    function claimRewardsMulti(address to) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n\\n        uint256 length = staking.poolLength();\\n\\n        for (uint256 i; i < length; i++) {\\n            staking.claimFor(msg.sender, i, to);\\n        }\\n\\n        emit ClaimRewardsMulti(to);\\n    }\\n}\\n\",\"keccak256\":\"0x5235fd54939acf3ec36aecbdb4bacace1cb8b718cb8f914462b2b4cad059c812\",\"license\":\"BUSL-1.1\"},\"src/contracts/staking/interfaces/IKrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * @notice Get id for a token\\n     * @notice Useful for external contracts\\n     * @param _depositToken depositToken in `_poolInfo`\\n     * @return pid of pool with `_depositToken`\\n     * @return found ensure 0 index\\n     */\\n    function getPidFor(address _depositToken) external view returns (uint256 pid, bool found);\\n\\n    /**\\n     * @notice Amount of pools\\n     */\\n    function poolLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Deposits tokens for @param _to\\n     * @param _to address that msg.sender deposits tokens for\\n     * @param _pid in `_poolInfo`\\n     * @param _amount amount of tokens to deposit\\n     */\\n    function deposit(address _to, uint256 _pid, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Trusted helper contract can withdraw rewards and deposits on behalf of an account\\n     * @notice For eg. withdraw + remove liquidity\\n     * @param _for account to withdraw from\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient reward recipient\\n     */\\n    function withdrawFor(address _for, uint256 _pid, uint256 _amount, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Trusted helper contract can claim rewards on behalf of an account\\n     * @param _for account to claim for\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address that receives rewards\\n     */\\n    function claimFor(address _for, uint256 _pid, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Get all pending rewards for an account\\n     * @param _account to get rewards for\\n     * @return all pending rewards\\n     */\\n    function allPendingRewards(address _account) external view returns (Reward[] memory);\\n\\n    /**\\n     * @notice Get account information on a pool\\n     * @param _pid in `_poolInfo`\\n     * @param _account to get information for\\n     * @return information on the account\\n     */\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory);\\n\\n    /**\\n     * @notice Get pool information\\n     * @param _pid in `_poolInfo`\\n     * @return pool information\\n     */\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function rewardPerBlockFor(address depositTokenAddress) external view returns (uint256 rewardPerBlocks);\\n\\n    /**\\n     * @notice A rescue function for missent msg.value\\n     * @notice Since we are using payable functions to save gas on calls\\n     */\\n    function rescueNative() external payable;\\n\\n    /**\\n     * @notice A rescue function for missent tokens / airdrops\\n     * @notice This cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\\n     */\\n    function rescueNonPoolToken(IERC20 _tokenToRescue, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Set new allocations for a pool\\n     * @notice Set `_newAllocPoint` to 0 to retire a pool\\n     * @param _pid pool to modify\\n     * @param _newAllocPoint new allocation (weight) for rewards\\n     */\\n    function setPool(uint256 _pid, uint128 _newAllocPoint) external payable;\\n\\n    /**\\n     * @notice Adds a new reward pool\\n     * @notice Updates reward token count in case of adding extra tokens\\n     * @param _rewardTokens tokens to reward from this pool\\n     * @param _depositToken token to deposit for rewards\\n     * @param _allocPoint weight of rewards this pool receives\\n     * @param _startBlock block when rewards start\\n     */\\n    function addPool(\\n        address[] calldata _rewardTokens,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock\\n    ) external payable;\\n\\n    /**\\n     * @notice Adjust/Set reward per block for a particular reward token\\n     * @param _rewardToken token to adjust the drip for\\n     * @param _rewardPerBlock tokens to drip per block\\n     */\\n    function setRewardPerBlockFor(address _rewardToken, uint256 _rewardPerBlock) external payable;\\n\\n    /**\\n     * @notice Emergency function, withdraws deposits from a pool\\n     * @notice This will forfeit your rewards.\\n     * @param _pid pool id to withdraw tokens from\\n     */\\n    function emergencyWithdraw(uint256 _pid) external payable;\\n\\n    /**\\n     * @notice Claim rewards only\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function claim(uint256 _pid, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Withdraw deposited tokens and rewards.\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Updates all pools to be up-to date\\n     */\\n    function massUpdatePools() external payable;\\n\\n    /**\\n     * @notice Updates a pools reward variables to be up-to date\\n     * @param _pid pool to update\\n     */\\n    function updatePool(uint256 _pid) external payable returns (PoolInfo memory pool);\\n\\n    /**\\n     * @notice Get pending rewards from a certain pool\\n     * @param _pid id in `_poolInfo`\\n     * @param _user id in `_userInfo[_pid]`\\n     * @return rewards pending rewards\\n     */\\n    function pendingRewards(uint256 _pid, address _user) external view returns (Reward memory rewards);\\n}\\n\",\"keccak256\":\"0xdfe73481838660eebe92d9192716d6881083ee547734135e3aa33d20198b1248\",\"license\":\"BUSL-1.1\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// // SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x17c3cb3c29020835e4e2d281a2dfbbbc3073fb52894bb9632f924259a0c97f14\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb4a5353869505e2acc79ee1b9d6887f8234a4a5982520b6ead85340e9f616860\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n/** solhint-disable no-global-import */\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x255e1180f4c337b0486b791ded82a41fbbda02c26014c11759fd015511bc6025\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60e0346100fe57601f6113ba388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff831184841017610103578084926060946040528339810103126100fe57805173ffffffffffffffffffffffffffffffffffffffff919082811681036100fe5760208201519183831683036100fe576040015192831683036100fe5760805260a05260c0526040516112a0908161011a823960805181818160ae015281816104fd0152610b68015260a051818181610120015281816104280152610a42015260c0518181816101a40152818161045c015281816109450152610a760152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c9081632df56a3f146109695781634cf088d9146108fa578163b4c29b681461034a578163b6842c601461014457508063c45a0155146100d65763f887ea401461006557600080fd5b346100d257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b50346100d257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b919050346103465760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103465773ffffffffffffffffffffffffffffffffffffffff9182610195610d56565b16926101a2841515610d9c565b7f000000000000000000000000000000000000000000000000000000000000000016918051927f081e3eda0000000000000000000000000000000000000000000000000000000084526020848481845afa93841561033c578694610305575b50855b8481106102345786867fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b78280a280f35b813b156102f7578683517fbf82b7b50000000000000000000000000000000000000000000000000000000081523386820152826024820152876044820152818160648183885af180156102fb576102e3575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102b757600101610204565b6024876011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6102ec90610e01565b6102f7578638610286565b8680fd5b85513d84823e3d90fd5b9093506020813d8211610334575b8161032060209383610e44565b8101031261033057519238610201565b8580fd5b3d9150610313565b82513d88823e3d90fd5b8280fd5b8383346100d2576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d257610384610d56565b61038c610d79565b936044359260643560c4359273ffffffffffffffffffffffffffffffffffffffff948585168095036108f5576103c3851515610d9c565b8351957fe6a439050000000000000000000000000000000000000000000000000000000087526020998a8880610423848789840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b0381857f0000000000000000000000000000000000000000000000000000000000000000165afa9788156108eb578a986108bc575b50817f00000000000000000000000000000000000000000000000000000000000000001694828751997fba8fc5bf000000000000000000000000000000000000000000000000000000008b52169384868b0152878a6024818a5afa80156108b2578b8d93928f92859d869161086c575b509187808b9998979695936104df61057596610edb565b16966104ed8330338b610f40565b16966104fb8530338b610f40565b7f000000000000000000000000000000000000000000000000000000000000000016948c518080958194897f095ea7b3000000000000000000000000000000000000000000000000000000009d8e855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0391885af1801561081c578f908f8a898e87968995610828575b506105c8905196879586948594855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0391895af1801561081c57908f8f9493926107cf575b5050916060949391610104938b519e8f9687957fe8e337000000000000000000000000000000000000000000000000000000000087528c870152602486015260448501526064840152608435608484015260a43560a48401523060c484015260e43560e48401525af19788156107c557908a918a99610789575b5085519283918252818b816106938d8a8a84016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1801561077f57610747575b50813b156102f757836064889283865195869485937f0efe6a8b0000000000000000000000000000000000000000000000000000000085528401528960248401528a60448401525af1801561033c57859392918791610728575b50507f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e990519580a48152f35b6107359192939450610e01565b6107435790839185886106fc565b8480fd5b8881813d8311610778575b61075c8183610e44565b810103126107745761076d90610eb1565b50886106a2565b8780fd5b503d610752565b84513d8a823e3d90fd5b915097506060813d82116107bd575b816107a560609383610e44565b810103126107b957848a910151978b610658565b8880fd5b3d9150610798565b85513d8b823e3d90fd5b908092939450813d8311610815575b6107e88183610e44565b81010312610811576101049260609594928f9261080490610eb1565b509193509193948f6105de565b8d80fd5b503d6107de565b8e8b51903d90823e3d90fd5b9650505050505081813d8311610865575b6108438183610e44565b81010312610811578e838f8a896105c88f61085e8998610eb1565b509061058f565b503d610839565b889e50889796959492939150978a988d803d106108ab575b61088e8183610e44565b810161089991610ebe565b9f909f929493959697985098506104c8565b503d610884565b88513d8e823e3d90fd5b6108dd9198508b3d8d116108e4575b6108d58183610e44565b810190610e85565b968b610458565b503d6108cb565b86513d8c823e3d90fd5b600080fd5b5050346100d257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9050346103465760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610346576109a2610d56565b916109ab610d79565b906044359260a4359273ffffffffffffffffffffffffffffffffffffffff808516809503610774576109de851515610d9c565b8351967fe6a439050000000000000000000000000000000000000000000000000000000088526020808980610a3d87868a840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b0381867f0000000000000000000000000000000000000000000000000000000000000000165afa9889156108eb578a99610d37575b50827f0000000000000000000000000000000000000000000000000000000000000000168387519a7fba8fc5bf000000000000000000000000000000000000000000000000000000008c52169081878c0152878b602481845afa80156108b2578c9b8d91610d04575b50610ae590610edb565b8b813b15610d01578b608489838e958e8e5197889687957f43a4534b00000000000000000000000000000000000000000000000000000000875233908701526024860152604485015260648401525af180156108b257610ce4575b5086517f095ea7b30000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000851673ffffffffffffffffffffffffffffffffffffffff8116888301908152602081018c90528d94919382918491908290889082906040015b03925af18015610cda579089969594939291610c9b575b505083859660e495965198899788967fbaa2abde0000000000000000000000000000000000000000000000000000000088521690860152166024840152896044840152606435606484015260843560848401528860a484015260c43560c48401525af1801561033c57610c6e575b50507f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d8480a480f35b813d8311610c94575b610c818183610e44565b81010312610c90573880610c45565b8380fd5b503d610c77565b908097959650813d8311610cd3575b610cb48183610e44565b810103126100d2578460e494610cca8a98610eb1565b50969594610bd7565b503d610caa565b89513d86823e3d90fd5b828792938b9d610cf6610bc094610e01565b9d5050929150610b40565b80fd5b610ae59c50610d299150893d8b11610d30575b610d218183610e44565b810190610ebe565b909b610adb565b503d610d17565b81610d4f929a503d8b116108e4576108d58183610e44565b9738610a72565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036108f557565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036108f557565b15610da357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4b523a20216164647265737300000000000000000000000000000000000000006044820152fd5b67ffffffffffffffff8111610e1557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e1557604052565b908160209103126108f5575173ffffffffffffffffffffffffffffffffffffffff811681036108f55790565b519081151582036108f557565b91908260409103126108f557610ed8602083519301610eb1565b90565b15610ee257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152fd5b919091604051602094858201947f23b872dd00000000000000000000000000000000000000000000000000000000865273ffffffffffffffffffffffffffffffffffffffff9485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff9282851084861117610e1557169060e0810184811084821117610e15576040528584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152600080958192519082855af1903d1561113d573d92831161111057906110599392916040519261104c887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185610e44565b83523d868885013e611148565b90815180611068575b50505050565b82849181010312610d0157508161107f9101610eb1565b1561108c57808080611062565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b906110599392506060915b919290156111c3575081511561115c575090565b3b156111655790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156111d65750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110611253575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161121256fea264697066735822122037c1da835b977e6a4efb4ef790ac4368e9e8546d60a7f4cfc560b4266784918364736f6c63430008130033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c9081632df56a3f146109695781634cf088d9146108fa578163b4c29b681461034a578163b6842c601461014457508063c45a0155146100d65763f887ea401461006557600080fd5b346100d257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b50346100d257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b919050346103465760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103465773ffffffffffffffffffffffffffffffffffffffff9182610195610d56565b16926101a2841515610d9c565b7f000000000000000000000000000000000000000000000000000000000000000016918051927f081e3eda0000000000000000000000000000000000000000000000000000000084526020848481845afa93841561033c578694610305575b50855b8481106102345786867fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b78280a280f35b813b156102f7578683517fbf82b7b50000000000000000000000000000000000000000000000000000000081523386820152826024820152876044820152818160648183885af180156102fb576102e3575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102b757600101610204565b6024876011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6102ec90610e01565b6102f7578638610286565b8680fd5b85513d84823e3d90fd5b9093506020813d8211610334575b8161032060209383610e44565b8101031261033057519238610201565b8580fd5b3d9150610313565b82513d88823e3d90fd5b8280fd5b8383346100d2576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d257610384610d56565b61038c610d79565b936044359260643560c4359273ffffffffffffffffffffffffffffffffffffffff948585168095036108f5576103c3851515610d9c565b8351957fe6a439050000000000000000000000000000000000000000000000000000000087526020998a8880610423848789840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b0381857f0000000000000000000000000000000000000000000000000000000000000000165afa9788156108eb578a986108bc575b50817f00000000000000000000000000000000000000000000000000000000000000001694828751997fba8fc5bf000000000000000000000000000000000000000000000000000000008b52169384868b0152878a6024818a5afa80156108b2578b8d93928f92859d869161086c575b509187808b9998979695936104df61057596610edb565b16966104ed8330338b610f40565b16966104fb8530338b610f40565b7f000000000000000000000000000000000000000000000000000000000000000016948c518080958194897f095ea7b3000000000000000000000000000000000000000000000000000000009d8e855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0391885af1801561081c578f908f8a898e87968995610828575b506105c8905196879586948594855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0391895af1801561081c57908f8f9493926107cf575b5050916060949391610104938b519e8f9687957fe8e337000000000000000000000000000000000000000000000000000000000087528c870152602486015260448501526064840152608435608484015260a43560a48401523060c484015260e43560e48401525af19788156107c557908a918a99610789575b5085519283918252818b816106938d8a8a84016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1801561077f57610747575b50813b156102f757836064889283865195869485937f0efe6a8b0000000000000000000000000000000000000000000000000000000085528401528960248401528a60448401525af1801561033c57859392918791610728575b50507f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e990519580a48152f35b6107359192939450610e01565b6107435790839185886106fc565b8480fd5b8881813d8311610778575b61075c8183610e44565b810103126107745761076d90610eb1565b50886106a2565b8780fd5b503d610752565b84513d8a823e3d90fd5b915097506060813d82116107bd575b816107a560609383610e44565b810103126107b957848a910151978b610658565b8880fd5b3d9150610798565b85513d8b823e3d90fd5b908092939450813d8311610815575b6107e88183610e44565b81010312610811576101049260609594928f9261080490610eb1565b509193509193948f6105de565b8d80fd5b503d6107de565b8e8b51903d90823e3d90fd5b9650505050505081813d8311610865575b6108438183610e44565b81010312610811578e838f8a896105c88f61085e8998610eb1565b509061058f565b503d610839565b889e50889796959492939150978a988d803d106108ab575b61088e8183610e44565b810161089991610ebe565b9f909f929493959697985098506104c8565b503d610884565b88513d8e823e3d90fd5b6108dd9198508b3d8d116108e4575b6108d58183610e44565b810190610e85565b968b610458565b503d6108cb565b86513d8c823e3d90fd5b600080fd5b5050346100d257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9050346103465760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610346576109a2610d56565b916109ab610d79565b906044359260a4359273ffffffffffffffffffffffffffffffffffffffff808516809503610774576109de851515610d9c565b8351967fe6a439050000000000000000000000000000000000000000000000000000000088526020808980610a3d87868a840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b0381867f0000000000000000000000000000000000000000000000000000000000000000165afa9889156108eb578a99610d37575b50827f0000000000000000000000000000000000000000000000000000000000000000168387519a7fba8fc5bf000000000000000000000000000000000000000000000000000000008c52169081878c0152878b602481845afa80156108b2578c9b8d91610d04575b50610ae590610edb565b8b813b15610d01578b608489838e958e8e5197889687957f43a4534b00000000000000000000000000000000000000000000000000000000875233908701526024860152604485015260648401525af180156108b257610ce4575b5086517f095ea7b30000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000851673ffffffffffffffffffffffffffffffffffffffff8116888301908152602081018c90528d94919382918491908290889082906040015b03925af18015610cda579089969594939291610c9b575b505083859660e495965198899788967fbaa2abde0000000000000000000000000000000000000000000000000000000088521690860152166024840152896044840152606435606484015260843560848401528860a484015260c43560c48401525af1801561033c57610c6e575b50507f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d8480a480f35b813d8311610c94575b610c818183610e44565b81010312610c90573880610c45565b8380fd5b503d610c77565b908097959650813d8311610cd3575b610cb48183610e44565b810103126100d2578460e494610cca8a98610eb1565b50969594610bd7565b503d610caa565b89513d86823e3d90fd5b828792938b9d610cf6610bc094610e01565b9d5050929150610b40565b80fd5b610ae59c50610d299150893d8b11610d30575b610d218183610e44565b810190610ebe565b909b610adb565b503d610d17565b81610d4f929a503d8b116108e4576108d58183610e44565b9738610a72565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036108f557565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036108f557565b15610da357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4b523a20216164647265737300000000000000000000000000000000000000006044820152fd5b67ffffffffffffffff8111610e1557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e1557604052565b908160209103126108f5575173ffffffffffffffffffffffffffffffffffffffff811681036108f55790565b519081151582036108f557565b91908260409103126108f557610ed8602083519301610eb1565b90565b15610ee257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152fd5b919091604051602094858201947f23b872dd00000000000000000000000000000000000000000000000000000000865273ffffffffffffffffffffffffffffffffffffffff9485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff9282851084861117610e1557169060e0810184811084821117610e15576040528584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152600080958192519082855af1903d1561113d573d92831161111057906110599392916040519261104c887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185610e44565b83523d868885013e611148565b90815180611068575b50505050565b82849181010312610d0157508161107f9101610eb1565b1561108c57808080611062565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b906110599392506060915b919290156111c3575081511561115c575090565b3b156111655790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156111d65750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110611253575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161121256fea264697066735822122037c1da835b977e6a4efb4ef790ac4368e9e8546d60a7f4cfc560b4266784918364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountADesired": "optimal amount of token A",
          "amountAMin": "min amountA (slippage)",
          "amountBDesired": "optimal amount of token B",
          "amountBMin": "min amountB (slippage)",
          "deadline": "transaction deadline (used by router)",
          "to": "address to deposit for",
          "tokenA": "address of tokenA",
          "tokenB": "address of tokenB"
        }
      },
      "claimRewardsMulti(address)": {
        "params": {
          "to": "address that receives the rewards"
        }
      },
      "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountAMin": "min amountA to receive (slippage)",
          "amountBMin": "min amountB to receive (slippage)",
          "deadline": "transaction deadline (used by router)",
          "liquidity": "liquidity token amount to remove",
          "to": "address that receives the underlying",
          "tokenA": "address of tokenA",
          "tokenB": "address of tokenB"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityAndStakeAdded(address,uint256,uint256)": {
        "notice": "================================================== ============ Events ============================== =================================================="
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity to a pair, deposit liquidity tokens to staking"
      },
      "claimRewardsMulti(address)": {
        "notice": "Claim rewards from each pool"
      },
      "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Withdraw liquidity tokens from staking, remove the underlying"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}