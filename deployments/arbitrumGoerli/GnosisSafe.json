{
  "address": "0x9eEb83909DC4B12D8CF894edfD1281Cf56610D50",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "AddedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "approvedHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ApproveHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "handler",
          "type": "address"
        }
      ],
      "name": "ChangedFallbackHandler",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "guard",
          "type": "address"
        }
      ],
      "name": "ChangedGuard",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ChangedThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "DisabledModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "EnabledModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ExecutionFromModuleFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ExecutionFromModuleSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "ExecutionSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RemovedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fallbackHandler",
          "type": "address"
        }
      ],
      "name": "SafeSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "msgHash",
          "type": "bytes32"
        }
      ],
      "name": "SignMsg",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "addOwnerWithThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hashToApprove",
          "type": "bytes32"
        }
      ],
      "name": "approveHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "approvedHashes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "changeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignatures",
          "type": "uint256"
        }
      ],
      "name": "checkNSignatures",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "checkSignatures",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "disableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "enableModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "safeTxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "gasToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "refundReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "encodeTransactionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "safeTxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "gasToken",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "refundReceiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "execTransaction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execTransactionFromModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execTransactionFromModuleReturnData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "start",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getModulesPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "array",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "next",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getStorageAt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "safeTxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "gasToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "refundReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getTransactionHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "isModuleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "requiredTxGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        }
      ],
      "name": "setFallbackHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guard",
          "type": "address"
        }
      ],
      "name": "setGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "fallbackHandler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "paymentReceiver",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "signedMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "calldataPayload",
          "type": "bytes"
        }
      ],
      "name": "simulateAndRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "swapOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd02c35d55612b1003f9f202c29786cc66118bac8da4769696c0b9f5e2106bd00",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "3303079",
    "logsBloom": "0x
    "blockHash": "0xf5901fe4eb365c97162729be2eb9abab3011672260da036058e98baa5d0acbb7",
    "transactionHash": "0xd02c35d55612b1003f9f202c29786cc66118bac8da4769696c0b9f5e2106bd00",
    "logs": [],
    "blockNumber": 30746517,
    "cumulativeGasUsed": "3303079",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2796721ae8ad06f4477f7f47306878f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"approvedHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ApproveHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"}],\"name\":\"SafeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"SignMsg\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashToApprove\",\"type\":\"bytes32\"}],\"name\":\"approveHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"encodeTransactionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"execTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"requiredTxGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - <stefan@gnosis.io>Richard Meissner - <richard@gnosis.io>\",\"kind\":\"dev\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"approveHash(bytes32)\":{\"details\":\"Marks a hash as approved. This can be used to validate a hash that is used by a signature.\",\"params\":{\"hashToApprove\":\"The hash that should be marked as approved for signatures that are verified by this contract.\"}},\"changeThreshold(uint256)\":{\"details\":\"Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"checkNSignatures(bytes32,bytes,bytes,uint256)\":{\"details\":\"Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\",\"params\":{\"data\":\"That should be signed (this is passed to an external validator contract)\",\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"requiredSignatures\":\"Amount of required valid signatures.\",\"signatures\":\"Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes,bytes)\":{\"details\":\"Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\",\"params\":{\"data\":\"That should be signed (this is passed to an external validator contract)\",\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\"}},\"disableModule(address,address)\":{\"details\":\"Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Module that pointed to the module to be removed in the linked list\"}},\"enableModule(address)\":{\"details\":\"Allows to add a module to the whitelist.      This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"details\":\"Returns the bytes that are hashed to be signed by owners.\",\"params\":{\"_nonce\":\"Transaction nonce.\",\"baseGas\":\"Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload.\",\"gasPrice\":\"Maximum gas price that should be used for this transaction.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the safe transaction.\",\"to\":\"Destination address.\",\"value\":\"Ether value.\"},\"returns\":{\"_0\":\"Transaction hash bytes.\"}},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transferred, even if the user transaction fails.\",\"params\":{\"baseGas\":\"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload of Safe transaction.\",\"gasPrice\":\"Gas price that should be used for the payment calculation.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type of Safe transaction.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the Safe transaction.\",\"signatures\":\"Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations and return data\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}},\"getChainId()\":{\"details\":\"Returns the chain id used by this contract.\"},\"getModulesPaginated(address,uint256)\":{\"details\":\"Returns array of modules.\",\"params\":{\"pageSize\":\"Maximum number of modules that should be returned.\",\"start\":\"Start of the page.\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"getOwners()\":{\"details\":\"Returns array of owners.\",\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getStorageAt(uint256,uint256)\":{\"details\":\"Reads `length` bytes of storage in the currents contract\",\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"details\":\"Returns hash to be signed by owners.\",\"params\":{\"_nonce\":\"Transaction nonce.\",\"baseGas\":\"Gas costs for data used to trigger the safe transaction.\",\"data\":\"Data payload.\",\"gasPrice\":\"Maximum gas price that should be used for this transaction.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Fas that should be used for the safe transaction.\",\"to\":\"Destination address.\",\"value\":\"Ether value.\"},\"returns\":{\"_0\":\"Transaction hash.\"}},\"isModuleEnabled(address)\":{\"details\":\"Returns if an module is enabled\",\"returns\":{\"_0\":\"True if the module is enabled\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"requiredTxGas(address,uint256,bytes,uint8)\":{\"details\":\"Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\",\"params\":{\"data\":\"Data payload of Safe transaction.\",\"operation\":\"Operation type of Safe transaction.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"},\"returns\":{\"_0\":\"Estimate without refunds and overhead fees (base transaction and payload data gas costs).\"}},\"setFallbackHandler(address)\":{\"details\":\"Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}},\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"details\":\"Setup function sets initial storage of contract.\",\"params\":{\"_owners\":\"List of Safe owners.\",\"_threshold\":\"Number of required confirmations for a Safe transaction.\",\"data\":\"Data payload for optional delegate call.\",\"fallbackHandler\":\"Handler for fallback calls to this contract\",\"payment\":\"Value that should be paid\",\"paymentReceiver\":\"Address that should receive the payment (or 0 if tx.origin)\",\"paymentToken\":\"Token that should be used for the payment (0 is ETH)\",\"to\":\"Contract address for optional delegate call.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"swapOwner(address,address,address)\":{\"details\":\"Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"title\":\"Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"requiredTxGas(address,uint256,bytes,uint8)\":{\"notice\":\"Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/vendor/gnosis/GnosisSafe.sol\":\"GnosisSafe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@kreskolabs/gnosis-safe-contracts/contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/// @title Executor - A contract that can execute transactions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Executor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d3a900673473466bc27413fdbb11aae60b5580b792c49411f01544e0b24fe08\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    function internalSetFallbackHandler(address handler) internal {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /// @dev Allows to add a contract to handle fallback calls.\\n    ///      Only fallback calls without value and with data will be forwarded.\\n    ///      This can only be done via a Safe transaction.\\n    /// @param handler contract to handle fallback calls.\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6d2eab5094e4219408e502a47d560a09e0fdd9f947440e6708ea024741bc6a\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address guard);\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Set a guard that checks transactions before execution\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7496e28d7fb5b729f68f95db2ec9c54352ade263d51a3dcc7d2ac13edcae5508\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0))\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \\\"GS000\\\");\\n    }\\n\\n    /// @dev Allows to add a module to the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Enables the module `module` for the Safe.\\n    /// @param module Module to be whitelisted.\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /// @dev Allows to remove a module from the whitelist.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Disables the module `module` for the Safe.\\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, gasleft());\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        address currentModule = modules[start];\\n        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = currentModule;\\n            currentModule = modules[currentModule];\\n            moduleCount++;\\n        }\\n        next = currentModule;\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5512760a0328309f82a71cbe2ac14e0942501b9d44d5fb417bd02174546672e5\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address owner);\\n    event RemovedOwner(address owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /// @dev Setup function sets initial storage of contract.\\n    /// @param _owners List of Safe owners.\\n    /// @param _threshold Number of required confirmations for a Safe transaction.\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n    /// @param owner New owner address.\\n    /// @param _threshold New threshold.\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n    /// @param owner Owner address to be removed.\\n    /// @param _threshold New threshold.\\n    function removeOwner(\\n        address prevOwner,\\n        address owner,\\n        uint256 _threshold\\n    ) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n    /// @param oldOwner Owner address to be replaced.\\n    /// @param newOwner New owner address.\\n    function swapOwner(\\n        address prevOwner,\\n        address oldOwner,\\n        address newOwner\\n    ) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /// @dev Allows to update the number of required confirmations by Safe owners.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Changes the threshold of the Safe to `_threshold`.\\n    /// @param _threshold New threshold.\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x01a3d64cc0967f42ae63802409f5404d18352516ea2a6335005003d919ffcf12\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/common/EtherPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract EtherPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /// @dev Fallback function accepts Ether transactions.\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1a7928d29877da84a3d0df846d5cd933d48ee095c1bde0aa044e249b12e27a72\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SecuredTokenTransfer - Secure token transfer\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SecuredTokenTransfer {\\n    /// @dev Transfers a token and returns if it was a success\\n    /// @param token Token that should be transferred\\n    /// @param receiver Receiver to whom the token should be transferred\\n    /// @param amount The amount of tokens that should be transferred\\n    function transferToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n                case 0 {\\n                    transferred := success\\n                }\\n                case 0x20 {\\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\\n                }\\n                default {\\n                    transferred := 0\\n                }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x178682d8477da42936c7e8e24d39094c4ac08ecd8623794b9535d77001b665f1\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x59d36efca578b75541a776f62a0d0ef03712fc27b6647c3915c14b572106d7bc\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract SignatureDecoder {\\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\\n    /// @notice Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\\n    /// @param signatures concatenated rsv signatures\\n    function signatureSplit(bytes memory signatures, uint256 pos)\\n        internal\\n        pure\\n        returns (\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        )\\n    {\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            // Here we are loading the last 32 bytes, including 31 bytes\\n            // of 's'. There is no 'mload8' to do this.\\n            //\\n            // 'byte' is not working due to the Solidity parser, so lets\\n            // use the second best option, 'and'\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3e2e3b9d17c47201414341d2ccfc6437bc09f31af6dddf4a7de1f6294543072\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\\n///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract Singleton {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0x6e02c18998de8834dd7d69890cb6ede996b6f635d2337081a596d91e35e2c648\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\\n/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\ncontract StorageAccessible {\\n    /**\\n     * @dev Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40a5f239d9639d4e44cb195a8a2a0022bb27840e282990e6776d8581515ca7ed\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/external/GnosisSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title GnosisSafeMath\\n * @dev Math operations with safety checks that revert on error\\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\\n * TODO: remove once open zeppelin update to solc 0.5.0\\n */\\nlibrary GnosisSafeMath {\\n    /**\\n     * @dev Multiplies two numbers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x2a2b4d74f5834a9437be0cd3254d7a676698fc78aa47941c2009470196998d98\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5c64c2e071245db8fe3ea8b94f73c5a8de236933858ae240348d502433a9d178\",\"license\":\"LGPL-3.0-only\"},\"@kreskolabs/gnosis-safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5b6e9bf17f28738ce88e751f420b0559f5151ba7bec2ff3c7bb31e42673d6801\",\"license\":\"LGPL-3.0-only\"},\"src/contracts/vendor/gnosis/GnosisSafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity <=0.8.19;\\n\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/base/ModuleManager.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/base/OwnerManager.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/base/FallbackManager.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/base/GuardManager.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/common/EtherPaymentFallback.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/common/Singleton.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/common/SignatureDecoder.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/common/SecuredTokenTransfer.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/common/StorageAccessible.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/interfaces/ISignatureValidator.sol\\\";\\nimport \\\"@kreskolabs/gnosis-safe-contracts/contracts/external/GnosisSafeMath.sol\\\";\\n\\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract GnosisSafe is\\n    EtherPaymentFallback,\\n    Singleton,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    GuardManager\\n{\\n    using GnosisSafeMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    event SafeSetup(\\n        address indexed initiator,\\n        address[] owners,\\n        uint256 threshold,\\n        address initializer,\\n        address fallbackHandler\\n    );\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\\n\\n    uint256 public nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\\n    constructor() {\\n        // By setting the threshold it is not possible to call setup anymore,\\n        // so we create a Safe with 0 owners and threshold 1.\\n        // This is an unusable Safe, perfect for the singleton\\n        threshold = 1;\\n    }\\n\\n    /// @dev Setup function sets initial storage of contract.\\n    /// @param _owners List of Safe owners.\\n    /// @param _threshold Number of required confirmations for a Safe transaction.\\n    /// @param to Contract address for optional delegate call.\\n    /// @param data Data payload for optional delegate call.\\n    /// @param fallbackHandler Handler for fallback calls to this contract\\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\\n    /// @param payment Value that should be paid\\n    /// @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\\n    ///      Note: The fees are always transferred, even if the user transaction fails.\\n    /// @param to Destination address of Safe transaction.\\n    /// @param value Ether value of Safe transaction.\\n    /// @param data Data payload of Safe transaction.\\n    /// @param operation Operation type of Safe transaction.\\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n    /// @param gasPrice Gas price that should be used for the payment calculation.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData = encodeTransactionData(\\n                // Transaction info\\n                to,\\n                value,\\n                data,\\n                operation,\\n                safeTxGas,\\n                // Payment info\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                // Signature info\\n                nonce\\n            );\\n            // Increase nonce and execute transaction.\\n            nonce++;\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, txHashData, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            require(success || safeTxGas != 0 || gasPrice != 0, \\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            require(receiver.send(payment), \\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            require(transferToken(gasToken, receiver, payment), \\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(\\n        bytes32 dataHash,\\n        bytes memory data,\\n        bytes memory signatures\\n    ) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, data, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(\\n        bytes32 dataHash,\\n        bytes memory data,\\n        bytes memory signatures,\\n        uint256 requiredSignatures\\n    ) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                require(\\n                    ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE,\\n                    \\\"GS024\\\"\\n                );\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(\\n                    keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)),\\n                    v - 4,\\n                    r,\\n                    s\\n                );\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(\\n                currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS,\\n                \\\"GS026\\\"\\n            );\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    /// @dev Allows to estimate a Safe transaction.\\n    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\\n    /// @param to Destination address of Safe transaction.\\n    /// @param value Ether value of Safe transaction.\\n    /// @param data Data payload of Safe transaction.\\n    /// @param operation Operation type of Safe transaction.\\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\\n    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\\n    function requiredTxGas(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (uint256) {\\n        uint256 startGas = gasleft();\\n        // We don't provide an error message here, as we use it to return the estimate\\n        require(execute(to, value, data, operation, gasleft()));\\n        uint256 requiredGas = startGas - gasleft();\\n        // Convert response to string and return via error message\\n        revert(string(abi.encodePacked(requiredGas)));\\n    }\\n\\n    /**\\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\\n     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external {\\n        require(owners[msg.sender] != address(0), \\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    /// @dev Returns the chain id used by this contract.\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n\\n    /// @dev Returns the bytes that are hashed to be signed by owners.\\n    /// @param to Destination address.\\n    /// @param value Ether value.\\n    /// @param data Data payload.\\n    /// @param operation Operation type.\\n    /// @param safeTxGas Gas that should be used for the safe transaction.\\n    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param _nonce Transaction nonce.\\n    /// @return Transaction hash bytes.\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 safeTxHash = keccak256(\\n            abi.encode(\\n                SAFE_TX_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                safeTxGas,\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    /// @dev Returns hash to be signed by owners.\\n    /// @param to Destination address.\\n    /// @param value Ether value.\\n    /// @param data Data payload.\\n    /// @param operation Operation type.\\n    /// @param safeTxGas Fas that should be used for the safe transaction.\\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n    /// @param _nonce Transaction nonce.\\n    /// @return Transaction hash.\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                encodeTransactionData(\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    _nonce\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb7d0a8ede5f0b86d367669c49c834339093b2238463ce2613863d6f544d4e172\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001b576001600455613ab090816100218239f35b600080fdfe6080604052600436101561002a575b3615610020573415611d72575b600080fd5b61002861244e565b005b60003560e01c80630d582f131461021a57806312fb68e0146102155780632d9ad53d146102105780632f54bf6e1461020b5780633408e47014610206578063468721a7146102015780635229073f146101fc5780635624b25b146101f75780635ae6bd37146101f2578063610b5925146101ed578063694e80c3146101e85780636a761202146101e35780637d832974146101de578063934f3a11146101d9578063a0e67e2b146101d4578063affed0e0146101cf578063b4faba09146101ca578063b63e800d146101c5578063c4ca3a9c146101c0578063cc2f8452146101bb578063d4d9bdcd146101b6578063d8d11f78146101b1578063e009cfde146101ac578063e19a9dd9146101a7578063e318b52b146101a2578063e75235b81461019d578063e86637db14610198578063f08a032314610193578063f698da251461018e578063f8dc5dd9146101895763ffa1ad740361000e57611cf6565b611ba9565b611b68565b611ac0565b611a98565b611a5c565b61181e565b611678565b6114a8565b611475565b6112b3565b6111a0565b61108c565b610fd6565b610f58565b610f1c565b610e5e565b610da0565b610d29565b610c69565b610ba8565b610a5b565b610a11565b610946565b6108ea565b610866565b6107b4565b610722565b61069a565b610623565b610273565b73ffffffffffffffffffffffffffffffffffffffff81160361001b57565b60e4359061024a8261021f565b565b6044359061024a8261021f565b6084359061024a8261021f565b60a4359061024a8261021f565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356102ae8161021f565b7f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26610488602435926102de61247c565b61030e73ffffffffffffffffffffffffffffffffffffffff821680151590816104aa575b8161049f575b5061217c565b61037a61037461035b6103418473ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b156121e1565b6001600052600260205261041a6103b07fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0610341565b6103da8373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6001600052600260205261044e817fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e06103da565b61046161045c60035461214f565b600355565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390a1806004540361049657005b61002890612395565b905030141538610308565b60018114159150610302565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116104f957604052565b6104b6565b6040810190811067ffffffffffffffff8211176104f957604052565b6080810190811067ffffffffffffffff8211176104f957604052565b610180810190811067ffffffffffffffff8211176104f957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104f957604052565b67ffffffffffffffff81116104f957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9291926105da82610594565b916105e86040519384610553565b82948184528183011161001b578281602093846000960137010152565b9080601f8301121561001b57816020610620933591016105ce565b90565b3461001b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5767ffffffffffffffff60243581811161001b57610673903690600401610605565b60443591821161001b5761068e610028923690600401610605565b6064359160043561358f565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5760206004356106d78161021f565b73ffffffffffffffffffffffffffffffffffffffff8091169081600114159182610708575b50506040519015158152f35b9091506000526001825260406000205416151538806106fc565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57602060043561075f8161021f565b73ffffffffffffffffffffffffffffffffffffffff809116906001821415918261078f5750506040519015158152f35b9091506000526002825260406000205416151538806106fc565b600091031261001b57565b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020604051468152f35b60643590600282101561001b57565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261001b576004356108328161021f565b91602435916044359067ffffffffffffffff821161001b5761085691600401610605565b90606435600281101561001b5790565b3461001b576020610882610879366107fc565b92919091611f16565b6040519015158152f35b919082519283825260005b8481106108d65750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610897565b3461001b576108fb610879366107fc565b6040519060203d8301016040523d82523d6000602084013e6109316040519283921515835260406020840152604083019061088c565b0390f35b90602061062092818152019061088c565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435602435600581811b92602090838504821484151715610a0c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06109d46109be87610594565b966109cc6040519889610553565b808852610594565b01368387013760005b8481106109f257604051806109318882610935565b80610a07918301548482871b8901015261214f565b6109dd565b612120565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5760043560005260076020526020604060002054604051908152f35b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440610b98600435610aba8161021f565b610ac261247c565b610b0473ffffffffffffffffffffffffffffffffffffffff80831680151580610b9d575b610aef90611e4c565b60005260016020526040600020541615611eb1565b60016000819052602052610b64610b3a7fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f610341565b6103da8373ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b60016000819052602052610461817fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f6103da565b0390a1005b506001811415610ae6565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c936020600435610c0561247c565b610c136003548211156122a0565b610c2060018210156123e9565b80600455604051908152a1005b9181601f8401121561001b5782359167ffffffffffffffff831161001b576020838186019501011161001b57565b610104359061024a8261021f565b6101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435610ca08161021f565b67ffffffffffffffff60443581811161001b57610cc1903690600401610c2d565b90610cca6107ed565b9160e43590610cd88261021f565b610ce0610c5b565b926101243595861161001b5761093196610d01610d17973690600401610605565b9560c4359360a435936084359360243590612be3565b60405190151581529081906020820190565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5773ffffffffffffffffffffffffffffffffffffffff600435610d798161021f565b16600052600860205260406000206024356000526020526020604060002054604051908152f35b3461001b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5767ffffffffffffffff60243581811161001b57610df0903690600401610605565b60443591821161001b57610e0b610028923690600401610605565b906004356131cc565b90815180825260208080930193019160005b828110610e34575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610e26565b3461001b576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f1957610e9960035461208e565b9080600191828252600260209281845273ffffffffffffffffffffffffffffffffffffffff9160409386848685205416905b610ee2575b855187815280610931818a018c610e14565b8416878114610f145790818892610ef9838c6120dd565b528452828752610f0e8587862054169161214f565b91610ecb565b610ed0565b80fd5b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020600554604051908152f35b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435610f938161021f565b60243567ffffffffffffffff811161001b57600091610fb783923690600401610605565b90602082519201905af46000523d6020523d600060403e60403d016000fd5b3461001b576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5767ffffffffffffffff60043581811161001b573660238201121561001b57806004013582811161001b573660248260051b8401011161001b5761104761024c565b60643593841161001b57611062610028943690600401610c2d565b61106a610259565b91611073610266565b9361107c61023d565b9660c43596602480359201612581565b3461001b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356110c78161021f565b60443567ffffffffffffffff811161001b576110ea61110d913690600401610c2d565b90926110f46107ed565b906111035a955a9436916105ce565b9060243590612017565b1561001b575a8103908111610a0c576111689060405190602082015260208152611136816104fe565b6040519182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610935565b0390fd5b9073ffffffffffffffffffffffffffffffffffffffff611199602092959495604085526040850190610e14565b9416910152565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356111db8161021f565b602435906111e88261208e565b9060009073ffffffffffffffffffffffffffffffffffffffff809116825260019384918260205280604085205416955b611231575b50505081526109316040519283928361116c565b90919294818116801515806112a9575b806112a0575b156112985761128a610341869493611290936112638b8b6120dd565b5273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9661214f565b939291611218565b50949261121d565b50838710611247565b5084811415611241565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435600090338252600260205273ffffffffffffffffffffffffffffffffffffffff6040832054161561137f57611356611350826113413373ffffffffffffffffffffffffffffffffffffffff166000526008602052604060002090565b90600052602052604060002090565b60019055565b33907ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c8380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033300000000000000000000000000000000000000000000000000000006044820152fd5b6101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261001b576004356114148161021f565b91602435916044359067ffffffffffffffff821161001b5761143891600401610c2d565b9091606435600281101561001b57906084359060a4359060c4359060e43561145f8161021f565b906101043561146d8161021f565b906101243590565b3461001b57602061149a611488366113dd565b99989098979197969296959395613954565b818151910120604051908152f35b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356114e38161021f565b602435906114f08261021f565b6114f861247c565b73ffffffffffffffffffffffffffffffffffffffff808316908115158061166d575b61152390611e4c565b8083166000526001602052604060002054160361160f57816115ba610b98926103da6115936103417faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace40542769773ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9173ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b6104616115e78273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130330000000000000000000000000000000000000000000000000000006044820152fd5b50600182141561151a565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356116b38161021f565b6116bb61247c565b73ffffffffffffffffffffffffffffffffffffffff811680611744575b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c882905560405173ffffffffffffffffffffffffffffffffffffffff831681527f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2908060208101610b98565b90602060405180937f01ffc9a700000000000000000000000000000000000000000000000000000000825281806117a260048201907fe6d7a83a00000000000000000000000000000000000000000000000000000000602083019252565b03915afa908115611819576117e4610b98927f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2946000916117eb575b50611de7565b91506116d8565b61180c915060203d8111611812575b6118048183610553565b810190611dc3565b386117de565b503d6117fa565b611ddb565b3461001b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26610b986103da7ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf611a276004356118a48161021f565b6119fa602435916118b48361021f565b6044359586916118c38361021f565b6118cb61247c565b61197a73ffffffffffffffffffffffffffffffffffffffff6118fd81861680151590816104aa578161049f575061217c565b61193061037461035b6103418873ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b861680151580611a51575b6119449061217c565b61197461035b6103418573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b14612305565b6119d46119aa6103418773ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b6103da8573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b6104616115e78273ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b0390a160405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b50600181141561193b565b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020600454604051908152f35b3461001b57610931611aac611488366113dd565b60405191829160208352602083019061088c565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b06020600435611b1e8161021f565b611b2661247c565b807f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d55573ffffffffffffffffffffffffffffffffffffffff60405191168152a1005b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020611ba161390a565b604051908152f35b3461001b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435611be48161021f565b7ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf610488602435611c148161021f565b611cbb60443594611c2361247c565b611c3986611c32600354612246565b10156122a0565b611c6473ffffffffffffffffffffffffffffffffffffffff841680151580611a51576119449061217c565b6103da611c946103418573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9173ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b611ce86115e78273ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b61046161045c60035461236a565b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57610931604051611d34816104fe565b600581527f312e332e30000000000000000000000000000000000000000000000000000000602082015260405191829160208352602083019061088c565b7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5548015610028576000808092368280373360601b3652818060143601925af13d82803e15611dbf573d90f35b3d90fd5b9081602091031261001b5751801515810361001b5790565b6040513d6000823e3d90fd5b15611dee57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533330300000000000000000000000000000000000000000000000000000006044820152fd5b15611e5357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130310000000000000000000000000000000000000000000000000000006044820152fd5b15611eb857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130320000000000000000000000000000000000000000000000000000006044820152fd5b91929092600133141580611fea575b15611f8c57611f35935a93612017565b908115611f6457337f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8600080a2565b337facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375600080a2565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130340000000000000000000000000000000000000000000000000000006044820152fd5b5033600052600160205273ffffffffffffffffffffffffffffffffffffffff604060002054161515611f25565b939093600284101561204757600094859460010361203b575060208351930191f490565b9060208451940192f190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b67ffffffffffffffff81116104f95760051b60200190565b9061209882612076565b6120a56040519182610553565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06120d38294612076565b0190602036910137565b80518210156120f15760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a0c5760010190565b1561218357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152fd5b156121e857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201918211610a0c57565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63c8201918211610a0c57565b156122a757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152fd5b1561230c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152fd5b8015610a0c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60207f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93916123c161247c565b6123cf6003548211156122a0565b6123dc60018210156123e9565b80600455604051908152a1565b156123f057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152fd5b6040513481527f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d60203392a2565b30330361248557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152fd5b908160061b9180830460401490151715610a0c57565b93929594918060808601608087525260a08501919060005b81811061254957505050906060929195602085015273ffffffffffffffffffffffffffffffffffffffff809216604085015216910152565b90919260019073ffffffffffffffffffffffffffffffffffffffff853561256f8161021f565b16815260209081019401929101612511565b98929497939096919761259388612076565b6125a06040519182610553565b88815260208082018a60051b8d019036821161001b578d905b82821061268557505050506126246126419795938b9a999795936126017f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a89d61262a95612864565b73ffffffffffffffffffffffffffffffffffffffff8916612658575b36916105ce565b8561269e565b82612646575b5050506040519485943398866124f9565b0390a2565b61264f92612f96565b50388080612630565b612680897f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b61261d565b83809183356126938161021f565b8152019101906125b9565b6001600052600160205273ffffffffffffffffffffffffffffffffffffffff80604060002054166127a157600160008190526020526127237fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5b60017fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b811661272d575050565b60009182915a9060208351930191f41561274357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533030300000000000000000000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130300000000000000000000000000000000000000000000000000000006044820152fd5b1561280657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230300000000000000000000000000000000000000000000000000000006044820152fd5b612870600454156127ff565b61287d81518311156122a0565b600161288b818410156123e9565b600081805b6128d7575b505061024a92916128cc6126f86128d29373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b51600355565b600455565b909183518310156129b1576129886103da61298284936129146128fa888a6120dd565b5173ffffffffffffffffffffffffffffffffffffffff1690565b92839161294f73ffffffffffffffffffffffffffffffffffffffff80851680151591826129a6575b8261299b575b8261298e575b505061217c565b6119d461037461035b6103418673ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9361214f565b91612890565b8416141590503880612948565b308214159250612942565b818b1415925061293c565b91612895565b9060028210156120475752565b9c9b9a99969391928d99969373ffffffffffffffffffffffffffffffffffffffff84939a979a168b5260208b0152816101608060408d01528b0152610180809a013787818d010160009052601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168b019560608c01612a44916129b7565b60808b015260a08a015260c089015273ffffffffffffffffffffffffffffffffffffffff1660e088015273ffffffffffffffffffffffffffffffffffffffff16610100870152818682030161012087015201612a9f9161088c565b926101400161024a9173ffffffffffffffffffffffffffffffffffffffff169052565b8115612acc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b906109c48201809211610a0c57565b906101f48201809211610a0c57565b15612b2057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031300000000000000000000000000000000000000000000000000000006044820152fd5b15612b8557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031330000000000000000000000000000000000000000000000000000006044820152fd5b9793838a8c9b97939d9c99958b8f96809b978a8a8a8a8a60055498899773ffffffffffffffffffffffffffffffffffffffff809c1697612c229a613954565b90612c2c9061214f565b600555805160208201209c612c41918e6131cc565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c85416998a1515998a612e1b575b5090612ce092612cd892612cb15a612caa612ca5612c96612c8f8b6124e3565b603f900490565b612c9f8b612afb565b90612ebb565b612b0a565b1115612b19565b5a9f612cd289159c8d600014612e1457612cca5a612273565b9536916105ce565b91612017565b9b5a90612ea7565b908b908c15612e0a575b508015612e02575b612cfb90612b7e565b60009515612dee575b505050505085600014612db7576040805185815260208101929092527f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e91a15b612d4c575050565b803b1561001b576040517f93271368000000000000000000000000000000000000000000000000000000008152600481019290925283151560248301526000908290604490829084905af1801561181957612da45750565b80612db161024a926104e5565b806107a9565b6040805185815260208101929092527f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d2391a1612d44565b612df895506130ba565b3880808080612d04565b508515612cf2565b9050151538612cea565b889561261d565b8b9291923b1561001b578b8f8b85859288958e8e8e8e8e6040519e8f9a8b9a7f75f0bb52000000000000000000000000000000000000000000000000000000008c52339960048d019b612e6d9c6129c4565b03815a6000948591f192831561181957612ce094612cd894612e94575b5091925092612c6f565b80612db1612ea1926104e5565b38612e8a565b9081811161001b578103908111610a0c5790565b90808210612ec7575090565b905090565b15612ed357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031320000000000000000000000000000000000000000000000000000006044820152fd5b15612f3857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031310000000000000000000000000000000000000000000000000000006044820152fd5b90929173ffffffffffffffffffffffffffffffffffffffff908181166130b4575032935b8082166130065750600080808093612fe161024a963a6001108414612fff5760019061317e565b97889183918315612ff5575b1690f1612f31565b6108fc9250612fed565b3a9061317e565b613011602093613162565b946000809360405190868201937fa9059cbb0000000000000000000000000000000000000000000000000000000085521660248201528760448201526044815261305a8161051a565b51927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8f05a01f13d80156130aa57602014613099575061024a6000612ecc565b61024a906000511590151715612ecc565b5061024a90612ecc565b93612fba565b929493909273ffffffffffffffffffffffffffffffffffffffff929183811661312d575032955b808416613118575060008093612fe1829461310061024a9885966131b8565b903a81108514613110579061317e565b503a9061317e565b91613128602095613011936131b8565b61317e565b956130e1565b801561315c576041810290808204604103610a0c5761315460419183612ac2565b0361001b5790565b50600090565b801561315c57808004600103610a0c5760016131548280612ac2565b90811561319c57808202918083048203610a0c576131549083612ac2565b5050600090565b6020810190818111610a0c57811061001b5790565b90810190818111610a0c57811061001b5790565b916004549182156131e05761024a9361358f565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533030310000000000000000000000000000000000000000000000000000006044820152fd5b1561324557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032300000000000000000000000000000000000000000000000000000006044820152fd5b60ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9116019060ff8211610a0c57565b156132db57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032350000000000000000000000000000000000000000000000000000006044820152fd5b1561334057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032310000000000000000000000000000000000000000000000000000006044820152fd5b156133a557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032320000000000000000000000000000000000000000000000000000006044820152fd5b1561340a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032330000000000000000000000000000000000000000000000000000006044820152fd5b9081602091031261001b57517fffffffff000000000000000000000000000000000000000000000000000000008116810361001b5790565b90916134b76106209360408452604084019061088c565b91602081840391015261088c565b156134cc57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032340000000000000000000000000000000000000000000000000000006044820152fd5b1561353157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032360000000000000000000000000000000000000000000000000000006044820152fd5b9192906135a784516135a084613133565b111561323e565b600093845b8386106135bb57505050505050565b6135db8683906041020160208101519060ff604160408301519201511692565b9160ff81168061378257505073ffffffffffffffffffffffffffffffffffffffff169061361261360a87613133565b821015613339565b61362761361e826131a3565b8551101561339e565b60209261364f6136468584880101936136418551916131a3565b6131b8565b86511015613403565b6040518481806136877f20c13b0b00000000000000000000000000000000000000000000000000000000968783528b600484016134a0565b0381875afa928315611819577fffffffff00000000000000000000000000000000000000000000000000000000613703946136d19361370998600092613755575b505016146134c5565b73ffffffffffffffffffffffffffffffffffffffff908180851691168111918261371b575b508161370f575b5061352a565b9561214f565b946135ac565b600191501415386136fd565b90915061374b6103418573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b16151590386136f6565b6137749250803d1061377b575b61376c8183610553565b810190613468565b38806136c8565b503d613762565b90919260019182811460001461380957505050509061370373ffffffffffffffffffffffffffffffffffffffff61370993169182331480156137cd575b6137c8906132d4565b6136d1565b506137c86137ff896113418673ffffffffffffffffffffffffffffffffffffffff166000526008602052604060002090565b54151590506137bf565b929392601e10156138d957600092936138bd6040928351966138988d60209961388f816138638d82019485603c917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008252601c8201520190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610553565b519020946132a3565b9451948594859094939260ff6060936080840197845216602083015260408201520152565b84805203915afa156118195761370990613703600051916136d1565b916020936138bd6000946040519384938d859094939260ff6060936080840197845216602083015260408201520152565b60405160208101907f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a7946921882524660408201523060608201526060815261394e8161051a565b51902090565b94909895917fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d89a989461398f6139d29260409a9636916105ce565b6020815191012089519b60208d019d8e528c73ffffffffffffffffffffffffffffffffffffffff9b8c809b1691015260608d015260808c015260a08b01906129b7565b60c089015260e0880152610100870152166101208501521661014083015261016090818301528152613a0381610536565b519020610620613a1161390a565b6138636040519384926020840190916042927f190000000000000000000000000000000000000000000000000000000000000083527f0100000000000000000000000000000000000000000000000000000000000000600184015260028301526022820152019056fea2646970667358221220be0d6c32fb77ee4ba7e8cc3571028997561b4ecfb758f6ca8933d9180fc7af4564736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561002a575b3615610020573415611d72575b600080fd5b61002861244e565b005b60003560e01c80630d582f131461021a57806312fb68e0146102155780632d9ad53d146102105780632f54bf6e1461020b5780633408e47014610206578063468721a7146102015780635229073f146101fc5780635624b25b146101f75780635ae6bd37146101f2578063610b5925146101ed578063694e80c3146101e85780636a761202146101e35780637d832974146101de578063934f3a11146101d9578063a0e67e2b146101d4578063affed0e0146101cf578063b4faba09146101ca578063b63e800d146101c5578063c4ca3a9c146101c0578063cc2f8452146101bb578063d4d9bdcd146101b6578063d8d11f78146101b1578063e009cfde146101ac578063e19a9dd9146101a7578063e318b52b146101a2578063e75235b81461019d578063e86637db14610198578063f08a032314610193578063f698da251461018e578063f8dc5dd9146101895763ffa1ad740361000e57611cf6565b611ba9565b611b68565b611ac0565b611a98565b611a5c565b61181e565b611678565b6114a8565b611475565b6112b3565b6111a0565b61108c565b610fd6565b610f58565b610f1c565b610e5e565b610da0565b610d29565b610c69565b610ba8565b610a5b565b610a11565b610946565b6108ea565b610866565b6107b4565b610722565b61069a565b610623565b610273565b73ffffffffffffffffffffffffffffffffffffffff81160361001b57565b60e4359061024a8261021f565b565b6044359061024a8261021f565b6084359061024a8261021f565b60a4359061024a8261021f565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356102ae8161021f565b7f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26610488602435926102de61247c565b61030e73ffffffffffffffffffffffffffffffffffffffff821680151590816104aa575b8161049f575b5061217c565b61037a61037461035b6103418473ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b156121e1565b6001600052600260205261041a6103b07fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0610341565b6103da8373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6001600052600260205261044e817fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e06103da565b61046161045c60035461214f565b600355565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390a1806004540361049657005b61002890612395565b905030141538610308565b60018114159150610302565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116104f957604052565b6104b6565b6040810190811067ffffffffffffffff8211176104f957604052565b6080810190811067ffffffffffffffff8211176104f957604052565b610180810190811067ffffffffffffffff8211176104f957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104f957604052565b67ffffffffffffffff81116104f957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9291926105da82610594565b916105e86040519384610553565b82948184528183011161001b578281602093846000960137010152565b9080601f8301121561001b57816020610620933591016105ce565b90565b3461001b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5767ffffffffffffffff60243581811161001b57610673903690600401610605565b60443591821161001b5761068e610028923690600401610605565b6064359160043561358f565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5760206004356106d78161021f565b73ffffffffffffffffffffffffffffffffffffffff8091169081600114159182610708575b50506040519015158152f35b9091506000526001825260406000205416151538806106fc565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57602060043561075f8161021f565b73ffffffffffffffffffffffffffffffffffffffff809116906001821415918261078f5750506040519015158152f35b9091506000526002825260406000205416151538806106fc565b600091031261001b57565b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020604051468152f35b60643590600282101561001b57565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261001b576004356108328161021f565b91602435916044359067ffffffffffffffff821161001b5761085691600401610605565b90606435600281101561001b5790565b3461001b576020610882610879366107fc565b92919091611f16565b6040519015158152f35b919082519283825260005b8481106108d65750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610897565b3461001b576108fb610879366107fc565b6040519060203d8301016040523d82523d6000602084013e6109316040519283921515835260406020840152604083019061088c565b0390f35b90602061062092818152019061088c565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435602435600581811b92602090838504821484151715610a0c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06109d46109be87610594565b966109cc6040519889610553565b808852610594565b01368387013760005b8481106109f257604051806109318882610935565b80610a07918301548482871b8901015261214f565b6109dd565b612120565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5760043560005260076020526020604060002054604051908152f35b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440610b98600435610aba8161021f565b610ac261247c565b610b0473ffffffffffffffffffffffffffffffffffffffff80831680151580610b9d575b610aef90611e4c565b60005260016020526040600020541615611eb1565b60016000819052602052610b64610b3a7fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f610341565b6103da8373ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b60016000819052602052610461817fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f6103da565b0390a1005b506001811415610ae6565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c936020600435610c0561247c565b610c136003548211156122a0565b610c2060018210156123e9565b80600455604051908152a1005b9181601f8401121561001b5782359167ffffffffffffffff831161001b576020838186019501011161001b57565b610104359061024a8261021f565b6101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435610ca08161021f565b67ffffffffffffffff60443581811161001b57610cc1903690600401610c2d565b90610cca6107ed565b9160e43590610cd88261021f565b610ce0610c5b565b926101243595861161001b5761093196610d01610d17973690600401610605565b9560c4359360a435936084359360243590612be3565b60405190151581529081906020820190565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5773ffffffffffffffffffffffffffffffffffffffff600435610d798161021f565b16600052600860205260406000206024356000526020526020604060002054604051908152f35b3461001b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5767ffffffffffffffff60243581811161001b57610df0903690600401610605565b60443591821161001b57610e0b610028923690600401610605565b906004356131cc565b90815180825260208080930193019160005b828110610e34575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610e26565b3461001b576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f1957610e9960035461208e565b9080600191828252600260209281845273ffffffffffffffffffffffffffffffffffffffff9160409386848685205416905b610ee2575b855187815280610931818a018c610e14565b8416878114610f145790818892610ef9838c6120dd565b528452828752610f0e8587862054169161214f565b91610ecb565b610ed0565b80fd5b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020600554604051908152f35b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435610f938161021f565b60243567ffffffffffffffff811161001b57600091610fb783923690600401610605565b90602082519201905af46000523d6020523d600060403e60403d016000fd5b3461001b576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b5767ffffffffffffffff60043581811161001b573660238201121561001b57806004013582811161001b573660248260051b8401011161001b5761104761024c565b60643593841161001b57611062610028943690600401610c2d565b61106a610259565b91611073610266565b9361107c61023d565b9660c43596602480359201612581565b3461001b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356110c78161021f565b60443567ffffffffffffffff811161001b576110ea61110d913690600401610c2d565b90926110f46107ed565b906111035a955a9436916105ce565b9060243590612017565b1561001b575a8103908111610a0c576111689060405190602082015260208152611136816104fe565b6040519182917f08c379a000000000000000000000000000000000000000000000000000000000835260048301610935565b0390fd5b9073ffffffffffffffffffffffffffffffffffffffff611199602092959495604085526040850190610e14565b9416910152565b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356111db8161021f565b602435906111e88261208e565b9060009073ffffffffffffffffffffffffffffffffffffffff809116825260019384918260205280604085205416955b611231575b50505081526109316040519283928361116c565b90919294818116801515806112a9575b806112a0575b156112985761128a610341869493611290936112638b8b6120dd565b5273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9661214f565b939291611218565b50949261121d565b50838710611247565b5084811415611241565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435600090338252600260205273ffffffffffffffffffffffffffffffffffffffff6040832054161561137f57611356611350826113413373ffffffffffffffffffffffffffffffffffffffff166000526008602052604060002090565b90600052602052604060002090565b60019055565b33907ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c8380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033300000000000000000000000000000000000000000000000000000006044820152fd5b6101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261001b576004356114148161021f565b91602435916044359067ffffffffffffffff821161001b5761143891600401610c2d565b9091606435600281101561001b57906084359060a4359060c4359060e43561145f8161021f565b906101043561146d8161021f565b906101243590565b3461001b57602061149a611488366113dd565b99989098979197969296959395613954565b818151910120604051908152f35b3461001b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356114e38161021f565b602435906114f08261021f565b6114f861247c565b73ffffffffffffffffffffffffffffffffffffffff808316908115158061166d575b61152390611e4c565b8083166000526001602052604060002054160361160f57816115ba610b98926103da6115936103417faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace40542769773ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9173ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b6104616115e78273ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130330000000000000000000000000000000000000000000000000000006044820152fd5b50600182141561151a565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576004356116b38161021f565b6116bb61247c565b73ffffffffffffffffffffffffffffffffffffffff811680611744575b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c882905560405173ffffffffffffffffffffffffffffffffffffffff831681527f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2908060208101610b98565b90602060405180937f01ffc9a700000000000000000000000000000000000000000000000000000000825281806117a260048201907fe6d7a83a00000000000000000000000000000000000000000000000000000000602083019252565b03915afa908115611819576117e4610b98927f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2946000916117eb575b50611de7565b91506116d8565b61180c915060203d8111611812575b6118048183610553565b810190611dc3565b386117de565b503d6117fa565b611ddb565b3461001b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26610b986103da7ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf611a276004356118a48161021f565b6119fa602435916118b48361021f565b6044359586916118c38361021f565b6118cb61247c565b61197a73ffffffffffffffffffffffffffffffffffffffff6118fd81861680151590816104aa578161049f575061217c565b61193061037461035b6103418873ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b861680151580611a51575b6119449061217c565b61197461035b6103418573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b14612305565b6119d46119aa6103418773ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b6103da8573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b6104616115e78273ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b0390a160405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b50600181141561193b565b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020600454604051908152f35b3461001b57610931611aac611488366113dd565b60405191829160208352602083019061088c565b3461001b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b577f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b06020600435611b1e8161021f565b611b2661247c565b807f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d55573ffffffffffffffffffffffffffffffffffffffff60405191168152a1005b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b576020611ba161390a565b604051908152f35b3461001b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57600435611be48161021f565b7ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf610488602435611c148161021f565b611cbb60443594611c2361247c565b611c3986611c32600354612246565b10156122a0565b611c6473ffffffffffffffffffffffffffffffffffffffff841680151580611a51576119449061217c565b6103da611c946103418573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9173ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b611ce86115e78273ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b61046161045c60035461236a565b3461001b5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001b57610931604051611d34816104fe565b600581527f312e332e30000000000000000000000000000000000000000000000000000000602082015260405191829160208352602083019061088c565b7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5548015610028576000808092368280373360601b3652818060143601925af13d82803e15611dbf573d90f35b3d90fd5b9081602091031261001b5751801515810361001b5790565b6040513d6000823e3d90fd5b15611dee57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533330300000000000000000000000000000000000000000000000000000006044820152fd5b15611e5357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130310000000000000000000000000000000000000000000000000000006044820152fd5b15611eb857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130320000000000000000000000000000000000000000000000000000006044820152fd5b91929092600133141580611fea575b15611f8c57611f35935a93612017565b908115611f6457337f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8600080a2565b337facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375600080a2565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130340000000000000000000000000000000000000000000000000000006044820152fd5b5033600052600160205273ffffffffffffffffffffffffffffffffffffffff604060002054161515611f25565b939093600284101561204757600094859460010361203b575060208351930191f490565b9060208451940192f190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b67ffffffffffffffff81116104f95760051b60200190565b9061209882612076565b6120a56040519182610553565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06120d38294612076565b0190602036910137565b80518210156120f15760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a0c5760010190565b1561218357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152fd5b156121e857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201918211610a0c57565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63c8201918211610a0c57565b156122a757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152fd5b1561230c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152fd5b8015610a0c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60207f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93916123c161247c565b6123cf6003548211156122a0565b6123dc60018210156123e9565b80600455604051908152a1565b156123f057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152fd5b6040513481527f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d60203392a2565b30330361248557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152fd5b908160061b9180830460401490151715610a0c57565b93929594918060808601608087525260a08501919060005b81811061254957505050906060929195602085015273ffffffffffffffffffffffffffffffffffffffff809216604085015216910152565b90919260019073ffffffffffffffffffffffffffffffffffffffff853561256f8161021f565b16815260209081019401929101612511565b98929497939096919761259388612076565b6125a06040519182610553565b88815260208082018a60051b8d019036821161001b578d905b82821061268557505050506126246126419795938b9a999795936126017f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a89d61262a95612864565b73ffffffffffffffffffffffffffffffffffffffff8916612658575b36916105ce565b8561269e565b82612646575b5050506040519485943398866124f9565b0390a2565b61264f92612f96565b50388080612630565b612680897f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b61261d565b83809183356126938161021f565b8152019101906125b9565b6001600052600160205273ffffffffffffffffffffffffffffffffffffffff80604060002054166127a157600160008190526020526127237fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5b60017fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b811661272d575050565b60009182915a9060208351930191f41561274357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533030300000000000000000000000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130300000000000000000000000000000000000000000000000000000006044820152fd5b1561280657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230300000000000000000000000000000000000000000000000000000006044820152fd5b612870600454156127ff565b61287d81518311156122a0565b600161288b818410156123e9565b600081805b6128d7575b505061024a92916128cc6126f86128d29373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b51600355565b600455565b909183518310156129b1576129886103da61298284936129146128fa888a6120dd565b5173ffffffffffffffffffffffffffffffffffffffff1690565b92839161294f73ffffffffffffffffffffffffffffffffffffffff80851680151591826129a6575b8261299b575b8261298e575b505061217c565b6119d461037461035b6103418673ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9361214f565b91612890565b8416141590503880612948565b308214159250612942565b818b1415925061293c565b91612895565b9060028210156120475752565b9c9b9a99969391928d99969373ffffffffffffffffffffffffffffffffffffffff84939a979a168b5260208b0152816101608060408d01528b0152610180809a013787818d010160009052601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168b019560608c01612a44916129b7565b60808b015260a08a015260c089015273ffffffffffffffffffffffffffffffffffffffff1660e088015273ffffffffffffffffffffffffffffffffffffffff16610100870152818682030161012087015201612a9f9161088c565b926101400161024a9173ffffffffffffffffffffffffffffffffffffffff169052565b8115612acc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b906109c48201809211610a0c57565b906101f48201809211610a0c57565b15612b2057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031300000000000000000000000000000000000000000000000000000006044820152fd5b15612b8557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031330000000000000000000000000000000000000000000000000000006044820152fd5b9793838a8c9b97939d9c99958b8f96809b978a8a8a8a8a60055498899773ffffffffffffffffffffffffffffffffffffffff809c1697612c229a613954565b90612c2c9061214f565b600555805160208201209c612c41918e6131cc565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c85416998a1515998a612e1b575b5090612ce092612cd892612cb15a612caa612ca5612c96612c8f8b6124e3565b603f900490565b612c9f8b612afb565b90612ebb565b612b0a565b1115612b19565b5a9f612cd289159c8d600014612e1457612cca5a612273565b9536916105ce565b91612017565b9b5a90612ea7565b908b908c15612e0a575b508015612e02575b612cfb90612b7e565b60009515612dee575b505050505085600014612db7576040805185815260208101929092527f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e91a15b612d4c575050565b803b1561001b576040517f93271368000000000000000000000000000000000000000000000000000000008152600481019290925283151560248301526000908290604490829084905af1801561181957612da45750565b80612db161024a926104e5565b806107a9565b6040805185815260208101929092527f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d2391a1612d44565b612df895506130ba565b3880808080612d04565b508515612cf2565b9050151538612cea565b889561261d565b8b9291923b1561001b578b8f8b85859288958e8e8e8e8e6040519e8f9a8b9a7f75f0bb52000000000000000000000000000000000000000000000000000000008c52339960048d019b612e6d9c6129c4565b03815a6000948591f192831561181957612ce094612cd894612e94575b5091925092612c6f565b80612db1612ea1926104e5565b38612e8a565b9081811161001b578103908111610a0c5790565b90808210612ec7575090565b905090565b15612ed357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031320000000000000000000000000000000000000000000000000000006044820152fd5b15612f3857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031310000000000000000000000000000000000000000000000000000006044820152fd5b90929173ffffffffffffffffffffffffffffffffffffffff908181166130b4575032935b8082166130065750600080808093612fe161024a963a6001108414612fff5760019061317e565b97889183918315612ff5575b1690f1612f31565b6108fc9250612fed565b3a9061317e565b613011602093613162565b946000809360405190868201937fa9059cbb0000000000000000000000000000000000000000000000000000000085521660248201528760448201526044815261305a8161051a565b51927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8f05a01f13d80156130aa57602014613099575061024a6000612ecc565b61024a906000511590151715612ecc565b5061024a90612ecc565b93612fba565b929493909273ffffffffffffffffffffffffffffffffffffffff929183811661312d575032955b808416613118575060008093612fe1829461310061024a9885966131b8565b903a81108514613110579061317e565b503a9061317e565b91613128602095613011936131b8565b61317e565b956130e1565b801561315c576041810290808204604103610a0c5761315460419183612ac2565b0361001b5790565b50600090565b801561315c57808004600103610a0c5760016131548280612ac2565b90811561319c57808202918083048203610a0c576131549083612ac2565b5050600090565b6020810190818111610a0c57811061001b5790565b90810190818111610a0c57811061001b5790565b916004549182156131e05761024a9361358f565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533030310000000000000000000000000000000000000000000000000000006044820152fd5b1561324557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032300000000000000000000000000000000000000000000000000000006044820152fd5b60ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9116019060ff8211610a0c57565b156132db57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032350000000000000000000000000000000000000000000000000000006044820152fd5b1561334057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032310000000000000000000000000000000000000000000000000000006044820152fd5b156133a557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032320000000000000000000000000000000000000000000000000000006044820152fd5b1561340a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032330000000000000000000000000000000000000000000000000000006044820152fd5b9081602091031261001b57517fffffffff000000000000000000000000000000000000000000000000000000008116810361001b5790565b90916134b76106209360408452604084019061088c565b91602081840391015261088c565b156134cc57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032340000000000000000000000000000000000000000000000000000006044820152fd5b1561353157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032360000000000000000000000000000000000000000000000000000006044820152fd5b9192906135a784516135a084613133565b111561323e565b600093845b8386106135bb57505050505050565b6135db8683906041020160208101519060ff604160408301519201511692565b9160ff81168061378257505073ffffffffffffffffffffffffffffffffffffffff169061361261360a87613133565b821015613339565b61362761361e826131a3565b8551101561339e565b60209261364f6136468584880101936136418551916131a3565b6131b8565b86511015613403565b6040518481806136877f20c13b0b00000000000000000000000000000000000000000000000000000000968783528b600484016134a0565b0381875afa928315611819577fffffffff00000000000000000000000000000000000000000000000000000000613703946136d19361370998600092613755575b505016146134c5565b73ffffffffffffffffffffffffffffffffffffffff908180851691168111918261371b575b508161370f575b5061352a565b9561214f565b946135ac565b600191501415386136fd565b90915061374b6103418573ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b16151590386136f6565b6137749250803d1061377b575b61376c8183610553565b810190613468565b38806136c8565b503d613762565b90919260019182811460001461380957505050509061370373ffffffffffffffffffffffffffffffffffffffff61370993169182331480156137cd575b6137c8906132d4565b6136d1565b506137c86137ff896113418673ffffffffffffffffffffffffffffffffffffffff166000526008602052604060002090565b54151590506137bf565b929392601e10156138d957600092936138bd6040928351966138988d60209961388f816138638d82019485603c917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008252601c8201520190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610553565b519020946132a3565b9451948594859094939260ff6060936080840197845216602083015260408201520152565b84805203915afa156118195761370990613703600051916136d1565b916020936138bd6000946040519384938d859094939260ff6060936080840197845216602083015260408201520152565b60405160208101907f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a7946921882524660408201523060608201526060815261394e8161051a565b51902090565b94909895917fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d89a989461398f6139d29260409a9636916105ce565b6020815191012089519b60208d019d8e528c73ffffffffffffffffffffffffffffffffffffffff9b8c809b1691015260608d015260808c015260a08b01906129b7565b60c089015260e0880152610100870152166101208501521661014083015261016090818301528152613a0381610536565b519020610620613a1161390a565b6138636040519384926020840190916042927f190000000000000000000000000000000000000000000000000000000000000083527f0100000000000000000000000000000000000000000000000000000000000000600184015260028301526022820152019056fea2646970667358221220be0d6c32fb77ee4ba7e8cc3571028997561b4ecfb758f6ca8933d9180fc7af4564736f6c63430008130033",
  "devdoc": {
    "author": "Stefan George - <stefan@gnosis.io>Richard Meissner - <richard@gnosis.io>",
    "kind": "dev",
    "methods": {
      "addOwnerWithThreshold(address,uint256)": {
        "details": "Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.",
        "params": {
          "_threshold": "New threshold.",
          "owner": "New owner address."
        }
      },
      "approveHash(bytes32)": {
        "details": "Marks a hash as approved. This can be used to validate a hash that is used by a signature.",
        "params": {
          "hashToApprove": "The hash that should be marked as approved for signatures that are verified by this contract."
        }
      },
      "changeThreshold(uint256)": {
        "details": "Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.",
        "params": {
          "_threshold": "New threshold."
        }
      },
      "checkNSignatures(bytes32,bytes,bytes,uint256)": {
        "details": "Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.",
        "params": {
          "data": "That should be signed (this is passed to an external validator contract)",
          "dataHash": "Hash of the data (could be either a message hash or transaction hash)",
          "requiredSignatures": "Amount of required valid signatures.",
          "signatures": "Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash."
        }
      },
      "checkSignatures(bytes32,bytes,bytes)": {
        "details": "Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.",
        "params": {
          "data": "That should be signed (this is passed to an external validator contract)",
          "dataHash": "Hash of the data (could be either a message hash or transaction hash)",
          "signatures": "Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash."
        }
      },
      "disableModule(address,address)": {
        "details": "Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.",
        "params": {
          "module": "Module to be removed.",
          "prevModule": "Module that pointed to the module to be removed in the linked list"
        }
      },
      "enableModule(address)": {
        "details": "Allows to add a module to the whitelist.      This can only be done via a Safe transaction.",
        "params": {
          "module": "Module to be whitelisted."
        }
      },
      "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": {
        "details": "Returns the bytes that are hashed to be signed by owners.",
        "params": {
          "_nonce": "Transaction nonce.",
          "baseGas": "Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)",
          "data": "Data payload.",
          "gasPrice": "Maximum gas price that should be used for this transaction.",
          "gasToken": "Token address (or 0 if ETH) that is used for the payment.",
          "operation": "Operation type.",
          "refundReceiver": "Address of receiver of gas payment (or 0 if tx.origin).",
          "safeTxGas": "Gas that should be used for the safe transaction.",
          "to": "Destination address.",
          "value": "Ether value."
        },
        "returns": {
          "_0": "Transaction hash bytes."
        }
      },
      "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": {
        "details": "Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transferred, even if the user transaction fails.",
        "params": {
          "baseGas": "Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)",
          "data": "Data payload of Safe transaction.",
          "gasPrice": "Gas price that should be used for the payment calculation.",
          "gasToken": "Token address (or 0 if ETH) that is used for the payment.",
          "operation": "Operation type of Safe transaction.",
          "refundReceiver": "Address of receiver of gas payment (or 0 if tx.origin).",
          "safeTxGas": "Gas that should be used for the Safe transaction.",
          "signatures": "Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})",
          "to": "Destination address of Safe transaction.",
          "value": "Ether value of Safe transaction."
        }
      },
      "execTransactionFromModule(address,uint256,bytes,uint8)": {
        "details": "Allows a Module to execute a Safe transaction without any further confirmations.",
        "params": {
          "data": "Data payload of module transaction.",
          "operation": "Operation type of module transaction.",
          "to": "Destination address of module transaction.",
          "value": "Ether value of module transaction."
        }
      },
      "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": {
        "details": "Allows a Module to execute a Safe transaction without any further confirmations and return data",
        "params": {
          "data": "Data payload of module transaction.",
          "operation": "Operation type of module transaction.",
          "to": "Destination address of module transaction.",
          "value": "Ether value of module transaction."
        }
      },
      "getChainId()": {
        "details": "Returns the chain id used by this contract."
      },
      "getModulesPaginated(address,uint256)": {
        "details": "Returns array of modules.",
        "params": {
          "pageSize": "Maximum number of modules that should be returned.",
          "start": "Start of the page."
        },
        "returns": {
          "array": "Array of modules.",
          "next": "Start of the next page."
        }
      },
      "getOwners()": {
        "details": "Returns array of owners.",
        "returns": {
          "_0": "Array of Safe owners."
        }
      },
      "getStorageAt(uint256,uint256)": {
        "details": "Reads `length` bytes of storage in the currents contract",
        "params": {
          "length": "- the number of words (32 bytes) of data to read",
          "offset": "- the offset in the current contract's storage in words to start reading from"
        },
        "returns": {
          "_0": "the bytes that were read."
        }
      },
      "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": {
        "details": "Returns hash to be signed by owners.",
        "params": {
          "_nonce": "Transaction nonce.",
          "baseGas": "Gas costs for data used to trigger the safe transaction.",
          "data": "Data payload.",
          "gasPrice": "Maximum gas price that should be used for this transaction.",
          "gasToken": "Token address (or 0 if ETH) that is used for the payment.",
          "operation": "Operation type.",
          "refundReceiver": "Address of receiver of gas payment (or 0 if tx.origin).",
          "safeTxGas": "Fas that should be used for the safe transaction.",
          "to": "Destination address.",
          "value": "Ether value."
        },
        "returns": {
          "_0": "Transaction hash."
        }
      },
      "isModuleEnabled(address)": {
        "details": "Returns if an module is enabled",
        "returns": {
          "_0": "True if the module is enabled"
        }
      },
      "removeOwner(address,address,uint256)": {
        "details": "Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.",
        "params": {
          "_threshold": "New threshold.",
          "owner": "Owner address to be removed.",
          "prevOwner": "Owner that pointed to the owner to be removed in the linked list"
        }
      },
      "requiredTxGas(address,uint256,bytes,uint8)": {
        "details": "Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`",
        "params": {
          "data": "Data payload of Safe transaction.",
          "operation": "Operation type of Safe transaction.",
          "to": "Destination address of Safe transaction.",
          "value": "Ether value of Safe transaction."
        },
        "returns": {
          "_0": "Estimate without refunds and overhead fees (base transaction and payload data gas costs)."
        }
      },
      "setFallbackHandler(address)": {
        "details": "Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.",
        "params": {
          "handler": "contract to handle fallback calls."
        }
      },
      "setGuard(address)": {
        "details": "Set a guard that checks transactions before execution",
        "params": {
          "guard": "The address of the guard to be used or the 0 address to disable the guard"
        }
      },
      "setup(address[],uint256,address,bytes,address,address,uint256,address)": {
        "details": "Setup function sets initial storage of contract.",
        "params": {
          "_owners": "List of Safe owners.",
          "_threshold": "Number of required confirmations for a Safe transaction.",
          "data": "Data payload for optional delegate call.",
          "fallbackHandler": "Handler for fallback calls to this contract",
          "payment": "Value that should be paid",
          "paymentReceiver": "Address that should receive the payment (or 0 if tx.origin)",
          "paymentToken": "Token that should be used for the payment (0 is ETH)",
          "to": "Contract address for optional delegate call."
        }
      },
      "simulateAndRevert(address,bytes)": {
        "details": "Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.",
        "params": {
          "calldataPayload": "Calldata that should be sent to the target contract (encoded method name and arguments).",
          "targetContract": "Address of the contract containing the code to execute."
        }
      },
      "swapOwner(address,address,address)": {
        "details": "Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.",
        "params": {
          "newOwner": "New owner address.",
          "oldOwner": "Owner address to be replaced.",
          "prevOwner": "Owner that pointed to the owner to be replaced in the linked list"
        }
      }
    },
    "title": "Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOwnerWithThreshold(address,uint256)": {
        "notice": "Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."
      },
      "changeThreshold(uint256)": {
        "notice": "Changes the threshold of the Safe to `_threshold`."
      },
      "disableModule(address,address)": {
        "notice": "Disables the module `module` for the Safe."
      },
      "enableModule(address)": {
        "notice": "Enables the module `module` for the Safe."
      },
      "removeOwner(address,address,uint256)": {
        "notice": "Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."
      },
      "requiredTxGas(address,uint256,bytes,uint8)": {
        "notice": "Deprecated in favor of common/StorageAccessible.sol and will be removed in next version."
      },
      "swapOwner(address,address,address)": {
        "notice": "Replaces the owner `oldOwner` in the Safe with `newOwner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1195,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "singleton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 246,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "modules",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 605,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 607,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "ownerCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 609,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "threshold",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 36685,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "nonce",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 36687,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "_deprecatedDomainSeparator",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 36691,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "signedMessages",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 36697,
        "contract": "src/contracts/vendor/gnosis/GnosisSafe.sol:GnosisSafe",
        "label": "approvedHashes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}