{
  "address": "0x0607e3b2a16048Fa3c77ec3A935ecEd978B5C7F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCutFacet.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCutFacet.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "initContract",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "initData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Diamond.Initialization[]",
          "name": "_initializations",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "rescueNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCutFacet.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCutFacet.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "upgradeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupeFacet.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "pendingOwner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIdsToRemove",
          "type": "bytes4[]"
        }
      ],
      "name": "setERC165",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_kreskoAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeType",
          "type": "uint256"
        }
      ],
      "name": "calcExpectedFee",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "collateralDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountKrAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "getAccountMinimumCollateralValueAtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getCollateralAdjustedAndRealValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "adjustedValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "getCollateralRatiosFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        }
      ],
      "name": "getDepositedCollateralAssetIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDepositedCollateralAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getMintedKreskoAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        }
      ],
      "name": "getMintedKreskoAssetsIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "kreskoAssetDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "kreskoAssetDebtInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kissAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "kreskoAssetDebtInterestTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kissAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "kreskoAssetDebtPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintedKreskoAssetIndex",
          "type": "uint256"
        }
      ],
      "name": "burnKreskoAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "batchCloseKrAssetDebtPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        }
      ],
      "name": "closeKrAssetDebtPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "anchor",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "liquidationIncentive",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "redstoneId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CollateralAsset",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "addCollateralAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_krAsset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "kFactor",
              "type": "uint256"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "supplyLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "anchor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "closeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "redstoneId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct KrAsset",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "addKreskoAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "council",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "extOracleDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "minimumCollateralizationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumDebtValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleDeviationPct",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sequencerUptimeFeed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sequencerGracePeriodTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleTimeout",
              "type": "uint256"
            }
          ],
          "internalType": "struct MinterInitArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ammOracle",
          "type": "address"
        }
      ],
      "name": "updateAMMOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cFactor",
          "type": "uint256"
        }
      ],
      "name": "updateCFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "anchor",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "liquidationIncentive",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "redstoneId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CollateralAsset",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "updateCollateralAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "updateExtOracleDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "updateFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_kFactor",
          "type": "uint256"
        }
      ],
      "name": "updateKFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_krAsset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "kFactor",
              "type": "uint256"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "supplyLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "anchor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "closeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "redstoneId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct KrAsset",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "updateKreskoAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationIncentiveMultiplier",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationIncentiveMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLiquidationMultiplier",
          "type": "uint256"
        }
      ],
      "name": "updateMaxLiquidationMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumCollateralizationRatio",
          "type": "uint256"
        }
      ],
      "name": "updateMinimumCollateralizationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumDebtValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinimumDebtValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oracleDeviationPct",
          "type": "uint256"
        }
      ],
      "name": "updateOracleDeviationPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oracleTimeout",
          "type": "uint256"
        }
      ],
      "name": "updateOracleTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sequencerGracePeriodTime",
          "type": "uint256"
        }
      ],
      "name": "updateSequencerGracePeriodTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencerUptimeFeed",
          "type": "address"
        }
      ],
      "name": "updateSequencerUptimeFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedCollateralAssetIndex",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedCollateralAssetIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userData",
          "type": "bytes"
        }
      ],
      "name": "withdrawCollateralUnchecked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAssetToSeize",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowSeizeUnderflow",
          "type": "bool"
        }
      ],
      "name": "batchLiquidateInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repayKreskoAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAssetToSeize",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowSeizeUnderflow",
          "type": "bool"
        }
      ],
      "name": "liquidateInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repayKreskoAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAssetToSeize",
          "type": "address"
        }
      ],
      "name": "getMaxLiquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxLiquidatableUSD",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAccountLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repayAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_seizeAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_repayAssetIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seizeAssetIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_allowSeizeUnderflow",
          "type": "bool"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintKreskoAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "assetActionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "safetyStateFor",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "enabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp0",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp1",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pause",
              "name": "pause",
              "type": "tuple"
            }
          ],
          "internalType": "struct SafetyState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safetyStateSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "name": "setSafetyStateSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_withDuration",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "toggleAssetsPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ammOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        }
      ],
      "name": "collateralAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "anchor",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "liquidationIncentive",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "redstoneId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CollateralAsset",
          "name": "asset",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        }
      ],
      "name": "collateralExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extOracleDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minimumCollateralizationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumDebtValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationOverflowPercentage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "extOracleDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "oracleDeviationPct",
              "type": "uint256"
            }
          ],
          "internalType": "struct MinterParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ignoreCollateralFactor",
          "type": "bool"
        }
      ],
      "name": "getCollateralValueAndOraclePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oraclePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ignoreKFactor",
          "type": "bool"
        }
      ],
      "name": "getKrAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        }
      ],
      "name": "krAssetExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        }
      ],
      "name": "kreskoAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "kFactor",
              "type": "uint256"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "supplyLimit",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "anchor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "closeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "redstoneId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct KrAsset",
          "name": "asset",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidationMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCollateralizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDebtValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterInitializations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDeviationPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "batchRepayFullStabilityRateInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kissRepayAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getDebtIndexForAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getLastDebtIndexForAccount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastDebtIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPriceRateForAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getStabilityRateConfigurationForAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "debtIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "optimalPriceRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSlope1",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSlope2",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "priceRateDelta",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "stabilityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "stabilityRateBase",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct StabilityRateConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getStabilityRateForAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stabilityRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kiss",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        }
      ],
      "name": "repayFullStabilityRateInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kissRepayAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_kissRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayStabilityRateInterestPartial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "stabilityRateBase",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSlope1",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSlope2",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "optimalPriceRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "priceRateDelta",
              "type": "uint128"
            }
          ],
          "internalType": "struct StabilityRateParams",
          "name": "_setup",
          "type": "tuple"
        }
      ],
      "name": "setupStabilityRateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kiss",
          "type": "address"
        }
      ],
      "name": "updateKiss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "updateStabilityRateAndIndexForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "stabilityRateBase",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSlope1",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSlope2",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "optimalPriceRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "priceRateDelta",
              "type": "uint128"
            }
          ],
          "internalType": "struct StabilityRateParams",
          "name": "_setup",
          "type": "tuple"
        }
      ],
      "name": "updateStabilityRateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_marketStatusOracles",
          "type": "address[]"
        }
      ],
      "name": "batchOracleValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint80",
              "name": "roundId",
              "type": "uint80"
            },
            {
              "internalType": "bool",
              "name": "marketOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct LibUI.Price[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "getAccountData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracleAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "anchorAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "priceRate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilityRate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountUSD",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "kFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ammPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "openFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "closeFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibUI.krAssetInfoUser[]",
              "name": "krAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracleAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "anchorAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountUSD",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "cFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationIncentive",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct LibUI.CollateralAssetInfoUser[]",
              "name": "collateralAssets",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtActualUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralActualUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minCollateralUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingPowerUSD",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.KreskoUser",
          "name": "user",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.Balance[]",
          "name": "balances",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerBlocks",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "rewardTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct LibUI.StakingData[]",
          "name": "stakingData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_allTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_priceFeeds",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_marketStatusOracles",
          "type": "address[]"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.TokenMetadata[]",
          "name": "metadatas",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint80",
              "name": "roundId",
              "type": "uint80"
            },
            {
              "internalType": "bool",
              "name": "marketOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct LibUI.Price[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_collateralAssets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_krAssets",
          "type": "address[]"
        }
      ],
      "name": "getGlobalData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "anchorAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationIncentive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "marketOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct LibUI.CollateralAssetInfo[]",
          "name": "collateralAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "oracleAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "anchorAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ammPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kFactor",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "marketOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct LibUI.krAssetInfo[]",
          "name": "krAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minDebtValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minCollateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.ProtocolParams",
          "name": "protocolParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pairAddresses",
          "type": "address[]"
        }
      ],
      "name": "getPairsData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals0",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "decimals1",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.PairData[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bd2de984829a6dac09125bec41c2aae4ddaf0853e4f1798b7d813c500ba6788",
  "receipt": {
    "to": null,
    "from": "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d",
    "contractAddress": "0x0607e3b2a16048Fa3c77ec3A935ecEd978B5C7F3",
    "transactionIndex": 1,
    "gasUsed": "1658431",
    "logsBloom": "0x
    "blockHash": "0xff196784649674c57f18480c79caf785f08ab13284680fc8e4808a1dfe8582b8",
    "transactionHash": "0x7bd2de984829a6dac09125bec41c2aae4ddaf0853e4f1798b7d813c500ba6788",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30746136,
        "transactionHash": "0x7bd2de984829a6dac09125bec41c2aae4ddaf0853e4f1798b7d813c500ba6788",
        "address": "0x0607e3b2a16048Fa3c77ec3A935ecEd978B5C7F3",
        "topics": [
          "0xa0c23fcf5410eea32b9b484ee59484051c2dfe24a8a89daf0805c64e0f0f21ef",
          "0x000000000000000000000000b48bb6b68ab4d366b4f9a30ee6f7ee55125c2d9d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0xff196784649674c57f18480c79caf785f08ab13284680fc8e4808a1dfe8582b8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30746136,
        "transactionHash": "0x7bd2de984829a6dac09125bec41c2aae4ddaf0853e4f1798b7d813c500ba6788",
        "address": "0x0607e3b2a16048Fa3c77ec3A935ecEd978B5C7F3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b48bb6b68ab4d366b4f9a30ee6f7ee55125c2d9d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xff196784649674c57f18480c79caf785f08ab13284680fc8e4808a1dfe8582b8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30746136,
        "transactionHash": "0x7bd2de984829a6dac09125bec41c2aae4ddaf0853e4f1798b7d813c500ba6788",
        "address": "0x0607e3b2a16048Fa3c77ec3A935ecEd978B5C7F3",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000d50b905a377496776f1e78bf316f484acf36e1490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021f931c1c0000000000000000000000000000000000000000000000000000000033400db000000000000000000000000000000000000000000000000000000000000000000000000000000000698fd766843ae02930424aaba87b1aa16b462a29000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004cdffacc60000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000adfca15e000000000000000000000000000000000000000000000000000000007a0ed62700000000000000000000000000000000000000000000000000000000000000000000000000000000a83466ea14b439fd0c0f8af57e16e195b291269e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000579ba509700000000000000000000000000000000000000000000000000000000158ef93e000000000000000000000000000000000000000000000000000000008da5cb5b00000000000000000000000000000000000000000000000000000000e30c397800000000000000000000000000000000000000000000000000000000f2fde38b000000000000000000000000000000000000000000000000000000000000000000000000000000007366d18831e535f3ab0b804c01d454dad72b4c36000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000007248a9ca3000000000000000000000000000000000000000000000000000000009010d07c00000000000000000000000000000000000000000000000000000000ca15c873000000000000000000000000000000000000000000000000000000002f2ff15d0000000000000000000000000000000000000000000000000000000091d148540000000000000000000000000000000000000000000000000000000036568abe00000000000000000000000000000000000000000000000000000000d547741f000000000000000000000000000000000000000000000000000000000000000000000000000000003dda0a9c6008ab326d09837e44f6e174b6b178a60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000022a8480910000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0xff196784649674c57f18480c79caf785f08ab13284680fc8e4808a1dfe8582b8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30746136,
        "transactionHash": "0x7bd2de984829a6dac09125bec41c2aae4ddaf0853e4f1798b7d813c500ba6788",
        "address": "0x0607e3b2a16048Fa3c77ec3A935ecEd978B5C7F3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb9dacdf02281f2e98ddbadaaf44db270b3d5a916342df47c59f77937a6bcd5d8",
          "0x000000000000000000000000b48bb6b68ab4d366b4f9a30ee6f7ee55125c2d9d",
          "0x000000000000000000000000b48bb6b68ab4d366b4f9a30ee6f7ee55125c2d9d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xff196784649674c57f18480c79caf785f08ab13284680fc8e4808a1dfe8582b8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30746136,
        "transactionHash": "0x7bd2de984829a6dac09125bec41c2aae4ddaf0853e4f1798b7d813c500ba6788",
        "address": "0x0607e3b2a16048Fa3c77ec3A935ecEd978B5C7F3",
        "topics": [
          "0x91d493a38a37c26f1d48ee98b1ec0af796b36f960ef63328655fb91b1541f50d",
          "0x000000000000000000000000b48bb6b68ab4d366b4f9a30ee6f7ee55125c2d9d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 4,
        "blockHash": "0xff196784649674c57f18480c79caf785f08ab13284680fc8e4808a1dfe8582b8"
      }
    ],
    "blockNumber": 30746136,
    "cumulativeGasUsed": "1658431",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d",
    [
      {
        "facetAddress": "0xD50B905A377496776F1e78BF316F484ACF36E149",
        "action": 0,
        "functionSelectors": [
          "0x1f931c1c",
          "0x33400db0"
        ]
      },
      {
        "facetAddress": "0x698FD766843aE02930424aAba87B1AA16B462A29",
        "action": 0,
        "functionSelectors": [
          "0xcdffacc6",
          "0x52ef6b2c",
          "0xadfca15e",
          "0x7a0ed627"
        ]
      },
      {
        "facetAddress": "0xA83466Ea14b439Fd0C0f8af57e16E195b291269E",
        "action": 0,
        "functionSelectors": [
          "0x79ba5097",
          "0x158ef93e",
          "0x8da5cb5b",
          "0xe30c3978",
          "0xf2fde38b"
        ]
      },
      {
        "facetAddress": "0x7366d18831e535f3Ab0b804C01d454DaD72B4c36",
        "action": 0,
        "functionSelectors": [
          "0x248a9ca3",
          "0x9010d07c",
          "0xca15c873",
          "0x2f2ff15d",
          "0x91d14854",
          "0x36568abe",
          "0xd547741f"
        ]
      },
      {
        "facetAddress": "0x3dda0A9c6008AB326d09837E44F6E174b6b178A6",
        "action": 0,
        "functionSelectors": [
          "0x2a848091",
          "0x01ffc9a7"
        ]
      }
    ],
    []
  ],
  "numDeployments": 3,
  "solcInputHash": "2796721ae8ad06f4477f7f47306878f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCutFacet.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCutFacet.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"initContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"internalType\":\"struct Diamond.Initialization[]\",\"name\":\"_initializations\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rescueNative()\":{\"notice\":\"A rescue function for missent msg.value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/diamond/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"src/contracts/diamond/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-complex-fallback  */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable no-empty-blocks */\\n\\npragma solidity >=0.8.19;\\n\\nimport {IDiamondCutFacet} from \\\"./interfaces/IDiamondCutFacet.sol\\\";\\nimport {Authorization, Role} from \\\"../libs/Authorization.sol\\\";\\nimport {GeneralEvent} from \\\"../libs/Events.sol\\\";\\nimport {Error} from \\\"../libs/Errors.sol\\\";\\n\\nimport {initializeDiamondCut} from \\\"./libs/LibDiamondCut.sol\\\";\\nimport {ds} from \\\"./DiamondStorage.sol\\\";\\n\\ncontract Diamond {\\n    struct Initialization {\\n        address initContract;\\n        bytes initData;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        IDiamondCutFacet.FacetCut[] memory _diamondCut,\\n        Initialization[] memory _initializations\\n    ) {\\n        ds().initialize(_owner);\\n        ds().diamondCut(_diamondCut, address(0), \\\"\\\");\\n        Authorization._grantRole(Role.ADMIN, _owner);\\n\\n        for (uint256 i = 0; i < _initializations.length; i++) {\\n            initializeDiamondCut(_initializations[i].initContract, _initializations[i].initData);\\n        }\\n\\n        emit GeneralEvent.Initialized(_owner, ds().storageVersion);\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        // get facet from function selectors\\n        address facet = ds().selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice A rescue function for missent msg.value\\n     */\\n    function rescueNative() external {\\n        require(msg.sender == ds().contractOwner, Error.DIAMOND_INVALID_OWNER);\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xf9c20be3942b01f12f68d84075141399b45a1c981c7fe5d15588c44d97418861\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport {EnumerableSet} from \\\"../libs/EnumerableSet.sol\\\";\\nimport {FacetAddressAndPosition, FacetFunctionSelectors, RoleData, ENTERED, NOT_ENTERED} from \\\"./DiamondTypes.sol\\\";\\n\\nimport {LibDiamondCut} from \\\"./libs/LibDiamondCut.sol\\\";\\nimport {LibOwnership} from \\\"./libs/LibOwnership.sol\\\";\\n\\nusing LibDiamondCut for DiamondState global;\\nusing LibOwnership for DiamondState global;\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Main Layout                                */\\n/* -------------------------------------------------------------------------- */\\n\\nstruct DiamondState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Proxy                                    */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Maps function selector to the facet address and\\n    /// the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    /// @notice Maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    /// @notice Facet addresses\\n    address[] facetAddresses;\\n    /// @notice ERC165 query implementation\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Initialization status\\n    bool initialized;\\n    /// @notice Domain field separator\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Ownership                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Current owner of the diamond\\n    address contractOwner;\\n    /// @notice Pending new diamond owner\\n    address pendingOwner;\\n    /// @notice Storage version\\n    uint8 storageVersion;\\n    /// @notice address(this) replacement for FF\\n    address self;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Access Control                               */\\n    /* -------------------------------------------------------------------------- */\\n    mapping(bytes32 => RoleData) _roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Reentrancy                                 */\\n    /* -------------------------------------------------------------------------- */\\n    uint256 entered;\\n}\\n\",\"keccak256\":\"0x46be980e96d66e203133362904311f3c54109c9ccbcc19cead9634491002ec79\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.19;\\n\\nimport {DiamondState} from \\\"./DiamondState.sol\\\";\\n\\n// Storage position\\nbytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"kresko.diamond.storage\\\");\\n\\nfunction ds() pure returns (DiamondState storage state) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x1da25b73a9a7cd260211540c21d2094392dc4c993cbe36ec8a7561ea00794f87\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/// @dev set the initial value to 1 as we do not\\n/// wanna hinder possible gas refunds by setting it to 0 on exit.\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Reentrancy                                 */\\n/* -------------------------------------------------------------------------- */\\nuint256 constant NOT_ENTERED = 1;\\nuint256 constant ENTERED = 2;\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\nstruct FacetAddressAndPosition {\\n    address facetAddress;\\n    // position in facetFunctionSelectors.functionSelectors array\\n    uint96 functionSelectorPosition;\\n}\\n\\nstruct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    // position of facetAddress in facetAddresses array\\n    uint256 facetAddressPosition;\\n}\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\",\"keccak256\":\"0x60b064cbdf13a8e5fe71c1791bd8d885cef34bc09994059fe6fed06eaef7b64e\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IAuthorizationFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\ninterface IAuthorizationFacet {\\n    /**\\n     * @dev OpenZeppelin\\n     * Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * @notice WARNING:\\n     * When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block.\\n     *\\n     * See the following forum post for more information:\\n     * - https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296\\n     *\\n     * @dev Kresko\\n     *\\n     * TL;DR above:\\n     *\\n     * - If you iterate the EnumSet outside a single block scope you might get different results.\\n     * - Since when EnumSet member is deleted it is replaced with the highest index.\\n     * @return address with the `role`\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     * @notice See warning in {getRoleMember} if combining these two\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * @notice To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns true if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * @notice Requirements\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * @notice Requirements\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x42e06a216165d7c4e017cf802487116edf3f70f2f7dd20c62587a33519936f64\",\"license\":\"BUSL-1.1\"},\"src/contracts/diamond/interfaces/IDiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\nimport {DiamondEvent} from \\\"../../libs/Events.sol\\\";\\n\\ninterface IDiamondCutFacet {\\n    /// @dev  Add=0, Replace=1, Remove=2\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /**\\n     *@notice Add/replace/remove any number of functions, optionally execute a function with delegatecall\\n     * @param _diamondCut Contains the facet addresses and function selectors\\n     * @param _init The address of the contract or facet to execute _calldata\\n     * @param _calldata A function call, including function selector and arguments\\n     *                  _calldata is executed with delegatecall on _init\\n     */\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n    /**\\n     * @notice Use an initializer contract without doing modifications\\n     * @param _init The address of the contract or facet to execute _calldata\\n     * @param _calldata A function call, including function selector and arguments\\n     * - _calldata is executed with delegatecall on _init\\n     */\\n    function upgradeState(address _init, bytes calldata _calldata) external;\\n}\\n\",\"keccak256\":\"0x4a1102f4dc50aecbf6d5c20d685466e44df60150bb6b91a3650bfe0fe1863193\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupeFacet {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x88d99e8bb186ba6bceb110ab7e6a639a8dc9066385aa7fe2a8fe963ac2ca1394\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondOwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/// @title Contract Ownership\\ninterface IDiamondOwnershipFacet {\\n    /**\\n     * @notice Get the address of the owner\\n     * @return owner_ The address of the owner.\\n     */\\n    function owner() external view returns (address owner_);\\n\\n    /**\\n     * @notice Get the address of pending owner\\n     * @return pendingOwner_ The address of the pending owner.\\n     **/\\n    function pendingOwner() external view returns (address pendingOwner_);\\n\\n    /**\\n     * @notice Initiate ownership transfer to a new address\\n     * @notice caller must be the current contract owner\\n     * @notice the new owner cannot be address(0)\\n     * @notice emits a {AuthEvent.PendingOwnershipTransfer} event\\n     * @param _newOwner address that is set as the pending new owner\\n     */\\n    function transferOwnership(address _newOwner) external;\\n\\n    /**\\n     * @notice Transfer the ownership to the new pending owner\\n     * @notice caller must be the pending owner\\n     * @notice emits a {AuthEvent.OwnershipTransferred} event\\n     */\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @notice Check if the contract is initialized\\n     * @return initialized_ bool True if the contract is initialized, false otherwise.\\n     */\\n    function initialized() external view returns (bool initialized_);\\n}\\n\",\"keccak256\":\"0xf456be7eb02028cd24ca4253ae4fc77743037bda1d98f35e0d861294e1c25420\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\nimport {IDiamondCutFacet} from \\\"../interfaces/IDiamondCutFacet.sol\\\";\\n\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\nimport {DiamondEvent} from \\\"../../libs/Events.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction initializeDiamondCut(address _init, bytes memory _calldata) {\\n    if (_init == address(0)) {\\n        require(_calldata.length == 0, \\\"DiamondCut: _init is address(0) but _calldata is not empty\\\");\\n    } else {\\n        require(_calldata.length > 0, \\\"DiamondCut: _calldata is empty but _init is not address(0)\\\");\\n        Meta.enforceHasContractCode(_init, \\\"DiamondCut: _init address has no code\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCut: _init function reverted\\\");\\n            }\\n        }\\n    }\\n}\\n\\nlibrary LibDiamondCut {\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Diamond Functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function diamondCut(\\n        DiamondState storage self,\\n        IDiamondCutFacet.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCutFacet.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCutFacet.FacetCutAction.Add) {\\n                self.addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCutFacet.FacetCutAction.Replace) {\\n                self.replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCutFacet.FacetCutAction.Remove) {\\n                self.removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondEvent.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondCut: Can't add function that already exists\\\");\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondCut: Can't replace function with same function\\\");\\n            self.removeFunction(oldFacetAddress, selector);\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            self.removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondState storage self, address _facetAddress) internal {\\n        Meta.enforceHasContractCode(_facetAddress, \\\"DiamondCut: New facet has no code\\\");\\n        self.facetFunctionSelectors[_facetAddress].facetAddressPosition = self.facetAddresses.length;\\n        self.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondState storage self,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        self.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        self.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondState storage self, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondCut: Can't remove function that doesn't exist\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = self.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = self.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = self.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            self.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            self.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete self.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = self.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = self.facetAddresses[lastFacetAddressPosition];\\n                self.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                self.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            self.facetAddresses.pop();\\n            delete self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2ed80ff2e44d5dfa3ec9cd896428a3cdcf2444dcd80c8ac37706b50e5437b19\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport {IERC165} from \\\"../../shared/IERC165.sol\\\";\\nimport {IDiamondCutFacet} from \\\"../interfaces/IDiamondCutFacet.sol\\\";\\nimport {IDiamondLoupeFacet} from \\\"../interfaces/IDiamondLoupeFacet.sol\\\";\\nimport {IDiamondOwnershipFacet} from \\\"../interfaces/IDiamondOwnershipFacet.sol\\\";\\nimport {IAuthorizationFacet} from \\\"../interfaces/IAuthorizationFacet.sol\\\";\\n\\nimport {GeneralEvent, AuthEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\n\\nimport {NOT_ENTERED} from \\\"../DiamondTypes.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\nlibrary LibOwnership {\\n    /* -------------------------------------------------------------------------- */\\n    /*                         Initialization & Ownership                         */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Ownership initializer\\n    /// @notice Only called on the first deployment\\n    function initialize(DiamondState storage self, address _owner) internal {\\n        require(!self.initialized, Error.ALREADY_INITIALIZED);\\n        self.entered = NOT_ENTERED;\\n        self.initialized = true;\\n        self.storageVersion++;\\n        self.contractOwner = _owner;\\n\\n        self.supportedInterfaces[type(IDiamondLoupeFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        self.supportedInterfaces[type(IDiamondCutFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IDiamondOwnershipFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IAuthorizationFacet).interfaceId] = true;\\n\\n        emit GeneralEvent.Deployed(_owner, self.storageVersion);\\n        emit AuthEvent.OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Initiate ownership transfer to a new address\\n     * @param _newOwner address that is set as the pending new owner\\n     * @notice caller must be the current contract owner\\n     */\\n    function initiateOwnershipTransfer(DiamondState storage self, address _newOwner) internal {\\n        require(Meta.msgSender() == self.contractOwner, Error.DIAMOND_INVALID_OWNER);\\n        require(_newOwner != address(0), \\\"DS: Owner cannot be 0-address\\\");\\n\\n        self.pendingOwner = _newOwner;\\n\\n        emit AuthEvent.PendingOwnershipTransfer(self.contractOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfer the ownership to the new pending owner\\n     * @notice caller must be the pending owner\\n     */\\n    function finalizeOwnershipTransfer(DiamondState storage self) internal {\\n        address sender = Meta.msgSender();\\n        require(sender == self.pendingOwner, Error.DIAMOND_INVALID_PENDING_OWNER);\\n        self.contractOwner = self.pendingOwner;\\n        self.pendingOwner = address(0);\\n\\n        emit AuthEvent.OwnershipTransferred(self.contractOwner, sender);\\n    }\\n}\\n\",\"keccak256\":\"0x7ef862d36f9bdf2a3f3f379f40f2c6db76e17caa5e3d11aa4209162e56a93c17\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport {IKreskoAsset} from \\\"./IKreskoAsset.sol\\\";\\n\\ninterface IERC4626Upgradeable {\\n    /**\\n     * @notice The underlying Kresko Asset\\n     */\\n    function asset() external view returns (IKreskoAsset);\\n\\n    /**\\n     * @notice Deposit KreskoAssets for equivalent amount of anchor tokens\\n     * @param assets Amount of KreskoAssets to deposit\\n     * @param receiver Address to send shares to\\n     * @return shares Amount of shares minted\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Withdraw KreskoAssets for equivalent amount of anchor tokens\\n     * @param assets Amount of KreskoAssets to withdraw\\n     * @param receiver Address to send KreskoAssets to\\n     * @param owner Address to burn shares from\\n     * @return shares Amount of shares burned\\n     * @dev shares are burned from owner, not msg.sender\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256 assets);\\n\\n    function maxRedeem(address owner) external view returns (uint256 assets);\\n\\n    function maxWithdraw(address owner) external view returns (uint256 assets);\\n\\n    /**\\n     * @notice Mint shares of anchor tokens for equivalent amount of KreskoAssets\\n     * @param shares Amount of shares to mint\\n     * @param receiver Address to send shares to\\n     * @return assets Amount of KreskoAssets redeemed\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Track the underlying amount\\n     * @return Total supply for the underlying\\n     */\\n    function totalAssets() external view returns (uint256);\\n\\n    /**\\n     * @notice Redeem shares of anchor for KreskoAssets\\n     * @param shares Amount of shares to redeem\\n     * @param receiver Address to send KreskoAssets to\\n     * @param owner Address to burn shares from\\n     * @return assets Amount of KreskoAssets redeemed\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x6467632af4820305e461c0940a2cc2edf7ea171a881b5c3e82facf50f85cad78\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IKreskoAsset.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC20Permit} from \\\"../shared/IERC20Permit.sol\\\";\\nimport {IERC165} from \\\"../shared/IERC165.sol\\\";\\n\\ninterface IKreskoAsset is IERC20Permit, IAccessControlEnumerableUpgradeable, IERC165 {\\n    /**\\n     * @notice Rebase information\\n     * @param positive supply increasing/reducing rebase\\n     * @param denominator the denominator for the operator, 1 ether = 1\\n     */\\n    struct Rebase {\\n        bool positive;\\n        uint256 denominator;\\n    }\\n\\n    /**\\n     * @notice Initializes a KreskoAsset ERC20 token.\\n     * @dev Intended to be operated by the Kresko smart contract.\\n     * @param _name The name of the KreskoAsset.\\n     * @param _symbol The symbol of the KreskoAsset.\\n     * @param _decimals Decimals for the asset.\\n     * @param _admin The adminstrator of this contract.\\n     * @param _kresko The protocol, can perform mint and burn.\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _admin,\\n        address _kresko\\n    ) external;\\n\\n    function kresko() external view returns (address);\\n\\n    function rebaseInfo() external view returns (Rebase memory);\\n\\n    function isRebased() external view returns (bool);\\n\\n    /**\\n     * @notice Perform a rebase, changing the denumerator and its operator\\n     * @param _denominator the denumerator for the operator, 1 ether = 1\\n     * @param _positive supply increasing/reducing rebase\\n     * @param _pools UniswapV2Pair address to sync so we wont get rekt by skim() calls.\\n     * @dev denumerator values 0 and 1 ether will disable the rebase\\n     */\\n    function rebase(uint256 _denominator, bool _positive, address[] calldata _pools) external;\\n\\n    /**\\n     * @notice Updates ERC20 metadata for the token in case eg. a ticker change\\n     * @param _name new name for the asset\\n     * @param _symbol new symbol for the asset\\n     * @param _version number that must be greater than latest emitted `Initialized` version\\n     */\\n    function reinitializeERC20(string memory _name, string memory _symbol, uint8 _version) external;\\n\\n    /**\\n     * @notice Returns the total supply of the token.\\n     * @notice This amount is adjusted by rebases.\\n     * @inheritdoc IERC20Permit\\n     */\\n    function totalSupply() external view override(IERC20Permit) returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of @param _account\\n     * @notice This amount is adjusted by rebases.\\n     * @inheritdoc IERC20Permit\\n     */\\n    function balanceOf(address _account) external view override(IERC20Permit) returns (uint256);\\n\\n    /// @inheritdoc IERC20Permit\\n    function allowance(address _owner, address _account) external view override(IERC20Permit) returns (uint256);\\n\\n    /// @inheritdoc IERC20Permit\\n    function approve(address spender, uint256 amount) external override returns (bool);\\n\\n    /// @inheritdoc IERC20Permit\\n    function transfer(address _to, uint256 _amount) external override(IERC20Permit) returns (bool);\\n\\n    /// @inheritdoc IERC20Permit\\n    function transferFrom(address _from, address _to, uint256 _amount) external override(IERC20Permit) returns (bool);\\n\\n    /**\\n     * @notice Mints tokens to an address.\\n     * @dev Only callable by operator.\\n     * @dev Internal balances are always unrebased, events emitted are not.\\n     * @param _to The address to mint tokens to.\\n     * @param _amount The amount of tokens to mint.\\n     */\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burns tokens from an address.\\n     * @dev Only callable by operator.\\n     * @dev Internal balances are always unrebased, events emitted are not.\\n     * @param _from The address to burn tokens from.\\n     * @param _amount The amount of tokens to burn.\\n     */\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xc4d44a28dc2b2a19f34beac77ffb166c0cb12355515ae58e4afee7368520b8cf\",\"license\":\"BUSL-1.1\"},\"src/contracts/kreskoasset/IKreskoAssetAnchor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC165} from \\\"../shared/IERC165.sol\\\";\\nimport {IERC20Permit} from \\\"../shared/IERC20Permit.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"./IKreskoAssetIssuer.sol\\\";\\nimport {IKreskoAsset} from \\\"./IKreskoAsset.sol\\\";\\nimport {IERC4626Upgradeable} from \\\"./IERC4626Upgradeable.sol\\\";\\n\\ninterface IKreskoAssetAnchor is\\n    IKreskoAssetIssuer,\\n    IERC4626Upgradeable,\\n    IERC20Permit,\\n    IAccessControlEnumerableUpgradeable,\\n    IERC165\\n{\\n    function totalAssets() external view override(IERC4626Upgradeable) returns (uint256);\\n\\n    /**\\n     * @notice Initializes the Kresko Asset Anchor.\\n     *\\n     * @param _asset The underlying (Kresko) Asset\\n     * @param _name Name of the anchor token\\n     * @param _symbol Symbol of the anchor token\\n     * @param _admin The adminstrator of this contract.\\n     * @dev Decimals are not supplied as they are read from the underlying Kresko Asset\\n     */\\n    function initialize(IKreskoAsset _asset, string memory _name, string memory _symbol, address _admin) external;\\n\\n    /**\\n     * @notice Updates ERC20 metadata for the token in case eg. a ticker change\\n     * @param _name new name for the asset\\n     * @param _symbol new symbol for the asset\\n     * @param _version number that must be greater than latest emitted `Initialized` version\\n     */\\n    function reinitializeERC20(string memory _name, string memory _symbol, uint8 _version) external;\\n}\\n\",\"keccak256\":\"0x73d8fcfc54759a7e8c1eed4e00e22760f2c04757a33f12339232afb8e747a8a1\",\"license\":\"BUSL-1.1\"},\"src/contracts/kreskoasset/IKreskoAssetIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n/// @title KreskoAsset issuer interface\\n/// @author Kresko\\n/// @notice Contract that can issue/destroy Kresko Assets through Kresko\\n/// @dev This interface is used by KISS & KreskoAssetAnchor\\ninterface IKreskoAssetIssuer {\\n    /**\\n     * @notice Mints @param _assets of krAssets for @param _to,\\n     * @notice Mints relative @return _shares of wkrAssets\\n     */\\n    function issue(uint256 _assets, address _to) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Burns @param _assets of krAssets from @param _from,\\n     * @notice Burns relative @return _shares of wkrAssets\\n     */\\n    function destroy(uint256 _assets, address _from) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Returns the total amount of anchor tokens out\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Returns the total amount of krAssets out\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x623d38271ac967e40374d7fb7f0bafe887a6b80ec65a5a02150675c1fc85d18c\",\"license\":\"BUSL-1.1\"},\"src/contracts/kreskoasset/Rebase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {IKreskoAsset} from \\\"../kreskoasset/IKreskoAsset.sol\\\";\\n\\nlibrary RebaseMath {\\n    using FixedPointMathLib for uint256;\\n\\n    /**\\n     * @notice Unrebase a value by a given rebase struct.\\n     * @param self The value to unrebase.\\n     * @param _rebase The rebase struct.\\n     * @return The unrebased value.\\n     */\\n    function unrebase(uint256 self, IKreskoAsset.Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.divWadDown(_rebase.denominator) : self.mulWadDown(_rebase.denominator);\\n    }\\n\\n    /**\\n     * @notice Rebase a value by a given rebase struct.\\n     * @param self The value to rebase.\\n     * @param _rebase The rebase struct.\\n     * @return The rebased value.\\n     */\\n    function rebase(uint256 self, IKreskoAsset.Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.mulWadDown(_rebase.denominator) : self.divWadDown(_rebase.denominator);\\n    }\\n}\\n\",\"keccak256\":\"0xf981ad23fd87634a6da3089d58cee01cd81da20aceee12963daab307a28a1ad1\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.19;\\n\\nimport {Error} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Library for operations on arrays\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Removes an element by copying the last element to the element to remove's place and removing\\n     * the last element.\\n     * @param _addresses The address array containing the item to be removed.\\n     * @param _elementToRemove The element to be removed.\\n     * @param _elementIndex The index of the element to be removed.\\n     */\\n    function removeAddress(address[] storage _addresses, address _elementToRemove, uint256 _elementIndex) internal {\\n        require(_addresses[_elementIndex] == _elementToRemove, Error.INCORRECT_INDEX);\\n\\n        uint256 lastIndex = _addresses.length - 1;\\n        // If the index to remove is not the last one, overwrite the element at the index\\n        // with the last element.\\n        if (_elementIndex != lastIndex) {\\n            _addresses[_elementIndex] = _addresses[lastIndex];\\n        }\\n        // Remove the last element.\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xefce409490fa5c0135ce2ddb52ed47157d0ecb039a86320f2a2a83867d0101b2\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport {IGnosisSafeL2} from \\\"../vendor/gnosis/IGnosisSafeL2.sol\\\";\\nimport {Strings} from \\\"./Strings.sol\\\";\\nimport {AuthEvent} from \\\"./Events.sol\\\";\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\nimport {Error} from \\\"./Errors.sol\\\";\\nimport {Meta} from \\\"./Meta.sol\\\";\\nimport {ds} from \\\"../diamond/DiamondStorage.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/**\\n * @title Shared library for access control\\n * @author Kresko\\n */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    Roles                                   */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Role {\\n    /// @dev role that grants other roles\\n    bytes32 constant DEFAULT_ADMIN = 0x00;\\n    /// @dev  keccak256(\\\"kresko.roles.minter.admin\\\")\\n    bytes32 constant ADMIN = 0xb9dacdf02281f2e98ddbadaaf44db270b3d5a916342df47c59f77937a6bcd5d8;\\n    /// @dev keccak256(\\\"kresko.roles.minter.operator\\\")\\n    bytes32 constant OPERATOR = 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd;\\n    /// @dev keccak256(\\\"kresko.roles.minter.manager\\\")\\n    bytes32 constant MANAGER = 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0;\\n    /// @dev keccak256(\\\"kresko.roles.minter.safety.council\\\")\\n    bytes32 constant SAFETY_COUNCIL = 0x9c387ecf1663f9144595993e2c602b45de94bf8ba3a110cb30e3652d79b581c0;\\n}\\n\\nlibrary Authorization {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        return ds()._roles[role].members[account];\\n    }\\n\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return ds()._roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `Meta.msgSender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        _checkRole(role, Meta.msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return ds()._roles[role].adminRole;\\n    }\\n\\n    function getRoleMember(bytes32 role, uint256 index) internal view returns (address) {\\n        return ds()._roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @notice setups the security council\\n     *\\n     */\\n    function setupSecurityCouncil(address _councilAddress) internal {\\n        require(getRoleMemberCount(Role.SAFETY_COUNCIL) == 0, Error.SAFETY_COUNCIL_EXISTS);\\n        require(IGnosisSafeL2(_councilAddress).isOwner(msg.sender), Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_councilAddress] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_councilAddress);\\n\\n        emit AuthEvent.RoleGranted(Role.SAFETY_COUNCIL, _councilAddress, Meta.msgSender());\\n    }\\n\\n    function transferSecurityCouncil(address _newCouncil) internal {\\n        checkRole(Role.SAFETY_COUNCIL);\\n        require(IGnosisSafeL2(_newCouncil).getOwners().length >= 5, Error.MULTISIG_NOT_ENOUGH_OWNERS);\\n\\n        // As this is called by the multisig - just check that it's not an EOA\\n        ds()._roles[Role.SAFETY_COUNCIL].members[msg.sender] = false;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].remove(msg.sender);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_newCouncil] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_newCouncil);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal {\\n        require(account == Meta.msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        ds()._roles[role].adminRole = adminRole;\\n        emit AuthEvent.RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * @notice Cannot grant the role `SAFETY_COUNCIL` - must be done via explicit function.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal ensureNotSafetyCouncil(role) {\\n        if (!hasRole(role, account)) {\\n            ds()._roles[role].members[account] = true;\\n            ds()._roleMembers[role].add(account);\\n            emit AuthEvent.RoleGranted(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            ds()._roles[role].members[account] = false;\\n            ds()._roleMembers[role].remove(account);\\n            emit AuthEvent.RoleRevoked(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensure we use the explicit `grantSafetyCouncilRole` function.\\n     */\\n    modifier ensureNotSafetyCouncil(bytes32 role) {\\n        require(role != Role.SAFETY_COUNCIL, Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x90194ceeffa72ed5daaa2062f19dafb9d500772e82474239d4fc2e04b6d8c7e8\",\"license\":\"MIT\"},\"src/contracts/libs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity >=0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xfdef0c587bb7f19214c3469cb3bd16a8e4671b24d75acf6e85ea808f054bcb87\",\"license\":\"MIT\"},\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity <0.9.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // KrAsset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_MIN_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // KrAsset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Cannot liquidate zero value\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n    string public constant KRASSET_MARKET_CLOSED = \\\"242\\\"; // KrAsset's market is currently closed\\n    string public constant NO_KRASSETS_MINTED = \\\"243\\\"; // Account has no active KreskoAsset positions\\n    string public constant NO_COLLATERAL_DEPOSITS = \\\"244\\\"; // Account has no active Collateral deposits\\n    string public constant INVALID_ORACLE_DECIMALS = \\\"245\\\"; // Oracle decimals do not match extOracleDecimals\\n    string public constant PARAM_LIQUIDATION_OVERFLOW_LOW = \\\"246\\\"; // Liquidation overflow is less than MIN_LIQUIDATION_OVERFLOW\\n    string public constant INVALID_ORACLE_DEVIATION_PCT = \\\"247\\\"; // Oracle deviation percentage is greater than 100%\\n    string public constant SEIZED_COLLATERAL_UNDERFLOW = \\\"248\\\"; // Amount of collateral seized is less than the amount calculated.\\n    string public constant COLLATERAL_AMOUNT_TOO_LOW = \\\"249\\\"; // Amount of krAsset collateral being deposited is less than the minimum amount\\n    string public constant PARAM_COLLATERAL_RATIO_LOW_THAN_LT = \\\"250\\\"; // Minimum collateral ratio less than LT\\n    string public constant ZERO_DEBT = \\\"251\\\"; // debt must be greater than 0\\n    string public constant ORACLE_PRICE_UNSTABLE = \\\"252\\\"; // debt must be greater than 0\\n    string public constant NEGATIVE_ORACLE_PRICE = \\\"253\\\"; // Oracle price received is negative\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n    string public constant PRICEFEEDS_MUST_MATCH_STATUS_FEEDS = \\\"401\\\"; // Supplied price feeds must match status feeds in length\\n    string public constant INCORRECT_INDEX = \\\"402\\\"; // Array index mismatch\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n    string public constant INVALID_SCALED_AMOUNT = \\\"511\\\"; // amount of debt scaled must be greater than 0\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              6. STABILITY RATES                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant STABILITY_RATES_ALREADY_INITIALIZED = \\\"601\\\"; // stability rates for the asset are already initialized\\n    string public constant INVALID_OPTIMAL_RATE = \\\"602\\\"; // the optimal price rate configured is less than 1e27 for the asset\\n    string public constant INVALID_PRICE_RATE_DELTA = \\\"603\\\"; // the price rate delta configured is less than 1e27 for the asset\\n    string public constant STABILITY_RATES_NOT_INITIALIZED = \\\"604\\\"; // the stability rates for the asset are not initialized\\n    string public constant STABILITY_RATE_OVERFLOW = \\\"605\\\"; // the stability rates is > max uint128\\n    string public constant DEBT_INDEX_OVERFLOW = \\\"606\\\"; // the debt index is > max uint128\\n    string public constant KISS_NOT_SET = \\\"607\\\"; // the debt index is > max uint128\\n    string public constant STABILITY_RATE_REPAYMENT_AMOUNT_ZERO = \\\"608\\\"; // interest being repaid cannot be 0\\n    string public constant STABILITY_RATE_INTEREST_IS_ZERO = \\\"609\\\"; // account must have accrued interest to repay it\\n    string public constant INTEREST_REPAY_NOT_PARTIAL = \\\"610\\\"; // account must have accrued interest to repay it\\n    string public constant INVALID_STABILITY_RATE_BASE = \\\"610\\\"; // the stability base rate is less than 1e27 for the asset\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              7. AMM ORACLE                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant PAIR_ADDRESS_IS_ZERO = \\\"701\\\"; // Pair address to configure cannot be zero\\n    string public constant INVALID_UPDATE_PERIOD = \\\"702\\\"; // Update period must be greater than the minimum\\n    string public constant PAIR_ALREADY_EXISTS = \\\"703\\\"; // Pair with the address is already initialized\\n    string public constant PAIR_DOES_NOT_EXIST = \\\"704\\\"; // Pair supplied does not exist\\n    string public constant INVALID_LIQUIDITY = \\\"706\\\"; // Pair initializaition requires that the pair has liquidity\\n    string public constant UPDATE_PERIOD_NOT_FINISHED = \\\"707\\\"; // Update can only be called once per update period\\n    string public constant INVALID_PAIR = \\\"708\\\"; // Pair being consulted does not have the token that the price was requested for\\n    string public constant CALLER_NOT_ADMIN = \\\"709\\\"; // Caller must be the admin\\n    string public constant CONSTRUCTOR_INVALID_ADMIN = \\\"710\\\"; // Admin cannot be zero address in the constructor\\n    string public constant CONSTRUCTOR_INVALID_FACTORY = \\\"711\\\"; // Factory cannot be the zero address\\n    string public constant NO_INCENTIVES_LEFT = \\\"712\\\"; // No incentives left for updating the price\\n    string public constant ADMIN_ADDRESS_IS_ZERO = \\\"713\\\"; // admin address to configure cannot be zero\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              8. KISS                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant OPERATOR_WAIT_PERIOD_NOT_OVER = \\\"800\\\"; // Operator role has a cooldown period which has not passed\\n    string public constant OPERATOR_LIMIT_REACHED = \\\"801\\\"; // More minters cannot be assigned before existing one is removed\\n    string public constant CALLER_NOT_CONTRACT = \\\"802\\\"; // Caller of the function must be a contract\\n    string public constant OPERATOR_NOT_CONTRACT = \\\"803\\\"; // Operator role can only be granted to a contract\\n    string public constant KRESKO_NOT_CONTRACT = \\\"804\\\"; // Operator role can only be granted to a contract\\n    string public constant ADMIN_NOT_A_CONTRACT = \\\"805\\\"; // Operator role can only be granted to a contract\\n    string public constant OPERATOR_WAIT_PERIOD_TOO_SHORT = \\\"806\\\"; // Operator assignment cooldown period must be greater than 15 minutes\\n}\\n\",\"keccak256\":\"0x1082ec4054aca2cc3769220c67b8008d76eecf6ff2ceab50c38c76f1a474e6d2\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/Events.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IDiamondCutFacet} from \\\"../diamond/interfaces/IDiamondCutFacet.sol\\\";\\nimport {Action} from \\\"../minter/MinterTypes.sol\\\";\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @author Kresko\\n * @title Events\\n * @notice Event definitions\\n */\\n\\nlibrary GeneralEvent {\\n    /**\\n     * @dev Triggered when the contract has been deployed\\n     */\\n    event Deployed(address indexed owner, uint8 version);\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(address indexed operator, uint8 version);\\n}\\n\\nlibrary DiamondEvent {\\n    event DiamondCut(IDiamondCutFacet.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\nlibrary MinterEvent {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Collateral                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a collateral asset is added to the protocol.\\n     * @dev Can only be emitted once for a given collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The address of the oracle.\\n     * @param liquidationIncentive The liquidation incentive\\n     */\\n    event CollateralAssetAdded(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address anchor,\\n        uint256 liquidationIncentive\\n    );\\n\\n    /**\\n     * @notice Emitted when a collateral asset is updated.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The oracle address.\\n     * @param liquidationIncentive The liquidation incentive\\n     */\\n    event CollateralAssetUpdated(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address anchor,\\n        uint256 liquidationIncentive\\n    );\\n\\n    /**\\n     * @notice Emitted when an account deposits collateral.\\n     * @param account The address of the account depositing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was deposited.\\n     */\\n    event CollateralDeposited(address indexed account, address indexed collateralAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an account withdraws collateral.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event CollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when AMM helper withdraws account collateral without MCR checks.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event UncheckedCollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when AMM oracle is set.\\n     * @param ammOracle The address of the AMM oracle.\\n     */\\n    event AMMOracleUpdated(address indexed ammOracle);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a KreskoAsset is added to the protocol.\\n     * @dev Can only be emitted once for a given Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param anchor anchor token\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetAdded(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a Kresko asset's oracle is updated.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetUpdated(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when an account mints a Kresko asset.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the KreskoAsset that was minted.\\n     */\\n    event KreskoAssetMinted(address indexed account, address indexed kreskoAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the KreskoAsset that was burned.\\n     */\\n    event KreskoAssetBurned(address indexed account, address indexed kreskoAsset, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the KreskoAsset that was burned.\\n     * @param interestRepaid The amount of the KISS repaid due to interest accrual\\n     */\\n    event DebtPositionClosed(\\n        address indexed account,\\n        address indexed kreskoAsset,\\n        uint256 amount,\\n        uint256 interestRepaid\\n    );\\n\\n    /**\\n     * @notice Emitted when cFactor is updated for a collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param cFactor The new cFactor\\n     */\\n    event CFactorUpdated(address indexed collateralAsset, uint256 cFactor);\\n    /**\\n     * @notice Emitted when kFactor is updated for a KreskoAsset.\\n     * @param kreskoAsset The address of the KreskoAsset.\\n     * @param kFactor The new kFactor\\n     */\\n    event KFactorUpdated(address indexed kreskoAsset, uint256 kFactor);\\n\\n    /**\\n     * @notice Emitted when an account pays a close fee with a collateral asset upon burning a KreskoAsset.\\n     * @dev This can be emitted multiple times for a single KreskoAsset burn.\\n     * @param account The address of the account burning the KreskoAsset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the close fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event CloseFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when an account pays an open fee with a collateral asset upon minting a KreskoAsset.\\n     * @dev This can be emitted multiple times for a single KreskoAsset mint.\\n     * @param account The address of the account minting the KreskoAsset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the open fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event OpenFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param repayAmount The amount of the repay KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event LiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayAmount,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param repayUSD The value of the repay KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event InterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayUSD,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n    /**\\n     * @notice Emitted when a batch liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param repayUSD The value of the repay KreskoAsset being paid back to the protocol by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event BatchInterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed seizedCollateralAsset,\\n        uint256 repayUSD,\\n        uint256 collateralSent\\n    );\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Parameters                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a safety state is triggered for an asset\\n     * @param action Target action\\n     * @param asset Asset affected\\n     * @param description change description\\n     */\\n    event SafetyStateChange(Action indexed action, address indexed asset, string indexed description);\\n\\n    /**\\n     * @notice Emitted when the fee recipient is updated.\\n     * @param feeRecipient The new fee recipient.\\n     */\\n    event FeeRecipientUpdated(address indexed feeRecipient);\\n\\n    /**\\n     * @notice Emitted when the liquidation incentive multiplier is updated.\\n     * @param asset The collateral asset being updated.\\n     * @param liquidationIncentiveMultiplier The new liquidation incentive multiplier raw value.\\n     */\\n    event LiquidationIncentiveMultiplierUpdated(address indexed asset, uint256 liquidationIncentiveMultiplier);\\n\\n    /**\\n     * @notice Emitted when the liquidation overflow multiplier is updated.\\n     * @param maxLiquidationMultiplier The new liquidation overflow multiplier value.\\n     */\\n    event maxLiquidationMultiplierUpdated(uint256 maxLiquidationMultiplier);\\n\\n    /**\\n     * @notice Emitted when the minimum collateralization ratio is updated.\\n     * @param minimumCollateralizationRatio The new minimum collateralization ratio raw value.\\n     */\\n    event MinimumCollateralizationRatioUpdated(uint256 minimumCollateralizationRatio);\\n\\n    /**\\n     * @notice Emitted when the minimum debt value updated.\\n     * @param minimumDebtValue The new minimum debt value.\\n     */\\n    event MinimumDebtValueUpdated(uint256 minimumDebtValue);\\n\\n    /**\\n     * @notice Emitted when the liquidation threshold value is updated\\n     * @param liquidationThreshold The new liquidation threshold value.\\n     */\\n    event LiquidationThresholdUpdated(uint256 liquidationThreshold);\\n}\\n\\nlibrary StakingEvent {\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n    event ClaimRewardsMulti(address indexed to);\\n}\\n\\nlibrary AuthEvent {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\\nlibrary InterestRateEvent {\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateConfigured(\\n        address indexed asset,\\n        uint256 stabilityRateBase,\\n        uint256 priceRateDelta,\\n        uint256 rateSlope1,\\n        uint256 rateSlope2\\n    );\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateInterestRepaid(address indexed account, address indexed asset, uint256 value);\\n    /**\\n     * @dev Emitted when @param account repaid all interest @param value\\n     */\\n    event StabilityRateInterestBatchRepaid(address indexed account, uint256 value);\\n\\n    /**\\n     * @notice Emitted when KISS address is set.\\n     * @param KISS The address of KISS.\\n     */\\n    event KISSUpdated(address indexed KISS);\\n}\\n\",\"keccak256\":\"0xfc3e4fe8e9fe8a74d1e7a72ada10a600dc0df6e6347a9b755a9f3417ea031360\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/Meta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n\\npragma solidity >=0.8.19;\\n\\nlibrary Meta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"));\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x1341f7953bebdb6ccd37989cd85581fdaa8ec13f6e2cf9af95d6fa353727b7ce\",\"license\":\"MIT\"},\"src/contracts/libs/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity >=0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x22d448aa5242a8d7e469bca40a6df1409527444397c83b8ab38fff9011b5cc1a\",\"license\":\"MIT\"},\"src/contracts/libs/WadRay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRay {\\n    // HALF_WAD and HALF_RAY expressed with extended notation\\n    // as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccf0652e967667a457836300e6fd1ef4e790e7db3f2cb183a74ba9b79337e2c9\",\"license\":\"MIT\"},\"src/contracts/minter/InterestRateState.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {LibStabilityRate} from \\\"./libs/LibStabilityRate.sol\\\";\\n\\nusing LibStabilityRate for StabilityRateConfig global;\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n// Asset data\\nstruct StabilityRateConfig {\\n    // Interest index for debt\\n    uint128 debtIndex;\\n    // Represents the optimal price rate between an oracle report and an AMM twap\\n    uint128 optimalPriceRate;\\n    // Slope of the variable interest curve when rate > 0 and <= optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope1;\\n    // Slope of the variable interest curve when rate > optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope2;\\n    /**\\n     * Represents the excess price premium in either direction.\\n     * Expressed in ray\\n     * Eg. 1/20 ray = 5% price premium in either direction is considered excess\\n     */\\n    uint128 priceRateDelta;\\n    // Current accrual rate for debt\\n    uint128 stabilityRate;\\n    // Base accrual rate for debt\\n    uint128 stabilityRateBase;\\n    // Asset to configure\\n    address asset;\\n    // Last update for the asset\\n    uint40 lastUpdateTimestamp;\\n}\\n\\n// User data\\nstruct StabilityRateUser {\\n    uint128 debtScaled;\\n    uint128 lastDebtIndex;\\n}\\n\\n// Storage layout\\nstruct InterestRateState {\\n    // asset address -> asset data\\n    mapping(address => StabilityRateConfig) srAssets;\\n    // account address -> asset address -> user data\\n    mapping(address => mapping(address => StabilityRateUser)) srUserInfo;\\n    // interest repayment token is KISS\\n    address kiss;\\n}\\n\\n// Storage position\\nbytes32 constant INTEREST_RATE_STORAGE_POSITION = keccak256(\\\"kresko.interest.rate.storage\\\");\\n\\n// solhint-disable func-visibility\\nfunction irs() pure returns (InterestRateState storage state) {\\n    bytes32 position = INTEREST_RATE_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x83295d5e5eceaed370af95d39b179ac0c38c5fd44e3278770083c33cdb4493e5\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/MinterState.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {LibKrAsset} from \\\"./libs/LibKrAsset.sol\\\";\\nimport {LibAccount} from \\\"./libs/LibAccount.sol\\\";\\nimport {LibCollateral} from \\\"./libs/LibCollateral.sol\\\";\\nimport {LibCalculation} from \\\"./libs/LibCalculation.sol\\\";\\nimport {LibBurn} from \\\"./libs/LibBurn.sol\\\";\\nimport {LibMint} from \\\"./libs/LibMint.sol\\\";\\nimport {Action, SafetyState, CollateralAsset, KrAsset} from \\\"./MinterTypes.sol\\\";\\n\\n/* solhint-disable state-visibility */\\nusing LibCalculation for MinterState global;\\nusing LibKrAsset for MinterState global;\\nusing LibCollateral for MinterState global;\\nusing LibAccount for MinterState global;\\nusing LibBurn for MinterState global;\\nusing LibMint for MinterState global;\\n\\n/**\\n * @title Storage layout for the minter state\\n * @author Kresko\\n */\\nstruct MinterState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Initialization version\\n    uint256 initializations;\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                           Configurable Parameters                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The recipient of protocol fees.\\n    address feeRecipient;\\n    /// @notice The factor used to calculate the incentive a liquidator receives in the form of seized collateral.\\n    uint256 liquidationIncentiveMultiplier;\\n    /// @notice The minimum ratio of collateral to debt that can be taken by direct action.\\n    uint256 minimumCollateralizationRatio;\\n    /// @notice The minimum USD value of an individual synthetic asset debt position.\\n    uint256 minimumDebtValue;\\n    /// @notice The collateralization ratio at which positions may be liquidated.\\n    uint256 liquidationThreshold;\\n    /// @notice Flag tells if there is a need to perform safety checks on user actions\\n    bool safetyStateSet;\\n    /// @notice asset -> action -> state\\n    mapping(address => mapping(Action => SafetyState)) safetyState;\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Collateral Assets                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of collateral asset token address to information on the collateral asset.\\n    mapping(address => CollateralAsset) collateralAssets;\\n    /**\\n     * @notice Mapping of account -> asset -> deposit amount\\n     */\\n    mapping(address => mapping(address => uint256)) collateralDeposits;\\n    /// @notice Mapping of account -> collateral asset addresses deposited\\n    mapping(address => address[]) depositedCollateralAssets;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of kresko asset token address to information on the Kresko asset.\\n    mapping(address => KrAsset) kreskoAssets;\\n    /// @notice Mapping of account -> krAsset -> debt amount owed to the protocol\\n    mapping(address => mapping(address => uint256)) kreskoAssetDebt;\\n    /// @notice Mapping of account -> addresses of borrowed krAssets\\n    mapping(address => address[]) mintedKreskoAssets;\\n    /// @notice The AMM oracle address.\\n    address ammOracle;\\n    /// @notice Offchain oracle decimals\\n    uint8 extOracleDecimals;\\n    /// @notice Liquidation Overflow Multiplier, multiplies max liquidatable value.\\n    uint256 maxLiquidationMultiplier;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  ORACLE                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The oracle deviation percentage between the main oracle and fallback oracle.\\n    uint256 oracleDeviationPct;\\n    /// @notice L2 sequencer feed address\\n    address sequencerUptimeFeed;\\n    /// @notice grace period of sequencer in seconds\\n    uint256 sequencerGracePeriodTime;\\n    /// @notice timeout for oracle in seconds\\n    uint256 oracleTimeout;\\n}\\n\",\"keccak256\":\"0xa03acca4777468218226e7e64d1b8e3929a31031fe4f25637a7dc701c52677f8\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.19;\\n\\nimport {MinterState} from \\\"./MinterState.sol\\\";\\n\\n// Storage position\\nbytes32 constant MINTER_STORAGE_POSITION = keccak256(\\\"kresko.minter.storage\\\");\\n\\nfunction ms() pure returns (MinterState storage state) {\\n    bytes32 position = MINTER_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x960701164cf10f551b8e7c4b3d8d29cf6b0a45fa4212b329c6f28b36e7ee7b4a\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/MinterTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IFluxPriceFeed} from \\\"../vendor/flux/interfaces/IFluxPriceFeed.sol\\\";\\nimport {AggregatorV3Interface} from \\\"../vendor/AggregatorV3Interface.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {LibAssetUtility} from \\\"./libs/LibAssetUtility.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                  CONSTANTS                                 */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Constants {\\n    uint256 constant FP_DECIMALS = 18;\\n\\n    uint256 constant FP_SCALING_FACTOR = 10 ** FP_DECIMALS;\\n\\n    uint256 constant ONE_HUNDRED_PERCENT = 1 ether;\\n\\n    uint256 constant BASIS_POINT = 1e14;\\n\\n    /// @dev The maximum configurable close fee.\\n    uint256 constant MAX_CLOSE_FEE = 0.1 ether; // 10%\\n\\n    /// @dev The maximum configurable open fee.\\n    uint256 constant MAX_OPEN_FEE = 0.1 ether; // 10%\\n\\n    /// @dev Overflow over maximum liquidatable value to allow leeway for users after one happens.\\n    uint256 constant MIN_MAX_LIQUIDATION_MULTIPLIER = ONE_HUNDRED_PERCENT + BASIS_POINT; // 100.01% or .01% over\\n\\n    /// @dev The minimum configurable minimum collateralization ratio.\\n    uint256 constant MIN_COLLATERALIZATION_RATIO = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The minimum configurable liquidation incentive multiplier.\\n    /// This means liquidator only receives equal amount of collateral to debt repaid.\\n    uint256 constant MIN_LIQUIDATION_INCENTIVE_MULTIPLIER = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The maximum configurable liquidation incentive multiplier.\\n    /// This means liquidator receives 25% bonus collateral compared to the debt repaid.\\n    uint256 constant MAX_LIQUIDATION_INCENTIVE_MULTIPLIER = 1.25 ether; // 125%\\n\\n    /// @dev The minimum collateral amount for a kresko asset.\\n    uint256 constant MIN_KRASSET_COLLATERAL_AMOUNT = 1e12;\\n\\n    /// @dev The maximum configurable minimum debt USD value. 8 decimals.\\n    uint256 constant MAX_MIN_DEBT_VALUE = 1_000 * 1e8; // $1,000\\n}\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    ENUM                                    */\\n/* -------------------------------------------------------------------------- */\\n\\n/**\\n * @dev Protocol user facing actions\\n *\\n * Deposit = 0\\n * Withdraw = 1,\\n * Repay = 2,\\n * Borrow = 3,\\n * Liquidate = 4\\n */\\nenum Action {\\n    Deposit,\\n    Withdraw,\\n    Repay,\\n    Borrow,\\n    Liquidation\\n}\\n/**\\n * @dev Fee types\\n *\\n * Open = 0\\n * Close = 1\\n */\\nenum Fee {\\n    Open,\\n    Close\\n}\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\n/**\\n * @notice Initialization arguments for the protocol\\n */\\nstruct MinterInitArgs {\\n    address admin;\\n    address council;\\n    address treasury;\\n    uint8 extOracleDecimals;\\n    uint256 minimumCollateralizationRatio;\\n    uint256 minimumDebtValue;\\n    uint256 liquidationThreshold;\\n    uint256 oracleDeviationPct;\\n    address sequencerUptimeFeed;\\n    uint256 sequencerGracePeriodTime;\\n    uint256 oracleTimeout;\\n}\\n\\n/**\\n * @notice Configurable parameters within the protocol\\n */\\n\\nstruct MinterParams {\\n    uint256 minimumCollateralizationRatio;\\n    uint256 minimumDebtValue;\\n    uint256 liquidationThreshold;\\n    uint256 liquidationOverflowPercentage;\\n    address feeRecipient;\\n    uint8 extOracleDecimals;\\n    uint256 oracleDeviationPct;\\n}\\n\\n/**\\n * @notice Information on a token that is a KreskoAsset.\\n * @dev Each KreskoAsset has 18 decimals.\\n * @param kFactor The k-factor used for calculating the required collateral value for KreskoAsset debt.\\n * @param oracle The oracle that provides the USD price of one KreskoAsset.\\n * @param supplyLimit The total supply limit of the KreskoAsset.\\n * @param anchor The anchor address\\n * @param closeFee The percentage paid in fees when closing a debt position of this type.\\n * @param openFee The percentage paid in fees when opening a debt position of this type.\\n * @param exists Whether the KreskoAsset exists within the protocol.\\n */\\nstruct KrAsset {\\n    uint256 kFactor;\\n    AggregatorV3Interface oracle;\\n    uint256 supplyLimit;\\n    address anchor;\\n    uint256 closeFee;\\n    uint256 openFee;\\n    bool exists;\\n    bytes32 redstoneId;\\n}\\n\\nusing LibAssetUtility for KrAsset global;\\n\\n/**\\n * @notice Information on a token that can be used as collateral.\\n * @dev Setting the factor to zero effectively makes the asset useless as collateral while still allowing\\n * it to be deposited and withdrawn.\\n * @param factor The collateral factor used for calculating the value of the collateral.\\n * @param oracle The oracle that provides the USD price of one collateral asset.\\n * @param anchor If the collateral is a KreskoAsset, the anchor address\\n * @param decimals The decimals for the token, stored here to avoid repetitive external calls.\\n * @param exists Whether the collateral asset exists within the protocol.\\n * @param liquidationIncentive The liquidation incentive for the asset\\n */\\nstruct CollateralAsset {\\n    uint256 factor;\\n    AggregatorV3Interface oracle;\\n    address anchor;\\n    uint8 decimals;\\n    bool exists;\\n    uint256 liquidationIncentive;\\n    bytes32 redstoneId;\\n}\\nusing LibAssetUtility for CollateralAsset global;\\n\\n/// @notice Configuration for pausing `Action`\\nstruct Pause {\\n    bool enabled;\\n    uint256 timestamp0;\\n    uint256 timestamp1;\\n}\\n\\n/// @notice Safety configuration for assets\\nstruct SafetyState {\\n    Pause pause;\\n}\\n\",\"keccak256\":\"0xdb0089f7c1c3505cf6ac51159523f9f8984ee6427cd40f66da578d9af1616ea1\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/amm-oracle/IUniswapV2OracleCompat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\nimport {IERC20Minimal} from \\\"../../vendor/uniswap/v2-core/interfaces/IERC20Minimal.sol\\\";\\nimport {IUniswapV2Factory} from \\\"../../vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\\\";\\n\\n/// @notice without UQ values\\ninterface IUniswapV2OracleCompat {\\n    event NewAdmin(address indexed newAdmin);\\n    event NewMinUpdatePeriod(uint256 newMinUpdatePeriod);\\n    event NewPair(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n    event PairUpdated(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n\\n    event NewKrAssetPair(address indexed krAsset, address indexed pairAddress);\\n\\n    /// @notice returns the connected univ2 factory\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    /// @notice returns the incentive token for the incentivized update\\n    function incentiveToken() external view returns (IERC20Minimal);\\n\\n    /// @notice returns the amount of incentive tokens sent using the incentivized update\\n    function incentiveAmount() external view returns (uint256);\\n\\n    /// @notice returns the current admin of the oracle\\n    function admin() external view returns (address);\\n\\n    /// @notice returns the TWAP time period in seconds\\n    function minUpdatePeriod() external view returns (uint256);\\n\\n    /// @notice returns the pair address for a given krAsset\\n    function krAssets(address) external returns (address);\\n\\n    /**\\n     *\\n     * @param _newIncentiveToken new incentive token for updater\\n     * @param amount amount of incentive tokens\\n     */\\n    function setIncentiveToken(address _newIncentiveToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Configures existing values of an AMM pair\\n     * @param _pairAddress Pair address\\n     * @param _updatePeriod Update period (TWAP)\\n     */\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external;\\n\\n    /**\\n     * @notice Get the AMM price for an amount of krAsset\\n     * @param _kreskoAsset Kresko asset address\\n     * @param _amountIn Amount of Kresko Asset to get value for\\n     */\\n    function consultKrAsset(address _kreskoAsset, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    /**\\n     * @notice General consult function, gets a value for `_amountIn` of `_token` in terms of `_tokenOut`\\n     * @param _pairAddress Address of the pair that contains the token\\n     * @param _token Address of the token to get value for\\n     * @param _amountIn Amount of token to get value for\\n     * @return amountOut Amount of tokenOut that `_amountIn` of `_token` is worth\\n     */\\n    function consult(address _pairAddress, address _token, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Initializes an Uniswap V2 pair to be tracked by this oracle.\\n     *\\n     * The criteria for a pair to be tracked:\\n     * The pair must not already be tracked by this oracle.\\n     * The pair must exist.\\n     * The pair must have reserves.\\n     * The update period must be greater than the minimum update period.\\n     * @param _pairAddress Liquidity token address for the pair\\n     * @param _krAsset Kresko Asset in the pair we want to add helper functionality for\\n     * @param _updatePeriod The update period (TWAP) for this AMM pair\\n     *\\n     */\\n    function initPair(address _pairAddress, address _krAsset, uint256 _updatePeriod) external;\\n\\n    /**\\n     * @notice Updates the oracle values for a pair\\n     * @param _pairAddress Pair address\\n     */\\n    function update(address _pairAddress) external;\\n\\n    /**\\n     * @notice Sets a new admin\\n     * @param _newAdmin New admin address\\n     */\\n    function setAdmin(address _newAdmin) external;\\n\\n    /**\\n     * @notice Set a new min update period\\n     * @param _minUpdatePeriod The new minimum period that can be set for a pair\\n     */\\n    function setMinUpdatePeriod(uint256 _minUpdatePeriod) external;\\n\\n    /**\\n     * @notice Move any missent tokens\\n     * @param _erc20 drain any sent tokens\\n     * @param _to drain any sent tokens\\n     */\\n    function drainERC20(address _erc20, address _to) external;\\n\\n    /**\\n     * Update pair data with incentives sent\\n     * @param _kreskoAsset Kresko Asset in the pair we want to update pair data for\\n     */\\n    function updateWithIncentive(address _kreskoAsset) external;\\n}\\n\",\"keccak256\":\"0x1e4c82cdbda55571ce72e1ce3386afdd7326d020c6009590193b985d460789ef\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibAccount.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {RebaseMath} from \\\"../../kreskoasset/Rebase.sol\\\";\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nlibrary LibAccount {\\n    using RebaseMath for uint256;\\n    using WadRay for uint256;\\n    using LibDecimals for uint256;\\n\\n    /**\\n     * @notice Gets an array of Kresko assets the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @return An array of addresses of Kresko assets the account has minted.\\n     */\\n    function getMintedKreskoAssets(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (address[] memory) {\\n        return self.mintedKreskoAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Gets an array of collateral assets the account has deposited.\\n     * @param _account The account to get the deposited collateral assets for.\\n     * @return An array of addresses of collateral assets the account has deposited.\\n     */\\n    function getDepositedCollateralAssets(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (address[] memory) {\\n        return self.depositedCollateralAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Get deposited collateral asset amount for an account\\n     * @notice Performs rebasing conversion for KreskoAssets\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return uint256 amount of collateral for `_asset`\\n     */\\n    function getCollateralDeposits(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.collateralAssets[_asset].toRebasingAmount(self.collateralDeposits[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Checks if accounts collateral value is less than required.\\n     * @param _account The account to check.\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(MinterState storage self, address _account) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account) <\\n            (self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold));\\n    }\\n\\n    /**\\n     * @notice Overload for calculating liquidatable status with a future liquidated collateral value\\n     * @param _account The account to check.\\n     * @param _valueLiquidated Value liquidated, eg. in a batch liquidation\\n     * @return bool indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(\\n        MinterState storage self,\\n        address _account,\\n        uint256 _valueLiquidated\\n    ) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account) - _valueLiquidated <\\n            (self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold));\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @return totalCollateralValue The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (uint256 totalCollateralValue) {\\n        address[] memory assets = self.depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 collateralValue, ) = self.getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getCollateralDeposits(_account, asset),\\n                false // Take the collateral factor into consideration.\\n            );\\n            totalCollateralValue += collateralValue;\\n        }\\n\\n        return totalCollateralValue;\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account including extra return value for specific collateral.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @param _collateralAsset The collateral asset to get the collateral value.\\n     * @return totalCollateralValue The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256 totalCollateralValue, uint256 specificValue) {\\n        address[] memory assets = self.depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (uint256 collateralValue, ) = self.getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getCollateralDeposits(_account, asset),\\n                false // Take the collateral factor into consideration.\\n            );\\n            totalCollateralValue += collateralValue;\\n            if (asset == _collateralAsset) {\\n                specificValue = collateralValue;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets accounts min collateral value required to cover debt at a given collateralization ratio.\\n     * @dev 1. Account with min collateral value under MCR will not borrow.\\n     *      2. Account with min collateral value under LT can be liquidated.\\n     * @param _account The account to calculate the minimum collateral value for.\\n     * @param _ratio The collateralization ratio to get min collateral value against.\\n     * @return The min collateral value at given collateralization ratio for the account.\\n     */\\n    function getAccountMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _account,\\n        uint256 _ratio\\n    ) internal view returns (uint256) {\\n        return self.getAccountKrAssetValue(_account).wadMul(_ratio);\\n    }\\n\\n    /**\\n     * @notice Gets the total KreskoAsset value in USD for an account.\\n     * @param _account The account to calculate the KreskoAsset value for.\\n     * @return value The KreskoAsset value of the account.\\n     */\\n    function getAccountKrAssetValue(MinterState storage self, address _account) internal view returns (uint256 value) {\\n        address[] memory assets = self.mintedKreskoAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            value += self.getKrAssetValue(asset, self.getKreskoAssetDebtScaled(_account, asset), false);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Get accounts interested scaled debt amount for a KreskoAsset.\\n     * @param _asset The asset address\\n     * @param _account The account to get the amount for\\n     * @return Amount of scaled debt.\\n     */\\n    function getKreskoAssetDebtScaled(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        uint256 debt = self.kreskoAssets[_asset].toRebasingAmount(irs().srUserInfo[_account][_asset].debtScaled);\\n        if (debt == 0) {\\n            return 0;\\n        }\\n\\n        return debt.rayMul(irs().srAssets[_asset].getNormalizedDebtIndex()).rayToWad();\\n    }\\n\\n    /**\\n     * @notice Get `_account` principal debt amount for `_asset`\\n     * @dev Principal debt is rebase adjusted due to possible stock splits/reverse splits\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of principal debt for `_asset`\\n     */\\n    function getKreskoAssetDebtPrincipal(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.kreskoAssets[_asset].toRebasingAmount(self.kreskoAssetDebt[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Get the total interest accrued on top of debt: Scaled Debt - Principal Debt\\n     * @return assetAmount Interest denominated in _asset\\n     * @return kissAmount Interest denominated in KISS. Ignores K-factor: $1 of interest = 1 KISS\\n     **/\\n    function getKreskoAssetDebtInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256 assetAmount, uint256 kissAmount) {\\n        assetAmount =\\n            self.getKreskoAssetDebtScaled(_account, _asset) -\\n            self.getKreskoAssetDebtPrincipal(_account, _asset);\\n        kissAmount = self.getKrAssetValue(_asset, assetAmount, true).oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Gets an index for the Kresko asset the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @param _kreskoAsset The asset lookup address.\\n     * @return i = index of the minted Kresko asset.\\n     */\\n    function getMintedKreskoAssetsIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal view returns (uint256 i) {\\n        uint256 length = self.mintedKreskoAssets[_account].length;\\n        require(length > 0, Error.NO_KRASSETS_MINTED);\\n        for (i; i < length; i++) {\\n            if (self.mintedKreskoAssets[_account][i] == _kreskoAsset) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets an index for the collateral asset the account has deposited.\\n     * @param _account The account to get the index for.\\n     * @param _collateralAsset The asset lookup address.\\n     * @return i = index of the minted collateral asset.\\n     */\\n    function getDepositedCollateralAssetIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256 i) {\\n        uint256 length = self.depositedCollateralAssets[_account].length;\\n        require(length > 0, Error.NO_COLLATERAL_DEPOSITS);\\n        for (i; i < length; i++) {\\n            if (self.depositedCollateralAssets[_account][i] == _collateralAsset) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c9468def9b6d5c76b0f123f18cb342fc49ee06c9f2fe7b82367ffc91c4526bb\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibAssetUtility.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {CollateralAsset, KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {LibRedstone} from \\\"./LibRedstone.sol\\\";\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\nimport {AggregatorV3Interface} from \\\"../../vendor/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title LibAssetUtility\\n * @author Kresko\\n * @notice Utility functions for KrAsset and CollateralAsset structs\\n */\\nlibrary LibAssetUtility {\\n    using WadRay for uint256;\\n    using LibDecimals for uint256;\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(KrAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(CollateralAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        if (self.anchor == address(0)) return _nonRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(KrAsset memory self, uint256 _maybeRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(\\n        CollateralAsset memory self,\\n        uint256 _maybeRebasedAmount\\n    ) internal view returns (uint256) {\\n        if (self.anchor == address(0)) return _maybeRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        (, int256 answer, , uint256 updatedAt, ) = self.oracle.latestRoundData();\\n        require(answer >= 0, Error.NEGATIVE_ORACLE_PRICE);\\n        // returning zero if oracle price is too old so that fallback oracle is used instead.\\n        if (block.timestamp - updatedAt > ms().oracleTimeout) {\\n            return 0;\\n        }\\n        return uint256(answer);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with extOracleDecimals\\n     */\\n    function redstonePrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return LibRedstone.getPrice(self.redstoneId);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(KrAsset memory self) internal view returns (uint256) {\\n        (, int256 answer, , uint256 updatedAt, ) = self.oracle.latestRoundData();\\n        require(answer >= 0, Error.NEGATIVE_ORACLE_PRICE);\\n        // returning zero if oracle price is too old so that fallback oracle is used instead.\\n        if (block.timestamp - updatedAt > ms().oracleTimeout) {\\n            return 0;\\n        }\\n        return uint256(answer);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with extOracleDecimals\\n     * @param self the kresko asset struct\\n     */\\n    function redstonePrice(KrAsset memory self) internal view returns (uint256) {\\n        return LibRedstone.getPrice(self.redstoneId);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return self.uintPrice().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(KrAsset memory self) internal view returns (uint256) {\\n        return self.uintPrice().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(CollateralAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice().wadMul(_assetAmount);\\n    }\\n\\n    /**\\n     * @notice Get Redstone value for @param _assetAmount of @param self in uint256\\n     * @param self the collateral asset struct\\n     * @param _assetAmount the amount to convert\\n     */\\n    function uintUSDRedstone(CollateralAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.redstonePrice().wadMul(_assetAmount);\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(KrAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice().wadMul(_assetAmount);\\n    }\\n\\n    /**\\n     * @notice Get Redstone value for @param _assetAmount of @param self in uint256\\n     * @param self the kresko asset struct\\n     * @param _assetAmount the amount to convert\\n     */\\n    function uintUSDRedstone(KrAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.redstonePrice().wadMul(_assetAmount);\\n    }\\n\\n    /**\\n     * @notice Get Aggregrated price from chainlink oracle and redstone\\n     * @param self the collateral asset struct\\n     * @param _oracleDeviationPct the deviation percentage to use for the oracle\\n     */\\n    function uintPrice(CollateralAsset memory self, uint256 _oracleDeviationPct) internal view returns (uint256) {\\n        return _getPrice(self.uintPrice(), self.redstonePrice(), _oracleDeviationPct);\\n    }\\n\\n    /**\\n     * @notice Get Aggregrated price from chainlink oracle and redstone\\n     * @param self the kresko asset struct\\n     * @param _oracleDeviationPct the deviation percentage to use for the oracle\\n     */\\n    function uintPrice(KrAsset memory self, uint256 _oracleDeviationPct) internal view returns (uint256) {\\n        return _getPrice(self.uintPrice(), self.redstonePrice(), _oracleDeviationPct);\\n    }\\n\\n    /**\\n     * @notice Get Aggregrated price from chainlink oracle and redstone in USD\\n     * @param self the collateral asset struct\\n     * @param _assetAmount the amount to convert\\n     * @param _oracleDeviationPct the deviation percentage to use for the oracle\\n     */\\n    function uintUSD(\\n        CollateralAsset memory self,\\n        uint256 _assetAmount,\\n        uint256 _oracleDeviationPct\\n    ) internal view returns (uint256) {\\n        return _getPrice(self.uintUSD(_assetAmount), self.uintUSDRedstone(_assetAmount), _oracleDeviationPct);\\n    }\\n\\n    /**\\n     * @notice Get Aggregrated price from chainlink oracle and redstone in USD\\n     * @param self the kresko asset struct\\n     * @param _assetAmount the amount to convert\\n     * @param _oracleDeviationPct the deviation percentage to use for the oracle\\n     */\\n    function uintUSD(\\n        KrAsset memory self,\\n        uint256 _assetAmount,\\n        uint256 _oracleDeviationPct\\n    ) internal view returns (uint256) {\\n        return _getPrice(self.uintUSD(_assetAmount), self.uintUSDRedstone(_assetAmount), _oracleDeviationPct);\\n    }\\n\\n    /**\\n     * @notice check the price and return it\\n     * @notice reverts if the price deviates more than `_oracleDeviationPct`\\n     * @param _chainlinkPrice chainlink price\\n     * @param _redstonePrice redstone price\\n     * @param _oracleDeviationPct the deviation percentage to use for the oracle\\n     */\\n    function _getPrice(\\n        uint256 _chainlinkPrice,\\n        uint256 _redstonePrice,\\n        uint256 _oracleDeviationPct\\n    ) internal view returns (uint256) {\\n        if (ms().sequencerUptimeFeed != address(0)) {\\n            (, int256 answer, uint256 startedAt, , ) = AggregatorV3Interface(ms().sequencerUptimeFeed)\\n                .latestRoundData();\\n            bool isSequencerUp = answer == 0;\\n            if (!isSequencerUp) {\\n                return _redstonePrice;\\n            }\\n            // Make sure the grace period has passed after the\\n            // sequencer is back up.\\n            uint256 timeSinceUp = block.timestamp - startedAt;\\n            if (timeSinceUp <= ms().sequencerGracePeriodTime) {\\n                return _redstonePrice;\\n            }\\n        }\\n        if (_chainlinkPrice == 0) return _redstonePrice;\\n        if (_redstonePrice == 0) return _chainlinkPrice;\\n        if (\\n            (_redstonePrice.wadMul(1 ether - _oracleDeviationPct) <= _chainlinkPrice) &&\\n            (_redstonePrice.wadMul(1 ether + _oracleDeviationPct) >= _chainlinkPrice)\\n        ) return _chainlinkPrice;\\n\\n        // Revert if price deviates more than `_oracleDeviationPct`\\n        revert(Error.ORACLE_PRICE_UNSTABLE);\\n    }\\n\\n    function marketStatus(KrAsset memory self) internal pure returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb8c7fa143e69a55532786d0f6c5693f45b449d8b8ee8c86c9f2d3ec2c1e5b52c\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibBurn.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n// solhint-disable not-rely-on-time\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent, InterestRateEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {IERC20Permit} from \\\"../../shared/IERC20Permit.sol\\\";\\nimport {SafeERC20} from \\\"../../shared/SafeERC20.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\n\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibBurn {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using SafeERC20 for IERC20Permit;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Repay user kresko asset debt with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being repaid\\n    /// @param _burnAmount the asset amount being burned\\n    /// @param _account the account the debt is subtracted from\\n    function burn(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _burnAmount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the possibly rebalanced amount of destroyed tokens\\n        uint256 destroyed = IKreskoAssetIssuer(_anchor).destroy(_burnAmount, msg.sender);\\n        // Calculate the debt index scaled amount\\n        uint256 amountScaled = destroyed.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n\\n        // Decrease the principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] -= destroyed;\\n        // Decrease the scaled debt and set user asset's last debt index\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled -= uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the stability rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /**\\n     * @notice Repays accrued stability rate interest for a single asset\\n     * @param _account Account to repay interest for\\n     * @param _kreskoAsset Kresko asset to repay interest for\\n     * @return kissRepayAmount amount repaid\\n     */\\n    function repayFullStabilityRateInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal returns (uint256 kissRepayAmount) {\\n        // Update debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the accrued interest in repayment token\\n        (, kissRepayAmount) = self.getKreskoAssetDebtInterest(_account, _kreskoAsset);\\n\\n        // If no interest has accrued no further operations needed\\n        // Do not revert because we want the preserve new debt index and stability rate\\n        if (kissRepayAmount == 0) {\\n            // Update stability rate for asset\\n            irs().srAssets[_kreskoAsset].updateStabilityRate();\\n            return 0;\\n        }\\n\\n        // Transfer the accrued interest\\n        IERC20Permit(irs().kiss).safeTransferFrom(msg.sender, self.feeRecipient, kissRepayAmount);\\n\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled = uint128(\\n            self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset).wadToRay().rayDiv(newDebtIndex)\\n        );\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n\\n        // Remove from minted kresko assets if debt is cleared\\n        if (self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset) == 0) {\\n            self.mintedKreskoAssets[_account].removeAddress(\\n                _kreskoAsset,\\n                self.getMintedKreskoAssetsIndex(_account, _kreskoAsset)\\n            );\\n        }\\n\\n        // Update stability rates\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n        // Emit event with the account, asset and amount repaid\\n        emit InterestRateEvent.StabilityRateInterestRepaid(_account, _kreskoAsset, kissRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Charges the protocol close fee based off the value of the burned asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the close fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount of the kresko asset being burned.\\n     */\\n    function chargeCloseFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _burnAmount\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being burned.\\n        uint256 feeValue = krAsset.uintUSD(_burnAmount, self.oracleDeviationPct).wadMul(krAsset.closeFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, uint256 feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Permit(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.CloseFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid);\\n\\n            feeValue = feeValue - feeValuePaid;\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that debt repaid does not leave a dust position, if it does:\\n     * return an amount that pays up to minDebtValue\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount being burned\\n     * @param _debtAmount The debt amount of `_account`\\n     * @return amount == 0 or >= minDebtAmount\\n     */\\n    function ensureNotDustPosition(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _burnAmount,\\n        uint256 _debtAmount\\n    ) internal view returns (uint256 amount) {\\n        // If the requested burn would put the user's debt position below the minimum\\n        // debt value, close up to the minimum debt value instead.\\n        uint256 krAssetValue = self.getKrAssetValue(_kreskoAsset, _debtAmount - _burnAmount, true);\\n        if (krAssetValue > 0 && krAssetValue < self.minimumDebtValue) {\\n            uint256 minDebtValue = self.minimumDebtValue.wadDiv(\\n                self.kreskoAssets[_kreskoAsset].uintPrice(self.oracleDeviationPct)\\n            );\\n            amount = _debtAmount - minDebtValue;\\n        } else {\\n            amount = _burnAmount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6694189bebb1ad2c79226bfeaf2dd5d705615a801f0e4c8c411e810b02def22b\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset, CollateralAsset, Constants} from \\\"../MinterTypes.sol\\\";\\n\\n/**\\n * @title Calculation library for liquidation & fee values\\n * @author Kresko\\n */\\nlibrary LibCalculation {\\n    struct MaxLiquidationVars {\\n        CollateralAsset collateral;\\n        uint256 accountCollateralValue;\\n        uint256 minCollateralValue;\\n        uint256 seizeCollateralAccountValue;\\n        uint256 maxLiquidationMultiplier;\\n        uint256 minimumDebtValue;\\n        uint256 liquidationThreshold;\\n        uint256 debtFactor;\\n    }\\n\\n    using Arrays for address[];\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    /**\\n     * @dev Calculates the total value that can be liquidated for a liquidation pair\\n     * @param _account address to liquidate\\n     * @param _repayKreskoAsset address of the kreskoAsset being repaid on behalf of the liquidatee\\n     * @param _seizedCollateral The collateral asset being seized in the liquidation\\n     * @return maxLiquidatableUSD USD value that can be liquidated, 0 if the pair has no liquidatable value\\n     */\\n    function getMaxLiquidation(\\n        MinterState storage self,\\n        address _account,\\n        KrAsset memory _repayKreskoAsset,\\n        address _seizedCollateral\\n    ) internal view returns (uint256 maxLiquidatableUSD) {\\n        MaxLiquidationVars memory vars = _getMaxLiquidationParams(self, _account, _repayKreskoAsset, _seizedCollateral);\\n        // Account is not liquidatable\\n        if (vars.accountCollateralValue >= (vars.minCollateralValue)) {\\n            return 0;\\n        }\\n\\n        maxLiquidatableUSD = _getMaxLiquidatableUSD(vars, _repayKreskoAsset);\\n\\n        if (vars.seizeCollateralAccountValue < maxLiquidatableUSD) {\\n            return vars.seizeCollateralAccountValue;\\n        } else if (maxLiquidatableUSD < vars.minimumDebtValue) {\\n            return vars.minimumDebtValue;\\n        }\\n        return maxLiquidatableUSD;\\n    }\\n\\n    /**\\n     * @notice Calculate amount of collateral to seize during the liquidation procesself.\\n     * @param _liquidationIncentiveMultiplier The liquidation incentive multiplier.\\n     * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n     * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n     */\\n    function calculateAmountToSeize(\\n        uint256 _liquidationIncentiveMultiplier,\\n        uint256 _collateralOraclePriceUSD,\\n        uint256 _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (uint256) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return _kreskoAssetRepayAmountUSD.wadMul(_liquidationIncentiveMultiplier).wadDiv(_collateralOraclePriceUSD);\\n    }\\n\\n    /**\\n     * @notice Calculates the fee to be taken from a user's deposited collateral asset.\\n     * @param _collateralAsset The collateral asset from which to take to the fee.\\n     * @param _account The owner of the collateral.\\n     * @param _feeValue The original value of the fee.\\n     * @param _collateralAssetIndex The collateral asset's index in the user's depositedCollateralAssets array.\\n     *\\n     * @return transferAmount to be received as a uint256\\n     * @return feeValuePaid wad representing the fee value paid.\\n     */\\n    function calcFee(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        address _account,\\n        uint256 _feeValue,\\n        uint256 _collateralAssetIndex\\n    ) internal returns (uint256 transferAmount, uint256 feeValuePaid) {\\n        uint256 depositAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n\\n        // Don't take the collateral asset's collateral factor into consideration.\\n        (uint256 depositValue, uint256 oraclePrice) = self.getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            depositAmount,\\n            true\\n        );\\n\\n        // If feeValue < depositValue, the entire fee can be charged for this collateral asset.\\n        if (_feeValue < depositValue) {\\n            transferAmount = self.collateralAssets[_collateralAsset].decimals.fromWad(_feeValue.wadDiv(oraclePrice));\\n            feeValuePaid = _feeValue;\\n        } else {\\n            // If the feeValue >= depositValue, the entire deposit\\n            // should be taken as the fee.\\n            transferAmount = depositAmount;\\n            feeValuePaid = depositValue;\\n        }\\n\\n        if (transferAmount == depositAmount) {\\n            // Because the entire deposit is taken, remove it from the depositCollateralAssets array.\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _collateralAssetIndex);\\n        }\\n\\n        return (transferAmount, feeValuePaid);\\n    }\\n\\n    /**\\n     * @notice Calculates the maximum USD value of a given kreskoAsset that can be liquidated given a liquidation pair\\n     *\\n     * 1. Calculates the value gained per USD repaid in liquidation for a given kreskoAsset\\n     *\\n     * debtFactor = debtFactor = k * LT / cFactor;\\n     *\\n     * valPerUSD = (DebtFactor - Asset closeFee - liquidationIncentive) / DebtFactor\\n     *\\n     * 2. Calculates the maximum amount of USD value that can be liquidated given the account's collateral value\\n     *\\n     * maxLiquidatableUSD = (MCV - ACV) / valPerUSD / debtFactor / cFactor * LOM\\n     *\\n     * @dev This function is used by getMaxLiquidation and is factored out for readability\\n     * @param vars liquidation variables struct\\n     * @param _repayKreskoAsset The kreskoAsset being repaid in the liquidation\\n     */\\n    function _getMaxLiquidatableUSD(\\n        MaxLiquidationVars memory vars,\\n        KrAsset memory _repayKreskoAsset\\n    ) private pure returns (uint256) {\\n        uint256 valuePerUSDRepaid = (vars.debtFactor -\\n            vars.collateral.liquidationIncentive -\\n            _repayKreskoAsset.closeFee).wadDiv(vars.debtFactor);\\n        return\\n            (vars.minCollateralValue - vars.accountCollateralValue)\\n                .wadMul(vars.maxLiquidationMultiplier)\\n                .wadDiv(valuePerUSDRepaid)\\n                .wadDiv(vars.debtFactor)\\n                .wadDiv(vars.collateral.factor);\\n    }\\n\\n    function _getMaxLiquidationParams(\\n        MinterState storage state,\\n        address _account,\\n        KrAsset memory _repayKreskoAsset,\\n        address _seizedCollateral\\n    ) private view returns (MaxLiquidationVars memory) {\\n        uint256 liquidationThreshold = state.liquidationThreshold;\\n        uint256 minCollateralValue = state.getAccountMinimumCollateralValueAtRatio(_account, liquidationThreshold);\\n\\n        (uint256 accountCollateralValue, uint256 seizeCollateralAccountValue) = state.getAccountCollateralValue(\\n            _account,\\n            _seizedCollateral\\n        );\\n\\n        CollateralAsset memory collateral = state.collateralAssets[_seizedCollateral];\\n\\n        return\\n            MaxLiquidationVars({\\n                collateral: collateral,\\n                accountCollateralValue: accountCollateralValue,\\n                debtFactor: _repayKreskoAsset.kFactor.wadMul(liquidationThreshold).wadDiv(collateral.factor),\\n                minCollateralValue: minCollateralValue,\\n                minimumDebtValue: state.minimumDebtValue,\\n                seizeCollateralAccountValue: seizeCollateralAccountValue,\\n                liquidationThreshold: liquidationThreshold,\\n                maxLiquidationMultiplier: state.maxLiquidationMultiplier\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x8c8a312c7ec2855e5485ab08996b26c447464dd290ac88e1f4f69970ce85bd5e\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {CollateralAsset, Constants} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\n/**\\n * @title Library for collateral related operations\\n * @author Kresko\\n */\\nlibrary LibCollateral {\\n    using LibDecimals for uint8;\\n    using Arrays for address[];\\n    using WadRay for uint256;\\n\\n    /**\\n     * In case a collateral asset is also a kresko asset, convert an amount to anchor shares\\n     * @param _amount amount to possibly convert\\n     * @param _collateralAsset address of the collateral asset\\n     */\\n    function normalizeCollateralAmount(\\n        MinterState storage self,\\n        uint256 _amount,\\n        address _collateralAsset\\n    ) internal view returns (uint256 amount) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n        if (asset.anchor != address(0)) {\\n            return IKreskoAssetAnchor(asset.anchor).convertToShares(_amount);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice Get the state of a specific collateral asset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `CollateralAsset` struct\\n     */\\n    function collateralAsset(MinterState storage self, address _asset) internal view returns (CollateralAsset memory) {\\n        return self.collateralAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value for a single collateral asset and amount.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to calculate the collateral value for.\\n     * @param _ignoreCollateralFactor Boolean indicating if the asset's collateral factor should be ignored.\\n     * @return The collateral value for the provided amount of the collateral asset.\\n     */\\n    function getCollateralValueAndOraclePrice(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) internal view returns (uint256, uint256) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n\\n        uint256 oraclePrice = asset.uintPrice(self.oracleDeviationPct);\\n        uint256 value = asset.decimals.toWad(_amount).wadMul(oraclePrice);\\n\\n        if (!_ignoreCollateralFactor) {\\n            value = value.wadMul(asset.factor);\\n        }\\n        return (value, oraclePrice);\\n    }\\n\\n    /**\\n     * @notice verifies that the account has sufficient collateral for the requested amount and records the collateral\\n     * @param _account The address of the account to verify the collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _withdrawAmount The amount of the collateral asset to withdraw.\\n     * @param _collateralDeposits Collateral deposits for the account.\\n     * @param _depositedCollateralAssetIndex Index of the collateral asset in the account's deposited collateral assets array.\\n     */\\n    function verifyAndRecordCollateralWithdrawal(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount,\\n        uint256 _collateralDeposits,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_withdrawAmount > 0, Error.ZERO_WITHDRAW);\\n        require(\\n            _depositedCollateralAssetIndex <= self.depositedCollateralAssets[_account].length - 1,\\n            Error.ARRAY_OUT_OF_BOUNDS\\n        );\\n\\n        // Ensure that the operation passes checks MCR checks\\n        verifyAccountCollateral(self, _account, _collateralAsset, _withdrawAmount);\\n\\n        uint256 newCollateralAmount = _collateralDeposits - _withdrawAmount;\\n\\n        // If the collateral asset is also a kresko asset, ensure that the deposit amount is above the minimum.\\n        // This is done because kresko assets can be rebased.\\n        if (self.collateralAssets[_collateralAsset].anchor != address(0)) {\\n            require(\\n                newCollateralAmount >= Constants.MIN_KRASSET_COLLATERAL_AMOUNT || newCollateralAmount == 0,\\n                Error.COLLATERAL_AMOUNT_TOO_LOW\\n            );\\n        }\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (newCollateralAmount == 0) {\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        // Record the withdrawal.\\n        self.collateralDeposits[_account][_collateralAsset] = self\\n            .collateralAssets[_collateralAsset]\\n            .toNonRebasingAmount(newCollateralAmount);\\n\\n        emit MinterEvent.CollateralWithdrawn(_account, _collateralAsset, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Records account as having deposited an amount of a collateral asset.\\n     * @dev Token transfers are expected to be done by the caller.\\n     * @param _account The address of the collateral asset.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _depositAmount The amount of the collateral asset deposited.\\n     */\\n    function recordCollateralDeposit(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _depositAmount\\n    ) internal {\\n        // Because the depositedCollateralAssets[_account] is pushed to if the existing\\n        // deposit amount is 0, require the amount to be > 0. Otherwise, the depositedCollateralAssets[_account]\\n        // could be filled with duplicates, causing collateral to be double-counted in the collateral value.\\n        require(_depositAmount > 0, Error.ZERO_DEPOSIT);\\n\\n        // If the account does not have an existing deposit for this collateral asset,\\n        // push it to the list of the account's deposited collateral assets.\\n        uint256 existingCollateralAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n\\n        if (existingCollateralAmount == 0) {\\n            self.depositedCollateralAssets[_account].push(_collateralAsset);\\n        }\\n\\n        uint256 newCollateralAmount = existingCollateralAmount + _depositAmount;\\n\\n        // If the collateral asset is also a kresko asset, ensure that the deposit amount is above the minimum.\\n        // This is done because kresko assets can be rebased.\\n        if (self.collateralAssets[_collateralAsset].anchor != address(0)) {\\n            require(\\n                newCollateralAmount >= Constants.MIN_KRASSET_COLLATERAL_AMOUNT || newCollateralAmount == 0,\\n                Error.COLLATERAL_AMOUNT_TOO_LOW\\n            );\\n        }\\n\\n        // Record the deposit.\\n        unchecked {\\n            self.collateralDeposits[_account][_collateralAsset] = self\\n                .collateralAssets[_collateralAsset]\\n                .toNonRebasingAmount(newCollateralAmount);\\n        }\\n\\n        emit MinterEvent.CollateralDeposited(_account, _collateralAsset, _depositAmount);\\n    }\\n\\n    /**\\n     * @notice records the collateral withdrawal\\n     * @param _account The address of the account to verify the collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _withdrawAmount The amount of the collateral asset to withdraw.\\n     * @param _collateralDeposits Collateral deposits for the account.\\n     * @param _depositedCollateralAssetIndex Index of the collateral asset in the account's deposited collateral assets array.\\n     */\\n    function recordCollateralWithdrawal(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount,\\n        uint256 _collateralDeposits,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_withdrawAmount > 0, Error.ZERO_WITHDRAW);\\n        require(\\n            _depositedCollateralAssetIndex <= self.depositedCollateralAssets[_account].length - 1,\\n            Error.ARRAY_OUT_OF_BOUNDS\\n        );\\n        // ensure that the handler does not attempt to withdraw more collateral than the account has\\n        require(_collateralDeposits >= _withdrawAmount, Error.COLLATERAL_INSUFFICIENT_AMOUNT);\\n\\n        uint256 newCollateralAmount = _collateralDeposits - _withdrawAmount;\\n\\n        // If the collateral asset is also a kresko asset, ensure that the deposit amount is above the minimum.\\n        // This is done because kresko assets can be rebased.\\n        if (self.collateralAssets[_collateralAsset].anchor != address(0)) {\\n            require(\\n                newCollateralAmount >= Constants.MIN_KRASSET_COLLATERAL_AMOUNT || newCollateralAmount == 0,\\n                Error.COLLATERAL_AMOUNT_TOO_LOW\\n            );\\n        }\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (newCollateralAmount == 0) {\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        // Record the withdrawal.\\n        self.collateralDeposits[_account][_collateralAsset] = self\\n            .collateralAssets[_collateralAsset]\\n            .toNonRebasingAmount(newCollateralAmount);\\n\\n        emit MinterEvent.UncheckedCollateralWithdrawn(_account, _collateralAsset, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice verifies that the account collateral\\n     * @param _account The address of the account to verify the collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _withdrawAmount The amount of the collateral asset to withdraw.\\n     */\\n    function verifyAccountCollateral(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount\\n    ) internal view {\\n        // Ensure the withdrawal does not result in the account having a collateral value\\n        // under the minimum collateral amount required to maintain a healthy position.\\n        // I.e. the new account's collateral value must still exceed the account's minimum\\n        // collateral value.\\n        // Get the account's current collateral value.\\n        uint256 accountCollateralValue = self.getAccountCollateralValue(_account);\\n        // Get the collateral value that the account will lose as a result of this withdrawal.\\n        (uint256 withdrawnCollateralValue, ) = self.getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            _withdrawAmount,\\n            false // Take the collateral factor into consideration.\\n        );\\n        // Get the account's minimum collateral value.\\n        uint256 accountMinCollateralValue = self.getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            self.minimumCollateralizationRatio\\n        );\\n        // Require accountMinCollateralValue <= accountCollateralValue - withdrawnCollateralValue.\\n        require(\\n            accountMinCollateralValue <= accountCollateralValue - withdrawnCollateralValue,\\n            Error.COLLATERAL_INSUFFICIENT_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x902a5116d69bdd13d020f8d40ed672a85ba0ed2ceb13f4acc19f4e54fb67f623\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\n\\n/**\\n * @title Library for Kresko specific decimals\\n */\\nlibrary LibDecimals {\\n    /**\\n     * @notice For a given collateral asset and amount, returns a wad represenatation.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals > 18, there may be a loss of precision.\\n     * @param _decimals The collateral asset's number of decimals\\n     * @param _amount The amount of the collateral asset.\\n     * @return A fp of amount scaled according to the collateral asset's decimals.\\n     */\\n    function toWad(uint256 _decimals, uint256 _amount) internal pure returns (uint256) {\\n        // Initially, use the amount as the raw value for the fixed point.\\n        // which internally uses 18 decimals.\\n        // Most collateral assets will have 18 decimals.\\n\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_decimals < 18) {\\n            // If the decimals are less than 18, multiply the amount\\n            // to get the correct wad value.\\n            // E.g. 1 full token of a 17 decimal token will  cause the\\n            // initial setting of amount to be 0.1, so we multiply\\n            // by 10 ** (18 - 17) = 10 to get it to 0.1 * 10 = 1.\\n            return _amount * (10 ** (18 - _decimals));\\n        } else if (_decimals > 18) {\\n            // If the decimals are greater than 18, divide the amount\\n            // to get the correct fixed point value.\\n            // Note because wad numbers are 18 decimals, this results\\n            // in loss of precision. E.g. if the collateral asset has 19\\n            // decimals and the deposit amount is only 1 uint, this will divide\\n            // 1 by 10 ** (19 - 18), resulting in 1 / 10 = 0\\n            return _amount / (10 ** (_decimals - 18));\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice For a given collateral asset and wad amount, returns the collateral amount.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals < 18, there may be a loss of precision.\\n     * @param _decimals The collateral asset's number of decimals\\n     * @param _wadAmount The wad amount of the collateral asset.\\n     * @return An amount that is compatible with the collateral asset's decimals.\\n     */\\n    function fromWad(uint256 _decimals, uint256 _wadAmount) internal pure returns (uint256) {\\n        // Initially, use the rawValue, which internally uses 18 decimals.\\n        // Most collateral assets will have 18 decimals.\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_decimals < 18) {\\n            // If the decimals are less than 18, divide the depositAmount\\n            // to get the correct collateral amount.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 17 decimals, divide by 10 ** (18 - 17) = 10\\n            // to get a value of 1e17.\\n            // This may result in a loss of precision.\\n            return _wadAmount / (10 ** (18 - _decimals));\\n        } else if (_decimals > 18) {\\n            // If the decimals are greater than 18, multiply the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 19 decimals, multiply by 10 ** (19 - 18) = 10\\n            // to get a value of 1e19.\\n            return _wadAmount * (10 ** (_decimals - 18));\\n        }\\n        return _wadAmount;\\n    }\\n\\n    /**\\n     * @notice Divides an uint256 @param _value with @param _priceWithOracleDecimals\\n     * @param _value Left side value of the division\\n     * @param wadValue result with 18 decimals\\n     */\\n    function divByPrice(uint256 _value, uint256 _priceWithOracleDecimals) internal view returns (uint256 wadValue) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return _priceWithOracleDecimals;\\n        return (_value * 10 ** oracleDecimals) / _priceWithOracleDecimals;\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _wadPrice value with extOracleDecimals\\n     */\\n    function fromWadPriceToUint(uint256 _wadPrice) internal view returns (uint256 priceWithOracleDecimals) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) return _wadPrice;\\n        return _wadPrice / 10 ** (18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice with 18 decimals\\n     */\\n    function oraclePriceToWad(uint256 _priceWithOracleDecimals) internal view returns (uint256) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) {\\n            return _priceWithOracleDecimals;\\n        }\\n        return _priceWithOracleDecimals * 10 ** (18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an int256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function oraclePriceToWad(int256 _priceWithOracleDecimals) internal view returns (uint256) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return uint256(_priceWithOracleDecimals);\\n        return uint256(_priceWithOracleDecimals) * 10 ** (18 - oracleDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0x1b1e2cb150eab918fa101f5f02039c45a392585ff1f3fde5fdab2775a6380ca2\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibKrAsset.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {IUniswapV2OracleCompat} from \\\"../amm-oracle/IUniswapV2OracleCompat.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibKrAsset {\\n    using WadRay for uint256;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Functions                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Get the state of a specific krAsset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `KrAsset` struct\\n     */\\n    function kreskoAsset(MinterState storage self, address _asset) internal view returns (KrAsset memory) {\\n        return self.kreskoAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the USD value for a single Kresko asset and amount.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @param _ignoreKFactor Boolean indicating if the asset's k-factor should be ignored.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetValue(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKFactor\\n    ) internal view returns (uint256) {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        uint256 value = krAsset.uintUSD(_amount, self.oracleDeviationPct);\\n\\n        if (!_ignoreKFactor) {\\n            value = value.wadMul(krAsset.kFactor);\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Gets the AMM price for a Kresko asset.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetAMMPrice(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        if (self.ammOracle == address(0)) {\\n            return 0;\\n        }\\n        return IUniswapV2OracleCompat(self.ammOracle).consultKrAsset(_kreskoAsset, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the minimum collateral value required to\\n     * back a Kresko asset amount at a given collateralization ratio.\\n     * @param _krAsset The address of the Kresko asset.\\n     * @param _amount The Kresko Asset debt amount.\\n     * @return minCollateralValue is the minimum collateral value required for this Kresko Asset amount.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required.\\n     */\\n    function getMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _krAsset,\\n        uint256 _amount,\\n        uint256 _ratio\\n    ) internal view returns (uint256 minCollateralValue) {\\n        // Calculate the collateral value required to back this Kresko asset amount at the given ratio\\n        return self.getKrAssetValue(_krAsset, _amount, false).wadMul(_ratio);\\n    }\\n}\\n\",\"keccak256\":\"0xb63816adbd17d462e2afa7c3fd402c975fbe6ca65206507fa17474e3cdb54539\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibMint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\n// solhint-disable not-rely-on-time\\n// solhint-disable-next-line\\nimport {SafeERC20, IERC20Permit} from \\\"../../shared/SafeERC20.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\n\\nlibrary LibMint {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using SafeERC20 for IERC20Permit;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Mint kresko assets with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being repaid\\n    /// @param _amount the asset amount being minted\\n    /// @param _account the account the debt is subtracted from\\n    function mint(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _amount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get possibly rebalanced amount of kresko asset\\n        uint256 issued = IKreskoAssetIssuer(_anchor).issue(_amount, _account);\\n        // Calculate debt index scaled value\\n        uint256 amountScaled = issued.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n        // Increase principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] += issued;\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled += uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the global rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /**\\n     * @notice Charges the protocol open fee based off the value of the minted asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the open fee from.\\n     * @param _kreskoAsset The address of the kresko asset being minted.\\n     * @param _kreskoAssetAmountMinted The amount of the kresko asset being minted.\\n     */\\n    function chargeOpenFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _kreskoAssetAmountMinted\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being minted.\\n        uint256 feeValue = krAsset.uintUSD(_kreskoAssetAmountMinted, self.oracleDeviationPct).wadMul(krAsset.openFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, uint256 feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Permit(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.OpenFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid);\\n\\n            feeValue = feeValue - feeValuePaid;\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e189975929751a7ceee4cdaf9ee8954cc5601b283cff8d0852f513ee42b43c3\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibRedstone.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {RedstoneDefaultsLib} from \\\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\\\";\\nimport {BitmapLib} from \\\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\\\";\\nimport {SignatureLib} from \\\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\nlibrary RedstoneError {\\n    // Error messages\\n    error CalldataOverOrUnderFlow();\\n    error IncorrectUnsignedMetadataSize();\\n    error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n    error EachSignerMustProvideTheSameValue();\\n    error EmptyCalldataPointersArr();\\n    error InvalidCalldataPointer();\\n    error CalldataMustHaveValidPayload();\\n    error SignerNotAuthorised(address receivedSigner);\\n}\\n\\n// === Abbreviations ===\\n// BS - Bytes size\\n// PTR - Pointer (memory location)\\n// SIG - Signature\\n\\n// Solidity and YUL constants\\nuint256 constant STANDARD_SLOT_BS = 32;\\nuint256 constant FREE_MEMORY_PTR = 0x40;\\nuint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\nuint256 constant FUNCTION_SIGNATURE_BS = 4;\\nuint256 constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\nuint256 constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n// RedStone protocol consts\\nuint256 constant SIG_BS = 65;\\nuint256 constant TIMESTAMP_BS = 6;\\nuint256 constant DATA_PACKAGES_COUNT_BS = 2;\\nuint256 constant DATA_POINTS_COUNT_BS = 3;\\nuint256 constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\nuint256 constant DATA_POINT_SYMBOL_BS = 32;\\nuint256 constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\nuint256 constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\nuint256 constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\nuint256 constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n// Derived values (based on consts)\\nuint256 constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\nuint256 constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\nuint256 constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\nuint256 constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\nlibrary LibRedstone {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev This function can be used in a consumer contract to securely extract an\\n     * oracle value for a given data feed id. Security is achieved by\\n     * signatures verification, timestamp validation, and aggregating values\\n     * from different authorised signers into a single numeric value. If any of the\\n     * required conditions do not match, the function will revert.\\n     * Note! This function expects that tx calldata contains redstone payload in the end\\n     * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n     * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n     * @return Extracted and verified numeric oracle value for the given data feed id\\n     */\\n    function getPrice(bytes32 dataFeedId) internal view returns (uint256) {\\n        bytes32[] memory dataFeedIds = new bytes32[](1);\\n        dataFeedIds[0] = dataFeedId;\\n        return _securelyExtractOracleValuesFromTxMsg(dataFeedIds)[0];\\n    }\\n\\n    function getAuthorisedSignerIndex(address signerAddress) internal pure returns (uint8) {\\n        if (signerAddress == 0x926E370fD53c23f8B71ad2B3217b227E41A92b12) return 0;\\n        if (signerAddress == 0x0C39486f770B26F5527BBBf942726537986Cd7eb) return 1;\\n        // For testing hardhat signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 is authorised\\n        // will be removed in production deployment\\n        if (signerAddress == 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) return 2;\\n\\n        revert RedstoneError.SignerNotAuthorised(signerAddress);\\n    }\\n\\n    /**\\n     * @dev This function can be used in a consumer contract to securely extract several\\n     * numeric oracle values for a given array of data feed ids. Security is achieved by\\n     * signatures verification, timestamp validation, and aggregating values\\n     * from different authorised signers into a single numeric value. If any of the\\n     * required conditions do not match, the function will revert.\\n     * Note! This function expects that tx calldata contains redstone payload in the end\\n     * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n     * @param dataFeedIds An array of unique data feed identifiers\\n     * @return An array of the extracted and verified oracle values in the same order\\n     * as they are requested in the dataFeedIds array\\n     */\\n    function getPrices(bytes32[] memory dataFeedIds) internal view returns (uint256[] memory) {\\n        return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n    }\\n\\n    /**\\n     * @dev This function may be overridden by the child consumer contract.\\n     * It should validate the timestamp against the current time (block.timestamp)\\n     * It should revert with a helpful message if the timestamp is not valid\\n     * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n     */\\n    function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n        // For testing this function is disabled\\n        // Uncomment this line to enable timestamp validation in prod\\n        // RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n    }\\n\\n    /**\\n     * @dev This function should be overridden by the child consumer contract.\\n     * @return The minimum required value of unique authorised signers\\n     */\\n    function getUniqueSignersThreshold() internal pure returns (uint8) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev This function may be overridden by the child consumer contract.\\n     * It should aggregate values from different signers to a single uint value.\\n     * By default, it calculates the median value\\n     * @param values An array of uint256 values from different signers\\n     * @return Result of the aggregation in the form of a single number\\n     */\\n    function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n        return RedstoneDefaultsLib.aggregateValues(values);\\n    }\\n\\n    /**\\n     * @dev This is an internal helpful function for secure extraction oracle values\\n     * from the tx calldata. Security is achieved by signatures verification, timestamp\\n     * validation, and aggregating values from different authorised signers into a\\n     * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n     * insufficient number of authorised signers) do not match, the function will revert.\\n     *\\n     * Note! You should not call this function in a consumer contract. You can use\\n     * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n     *\\n     * @param dataFeedIds An array of unique data feed identifiers\\n     * @return An array of the extracted and verified oracle values in the same order\\n     * as they are requested in dataFeedIds array\\n     */\\n    function _securelyExtractOracleValuesFromTxMsg(\\n        bytes32[] memory dataFeedIds\\n    ) private view returns (uint256[] memory) {\\n        // Initializing helpful variables and allocating memory\\n        uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n        uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n        uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n        for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n            // The line below is commented because newly allocated arrays are filled with zeros\\n            // But we left it for better readability\\n            // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n            valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n        }\\n\\n        // Extracting the number of data packages from calldata\\n        uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n        uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n        calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n        // Saving current free memory pointer\\n        uint256 freeMemPtr;\\n        assembly {\\n            freeMemPtr := mload(FREE_MEMORY_PTR)\\n        }\\n\\n        // Data packages extraction in a loop\\n        for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n            // Extract data package details and update calldata offset\\n            uint256 dataPackageByteSize = _extractDataPackage(\\n                dataFeedIds,\\n                uniqueSignerCountForDataFeedIds,\\n                signersBitmapForDataFeedIds,\\n                valuesForDataFeeds,\\n                calldataNegativeOffset\\n            );\\n            calldataNegativeOffset += dataPackageByteSize;\\n\\n            // Shifting memory pointer back to the \\\"safe\\\" value\\n            assembly {\\n                mstore(FREE_MEMORY_PTR, freeMemPtr)\\n            }\\n        }\\n\\n        // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n        return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n    }\\n\\n    /**\\n     * @dev This is a private helpful function, which extracts data for a data package based\\n     * on the given negative calldata offset, verifies them, and in the case of successful\\n     * verification updates the corresponding data package values in memory\\n     *\\n     * @param dataFeedIds an array of unique data feed identifiers\\n     * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n     * for each data feed\\n     * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n     * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n     * j-th value for the i-th data feed\\n     * @param calldataNegativeOffset negative calldata offset for the given data package\\n     *\\n     * @return An array of the aggregated values\\n     */\\n    function _extractDataPackage(\\n        bytes32[] memory dataFeedIds,\\n        uint256[] memory uniqueSignerCountForDataFeedIds,\\n        uint256[] memory signersBitmapForDataFeedIds,\\n        uint256[][] memory valuesForDataFeeds,\\n        uint256 calldataNegativeOffset\\n    ) private view returns (uint256) {\\n        uint256 signerIndex;\\n\\n        (uint256 dataPointsCount, uint256 eachDataPointValueByteSize) = _extractDataPointsDetailsForDataPackage(\\n            calldataNegativeOffset\\n        );\\n\\n        // We use scopes to resolve problem with too deep stack\\n        {\\n            uint48 extractedTimestamp;\\n            address signerAddress;\\n            bytes32 signedHash;\\n            bytes memory signedMessage;\\n            uint256 signedMessageBytesCount;\\n\\n            signedMessageBytesCount =\\n                dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) +\\n                DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n            uint256 timestampCalldataOffset = msg.data.length.sub(\\n                calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS\\n            );\\n\\n            uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n                calldataNegativeOffset + SIG_BS + signedMessageBytesCount\\n            );\\n\\n            assembly {\\n                // Extracting the signed message\\n                signedMessage := extractBytesFromCalldata(signedMessageCalldataOffset, signedMessageBytesCount)\\n\\n                // Hashing the signed message\\n                signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n                // Extracting timestamp\\n                extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n                function initByteArray(bytesCount) -> ptr {\\n                    ptr := mload(FREE_MEMORY_PTR)\\n                    mstore(ptr, bytesCount)\\n                    ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n                    mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n                }\\n\\n                function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n                    let extractedBytesStartPtr := initByteArray(bytesCount)\\n                    calldatacopy(extractedBytesStartPtr, offset, bytesCount)\\n                    extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n                }\\n            }\\n\\n            // Validating timestamp\\n            validateTimestamp(extractedTimestamp);\\n\\n            // Verifying the off-chain signature against on-chain hashed data\\n            signerAddress = SignatureLib.recoverSignerAddress(signedHash, calldataNegativeOffset + SIG_BS);\\n            signerIndex = getAuthorisedSignerIndex(signerAddress);\\n        }\\n\\n        // Updating helpful arrays\\n        {\\n            bytes32 dataPointDataFeedId;\\n            uint256 dataPointValue;\\n            for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n                // Extracting data feed id and value for the current data point\\n                (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n                    calldataNegativeOffset,\\n                    eachDataPointValueByteSize,\\n                    dataPointIndex\\n                );\\n\\n                for (uint256 dataFeedIdIndex = 0; dataFeedIdIndex < dataFeedIds.length; dataFeedIdIndex++) {\\n                    if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n                        uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n                        if (\\n                            !BitmapLib.getBitFromBitmap(\\n                                bitmapSignersForDataFeedId,\\n                                signerIndex\\n                            ) /* current signer was not counted for current dataFeedId */ &&\\n                            uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n                        ) {\\n                            // Increase unique signer counter\\n                            uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n                            // Add new value\\n                            valuesForDataFeeds[dataFeedIdIndex][\\n                                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n                            ] = dataPointValue;\\n\\n                            // Update signers bitmap\\n                            signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                                bitmapSignersForDataFeedId,\\n                                signerIndex\\n                            );\\n                        }\\n\\n                        // Breaking, as there couldn't be several indexes for the same feed ID\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Return total data package byte size\\n        return\\n            DATA_PACKAGE_WITHOUT_DATA_POINTS_BS + (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) * dataPointsCount;\\n    }\\n\\n    /**\\n     * @dev This is a private helpful function, which aggregates values from different\\n     * authorised signers for the given arrays of values for each data feed\\n     *\\n     * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n     * j-th value for the i-th data feed\\n     * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n     * for each data feed\\n     *\\n     * @return An array of the aggregated values\\n     */\\n    function _getAggregatedValues(\\n        uint256[][] memory valuesForDataFeeds,\\n        uint256[] memory uniqueSignerCountForDataFeedIds\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n        uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n        for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n            if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n                revert RedstoneError.InsufficientNumberOfUniqueSigners(\\n                    uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n                    uniqueSignersThreshold\\n                );\\n            }\\n            uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n            aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n        }\\n\\n        return aggregatedValues;\\n    }\\n\\n    function _extractDataPointsDetailsForDataPackage(\\n        uint256 calldataNegativeOffsetForDataPackage\\n    ) private pure returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize) {\\n        // Using uint24, because data points count byte size number has 3 bytes\\n        uint24 dataPointsCount_;\\n\\n        // Using uint32, because data point value byte size has 4 bytes\\n        uint32 eachDataPointValueByteSize_;\\n\\n        // Extract data points count\\n        uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n        uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n        assembly {\\n            dataPointsCount_ := calldataload(calldataOffset)\\n        }\\n\\n        // Extract each data point value size\\n        calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n        assembly {\\n            eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n        }\\n\\n        // Prepare returned values\\n        dataPointsCount = dataPointsCount_;\\n        eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n    }\\n\\n    function _extractByteSizeOfUnsignedMetadata() private pure returns (uint256) {\\n        // Checking if the calldata ends with the RedStone marker\\n        bool hasValidRedstoneMarker;\\n        assembly {\\n            let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n            hasValidRedstoneMarker := eq(REDSTONE_MARKER_MASK, and(calldataLast32Bytes, REDSTONE_MARKER_MASK))\\n        }\\n        if (!hasValidRedstoneMarker) {\\n            revert RedstoneError.CalldataMustHaveValidPayload();\\n        }\\n\\n        // Using uint24, because unsigned metadata byte size number has 3 bytes\\n        uint24 unsignedMetadataByteSize;\\n        if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n            revert RedstoneError.CalldataOverOrUnderFlow();\\n        }\\n        assembly {\\n            unsignedMetadataByteSize := calldataload(sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS))\\n        }\\n        uint256 calldataNegativeOffset = unsignedMetadataByteSize + UNSIGNED_METADATA_BYTE_SIZE_BS + REDSTONE_MARKER_BS;\\n        if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n            revert RedstoneError.IncorrectUnsignedMetadataSize();\\n        }\\n        return calldataNegativeOffset;\\n    }\\n\\n    function _extractDataPackagesCountFromCalldata(\\n        uint256 calldataNegativeOffset\\n    ) private pure returns (uint16 dataPackagesCount) {\\n        uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n        if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n            revert RedstoneError.CalldataOverOrUnderFlow();\\n        }\\n        assembly {\\n            dataPackagesCount := calldataload(sub(calldatasize(), calldataNegativeOffsetWithStandardSlot))\\n        }\\n        return dataPackagesCount;\\n    }\\n\\n    function _extractDataPointValueAndDataFeedId(\\n        uint256 calldataNegativeOffsetForDataPackage,\\n        uint256 defaultDataPointValueByteSize,\\n        uint256 dataPointIndex\\n    ) private pure returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n        uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n        uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n            (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n        );\\n        uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n        assembly {\\n            dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n            dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5af04b7d5c2e0576f5f168b1b3c8df44a4018ab4fe43a8c8b8037f6f2f23ab4a\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/libs/LibStabilityRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IERC20Permit} from \\\"../../shared/IERC20Permit.sol\\\";\\n\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {LibKrAsset} from \\\"../libs/LibKrAsset.sol\\\";\\n\\nimport {StabilityRateConfig} from \\\"../InterestRateState.sol\\\";\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @author Kresko\\n * @title AMM price stability rate library, derived from Aave Protocols VariableDebtToken calculations\\n * @notice Library for performing stability rate related operations\\n */\\nlibrary LibStabilityRate {\\n    using WadRay for uint256;\\n    using WadRay for uint128;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @notice Cumulates the stability rate from previous update and multiplies the debt index with it.\\n     * @dev Updates the updated timestamp\\n     * @dev New debt index cannot overflow uint128\\n     * @param self configuration for the asset\\n     * @return newDebtIndex the updated index\\n     */\\n    function updateDebtIndex(StabilityRateConfig storage self) internal returns (uint256 newDebtIndex) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n\\n        newDebtIndex = self.debtIndex;\\n        // only cumulating if there is any assets minted and rate is over 0\\n        if (IERC20Permit(self.asset).totalSupply() != 0) {\\n            uint256 cumulatedStabilityRate = self.calculateCompoundedInterest(block.timestamp);\\n            newDebtIndex = cumulatedStabilityRate.rayMul(self.debtIndex);\\n            require(newDebtIndex <= type(uint128).max, Error.DEBT_INDEX_OVERFLOW);\\n            self.debtIndex = uint128(newDebtIndex);\\n        }\\n\\n        self.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Updates the current stability rate for an asset\\n     * @dev New stability rate cannot overflow uint128\\n     * @param self rate configuration for the asset\\n     */\\n    function updateStabilityRate(StabilityRateConfig storage self) internal {\\n        if (self.asset == address(0)) return;\\n\\n        uint256 stabilityRate = calculateStabilityRate(self);\\n        require(stabilityRate <= type(uint128).max, Error.STABILITY_RATE_OVERFLOW);\\n        self.stabilityRate = uint128(stabilityRate);\\n    }\\n\\n    /**\\n     * @notice Get the current price rate between AMM and oracle pricing\\n     * @dev Raw return value of ammPrice == 0 when no AMM pair exists OR liquidity of the pair does not qualify\\n     * @param self rate configuration for the asset\\n     * @return priceRate the current price rate\\n     */\\n    function getPriceRate(StabilityRateConfig storage self) internal view returns (uint256 priceRate) {\\n        uint256 oraclePrice = ms().getKrAssetValue(self.asset, 1 ether, true);\\n        uint256 ammPrice = ms().getKrAssetAMMPrice(self.asset, 1 ether);\\n        // no pair, no effect\\n        if (ammPrice == 0) {\\n            return 0;\\n        }\\n        return ammPrice.wadDiv(oraclePrice) / 10;\\n    }\\n\\n    /**\\n     * @notice Calculate new stability rate from the current price rate\\n     * @dev Separate calculations exist for following cases:\\n     * case 1: AMM premium < optimal\\n     * case 2: AMM premium > optimal\\n     * @param self rate configuration for the asset\\n     * @return stabilityRate the current stability rate\\n     */\\n    function calculateStabilityRate(StabilityRateConfig storage self) internal view returns (uint256 stabilityRate) {\\n        uint256 priceRate = self.getPriceRate(); // 0.95 RAY = -5% PREMIUM, 1.05 RAY = +5% PREMIUM\\n        // Return base rate if no AMM price exists\\n        if (priceRate == 0) {\\n            return self.stabilityRateBase;\\n        }\\n        bool rateIsGTOptimal = priceRate > self.optimalPriceRate;\\n\\n        uint256 rateDiff = rateIsGTOptimal ? priceRate - self.optimalPriceRate : self.optimalPriceRate - priceRate;\\n        uint256 rateDiffAdjusted = rateDiff.rayMul(self.rateSlope2.rayDiv(self.rateSlope1 + self.priceRateDelta));\\n\\n        if (!rateIsGTOptimal) {\\n            // Case: AMM price is lower than priceRate\\n            return self.stabilityRateBase + rateDiffAdjusted;\\n        } else {\\n            // Case: AMM price is higher than priceRate\\n            return self.stabilityRateBase.rayDiv(WadRay.RAY + rateDiffAdjusted);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers\\n     * with the advantage of great gas cost reductions\\n     * The Aave whitepaper contains reference to the approximation\\n     * with a table showing the margin of error per different time periods\\n     *\\n     * @param self rate configuration for the asset\\n     * @param _currentTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        StabilityRateConfig storage self,\\n        uint256 _currentTimestamp\\n    ) internal view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = _currentTimestamp - uint256(self.lastUpdateTimestamp);\\n\\n        if (exp == 0) {\\n            return WadRay.RAY;\\n        }\\n\\n        uint256 expMinusOne;\\n        uint256 expMinusTwo;\\n        uint256 basePowerTwo;\\n        uint256 basePowerThree;\\n        unchecked {\\n            expMinusOne = exp - 1;\\n\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n            basePowerTwo = self.stabilityRate.rayMul(self.stabilityRate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n            basePowerThree = basePowerTwo.rayMul(self.stabilityRate) / SECONDS_PER_YEAR;\\n        }\\n\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n        unchecked {\\n            secondTerm /= 2;\\n        }\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n        unchecked {\\n            thirdTerm /= 6;\\n        }\\n\\n        return WadRay.RAY + (self.stabilityRate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n    }\\n\\n    /**\\n     * @dev Returns the ongoing normalized debt index for the borrowers\\n     * A value of 1e27 means there is no interest. As time passes, the interest is accrued\\n     * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n     * @param self rate configuration for the asset\\n     * @return The normalized debt index. expressed in ray\\n     **/\\n    function getNormalizedDebtIndex(StabilityRateConfig storage self) internal view returns (uint256) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n        //solium-disable-next-line\\n        if (self.lastUpdateTimestamp == uint40(block.timestamp)) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return self.debtIndex;\\n        }\\n\\n        return self.calculateCompoundedInterest(block.timestamp).rayMul(self.debtIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x181e9a4c3c7e578e95c37f2fe2ae7d6b4b0d147667ab26ee0ffe023e2c4c8214\",\"license\":\"BUSL-1.1\"},\"src/contracts/shared/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x35460ed82f00d02eb7d164509fffcbf8c67bdc29da996f8d6bed4195ae707b47\",\"license\":\"MIT\"},\"src/contracts/shared/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface IERC20Permit {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9308be893f0869796955ed78d542fc8b2f04de9b6ffdc46632a417cd4af70e7e\",\"license\":\"MIT\"},\"src/contracts/shared/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Permit token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Permit token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Permit token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Permit token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Permit token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Permit token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcdb25979880d99bc6a47c2ade4399fc9c8bc4dfa7de507c85ed443865696ee2e\",\"license\":\"MIT\"},\"src/contracts/vendor/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\",\"keccak256\":\"0xe3e0540865adabd899265bc8f6ddaeb1eaa94d75900ca173303b08181fb8ca51\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestMarketOpen() external view returns (bool);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function getMarketOpen(uint256 roundId) external view returns (bool);\\n\\n    event AnswerUpdated(int256 indexed current, bool marketOpen, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xdb75c655ccf089430cb063b40591f464ba31ce273affc60c4b5a996f8e44fb85\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/FluxAggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\ninterface FluxAggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n    \\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0xba586154ed426975b9688394b833a1aefc1aa00f8195f92d43eca19802b77192\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/IFluxPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n/* solhint-disable no-global-import */\\n/* solhint-disable no-empty-blocks */\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./FluxAggregatorV3Interface.sol\\\";\\n\\ninterface IFluxPriceFeed is AggregatorInterface, FluxAggregatorV3Interface {}\\n\",\"keccak256\":\"0x038a8457f36ef9320aa0907774c3a69c00f0860a09b406d469667b50655aab5e\",\"license\":\"MIT\"},\"src/contracts/vendor/gnosis/IGnosisSafeL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\ninterface IGnosisSafeL2 {\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf1cdc61967b11ebf0351fb6a1e8fc121e5e4287ec99ebdc0c274e3fe242dd1e9\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Minimal {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x853784573ca029a6654da36764bbd748f2e14547e9cad490a49135543664c77f\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// // SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x17c3cb3c29020835e4e2d281a2dfbbbc3073fb52894bb9632f924259a0c97f14\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.16;\\n\\n/** solhint-disable func-name-mixedcase */\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x61a1ef1aecceeb9cffcb9d6e80ad067b3aa3401f608a04677ebfd793cbc95c4e\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x51b3d315e503d85683fb21c3d858d010e10d8b48959c2e437e7cebf5393692a1\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: APGL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"../../v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../v2-core/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb40321d34bb4450e86527ec738712ff475a88d24d8b16cb2af6fe16a16bec978\",\"license\":\"APGL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361015610015575b3661027a57005b6000803560e01c63fc82f0841461002c575061000e565b3461010957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610109576100cf73ffffffffffffffffffffffffffffffffffffffff7f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f0f541661009d61013b565b90602082527f6b724469616d6f6e643a204d757374206265206469616d6f6e64206f776e6572602083015233146101de565b6101018180808047335af13d15610104573d6100f26100ed826101a4565b610160565b9081528360203d92013e610379565b80f35b610379565b80fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761015b57604052565b61010c565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761015b57604052565b67ffffffffffffffff811161015b57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b156101e65750565b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110610263575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201610222565b60007fffffffff0000000000000000000000000000000000000000000000000000000081351681527f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f0960205273ffffffffffffffffffffffffffffffffffffffff604082205416604051606081019181831067ffffffffffffffff84111761015b5761035f8493928493604052602281527f6b724469616d6f6e643a2066756e6374696f6e20646f6573206e6f742065786960208201527f737400000000000000000000000000000000000000000000000000000000000060408201528215156101de565b368280378136915af43d82803e15610375573d90f35b3d90fd5b1561038057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152fdfea26469706673582212203fa49a1b5a9e98075e8ba974f8154696542bfbfec06f9a4254f34d918fd7dae664736f6c63430008130033",
  "facets": [
    {
      "name": "",
      "facetAddress": "0xD50B905A377496776F1e78BF316F484ACF36E149",
      "functionSelectors": [
        "0x1f931c1c",
        "0x33400db0"
      ]
    },
    {
      "name": "",
      "facetAddress": "0x698FD766843aE02930424aAba87B1AA16B462A29",
      "functionSelectors": [
        "0xcdffacc6",
        "0x52ef6b2c",
        "0xadfca15e",
        "0x7a0ed627"
      ]
    },
    {
      "name": "",
      "facetAddress": "0xA83466Ea14b439Fd0C0f8af57e16E195b291269E",
      "functionSelectors": [
        "0x79ba5097",
        "0x158ef93e",
        "0x8da5cb5b",
        "0xe30c3978",
        "0xf2fde38b"
      ]
    },
    {
      "name": "",
      "facetAddress": "0x7366d18831e535f3Ab0b804C01d454DaD72B4c36",
      "functionSelectors": [
        "0x248a9ca3",
        "0x9010d07c",
        "0xca15c873",
        "0x2f2ff15d",
        "0x91d14854",
        "0x36568abe",
        "0xd547741f"
      ]
    },
    {
      "name": "",
      "facetAddress": "0x3dda0A9c6008AB326d09837E44F6E174b6b178A6",
      "functionSelectors": [
        "0x2a848091",
        "0x01ffc9a7"
      ]
    },
    {
      "name": "AccountStateFacet",
      "facetAddress": "0x8b5b6F3ec5C2a7cC0e9c4744F144CfD3e5Fc1eB6",
      "functionSelectors": [
        "0x21075383",
        "0x0c65e07b",
        "0xd0d78140",
        "0x7d1a4450",
        "0xff1389c5",
        "0xe1b8cf6d",
        "0x08ab4b44",
        "0xeff19fd5",
        "0x2f3bc67a",
        "0x6d38822a",
        "0xefa80e86",
        "0xd63b4a66",
        "0x34923cd8",
        "0x83f4f637",
        "0x1b710473",
        "0x570b13a1"
      ]
    },
    {
      "name": "BurnFacet",
      "facetAddress": "0xbE2409A809C6Ac41709aF71Ed69E35648C399715",
      "functionSelectors": [
        "0x067dc289"
      ]
    },
    {
      "name": "BurnHelperFacet",
      "facetAddress": "0xCC260dE26621f5325B84565518898d35218FAD61",
      "functionSelectors": [
        "0x8dbf9ef2",
        "0x793d6a5f"
      ]
    },
    {
      "name": "ConfigurationFacet",
      "facetAddress": "0xF89fa7A7B43b2d3eD5D6ae065cd98a0278F07dBF",
      "functionSelectors": [
        "0x83508a9b",
        "0x8fbade65",
        "0xee67e41c",
        "0x08b020dc",
        "0xbd6cfca3",
        "0xfc684962",
        "0xf160d369",
        "0x3358efa3",
        "0x14f24865",
        "0x7e059b99",
        "0xd3b5be1a",
        "0xe4a9dd7d",
        "0x3a2d4eb6",
        "0xf9bbba4a",
        "0xc32c5a5d",
        "0xd634cbb1",
        "0xf361cf2a",
        "0x96f8fc1d"
      ]
    },
    {
      "name": "DepositWithdrawFacet",
      "facetAddress": "0x6dabACf112F6B849DF1823bc7596922A20E0072B",
      "functionSelectors": [
        "0xf970c3b7",
        "0xf5e6546c",
        "0x74d5f7c4"
      ]
    },
    {
      "name": "InterestLiquidationFacet",
      "facetAddress": "0xDD7c45b290594eFcC521c43eF8318e0bFEE332E1",
      "functionSelectors": [
        "0x78343c15",
        "0xf5063ee9"
      ]
    },
    {
      "name": "LiquidationFacet",
      "facetAddress": "0x8C2d5a43cEf3D087659Ba09CF9BF201494C851ca",
      "functionSelectors": [
        "0x49626466",
        "0xbe2801b5",
        "0x15937382"
      ]
    },
    {
      "name": "MintFacet",
      "facetAddress": "0x8e3db4FD96609F2d0158d1645b4A42774E0696aF",
      "functionSelectors": [
        "0xe3f06d7b"
      ]
    },
    {
      "name": "SafetyCouncilFacet",
      "facetAddress": "0xCF925563836A7218f92E198d86D200377a1F759D",
      "functionSelectors": [
        "0x4bb5099f",
        "0xa3d9c885",
        "0xbdfa6279",
        "0x4af5a66b",
        "0x52479a58"
      ]
    },
    {
      "name": "StateFacet",
      "facetAddress": "0x94fB40Ce4cb4eB99506EbAF6a105d2c7255F5dB2",
      "functionSelectors": [
        "0x4a4c5152",
        "0x5a28f773",
        "0xa61d1d51",
        "0xf698da25",
        "0x858bd750",
        "0x46904840",
        "0xa170052e",
        "0x3ae000c0",
        "0x69a7d52c",
        "0x9b177c19",
        "0x367afebb",
        "0x37e6c1fd",
        "0x4031234c",
        "0x0cfb88b3",
        "0xd127bad1",
        "0x8fbce768",
        "0xd678e6a2",
        "0xbd409d30"
      ]
    },
    {
      "name": "StabilityRateFacet",
      "facetAddress": "0x791F338C808cAa1c5602EAB318FcB634E689F0E1",
      "functionSelectors": [
        "0x1dc79fdb",
        "0x1c76f89d",
        "0x5281438e",
        "0x2ca7d524",
        "0x6c63e37c",
        "0x0c2dc21f",
        "0x9fb20c3e",
        "0x0a1bb384",
        "0x5ab01294",
        "0x850f2e07",
        "0xec440891",
        "0xf1dc1a5a",
        "0x76045e50"
      ]
    },
    {
      "name": "UIDataProviderFacet",
      "facetAddress": "0xc1095aFDe55cab6a8F0a11476694B283d5bf3f83",
      "functionSelectors": [
        "0xd297f19d",
        "0x981d11da",
        "0xba9c6864"
      ]
    },
    {
      "name": "UIDataProviderFacet2",
      "facetAddress": "0x253e75619D0d4D0AD0Fe45c895645acdbC94cE4C",
      "functionSelectors": [
        "0xfe42d845",
        "0x78235390"
      ]
    }
  ],
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rescueNative()": {
        "notice": "A rescue function for missent msg.value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}