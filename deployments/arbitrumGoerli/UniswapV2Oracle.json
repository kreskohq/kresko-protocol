{
  "address": "0xDD2A261B01c2Bfe42d5d0D0a38758050aF083512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "krAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "NewKrAssetPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinUpdatePeriod",
          "type": "uint256"
        }
      ],
      "name": "NewMinUpdatePeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatePeriod",
          "type": "uint256"
        }
      ],
      "name": "NewPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "blockTimestampLast",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "indexed": false,
          "internalType": "struct UQ.uq112x112",
          "name": "price0CumulativeLast",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "indexed": false,
          "internalType": "struct UQ.uq112x112",
          "name": "price1CumulativeLast",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeElapsed",
          "type": "uint256"
        }
      ],
      "name": "NewPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatePeriod",
          "type": "uint256"
        }
      ],
      "name": "PairUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_updatePeriod",
          "type": "uint256"
        }
      ],
      "name": "configurePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "consultKrAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "drainERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        }
      ],
      "name": "getKrAssetPair",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct UQ.uq112x112",
              "name": "price0Average",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct UQ.uq112x112",
              "name": "price1Average",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price0CumulativeLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price1CumulativeLast",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "blockTimestampLast",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "updatePeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUniswapV2Oracle.PairData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct UQ.uq112x112",
              "name": "price0Average",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "_x",
                  "type": "uint224"
                }
              ],
              "internalType": "struct UQ.uq112x112",
              "name": "price1Average",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price0CumulativeLast",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price1CumulativeLast",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "blockTimestampLast",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "updatePeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUniswapV2Oracle.PairData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentiveAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentiveToken",
      "outputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_updatePeriod",
          "type": "uint256"
        }
      ],
      "name": "initPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "krAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minUpdatePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newIncentiveToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setIncentiveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minUpdatePeriod",
          "type": "uint256"
        }
      ],
      "name": "setMinUpdatePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        }
      ],
      "name": "updateWithIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd17d1eaf0dc01752904c8e4177c379aaffb0f1d811e572db4b70c159f0e11cc4",
  "receipt": {
    "to": null,
    "from": "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d",
    "contractAddress": "0xDD2A261B01c2Bfe42d5d0D0a38758050aF083512",
    "transactionIndex": 1,
    "gasUsed": "2053269",
    "logsBloom": "0x
    "blockHash": "0xfa7f952ee0f56ddb17ac1af76a1535ee61aa508471a862b5e07735c89a431841",
    "transactionHash": "0xd17d1eaf0dc01752904c8e4177c379aaffb0f1d811e572db4b70c159f0e11cc4",
    "logs": [],
    "blockNumber": 30748038,
    "cumulativeGasUsed": "2053269",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6af5142d9102De2C6c1A937f5F317f76598fB04E",
    "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d"
  ],
  "numDeployments": 1,
  "solcInputHash": "b2440e2ee25a3b56f6c1ab3d15a60cd4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"krAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"NewKrAssetPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinUpdatePeriod\",\"type\":\"uint256\"}],\"name\":\"NewMinUpdatePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"name\":\"NewPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"indexed\":false,\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price0CumulativeLast\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"indexed\":false,\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price1CumulativeLast\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"name\":\"PairUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"}],\"name\":\"configurePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consultKrAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"drainERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"}],\"name\":\"getKrAssetPair\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct IUniswapV2Oracle.PairData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct IUniswapV2Oracle.PairData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveToken\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"}],\"name\":\"initPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"krAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUpdatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newIncentiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setIncentiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUpdatePeriod\",\"type\":\"uint256\"}],\"name\":\"setMinUpdatePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"}],\"name\":\"updateWithIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kresko\",\"kind\":\"dev\",\"methods\":{\"configurePair(address,uint256)\":{\"params\":{\"_pairAddress\":\"Pair address\",\"_updatePeriod\":\"Update period (TWAP)\"}},\"consult(address,address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of token to get value for\",\"_pairAddress\":\"Address of the pair that contains the token\",\"_token\":\"Address of the token to get value for\"},\"returns\":{\"amountOut\":\"Amount of tokenOut that `_amountIn` of `_token` is worth\"}},\"consultKrAsset(address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of Kresko Asset to get value for\",\"_kreskoAsset\":\"Kresko asset address\"}},\"drainERC20(address,address)\":{\"params\":{\"_erc20\":\"drain any sent tokens\",\"_to\":\"drain any sent tokens\"}},\"getKrAssetPair(address)\":{\"params\":{\"_kreskoAsset\":\"Kresko Asset in the pair we want to get pair data for\"}},\"initPair(address,address,uint256)\":{\"params\":{\"_krAsset\":\"Kresko Asset in the pair we want to add helper functionality for\",\"_pairAddress\":\"Liquidity token address for the pair\",\"_updatePeriod\":\"The update period (TWAP) for this AMM pair\"}},\"setAdmin(address)\":{\"params\":{\"_newAdmin\":\"New admin address\"}},\"setIncentiveToken(address,uint256)\":{\"params\":{\"_newIncentiveToken\":\"new incentive token for updater\",\"amount\":\"amount of incentive tokens\"}},\"setMinUpdatePeriod(uint256)\":{\"params\":{\"_minUpdatePeriod\":\"The new minimum period that can be set for a pair\"}},\"update(address)\":{\"params\":{\"_pairAddress\":\"Pair address\"}},\"updateWithIncentive(address)\":{\"params\":{\"_kreskoAsset\":\"Kresko Asset in the pair we want to update pair data for\"}}},\"title\":\"Kresko AMM Oracle (Uniswap V2) Keeps track of time-weighted average prices for tokens in a Uniswap V2 pair. This oracle is intended to be used with Kresko AMM. This oracle is updated by calling the `update` with the liquidity token address. The prices can be queried by calling `consult` or `consultKrAsset` for quality-of-life with Kresko Assets, it does not need the pair address. Bookkeeping is done in terms of time-weighted average prices, and that period has a lower bound of `minUpdatePeriod`. Logic is pretty much what's laid out in https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol This contract just extends some storage to deal with many pairs with their own configuration.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"admin()\":{\"notice\":\"returns the current admin of the oracle\"},\"configurePair(address,uint256)\":{\"notice\":\"Configures existing values of an AMM pair\"},\"consult(address,address,uint256)\":{\"notice\":\"General consult function, gets a value for `_amountIn` of `_token` in terms of `_tokenOut`\"},\"consultKrAsset(address,uint256)\":{\"notice\":\"Get the AMM price for an amount of krAsset\"},\"drainERC20(address,address)\":{\"notice\":\"Move any missent tokens\"},\"factory()\":{\"notice\":\"returns the connected univ2 factory\"},\"getKrAssetPair(address)\":{\"notice\":\"Get the current data for a pair\"},\"incentiveAmount()\":{\"notice\":\"returns the amount of incentive tokens sent using the incentivized update\"},\"incentiveToken()\":{\"notice\":\"returns the incentive token for the incentivized update\"},\"initPair(address,address,uint256)\":{\"notice\":\"Initializes an Uniswap V2 pair to be tracked by this oracle. The criteria for a pair to be tracked: The pair must not already be tracked by this oracle. The pair must exist. The pair must have reserves. The update period must be greater than the minimum update period.\"},\"krAssets(address)\":{\"notice\":\"returns the pair address for a given krAsset\"},\"minUpdatePeriod()\":{\"notice\":\"returns the TWAP time period in seconds\"},\"setAdmin(address)\":{\"notice\":\"Sets a new admin\"},\"setMinUpdatePeriod(uint256)\":{\"notice\":\"Set a new min update period\"},\"update(address)\":{\"notice\":\"Updates the oracle values for a pair\"},\"updateWithIncentive(address)\":{\"notice\":\"Update pair data with incentives sent\"}},\"notice\":\"Kresko gives _NO GUARANTEES_ for the correctness of the prices provided by this oracle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/minter/amm-oracle/UniswapV2Oracle.sol\":\"UniswapV2Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity <0.9.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // KrAsset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_MIN_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // KrAsset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Cannot liquidate zero value\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n    string public constant KRASSET_MARKET_CLOSED = \\\"242\\\"; // KrAsset's market is currently closed\\n    string public constant NO_KRASSETS_MINTED = \\\"243\\\"; // Account has no active KreskoAsset positions\\n    string public constant NO_COLLATERAL_DEPOSITS = \\\"244\\\"; // Account has no active Collateral deposits\\n    string public constant INVALID_ORACLE_DECIMALS = \\\"245\\\"; // Oracle decimals do not match extOracleDecimals\\n    string public constant PARAM_LIQUIDATION_OVERFLOW_LOW = \\\"246\\\"; // Liquidation overflow is less than MIN_LIQUIDATION_OVERFLOW\\n    string public constant INVALID_ORACLE_DEVIATION_PCT = \\\"247\\\"; // Oracle deviation percentage is greater than 100%\\n    string public constant SEIZED_COLLATERAL_UNDERFLOW = \\\"248\\\"; // Amount of collateral seized is less than the amount calculated.\\n    string public constant COLLATERAL_AMOUNT_TOO_LOW = \\\"249\\\"; // Amount of krAsset collateral being deposited is less than the minimum amount\\n    string public constant PARAM_COLLATERAL_RATIO_LOW_THAN_LT = \\\"250\\\"; // Minimum collateral ratio less than LT\\n    string public constant ZERO_DEBT = \\\"251\\\"; // debt must be greater than 0\\n    string public constant ORACLE_PRICE_UNSTABLE = \\\"252\\\"; // debt must be greater than 0\\n    string public constant NEGATIVE_ORACLE_PRICE = \\\"253\\\"; // Oracle price received is negative\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n    string public constant PRICEFEEDS_MUST_MATCH_STATUS_FEEDS = \\\"401\\\"; // Supplied price feeds must match status feeds in length\\n    string public constant INCORRECT_INDEX = \\\"402\\\"; // Array index mismatch\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n    string public constant INVALID_SCALED_AMOUNT = \\\"511\\\"; // amount of debt scaled must be greater than 0\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              6. STABILITY RATES                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant STABILITY_RATES_ALREADY_INITIALIZED = \\\"601\\\"; // stability rates for the asset are already initialized\\n    string public constant INVALID_OPTIMAL_RATE = \\\"602\\\"; // the optimal price rate configured is less than 1e27 for the asset\\n    string public constant INVALID_PRICE_RATE_DELTA = \\\"603\\\"; // the price rate delta configured is less than 1e27 for the asset\\n    string public constant STABILITY_RATES_NOT_INITIALIZED = \\\"604\\\"; // the stability rates for the asset are not initialized\\n    string public constant STABILITY_RATE_OVERFLOW = \\\"605\\\"; // the stability rates is > max uint128\\n    string public constant DEBT_INDEX_OVERFLOW = \\\"606\\\"; // the debt index is > max uint128\\n    string public constant KISS_NOT_SET = \\\"607\\\"; // the debt index is > max uint128\\n    string public constant STABILITY_RATE_REPAYMENT_AMOUNT_ZERO = \\\"608\\\"; // interest being repaid cannot be 0\\n    string public constant STABILITY_RATE_INTEREST_IS_ZERO = \\\"609\\\"; // account must have accrued interest to repay it\\n    string public constant INTEREST_REPAY_NOT_PARTIAL = \\\"610\\\"; // account must have accrued interest to repay it\\n    string public constant INVALID_STABILITY_RATE_BASE = \\\"610\\\"; // the stability base rate is less than 1e27 for the asset\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              7. AMM ORACLE                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant PAIR_ADDRESS_IS_ZERO = \\\"701\\\"; // Pair address to configure cannot be zero\\n    string public constant INVALID_UPDATE_PERIOD = \\\"702\\\"; // Update period must be greater than the minimum\\n    string public constant PAIR_ALREADY_EXISTS = \\\"703\\\"; // Pair with the address is already initialized\\n    string public constant PAIR_DOES_NOT_EXIST = \\\"704\\\"; // Pair supplied does not exist\\n    string public constant INVALID_LIQUIDITY = \\\"706\\\"; // Pair initializaition requires that the pair has liquidity\\n    string public constant UPDATE_PERIOD_NOT_FINISHED = \\\"707\\\"; // Update can only be called once per update period\\n    string public constant INVALID_PAIR = \\\"708\\\"; // Pair being consulted does not have the token that the price was requested for\\n    string public constant CALLER_NOT_ADMIN = \\\"709\\\"; // Caller must be the admin\\n    string public constant CONSTRUCTOR_INVALID_ADMIN = \\\"710\\\"; // Admin cannot be zero address in the constructor\\n    string public constant CONSTRUCTOR_INVALID_FACTORY = \\\"711\\\"; // Factory cannot be the zero address\\n    string public constant NO_INCENTIVES_LEFT = \\\"712\\\"; // No incentives left for updating the price\\n    string public constant ADMIN_ADDRESS_IS_ZERO = \\\"713\\\"; // admin address to configure cannot be zero\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              8. KISS                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant OPERATOR_WAIT_PERIOD_NOT_OVER = \\\"800\\\"; // Operator role has a cooldown period which has not passed\\n    string public constant OPERATOR_LIMIT_REACHED = \\\"801\\\"; // More minters cannot be assigned before existing one is removed\\n    string public constant CALLER_NOT_CONTRACT = \\\"802\\\"; // Caller of the function must be a contract\\n    string public constant OPERATOR_NOT_CONTRACT = \\\"803\\\"; // Operator role can only be granted to a contract\\n    string public constant KRESKO_NOT_CONTRACT = \\\"804\\\"; // Operator role can only be granted to a contract\\n    string public constant ADMIN_NOT_A_CONTRACT = \\\"805\\\"; // Operator role can only be granted to a contract\\n    string public constant OPERATOR_WAIT_PERIOD_TOO_SHORT = \\\"806\\\"; // Operator assignment cooldown period must be greater than 15 minutes\\n}\\n\",\"keccak256\":\"0x1082ec4054aca2cc3769220c67b8008d76eecf6ff2ceab50c38c76f1a474e6d2\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/amm-oracle/IUniswapV2Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity <0.8.0;\\npragma experimental ABIEncoderV2;\\nimport {UQ} from \\\"../../vendor/uniswap/v2-periphery/libraries/UQ.sol\\\";\\nimport {IERC20Minimal} from \\\"../../vendor/uniswap/v2-core/interfaces/IERC20Minimal.sol\\\";\\nimport {IUniswapV2Factory, IUniswapV2Pair} from \\\"../../vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\\\";\\n\\ninterface IUniswapV2Oracle {\\n    struct PairData {\\n        UQ.uq112x112 price0Average;\\n        UQ.uq112x112 price1Average;\\n        address token0;\\n        address token1;\\n        uint256 price0CumulativeLast;\\n        uint256 price1CumulativeLast;\\n        uint32 blockTimestampLast;\\n        uint256 updatePeriod;\\n    }\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewMinUpdatePeriod(uint256 newMinUpdatePeriod);\\n    event NewPair(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n    event PairUpdated(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n\\n    event NewKrAssetPair(address indexed krAsset, address indexed pairAddress);\\n    event NewPrice(\\n        address indexed token0,\\n        address indexed token1,\\n        uint32 indexed blockTimestampLast,\\n        UQ.uq112x112 price0CumulativeLast,\\n        UQ.uq112x112 price1CumulativeLast,\\n        uint256 updatePeriod,\\n        uint256 timeElapsed\\n    );\\n\\n    /// @notice returns the connected univ2 factory\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    /// @notice returns the incentive token for the incentivized update\\n    function incentiveToken() external view returns (IERC20Minimal);\\n\\n    /// @notice returns the amount of incentive tokens sent using the incentivized update\\n    function incentiveAmount() external view returns (uint256);\\n\\n    /// @notice returns the current admin of the oracle\\n    function admin() external view returns (address);\\n\\n    /// @notice returns the TWAP time period in seconds\\n    function minUpdatePeriod() external view returns (uint256);\\n\\n    /// @notice returns the data for a pair\\n    function getPair(address) external view returns (PairData memory);\\n\\n    /// @notice returns the pair address for a given krAsset\\n    function krAssets(address) external returns (address);\\n\\n    /**\\n     *\\n     * @param _newIncentiveToken new incentive token for updater\\n     * @param amount amount of incentive tokens\\n     */\\n    function setIncentiveToken(address _newIncentiveToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Configures existing values of an AMM pair\\n     * @param _pairAddress Pair address\\n     * @param _updatePeriod Update period (TWAP)\\n     */\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external;\\n\\n    /**\\n     * @notice Get the AMM price for an amount of krAsset\\n     * @param _kreskoAsset Kresko asset address\\n     * @param _amountIn Amount of Kresko Asset to get value for\\n     */\\n    function consultKrAsset(address _kreskoAsset, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    /**\\n     * @notice General consult function, gets a value for `_amountIn` of `_token` in terms of `_tokenOut`\\n     * @param _pairAddress Address of the pair that contains the token\\n     * @param _token Address of the token to get value for\\n     * @param _amountIn Amount of token to get value for\\n     * @return amountOut Amount of tokenOut that `_amountIn` of `_token` is worth\\n     */\\n    function consult(address _pairAddress, address _token, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    /**\\n     * Get the current data for a pair\\n     * @param _kreskoAsset Kresko Asset in the pair we want to get pair data for\\n     */\\n    function getKrAssetPair(address _kreskoAsset) external view returns (PairData memory);\\n\\n    /**\\n     * @notice Initializes an Uniswap V2 pair to be tracked by this oracle.\\n     *\\n     * The criteria for a pair to be tracked:\\n     * The pair must not already be tracked by this oracle.\\n     * The pair must exist.\\n     * The pair must have reserves.\\n     * The update period must be greater than the minimum update period.\\n     * @param _pairAddress Liquidity token address for the pair\\n     * @param _krAsset Kresko Asset in the pair we want to add helper functionality for\\n     * @param _updatePeriod The update period (TWAP) for this AMM pair\\n     *\\n     */\\n    function initPair(address _pairAddress, address _krAsset, uint256 _updatePeriod) external;\\n\\n    /**\\n     * @notice Updates the oracle values for a pair\\n     * @param _pairAddress Pair address\\n     */\\n    function update(address _pairAddress) external;\\n\\n    /**\\n     * @notice Sets a new admin\\n     * @param _newAdmin New admin address\\n     */\\n    function setAdmin(address _newAdmin) external;\\n\\n    /**\\n     * @notice Set a new min update period\\n     * @param _minUpdatePeriod The new minimum period that can be set for a pair\\n     */\\n    function setMinUpdatePeriod(uint256 _minUpdatePeriod) external;\\n\\n    /**\\n     * @notice Move any missent tokens\\n     * @param _erc20 drain any sent tokens\\n     * @param _to drain any sent tokens\\n     */\\n    function drainERC20(address _erc20, address _to) external;\\n\\n    /**\\n     * Update pair data with incentives sent\\n     * @param _kreskoAsset Kresko Asset in the pair we want to update pair data for\\n     */\\n    function updateWithIncentive(address _kreskoAsset) external;\\n}\\n\",\"keccak256\":\"0x70070bd9f1ddd74d99f07a0633b82da6ab412cc4fb649176058552d8339b8f65\",\"license\":\"MIT\"},\"src/contracts/minter/amm-oracle/UniswapV2Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IUniswapV2Factory, IUniswapV2Pair} from \\\"../../vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\\\";\\nimport {UQ} from \\\"../../vendor/uniswap/v2-periphery/libraries/UQ.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {IUniswapV2Oracle, IERC20Minimal} from \\\"./IUniswapV2Oracle.sol\\\";\\n\\n/**\\n * @title Kresko AMM Oracle (Uniswap V2)\\n *\\n * Keeps track of time-weighted average prices for tokens in a Uniswap V2 pair.\\n * This oracle is intended to be used with Kresko AMM.\\n *\\n * This oracle is updated by calling the `update` with the liquidity token address.\\n * The prices can be queried by calling `consult` or `consultKrAsset` for quality-of-life with Kresko Assets,\\n * it does not need the pair address.\\n *\\n * Bookkeeping is done in terms of time-weighted average prices, and that period has a lower bound of `minUpdatePeriod`.\\n * Logic is pretty much what's laid out in\\n * https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\\n *\\n * This contract just extends some storage to deal with many pairs with their own configuration.\\n *\\n * @notice Kresko gives _NO GUARANTEES_ for the correctness of the prices provided by this oracle.\\n *\\n * @author Kresko\\n */\\ncontract UniswapV2Oracle is IUniswapV2Oracle {\\n    using UQ for *;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Layout                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    IUniswapV2Factory public immutable override factory;\\n\\n    IERC20Minimal public override incentiveToken;\\n\\n    uint256 public override incentiveAmount = 3 ether;\\n\\n    address public override admin;\\n\\n    uint256 public override minUpdatePeriod = 15 minutes;\\n\\n    mapping(address => PairData) private _pairs;\\n\\n    mapping(address => address) public override krAssets;\\n\\n    /* --------------------------------------------------------------------------*/\\n    /*                                   Funcs                                   */\\n    /* --------------------------------------------------------------------------*/\\n\\n    constructor(address _factory, address _admin) {\\n        require(_factory != address(0), Error.CONSTRUCTOR_INVALID_FACTORY);\\n        require(_admin != address(0), Error.CONSTRUCTOR_INVALID_ADMIN);\\n\\n        factory = IUniswapV2Factory(_factory);\\n        admin = _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, Error.CALLER_NOT_ADMIN);\\n        _;\\n    }\\n\\n    function getPair(address _pairAddress) external view override returns (PairData memory) {\\n        return _pairs[_pairAddress];\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function setIncentiveToken(address _newIncentiveToken, uint256 amount) external override onlyAdmin {\\n        incentiveToken = IERC20Minimal(_newIncentiveToken);\\n        incentiveAmount = amount;\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function drainERC20(address _erc20, address _to) external override onlyAdmin {\\n        IERC20Minimal(_erc20).transfer(_to, IERC20Minimal(_erc20).balanceOf(address(this)));\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function setAdmin(address _newAdmin) external override onlyAdmin {\\n        require(_newAdmin != address(0), Error.ADMIN_ADDRESS_IS_ZERO);\\n        admin = _newAdmin;\\n        emit NewAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function setMinUpdatePeriod(uint256 _minUpdatePeriod) external override onlyAdmin {\\n        minUpdatePeriod = _minUpdatePeriod;\\n        emit NewMinUpdatePeriod(_minUpdatePeriod);\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function initPair(address _pairAddress, address _kreskoAsset, uint256 _updatePeriod) external override onlyAdmin {\\n        require(_pairAddress != address(0), Error.PAIR_ADDRESS_IS_ZERO);\\n        require(_updatePeriod >= minUpdatePeriod, Error.INVALID_UPDATE_PERIOD);\\n        require(_pairs[_pairAddress].token0 == address(0), Error.PAIR_ALREADY_EXISTS);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_pairAddress);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        // Ensure that the pair exists\\n        require(token0 != address(0) && token1 != address(0), Error.PAIR_DOES_NOT_EXIST);\\n\\n        // If the Kresko Asset is in the pair, add it to the krAssets mapping\\n        if (_kreskoAsset == token0 || _kreskoAsset == token1) {\\n            krAssets[_kreskoAsset] = _pairAddress;\\n            emit NewKrAssetPair(_kreskoAsset, _pairAddress);\\n        }\\n\\n        // Ensure that there's liquidity in the pair\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, Error.INVALID_LIQUIDITY); // ensure that there's liquidity in the pair\\n\\n        // Initialize the pair to storage\\n        _pairs[_pairAddress].token0 = token0;\\n        _pairs[_pairAddress].token1 = token1;\\n        _pairs[_pairAddress].price0CumulativeLast = pair.price0CumulativeLast();\\n        _pairs[_pairAddress].price1CumulativeLast = pair.price1CumulativeLast();\\n        _pairs[_pairAddress].updatePeriod = _updatePeriod;\\n        _pairs[_pairAddress].blockTimestampLast = blockTimestampLast;\\n\\n        emit NewPair(_pairAddress, token0, token1, _updatePeriod);\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external override onlyAdmin {\\n        // Ensure that the pair exists\\n        require(\\n            _pairs[_pairAddress].token0 != address(0) && _pairs[_pairAddress].token1 != address(0),\\n            Error.PAIR_DOES_NOT_EXIST\\n        );\\n\\n        // Ensure that the update period is greater than the minimum update period\\n        require(_updatePeriod >= minUpdatePeriod, Error.INVALID_UPDATE_PERIOD);\\n\\n        // Update the period\\n        _pairs[_pairAddress].updatePeriod = _updatePeriod;\\n\\n        emit PairUpdated(_pairAddress, _pairs[_pairAddress].token0, _pairs[_pairAddress].token1, _updatePeriod);\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function update(address _pairAddress) external override {\\n        _update(_pairAddress);\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function getKrAssetPair(address _kreskoAsset) external view override returns (PairData memory) {\\n        return _pairs[krAssets[_kreskoAsset]];\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function updateWithIncentive(address _kreskoAsset) external override {\\n        _update(krAssets[_kreskoAsset]);\\n\\n        require(incentiveToken.balanceOf(address(this)) >= 3 ether, Error.NO_INCENTIVES_LEFT);\\n        incentiveToken.transfer(msg.sender, 3 ether);\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function consultKrAsset(\\n        address _kreskoAsset,\\n        uint256 _amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        PairData memory data = _pairs[krAssets[_kreskoAsset]];\\n\\n        // if the kresko asset is token0, get the corresponding value for the amount in\\n        if (_kreskoAsset == data.token0) {\\n            amountOut = data.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            if (_kreskoAsset != data.token1) {\\n                // if the kresko asset is not in the pair, return 0\\n                amountOut = 0;\\n            } else {\\n                // if the kresko asset is token1, get the corresponding value for the amount in\\n                amountOut = data.price1Average.mul(_amountIn).decode144();\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV2Oracle\\n    function consult(\\n        address _pairAddress,\\n        address _token,\\n        uint256 _amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        PairData memory data = _pairs[_pairAddress];\\n        if (_token == data.token0) {\\n            amountOut = data.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            require(_token == data.token1, Error.INVALID_PAIR);\\n            amountOut = data.price1Average.mul(_amountIn).decode144();\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n     */\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        // solhint-disable not-rely-on-time\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    /**\\n     * @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n     * @param _pairAddress Pair address\\n     */\\n    function currentCumulativePrices(\\n        address _pairAddress\\n    ) internal view returns (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(_pairAddress).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(_pairAddress).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(_pairAddress).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(UQ.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(UQ.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the oracle values for a asset\\n     * @param _asset Asset to update\\n     */\\n    function _update(address _asset) internal {\\n        PairData storage data = _pairs[_asset];\\n\\n        // Ensure that the pair exists\\n        require(data.blockTimestampLast != 0, Error.PAIR_DOES_NOT_EXIST);\\n\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = currentCumulativePrices(_asset);\\n\\n        uint32 timeElapsed = blockTimestamp - data.blockTimestampLast; // overflow is desired\\n        // Ensure that at least one full period has passed since the last update\\n        require(timeElapsed >= data.updatePeriod, Error.UPDATE_PERIOD_NOT_FINISHED);\\n\\n        // Overflow is desired, casting never truncates\\n        // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        data.price0Average = UQ.uq112x112(uint224((price0Cumulative - data.price0CumulativeLast) / timeElapsed));\\n        data.price1Average = UQ.uq112x112(uint224((price1Cumulative - data.price1CumulativeLast) / timeElapsed));\\n\\n        // Update the cumulative prices\\n        data.price0CumulativeLast = price0Cumulative;\\n        data.price1CumulativeLast = price1Cumulative;\\n        data.blockTimestampLast = blockTimestamp;\\n\\n        emit NewPrice(\\n            data.token0,\\n            data.token1,\\n            blockTimestamp,\\n            data.price0Average,\\n            data.price1Average,\\n            data.updatePeriod,\\n            timeElapsed\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4534a22ff8120a9a24cff9eabaf94bd73d0811a6014103f1e826110952053ea1\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Minimal {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x853784573ca029a6654da36764bbd748f2e14547e9cad490a49135543664c77f\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// // SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x17c3cb3c29020835e4e2d281a2dfbbbc3073fb52894bb9632f924259a0c97f14\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.16;\\n\\n/** solhint-disable func-name-mixedcase */\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x61a1ef1aecceeb9cffcb9d6e80ad067b3aa3401f608a04677ebfd793cbc95c4e\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\",\"keccak256\":\"0xee2a1432dfe3a83486a1482e1e1f150f71b5bdf59164d25ef1692d0b2b0fcf00\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity <=0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\",\"keccak256\":\"0x7cb78d9f46e455ec0aa17e06457826de705c8e9f96cbe231a0834db6af15223c\",\"license\":\"GPL-2.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x72f209fb342d59f56d357592a08f9f41d9f2f68f22d9f5c8c29b2347b148ba06\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x51b3d315e503d85683fb21c3d858d010e10d8b48959c2e437e7cebf5393692a1\",\"license\":\"agpl-3.0\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UQ.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0 <0.8.0;\\n\\nimport \\\"./BitMath.sol\\\";\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary UQ {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"UQ::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, \\\"UQ::muli: overflow\\\");\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= uint112(-1), \\\"UQ::muluq: upper overflow\\\");\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, \\\"UQ::muluq: sum overflow\\\");\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, \\\"UQ::divuq: division by zero\\\");\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= uint144(-1)) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, \\\"UQ::divuq: overflow\\\");\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, \\\"UQ::divuq: overflow\\\");\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"UQ::fraction: division by zero\\\");\\n        if (numerator == 0) return UQ.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, \\\"UQ::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, \\\"UQ::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"UQ::reciprocal: reciprocal of zero\\\");\\n        require(self._x != 1, \\\"UQ::reciprocal: overflow\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0x9f142568eb70302964701f8c3049a5830d9bbf47eeaaf6105db488b57dea4fae\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: APGL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"../../v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../v2-core/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb40321d34bb4450e86527ec738712ff475a88d24d8b16cb2af6fe16a16bec978\",\"license\":\"APGL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040526729a2241af62c00006001556103846003553480156200002357600080fd5b5060405162001e6538038062001e6583398101604081905262000046916200012e565b60408051808201909152600381526237313160e81b60208201526001600160a01b038316620000935760405162461bcd60e51b81526004016200008a919062000165565b60405180910390fd5b5060408051808201909152600381526203731360ec1b60208201526001600160a01b038216620000d85760405162461bcd60e51b81526004016200008a919062000165565b5060609190911b6001600160601b031916608052600280546001600160a01b0319166001600160a01b03909216919091179055620001bb565b80516001600160a01b03811681146200012957600080fd5b919050565b6000806040838503121562000141578182fd5b6200014c8362000111565b91506200015c6020840162000111565b90509250929050565b6000602080835283518082850152825b81811015620001935785810183015185820160400152820162000175565b81811115620001a55783604083870101525b50601f01601f1916929092016040019392505050565b60805160601c611c8c620001d96000398061121e5250611c8c6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063813c3c93116100a2578063b50d882c11610071578063b50d882c1461022e578063c45310d414610241578063c45a015514610254578063cae5d73b1461025c578063f851a4401461026457610116565b8063813c3c93146101ed578063999db345146102005780639e89404714610213578063b26237e01461022657610116565b80635b10f7ac116100e95780635b10f7ac1461017f578063636cfa0c14610192578063638126f8146101b2578063704b6c02146101c75780637e56402f146101da57610116565b80631a788a021461011b5780631c1b8772146101445780633cfdaa7d1461015957806352244ec81461016c575b600080fd5b61012e61012936600461197a565b61026c565b60405161013b9190611b8a565b60405180910390f35b61015761015236600461197a565b610316565b005b61012e61016736600461197a565b610322565b61015761017a366004611a2a565b6103d7565b61015761018d3660046119ea565b61055d565b6101a56101a03660046119ea565b610b0a565b60405161013b9190611c38565b6101ba610c4f565b60405161013b9190611b0a565b6101576101d536600461197a565b610c5e565b6101576101e83660046119b2565b610d31565b6101ba6101fb36600461197a565b610e72565b61015761020e366004611ac3565b610e8d565b61015761022136600461197a565b610f14565b6101a561108d565b6101a561023c366004611a2a565b611093565b61015761024f366004611a2a565b6111af565b6101ba61121c565b6101a5611240565b6101ba611246565b6102746118ed565b506001600160a01b0380821660009081526004602081815260409283902083516101208101855281546001600160e01b03908116610100830190815282528551808501875260018401549091168152928101929092526002810154851693820193909352600383015490931660608401528101546080830152600581015460a0830152600681015463ffffffff1660c08301526007015460e08201525b919050565b61031f81611255565b50565b61032a6118ed565b506001600160a01b039081166000908152600560208181526040808420548516845260048083529381902081516101208101835281546001600160e01b039081166101008301908152825283518086018552600184015490911681529381019390935260028101548616918301919091526003810154909416606082015291830154608083015282015460a0820152600682015463ffffffff1660c082015260079091015460e082015290565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146104265760405162461bcd60e51b815260040161041d9190611b37565b60405180910390fd5b506001600160a01b03828116600090815260046020526040902060020154161580159061046f57506001600160a01b038281166000908152600460205260409020600301541615155b604051806040016040528060038152602001620dcc0d60ea1b815250906104a95760405162461bcd60e51b815260040161041d9190611b37565b50600354811015604051806040016040528060038152602001621b981960e91b815250906104ea5760405162461bcd60e51b815260040161041d9190611b37565b506001600160a01b03808316600081815260046020526040908190206007810185905560038101546002909101549151908416939190911691907f5d6c5f7b483e292dff8098abd4301c1a91d6933f1a5c7bd3304031a6199dd64590610551908690611c38565b60405180910390a45050565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146105a35760405162461bcd60e51b815260040161041d9190611b37565b5060408051808201909152600381526237303160e81b60208201526001600160a01b0384166105e55760405162461bcd60e51b815260040161041d9190611b37565b50600354811015604051806040016040528060038152602001621b981960e91b815250906106265760405162461bcd60e51b815260040161041d9190611b37565b506001600160a01b03838116600090815260046020908152604091829020600201548251808401909352600383526237303360e81b91830191909152909116156106835760405162461bcd60e51b815260040161041d9190611b37565b5060008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190611996565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190611996565b90506001600160a01b0382161580159061079357506001600160a01b03811615155b604051806040016040528060038152602001620dcc0d60ea1b815250906107cd5760405162461bcd60e51b815260040161041d9190611b37565b50816001600160a01b0316856001600160a01b031614806107ff5750806001600160a01b0316856001600160a01b0316145b15610858576001600160a01b0385811660008181526005602052604080822080546001600160a01b031916948b169485179055517feabf019a206f6caf3c62b981b764479e0340f903f1ae92e6188e96401b49fe0c9190a35b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561089657600080fd5b505afa1580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190611a75565b925092509250826001600160701b03166000141580156108f657506001600160701b03821615155b604051806040016040528060038152602001621b981b60e91b815250906109305760405162461bcd60e51b815260040161041d9190611b37565b506001600160a01b038981166000908152600460208181526040928390206002810180546001600160a01b03199081168c881617909155600390910180549091168986161790558251635909c0d560e01b81529251938a1693635909c0d5938084019390829003018186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611adb565b600460008b6001600160a01b03166001600160a01b0316815260200190815260200160002060040181905550856001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190611adb565b6001600160a01b038a8116600081815260046020526040908190206005810194909455600784018b90556006909301805463ffffffff191663ffffffff861617905591518682169291881691907f8aec9bfffd40d5d25863c2e7368454e9b267f42b45bcdf7a99feddfa18c09f4c90610af7908c90611c38565b60405180910390a4505050505050505050565b6001600160a01b03808416600090815260046020818152604080842081516101208101835281546001600160e01b039081166101008301908152825283518086018552600184015490911681529381019390935260028101548616918301829052600381015486166060840152928301546080830152600583015460a0830152600683015463ffffffff1660c083015260079092015460e0820152919285161415610bd4578051610bc490610bbf9085611439565b6114c3565b6001600160901b03169150610c47565b80606001516001600160a01b0316846001600160a01b0316146040518060400160405280600381526020016206e60760eb1b81525090610c275760405162461bcd60e51b815260040161041d9190611b37565b506020810151610c3b90610bbf9085611439565b6001600160901b031691505b509392505050565b6000546001600160a01b031681565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610ca45760405162461bcd60e51b815260040161041d9190611b37565b5060408051808201909152600381526237313360e81b60208201526001600160a01b038216610ce65760405162461bcd60e51b815260040161041d9190611b37565b50600280546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610d775760405162461bcd60e51b815260040161041d9190611b37565b506040516370a0823160e01b81526001600160a01b0383169063a9059cbb90839083906370a0823190610dae903090600401611b0a565b60206040518083038186803b158015610dc657600080fd5b505afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190611adb565b6040518363ffffffff1660e01b8152600401610e1b929190611b1e565b602060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d9190611a55565b505050565b6005602052600090815260409020546001600160a01b031681565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610ed35760405162461bcd60e51b815260040161041d9190611b37565b5060038190556040517f8a7025db6a9c815ab177c3a163acda9e7b1fb0fad7da8a4bc340863591925cda90610f09908390611c38565b60405180910390a150565b6001600160a01b03808216600090815260056020526040902054610f389116611255565b6000546040516370a0823160e01b81526729a2241af62c0000916001600160a01b0316906370a0823190610f70903090600401611b0a565b60206040518083038186803b158015610f8857600080fd5b505afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190611adb565b1015604051806040016040528060038152602001621b989960e91b81525090610ffc5760405162461bcd60e51b815260040161041d9190611b37565b5060005460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906110379033906729a2241af62c000090600401611b1e565b602060405180830381600087803b15801561105157600080fd5b505af1158015611065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110899190611a55565b5050565b60035481565b6001600160a01b0380831660008181526005602081815260408084205486168452600480835281852082516101208101845281546001600160e01b0390811661010083019081528252845180870186526001840154909116815294810194909452600281015488169284018390526003810154909716606084015286015460808301529185015460a0820152600685015463ffffffff1660c082015260079094015460e0850152909291141561116357805161115390610bbf9085611439565b6001600160901b031691506111a8565b80606001516001600160a01b0316846001600160a01b03161461118957600091506111a8565b602081015161119c90610bbf9085611439565b6001600160901b031691505b5092915050565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146111f55760405162461bcd60e51b815260040161041d9190611b37565b50600080546001600160a01b0319166001600160a01b039390931692909217909155600155565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b6002546001600160a01b031681565b6001600160a01b0381166000908152600460209081526040918290206006810154835180850190945260038452620dcc0d60ea1b92840192909252919063ffffffff166112b55760405162461bcd60e51b815260040161041d9190611b37565b5060008060006112c4856114ca565b6006870154600788015460408051808201909152600381526237303760e81b602082015294975092955090935063ffffffff90811684039291908316101561131f5760405162461bcd60e51b815260040161041d9190611b37565b5060405180602001604052808263ffffffff16876004015487038161134057fe5b046001600160e01b03908116909152905186546001600160e01b031916911617855560408051602081019091526005860154819063ffffffff84169086038161138557fe5b046001600160e01b0390811690915290516001870180546001600160e01b03191691909216178155600486018590556005860184905560068601805463ffffffff191663ffffffff851690811790915560038701546002880154600789015460405193946001600160a01b039384169493909216927f4801f5931ba41963b02f50608ecec4798a1aaac41e7e85e64c50430e25c38fa492611429928c928990611c09565b60405180910390a4505050505050565b61144161193e565b600082158061146757505082516001600160e01b03168281029083828161146457fe5b04145b6114ac576040805162461bcd60e51b815260206004820152601160248201527055513a3a6d756c3a206f766572666c6f7760781b604482015290519081900360640190fd5b604080516020810190915290815290505b92915050565b5160701c90565b60008060006114d76116bf565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561151257600080fd5b505afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a9190611adb565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561158557600080fd5b505afa158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190611adb565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156115fd57600080fd5b505afa158015611611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116359190611a75565b9250925092508363ffffffff168163ffffffff16146116b55780840363ffffffff811661166e6001600160701b038086169087166116c9565b600001516001600160e01b031602870196508063ffffffff166116a3856001600160701b0316856001600160701b03166116c9565b516001600160e01b0316029590950194505b5050509193909250565b63ffffffff421690565b6116d1611951565b60008211611726576040805162461bcd60e51b815260206004820152601e60248201527f55513a3a6672616374696f6e3a206469766973696f6e206279207a65726f0000604482015290519081900360640190fd5b8261174057506040805160208101909152600081526114bd565b6001600160901b0383116117d557600082607085901b8161175d57fe5b0490506001600160e01b038111156117b5576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150506114bd565b60006117e684600160701b8561183d565b90506001600160e01b038111156117b5576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611873576000841161186857600080fd5b5082900490506118e6565b80841161187f57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b604051806101000160405280611901611951565b815260200161190e611951565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060200160405280600081525090565b60408051602081019091526000815290565b80516001600160701b038116811461031157600080fd5b60006020828403121561198b578081fd5b81356118e681611c41565b6000602082840312156119a7578081fd5b81516118e681611c41565b600080604083850312156119c4578081fd5b82356119cf81611c41565b915060208301356119df81611c41565b809150509250929050565b6000806000606084860312156119fe578081fd5b8335611a0981611c41565b92506020840135611a1981611c41565b929592945050506040919091013590565b60008060408385031215611a3c578182fd5b8235611a4781611c41565b946020939093013593505050565b600060208284031215611a66578081fd5b815180151581146118e6578182fd5b600080600060608486031215611a89578283fd5b611a9284611963565b9250611aa060208501611963565b9150604084015163ffffffff81168114611ab8578182fd5b809150509250925092565b600060208284031215611ad4578081fd5b5035919050565b600060208284031215611aec578081fd5b5051919050565b6001600160a01b03169052565b63ffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602080835283518082850152825b81811015611b6357858101830151858201604001528201611b47565b81811115611b745783604083870101525b50601f01601f1916929092016040019392505050565b8151516001600160e01b03908116825260208084015151909116908201526040808301516001600160a01b031690820152606080830151610100830191611bd390840182611af3565b506080830151608083015260a083015160a083015260c0830151611bfa60c0840182611b00565b5060e092830151919092015290565b93546001600160e01b03908116855292549092166020840152604083015263ffffffff16606082015260800190565b90815260200190565b6001600160a01b038116811461031f57600080fdfea26469706673582212203bd2908e9afb1b25548984227deda33cf751fd75e5347b81274660718c5b0bd964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063813c3c93116100a2578063b50d882c11610071578063b50d882c1461022e578063c45310d414610241578063c45a015514610254578063cae5d73b1461025c578063f851a4401461026457610116565b8063813c3c93146101ed578063999db345146102005780639e89404714610213578063b26237e01461022657610116565b80635b10f7ac116100e95780635b10f7ac1461017f578063636cfa0c14610192578063638126f8146101b2578063704b6c02146101c75780637e56402f146101da57610116565b80631a788a021461011b5780631c1b8772146101445780633cfdaa7d1461015957806352244ec81461016c575b600080fd5b61012e61012936600461197a565b61026c565b60405161013b9190611b8a565b60405180910390f35b61015761015236600461197a565b610316565b005b61012e61016736600461197a565b610322565b61015761017a366004611a2a565b6103d7565b61015761018d3660046119ea565b61055d565b6101a56101a03660046119ea565b610b0a565b60405161013b9190611c38565b6101ba610c4f565b60405161013b9190611b0a565b6101576101d536600461197a565b610c5e565b6101576101e83660046119b2565b610d31565b6101ba6101fb36600461197a565b610e72565b61015761020e366004611ac3565b610e8d565b61015761022136600461197a565b610f14565b6101a561108d565b6101a561023c366004611a2a565b611093565b61015761024f366004611a2a565b6111af565b6101ba61121c565b6101a5611240565b6101ba611246565b6102746118ed565b506001600160a01b0380821660009081526004602081815260409283902083516101208101855281546001600160e01b03908116610100830190815282528551808501875260018401549091168152928101929092526002810154851693820193909352600383015490931660608401528101546080830152600581015460a0830152600681015463ffffffff1660c08301526007015460e08201525b919050565b61031f81611255565b50565b61032a6118ed565b506001600160a01b039081166000908152600560208181526040808420548516845260048083529381902081516101208101835281546001600160e01b039081166101008301908152825283518086018552600184015490911681529381019390935260028101548616918301919091526003810154909416606082015291830154608083015282015460a0820152600682015463ffffffff1660c082015260079091015460e082015290565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146104265760405162461bcd60e51b815260040161041d9190611b37565b60405180910390fd5b506001600160a01b03828116600090815260046020526040902060020154161580159061046f57506001600160a01b038281166000908152600460205260409020600301541615155b604051806040016040528060038152602001620dcc0d60ea1b815250906104a95760405162461bcd60e51b815260040161041d9190611b37565b50600354811015604051806040016040528060038152602001621b981960e91b815250906104ea5760405162461bcd60e51b815260040161041d9190611b37565b506001600160a01b03808316600081815260046020526040908190206007810185905560038101546002909101549151908416939190911691907f5d6c5f7b483e292dff8098abd4301c1a91d6933f1a5c7bd3304031a6199dd64590610551908690611c38565b60405180910390a45050565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146105a35760405162461bcd60e51b815260040161041d9190611b37565b5060408051808201909152600381526237303160e81b60208201526001600160a01b0384166105e55760405162461bcd60e51b815260040161041d9190611b37565b50600354811015604051806040016040528060038152602001621b981960e91b815250906106265760405162461bcd60e51b815260040161041d9190611b37565b506001600160a01b03838116600090815260046020908152604091829020600201548251808401909352600383526237303360e81b91830191909152909116156106835760405162461bcd60e51b815260040161041d9190611b37565b5060008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190611996565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190611996565b90506001600160a01b0382161580159061079357506001600160a01b03811615155b604051806040016040528060038152602001620dcc0d60ea1b815250906107cd5760405162461bcd60e51b815260040161041d9190611b37565b50816001600160a01b0316856001600160a01b031614806107ff5750806001600160a01b0316856001600160a01b0316145b15610858576001600160a01b0385811660008181526005602052604080822080546001600160a01b031916948b169485179055517feabf019a206f6caf3c62b981b764479e0340f903f1ae92e6188e96401b49fe0c9190a35b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561089657600080fd5b505afa1580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190611a75565b925092509250826001600160701b03166000141580156108f657506001600160701b03821615155b604051806040016040528060038152602001621b981b60e91b815250906109305760405162461bcd60e51b815260040161041d9190611b37565b506001600160a01b038981166000908152600460208181526040928390206002810180546001600160a01b03199081168c881617909155600390910180549091168986161790558251635909c0d560e01b81529251938a1693635909c0d5938084019390829003018186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611adb565b600460008b6001600160a01b03166001600160a01b0316815260200190815260200160002060040181905550856001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190611adb565b6001600160a01b038a8116600081815260046020526040908190206005810194909455600784018b90556006909301805463ffffffff191663ffffffff861617905591518682169291881691907f8aec9bfffd40d5d25863c2e7368454e9b267f42b45bcdf7a99feddfa18c09f4c90610af7908c90611c38565b60405180910390a4505050505050505050565b6001600160a01b03808416600090815260046020818152604080842081516101208101835281546001600160e01b039081166101008301908152825283518086018552600184015490911681529381019390935260028101548616918301829052600381015486166060840152928301546080830152600583015460a0830152600683015463ffffffff1660c083015260079092015460e0820152919285161415610bd4578051610bc490610bbf9085611439565b6114c3565b6001600160901b03169150610c47565b80606001516001600160a01b0316846001600160a01b0316146040518060400160405280600381526020016206e60760eb1b81525090610c275760405162461bcd60e51b815260040161041d9190611b37565b506020810151610c3b90610bbf9085611439565b6001600160901b031691505b509392505050565b6000546001600160a01b031681565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610ca45760405162461bcd60e51b815260040161041d9190611b37565b5060408051808201909152600381526237313360e81b60208201526001600160a01b038216610ce65760405162461bcd60e51b815260040161041d9190611b37565b50600280546001600160a01b0319166001600160a01b0383169081179091556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c90600090a250565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610d775760405162461bcd60e51b815260040161041d9190611b37565b506040516370a0823160e01b81526001600160a01b0383169063a9059cbb90839083906370a0823190610dae903090600401611b0a565b60206040518083038186803b158015610dc657600080fd5b505afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190611adb565b6040518363ffffffff1660e01b8152600401610e1b929190611b1e565b602060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d9190611a55565b505050565b6005602052600090815260409020546001600160a01b031681565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610ed35760405162461bcd60e51b815260040161041d9190611b37565b5060038190556040517f8a7025db6a9c815ab177c3a163acda9e7b1fb0fad7da8a4bc340863591925cda90610f09908390611c38565b60405180910390a150565b6001600160a01b03808216600090815260056020526040902054610f389116611255565b6000546040516370a0823160e01b81526729a2241af62c0000916001600160a01b0316906370a0823190610f70903090600401611b0a565b60206040518083038186803b158015610f8857600080fd5b505afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190611adb565b1015604051806040016040528060038152602001621b989960e91b81525090610ffc5760405162461bcd60e51b815260040161041d9190611b37565b5060005460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906110379033906729a2241af62c000090600401611b1e565b602060405180830381600087803b15801561105157600080fd5b505af1158015611065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110899190611a55565b5050565b60035481565b6001600160a01b0380831660008181526005602081815260408084205486168452600480835281852082516101208101845281546001600160e01b0390811661010083019081528252845180870186526001840154909116815294810194909452600281015488169284018390526003810154909716606084015286015460808301529185015460a0820152600685015463ffffffff1660c082015260079094015460e0850152909291141561116357805161115390610bbf9085611439565b6001600160901b031691506111a8565b80606001516001600160a01b0316846001600160a01b03161461118957600091506111a8565b602081015161119c90610bbf9085611439565b6001600160901b031691505b5092915050565b60025460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146111f55760405162461bcd60e51b815260040161041d9190611b37565b50600080546001600160a01b0319166001600160a01b039390931692909217909155600155565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b6002546001600160a01b031681565b6001600160a01b0381166000908152600460209081526040918290206006810154835180850190945260038452620dcc0d60ea1b92840192909252919063ffffffff166112b55760405162461bcd60e51b815260040161041d9190611b37565b5060008060006112c4856114ca565b6006870154600788015460408051808201909152600381526237303760e81b602082015294975092955090935063ffffffff90811684039291908316101561131f5760405162461bcd60e51b815260040161041d9190611b37565b5060405180602001604052808263ffffffff16876004015487038161134057fe5b046001600160e01b03908116909152905186546001600160e01b031916911617855560408051602081019091526005860154819063ffffffff84169086038161138557fe5b046001600160e01b0390811690915290516001870180546001600160e01b03191691909216178155600486018590556005860184905560068601805463ffffffff191663ffffffff851690811790915560038701546002880154600789015460405193946001600160a01b039384169493909216927f4801f5931ba41963b02f50608ecec4798a1aaac41e7e85e64c50430e25c38fa492611429928c928990611c09565b60405180910390a4505050505050565b61144161193e565b600082158061146757505082516001600160e01b03168281029083828161146457fe5b04145b6114ac576040805162461bcd60e51b815260206004820152601160248201527055513a3a6d756c3a206f766572666c6f7760781b604482015290519081900360640190fd5b604080516020810190915290815290505b92915050565b5160701c90565b60008060006114d76116bf565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561151257600080fd5b505afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a9190611adb565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561158557600080fd5b505afa158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190611adb565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156115fd57600080fd5b505afa158015611611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116359190611a75565b9250925092508363ffffffff168163ffffffff16146116b55780840363ffffffff811661166e6001600160701b038086169087166116c9565b600001516001600160e01b031602870196508063ffffffff166116a3856001600160701b0316856001600160701b03166116c9565b516001600160e01b0316029590950194505b5050509193909250565b63ffffffff421690565b6116d1611951565b60008211611726576040805162461bcd60e51b815260206004820152601e60248201527f55513a3a6672616374696f6e3a206469766973696f6e206279207a65726f0000604482015290519081900360640190fd5b8261174057506040805160208101909152600081526114bd565b6001600160901b0383116117d557600082607085901b8161175d57fe5b0490506001600160e01b038111156117b5576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150506114bd565b60006117e684600160701b8561183d565b90506001600160e01b038111156117b5576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611873576000841161186857600080fd5b5082900490506118e6565b80841161187f57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b604051806101000160405280611901611951565b815260200161190e611951565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060200160405280600081525090565b60408051602081019091526000815290565b80516001600160701b038116811461031157600080fd5b60006020828403121561198b578081fd5b81356118e681611c41565b6000602082840312156119a7578081fd5b81516118e681611c41565b600080604083850312156119c4578081fd5b82356119cf81611c41565b915060208301356119df81611c41565b809150509250929050565b6000806000606084860312156119fe578081fd5b8335611a0981611c41565b92506020840135611a1981611c41565b929592945050506040919091013590565b60008060408385031215611a3c578182fd5b8235611a4781611c41565b946020939093013593505050565b600060208284031215611a66578081fd5b815180151581146118e6578182fd5b600080600060608486031215611a89578283fd5b611a9284611963565b9250611aa060208501611963565b9150604084015163ffffffff81168114611ab8578182fd5b809150509250925092565b600060208284031215611ad4578081fd5b5035919050565b600060208284031215611aec578081fd5b5051919050565b6001600160a01b03169052565b63ffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602080835283518082850152825b81811015611b6357858101830151858201604001528201611b47565b81811115611b745783604083870101525b50601f01601f1916929092016040019392505050565b8151516001600160e01b03908116825260208084015151909116908201526040808301516001600160a01b031690820152606080830151610100830191611bd390840182611af3565b506080830151608083015260a083015160a083015260c0830151611bfa60c0840182611b00565b5060e092830151919092015290565b93546001600160e01b03908116855292549092166020840152604083015263ffffffff16606082015260800190565b90815260200190565b6001600160a01b038116811461031f57600080fdfea26469706673582212203bd2908e9afb1b25548984227deda33cf751fd75e5347b81274660718c5b0bd964736f6c63430007060033",
  "devdoc": {
    "author": "Kresko",
    "kind": "dev",
    "methods": {
      "configurePair(address,uint256)": {
        "params": {
          "_pairAddress": "Pair address",
          "_updatePeriod": "Update period (TWAP)"
        }
      },
      "consult(address,address,uint256)": {
        "params": {
          "_amountIn": "Amount of token to get value for",
          "_pairAddress": "Address of the pair that contains the token",
          "_token": "Address of the token to get value for"
        },
        "returns": {
          "amountOut": "Amount of tokenOut that `_amountIn` of `_token` is worth"
        }
      },
      "consultKrAsset(address,uint256)": {
        "params": {
          "_amountIn": "Amount of Kresko Asset to get value for",
          "_kreskoAsset": "Kresko asset address"
        }
      },
      "drainERC20(address,address)": {
        "params": {
          "_erc20": "drain any sent tokens",
          "_to": "drain any sent tokens"
        }
      },
      "getKrAssetPair(address)": {
        "params": {
          "_kreskoAsset": "Kresko Asset in the pair we want to get pair data for"
        }
      },
      "initPair(address,address,uint256)": {
        "params": {
          "_krAsset": "Kresko Asset in the pair we want to add helper functionality for",
          "_pairAddress": "Liquidity token address for the pair",
          "_updatePeriod": "The update period (TWAP) for this AMM pair"
        }
      },
      "setAdmin(address)": {
        "params": {
          "_newAdmin": "New admin address"
        }
      },
      "setIncentiveToken(address,uint256)": {
        "params": {
          "_newIncentiveToken": "new incentive token for updater",
          "amount": "amount of incentive tokens"
        }
      },
      "setMinUpdatePeriod(uint256)": {
        "params": {
          "_minUpdatePeriod": "The new minimum period that can be set for a pair"
        }
      },
      "update(address)": {
        "params": {
          "_pairAddress": "Pair address"
        }
      },
      "updateWithIncentive(address)": {
        "params": {
          "_kreskoAsset": "Kresko Asset in the pair we want to update pair data for"
        }
      }
    },
    "title": "Kresko AMM Oracle (Uniswap V2) Keeps track of time-weighted average prices for tokens in a Uniswap V2 pair. This oracle is intended to be used with Kresko AMM. This oracle is updated by calling the `update` with the liquidity token address. The prices can be queried by calling `consult` or `consultKrAsset` for quality-of-life with Kresko Assets, it does not need the pair address. Bookkeeping is done in terms of time-weighted average prices, and that period has a lower bound of `minUpdatePeriod`. Logic is pretty much what's laid out in https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol This contract just extends some storage to deal with many pairs with their own configuration.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "admin()": {
        "notice": "returns the current admin of the oracle"
      },
      "configurePair(address,uint256)": {
        "notice": "Configures existing values of an AMM pair"
      },
      "consult(address,address,uint256)": {
        "notice": "General consult function, gets a value for `_amountIn` of `_token` in terms of `_tokenOut`"
      },
      "consultKrAsset(address,uint256)": {
        "notice": "Get the AMM price for an amount of krAsset"
      },
      "drainERC20(address,address)": {
        "notice": "Move any missent tokens"
      },
      "factory()": {
        "notice": "returns the connected univ2 factory"
      },
      "getKrAssetPair(address)": {
        "notice": "Get the current data for a pair"
      },
      "incentiveAmount()": {
        "notice": "returns the amount of incentive tokens sent using the incentivized update"
      },
      "incentiveToken()": {
        "notice": "returns the incentive token for the incentivized update"
      },
      "initPair(address,address,uint256)": {
        "notice": "Initializes an Uniswap V2 pair to be tracked by this oracle. The criteria for a pair to be tracked: The pair must not already be tracked by this oracle. The pair must exist. The pair must have reserves. The update period must be greater than the minimum update period."
      },
      "krAssets(address)": {
        "notice": "returns the pair address for a given krAsset"
      },
      "minUpdatePeriod()": {
        "notice": "returns the TWAP time period in seconds"
      },
      "setAdmin(address)": {
        "notice": "Sets a new admin"
      },
      "setMinUpdatePeriod(uint256)": {
        "notice": "Set a new min update period"
      },
      "update(address)": {
        "notice": "Updates the oracle values for a pair"
      },
      "updateWithIncentive(address)": {
        "notice": "Update pair data with incentives sent"
      }
    },
    "notice": "Kresko gives _NO GUARANTEES_ for the correctness of the prices provided by this oracle.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 587,
        "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "incentiveToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20Minimal)1494"
      },
      {
        "astId": 591,
        "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "incentiveAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 594,
        "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 598,
        "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "minUpdatePeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 602,
        "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "_pairs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PairData)378_storage)"
      },
      {
        "astId": 607,
        "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "krAssets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Minimal)1494": {
        "encoding": "inplace",
        "label": "contract IERC20Minimal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(PairData)378_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IUniswapV2Oracle.PairData)",
        "numberOfBytes": "32",
        "value": "t_struct(PairData)378_storage"
      },
      "t_struct(PairData)378_storage": {
        "encoding": "inplace",
        "label": "struct IUniswapV2Oracle.PairData",
        "members": [
          {
            "astId": 363,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price0Average",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(uq112x112)2538_storage"
          },
          {
            "astId": 365,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price1Average",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(uq112x112)2538_storage"
          },
          {
            "astId": 367,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "token0",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 369,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "token1",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 371,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price0CumulativeLast",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 373,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price1CumulativeLast",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 375,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "blockTimestampLast",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 377,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "updatePeriod",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(uq112x112)2538_storage": {
        "encoding": "inplace",
        "label": "struct UQ.uq112x112",
        "members": [
          {
            "astId": 2537,
            "contract": "src/contracts/minter/amm-oracle/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}