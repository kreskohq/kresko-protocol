{
  "address": "0xD409f9CE4037C06e6143580eF36a8fb5F275AD4A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "LogSetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_startBlock",
          "type": "uint128"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "allPendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IKrStaking.Reward[]",
          "name": "allRewards",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "getPidFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "found",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_startBlock",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IKrStaking.Reward",
          "name": "rewards",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "allocPoint",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastRewardBlock",
              "type": "uint128"
            },
            {
              "internalType": "uint256[]",
              "name": "accRewardPerShares",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "rewardTokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct IKrStaking.PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenToRescue",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rescueNonPoolToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerBlockFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_newAllocPoint",
          "type": "uint128"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerBlockFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "allocPoint",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastRewardBlock",
              "type": "uint128"
            },
            {
              "internalType": "uint256[]",
              "name": "accRewardPerShares",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "rewardTokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct IKrStaking.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardDebts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IKrStaking.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f6f96fa70776e56397d49339b44c91ecdbc8190d6311987d0df893e1d05c0b4",
  "receipt": {
    "to": null,
    "from": "0xB48bB6b68Ab4D366B4f9A30eE6f7Ee55125c2D9d",
    "contractAddress": "0xD409f9CE4037C06e6143580eF36a8fb5F275AD4A",
    "transactionIndex": 1,
    "gasUsed": "3816346",
    "logsBloom": "0x
    "blockHash": "0xa7e5004cf9069a89bf95c0f9a79e5f9cc7b22ebbfdcb1ca2d0043072f95c1357",
    "transactionHash": "0x8f6f96fa70776e56397d49339b44c91ecdbc8190d6311987d0df893e1d05c0b4",
    "logs": [],
    "blockNumber": 30747981,
    "cumulativeGasUsed": "3816346",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2796721ae8ad06f4477f7f47306878f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_startBlock\",\"type\":\"uint128\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"allPendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IKrStaking.Reward[]\",\"name\":\"allRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"getPidFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_startBlock\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IKrStaking.Reward\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct IKrStaking.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueNonPoolToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerBlockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_newAllocPoint\",\"type\":\"uint128\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlockFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct IKrStaking.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardDebts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IKrStaking.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addPool(address[],address,uint128,uint128)\":{\"params\":{\"_allocPoint\":\"weight of rewards this pool receives\",\"_depositToken\":\"token to deposit for rewards\",\"_rewardTokens\":\"tokens to reward from this pool\",\"_startBlock\":\"block when rewards start\"}},\"allPendingRewards(address)\":{\"params\":{\"_account\":\"to get rewards for\"},\"returns\":{\"allRewards\":\"all pending rewards\"}},\"claim(uint256,address)\":{\"params\":{\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address to send rewards to\"}},\"claimFor(address,uint256,address)\":{\"params\":{\"_for\":\"account to claim for\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address that receives rewards\"}},\"deposit(address,uint256,uint256)\":{\"params\":{\"_amount\":\"amount of tokens to deposit\",\"_pid\":\"in `_poolInfo`\",\"_to\":\"address that msg.sender deposits tokens for\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"pool id to withdraw tokens from\"}},\"getPidFor(address)\":{\"params\":{\"_depositToken\":\"depositToken in `_poolInfo`\"},\"returns\":{\"found\":\"ensure 0 index\",\"pid\":\"of pool with `_depositToken`\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pendingRewards(uint256,address)\":{\"params\":{\"_pid\":\"id in `_poolInfo`\",\"_user\":\"id in `_userInfo[_pid]`\"},\"returns\":{\"rewards\":\"pending rewards\"}},\"poolInfo(uint256)\":{\"params\":{\"_pid\":\"in `_poolInfo`\"},\"returns\":{\"_0\":\"pool information\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setPool(uint256,uint128)\":{\"params\":{\"_newAllocPoint\":\"new allocation (weight) for rewards\",\"_pid\":\"pool to modify\"}},\"setRewardPerBlockFor(address,uint256)\":{\"params\":{\"_rewardPerBlock\":\"tokens to drip per block\",\"_rewardToken\":\"token to adjust the drip for\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"pool to update\"}},\"userInfo(uint256,address)\":{\"params\":{\"_account\":\"to get information for\",\"_pid\":\"in `_poolInfo`\"},\"returns\":{\"_0\":\"information on the account\"}},\"withdraw(uint256,uint256,address)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address to send rewards to\"}},\"withdrawFor(address,uint256,uint256,address)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_for\":\"account to withdraw from\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"reward recipient\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256,uint256)\":{\"notice\":\"================================================== ============== Events ============================ ==================================================\"}},\"kind\":\"user\",\"methods\":{\"addPool(address[],address,uint128,uint128)\":{\"notice\":\"Adds a new reward poolUpdates reward token count in case of adding extra tokens\"},\"allPendingRewards(address)\":{\"notice\":\"Get all pending rewards for an account\"},\"claim(uint256,address)\":{\"notice\":\"Claim rewards only\"},\"claimFor(address,uint256,address)\":{\"notice\":\"Trusted helper contract can claim rewards on behalf of an account\"},\"deposit(address,uint256,uint256)\":{\"notice\":\"Deposits tokens for @param _to\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Emergency function, withdraws deposits from a poolThis will forfeit your rewards.\"},\"getPidFor(address)\":{\"notice\":\"Get id for a tokenUseful for external contracts\"},\"initialize(address[],uint256[],address,uint128,uint128,address,address)\":{\"notice\":\"Initialize the contract with a single poolSets initial reward token and ratesSets the caller as DEFAULT_ADMIN\"},\"massUpdatePools()\":{\"notice\":\"Updates all pools to be up-to date\"},\"pendingRewards(uint256,address)\":{\"notice\":\"Get pending rewards from a certain pool\"},\"poolInfo(uint256)\":{\"notice\":\"Get pool information\"},\"poolLength()\":{\"notice\":\"Amount of pools\"},\"rescueNative()\":{\"notice\":\"A rescue function for missent msg.valueSince we are using payable functions to save gas on calls\"},\"rescueNonPoolToken(address,uint256)\":{\"notice\":\"A rescue function for missent tokens / airdropsThis cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\"},\"setPool(uint256,uint128)\":{\"notice\":\"Set new allocations for a poolSet `_newAllocPoint` to 0 to retire a pool\"},\"setRewardPerBlockFor(address,uint256)\":{\"notice\":\"Adjust/Set reward per block for a particular reward token\"},\"updatePool(uint256)\":{\"notice\":\"Updates a pools reward variables to be up-to date\"},\"userInfo(uint256,address)\":{\"notice\":\"Get account information on a pool\"},\"withdraw(uint256,uint256,address)\":{\"notice\":\"Withdraw deposited tokens and rewards.\"},\"withdrawFor(address,uint256,uint256,address)\":{\"notice\":\"Trusted helper contract can withdraw rewards and deposits on behalf of an accountFor eg. withdraw + remove liquidity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/staking/KrStaking.sol\":\"KrStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"src/contracts/staking/KrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IKrStaking} from \\\"./interfaces/IKrStaking.sol\\\";\\n\\ncontract KrStaking is AccessControlUpgradeable, ReentrancyGuardUpgradeable, IKrStaking {\\n    using SafeERC20 for IERC20;\\n\\n    // keccak256(\\\"kresko.operator.role\\\")\\n    bytes32 public constant OPERATOR_ROLE = 0x8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd2;\\n\\n    /**\\n     * ==================================================\\n     * =============== Storage ==========================\\n     * ==================================================\\n     */\\n\\n    // Info of each staked user.\\n    mapping(uint256 => mapping(address => UserInfo)) private _userInfo;\\n\\n    // Reward token drip per block\\n    mapping(address => uint256) public rewardPerBlockFor;\\n\\n    // Info of each pool.\\n    PoolInfo[] private _poolInfo;\\n\\n    // Total allocation points.\\n    uint128 public totalAllocPoint;\\n\\n    /**\\n     * ==================================================\\n     * ============== Events ============================\\n     * ==================================================\\n     */\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n    event LogSetPool(uint256 indexed pid, uint256 indexed allocPoint);\\n\\n    /**\\n     * ==================================================\\n     * ============== Initializer =======================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Initialize the contract with a single pool\\n     * @notice Sets initial reward token and rates\\n     * @notice Sets the caller as DEFAULT_ADMIN\\n     */\\n    function initialize(\\n        address[] calldata _rewardTokens,\\n        uint256[] calldata _rewardPerBlocks,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock,\\n        address _admin,\\n        address _operator\\n    ) external initializer {\\n        require(_rewardPerBlocks.length == _rewardTokens.length, \\\"Reward tokens must have a rewardPerBlock value\\\");\\n\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(OPERATOR_ROLE, _operator);\\n        _setupRole(OPERATOR_ROLE, msg.sender);\\n\\n        // Set initial reward tokens and allocations\\n        for (uint256 i; i < _rewardTokens.length; i++) {\\n            rewardPerBlockFor[_rewardTokens[i]] = _rewardPerBlocks[i];\\n        }\\n\\n        // Push the initial pool in.\\n        _poolInfo.push(\\n            PoolInfo({\\n                depositToken: _depositToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlock,\\n                accRewardPerShares: new uint256[](_rewardTokens.length),\\n                rewardTokens: _rewardTokens\\n            })\\n        );\\n\\n        totalAllocPoint += _allocPoint;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =============== Modifiers ========================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Ensures no pool exists with this depositToken\\n     * @param _depositToken to check\\n     */\\n    modifier ensurePoolDoesNotExist(IERC20 _depositToken) {\\n        for (uint256 i; i < _poolInfo.length; i++) {\\n            require(address(_poolInfo[i].depositToken) != address(_depositToken), \\\"KR: poolExists\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensures this pool exists\\n     * @param _pid to check\\n     */\\n    modifier ensurePoolExists(uint256 _pid) {\\n        require(address(_poolInfo[_pid].depositToken) != address(0), \\\"KR: !poolExists\\\");\\n        _;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ================== Views =========================\\n     * ==================================================\\n     */\\n\\n    /// @inheritdoc IKrStaking\\n    function pendingRewards(uint256 _pid, address _user) public view returns (Reward memory rewards) {\\n        PoolInfo memory pool = _poolInfo[_pid];\\n        UserInfo memory user = _userInfo[_pid][_user];\\n        uint256 depositTokenSupply = pool.depositToken.balanceOf(address(this));\\n        uint256 rewardTokensLength = pool.rewardTokens.length;\\n\\n        rewards = Reward({pid: _pid, tokens: pool.rewardTokens, amounts: new uint256[](rewardTokensLength)});\\n\\n        if (depositTokenSupply != 0 && user.amount > 0) {\\n            for (uint256 rewardIndex; rewardIndex < rewardTokensLength; rewardIndex++) {\\n                uint256 accRewardPerShare = pool.accRewardPerShares[rewardIndex];\\n\\n                uint256 rewardPerBlock = rewardPerBlockFor[pool.rewardTokens[rewardIndex]];\\n                uint256 blocks = block.number - pool.lastRewardBlock;\\n                uint256 reward = (rewardPerBlock * blocks * pool.allocPoint) / totalAllocPoint;\\n\\n                accRewardPerShare += (reward * 1e12) / depositTokenSupply;\\n\\n                rewards.amounts[rewardIndex] = (user.amount * accRewardPerShare) / 1e12 - user.rewardDebts[rewardIndex];\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function allPendingRewards(address _account) external view returns (Reward[] memory allRewards) {\\n        allRewards = new Reward[](_poolInfo.length);\\n        for (uint256 pid; pid < _poolInfo.length; pid++) {\\n            Reward memory poolReward = pendingRewards(pid, _account);\\n            allRewards[pid] = poolReward;\\n        }\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function poolLength() external view returns (uint256) {\\n        return _poolInfo.length;\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory) {\\n        return _poolInfo[_pid];\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function getPidFor(address _depositToken) external view returns (uint256 pid, bool found) {\\n        for (pid; pid < _poolInfo.length; pid++) {\\n            if (address(_poolInfo[pid].depositToken) == _depositToken) {\\n                found = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory) {\\n        return _userInfo[_pid][_account];\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =========== Core public functions ================\\n     * ==================================================\\n     */\\n\\n    /// @inheritdoc IKrStaking\\n    function massUpdatePools() public payable {\\n        for (uint256 pid; pid < _poolInfo.length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function updatePool(uint256 _pid) public payable returns (PoolInfo memory pool) {\\n        pool = _poolInfo[_pid];\\n        // Updates once per block\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 deposits = pool.depositToken.balanceOf(address(this));\\n            // No rewards for 0 deposits\\n            if (deposits > 0) {\\n                for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                    // Reward per block for a particular reward token\\n                    uint256 rewardPerBlock = rewardPerBlockFor[pool.rewardTokens[rewardIndex]];\\n                    // Blocks advanced since last update\\n                    uint256 blocks = block.number - pool.lastRewardBlock;\\n                    // Allocation for this particular pool\\n                    uint256 reward = (rewardPerBlock * blocks * pool.allocPoint) / totalAllocPoint;\\n                    // Increment accumulated rewards for new block height\\n                    pool.accRewardPerShares[rewardIndex] += (reward * 1e12) / deposits;\\n                }\\n            }\\n            // No further updates within same block height\\n            pool.lastRewardBlock = uint128(block.number);\\n            // storage\\n            _poolInfo[_pid] = pool;\\n        }\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function deposit(address _to, uint256 _pid, uint256 _amount) external payable nonReentrant ensurePoolExists(_pid) {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_to];\\n\\n        // Initialize rewardDebts\\n        if (user.rewardDebts.length == 0) {\\n            user.rewardDebts = new uint256[](pool.rewardTokens.length);\\n        }\\n\\n        pool.depositToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        user.amount += _amount;\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] += (_amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Deposit(_to, _pid, _amount);\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function withdraw(uint256 _pid, uint256 _amount, address _rewardRecipient) external payable nonReentrant {\\n        _withdraw(msg.sender, _pid, _amount, _rewardRecipient, true);\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function claim(uint256 _pid, address _rewardRecipient) external payable nonReentrant {\\n        _claim(msg.sender, _pid, _rewardRecipient);\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function emergencyWithdraw(uint256 _pid) external payable nonReentrant {\\n        PoolInfo memory pool = _poolInfo[_pid];\\n        UserInfo storage user = _userInfo[_pid][msg.sender];\\n        pool.depositToken.safeTransfer(address(msg.sender), user.amount);\\n        user.amount = 0;\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = 0;\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============= Admin functions ====================\\n     * ==================================================\\n     */\\n\\n    /// @inheritdoc IKrStaking\\n    function setRewardPerBlockFor(\\n        address _rewardToken,\\n        uint256 _rewardPerBlock\\n    ) external payable onlyRole(OPERATOR_ROLE) {\\n        rewardPerBlockFor[_rewardToken] = _rewardPerBlock;\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function addPool(\\n        address[] calldata _rewardTokens,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock\\n    ) external payable onlyRole(OPERATOR_ROLE) ensurePoolDoesNotExist(_depositToken) {\\n        require(_rewardTokens.length > 0, \\\"KR: !rewardTokens\\\");\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        _poolInfo.push(\\n            PoolInfo({\\n                depositToken: _depositToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlock != 0 ? _startBlock : uint128(block.number),\\n                accRewardPerShares: new uint256[](_rewardTokens.length),\\n                rewardTokens: _rewardTokens\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function setPool(\\n        uint256 _pid,\\n        uint128 _newAllocPoint\\n    ) external payable onlyRole(OPERATOR_ROLE) ensurePoolExists(_pid) {\\n        totalAllocPoint = totalAllocPoint - _poolInfo[_pid].allocPoint + _newAllocPoint;\\n        _poolInfo[_pid].allocPoint = _newAllocPoint;\\n\\n        emit LogSetPool(_pid, _newAllocPoint);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============ Protected functions =================\\n     * ==================================================\\n     */\\n\\n    /// @inheritdoc IKrStaking\\n    function withdrawFor(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _rewardRecipient\\n    ) external payable nonReentrant onlyRole(OPERATOR_ROLE) {\\n        _withdraw(_for, _pid, _amount, _rewardRecipient, false);\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function claimFor(\\n        address _for,\\n        uint256 _pid,\\n        address _rewardRecipient\\n    ) external payable nonReentrant onlyRole(OPERATOR_ROLE) {\\n        _claim(_for, _pid, _rewardRecipient);\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function rescueNative() external payable onlyRole(OPERATOR_ROLE) {\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /// @inheritdoc IKrStaking\\n    function rescueNonPoolToken(\\n        IERC20 _tokenToRescue,\\n        uint256 _amount\\n    ) external payable onlyRole(OPERATOR_ROLE) ensurePoolDoesNotExist(_tokenToRescue) {\\n        _tokenToRescue.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============= Internal functions =================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Loops over pools reward tokens and sends them to the user\\n     * @param pool pool to send rewards from in `_poolInfo`\\n     * @param user users info in the @param pool\\n     * @param recipient user to send rewards to\\n     */\\n    function sendRewards(PoolInfo memory pool, UserInfo memory user, address recipient) internal {\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            uint256 rewardDebt = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            uint256 pending = rewardDebt - user.rewardDebts[rewardIndex];\\n\\n            if (pending > 0) {\\n                IERC20(pool.rewardTokens[rewardIndex]).safeTransfer(recipient, pending);\\n                emit ClaimRewards(recipient, pool.rewardTokens[rewardIndex], pending);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw deposited tokens and rewards.\\n     * @param _user user to withdraw for\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient address to send rewards to\\n     * @param _transferToUser if true, withdraws to `_user` instead of `msg.sender`\\n     */\\n    function _withdraw(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _rewardRecipient,\\n        bool _transferToUser\\n    ) internal {\\n        require(_amount > 0, \\\"KR: 0-withdraw\\\");\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_user];\\n\\n        sendRewards(pool, user, _rewardRecipient);\\n\\n        // Send whole balance in case of amount exceeds deposits\\n        if (_amount > user.amount) {\\n            _amount = user.amount;\\n            user.amount = 0;\\n        } else {\\n            user.amount -= _amount;\\n        }\\n\\n        pool.depositToken.safeTransfer(_transferToUser ? _user : address(msg.sender), _amount);\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Withdraw(_user, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim rewards\\n     * @param _user user to claim for\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function _claim(address _user, uint256 _pid, address _rewardRecipient) internal {\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_user];\\n\\n        if (user.amount > 0) {\\n            sendRewards(pool, user, _rewardRecipient);\\n\\n            for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x955ce6c89e55fc942e04223d85400aa7b0f061f712b2bc9e19918edb455b37e8\",\"license\":\"BUSL-1.1\"},\"src/contracts/staking/interfaces/IKrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * @notice Get id for a token\\n     * @notice Useful for external contracts\\n     * @param _depositToken depositToken in `_poolInfo`\\n     * @return pid of pool with `_depositToken`\\n     * @return found ensure 0 index\\n     */\\n    function getPidFor(address _depositToken) external view returns (uint256 pid, bool found);\\n\\n    /**\\n     * @notice Amount of pools\\n     */\\n    function poolLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Deposits tokens for @param _to\\n     * @param _to address that msg.sender deposits tokens for\\n     * @param _pid in `_poolInfo`\\n     * @param _amount amount of tokens to deposit\\n     */\\n    function deposit(address _to, uint256 _pid, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Trusted helper contract can withdraw rewards and deposits on behalf of an account\\n     * @notice For eg. withdraw + remove liquidity\\n     * @param _for account to withdraw from\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient reward recipient\\n     */\\n    function withdrawFor(address _for, uint256 _pid, uint256 _amount, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Trusted helper contract can claim rewards on behalf of an account\\n     * @param _for account to claim for\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address that receives rewards\\n     */\\n    function claimFor(address _for, uint256 _pid, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Get all pending rewards for an account\\n     * @param _account to get rewards for\\n     * @return all pending rewards\\n     */\\n    function allPendingRewards(address _account) external view returns (Reward[] memory);\\n\\n    /**\\n     * @notice Get account information on a pool\\n     * @param _pid in `_poolInfo`\\n     * @param _account to get information for\\n     * @return information on the account\\n     */\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory);\\n\\n    /**\\n     * @notice Get pool information\\n     * @param _pid in `_poolInfo`\\n     * @return pool information\\n     */\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function rewardPerBlockFor(address depositTokenAddress) external view returns (uint256 rewardPerBlocks);\\n\\n    /**\\n     * @notice A rescue function for missent msg.value\\n     * @notice Since we are using payable functions to save gas on calls\\n     */\\n    function rescueNative() external payable;\\n\\n    /**\\n     * @notice A rescue function for missent tokens / airdrops\\n     * @notice This cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\\n     */\\n    function rescueNonPoolToken(IERC20 _tokenToRescue, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Set new allocations for a pool\\n     * @notice Set `_newAllocPoint` to 0 to retire a pool\\n     * @param _pid pool to modify\\n     * @param _newAllocPoint new allocation (weight) for rewards\\n     */\\n    function setPool(uint256 _pid, uint128 _newAllocPoint) external payable;\\n\\n    /**\\n     * @notice Adds a new reward pool\\n     * @notice Updates reward token count in case of adding extra tokens\\n     * @param _rewardTokens tokens to reward from this pool\\n     * @param _depositToken token to deposit for rewards\\n     * @param _allocPoint weight of rewards this pool receives\\n     * @param _startBlock block when rewards start\\n     */\\n    function addPool(\\n        address[] calldata _rewardTokens,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock\\n    ) external payable;\\n\\n    /**\\n     * @notice Adjust/Set reward per block for a particular reward token\\n     * @param _rewardToken token to adjust the drip for\\n     * @param _rewardPerBlock tokens to drip per block\\n     */\\n    function setRewardPerBlockFor(address _rewardToken, uint256 _rewardPerBlock) external payable;\\n\\n    /**\\n     * @notice Emergency function, withdraws deposits from a pool\\n     * @notice This will forfeit your rewards.\\n     * @param _pid pool id to withdraw tokens from\\n     */\\n    function emergencyWithdraw(uint256 _pid) external payable;\\n\\n    /**\\n     * @notice Claim rewards only\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function claim(uint256 _pid, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Withdraw deposited tokens and rewards.\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount, address _rewardRecipient) external payable;\\n\\n    /**\\n     * @notice Updates all pools to be up-to date\\n     */\\n    function massUpdatePools() external payable;\\n\\n    /**\\n     * @notice Updates a pools reward variables to be up-to date\\n     * @param _pid pool to update\\n     */\\n    function updatePool(uint256 _pid) external payable returns (PoolInfo memory pool);\\n\\n    /**\\n     * @notice Get pending rewards from a certain pool\\n     * @param _pid id in `_poolInfo`\\n     * @param _user id in `_userInfo[_pid]`\\n     * @return rewards pending rewards\\n     */\\n    function pendingRewards(uint256 _pid, address _user) external view returns (Reward memory rewards);\\n}\\n\",\"keccak256\":\"0xdfe73481838660eebe92d9192716d6881083ee547734135e3aa33d20198b1248\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576138dd908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611d95575080630802f76814611be6578063081e3eda14611baa5780630ad58d2f14611a595780630dbd1a38146119f35780630efe6a8b1461177f5780631526fe271461173657806317caf6f1146116e8578063248a9ca31461169b5780632f2ff15d1461159e57806336568abe146114ba57806343a4534b146112a25780634d7ee6441461116457806351eb05a6146111205780635312ea8e14610ffb5780635ea3f4fa14610ea5578063630b5ba114610e5657806368e2f7b714610df1578063759be5151461066b57806391d14854146105f257806392bb9fbf1461055f57806393f1a40b146104b3578063a217fddf14610479578063ba8fc5bf146103d0578063bf82b7b514610379578063d18df53c1461031c578063d547741f146102bd578063ddd5e1b214610270578063f5b541a6146102175763fc82f0841461016957600080fd5b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761019b61205a565b600080808047335af16101ac6134be565b50156101b457005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152fd5b600080fd5b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760206040517f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd28152f35b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576102b66102a5611e82565b6102ad613326565b600435336137ec565b6001609755005b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761031a6004356102fa611e82565b9080600052606560205261031560016040600020015461232c565b612585565b005b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610375610361610359611e82565b600435612de2565b604051918291602083526020830190612026565b0390f35b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576102b66103ae611ec8565b6103b6611ea5565b906103bf613326565b6103c761205a565b602435906137ec565b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610407611ec8565b60008060cb549273ffffffffffffffffffffffffffffffffffffffff809116905b848410610441575b604080518581528415156020820152f35b909192828261044f8361290b565b5054161461046857610460906127fc565b929190610428565b925050506040915060018380610430565b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602060405160008152f35b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576104ea611e82565b604051906104f7826124a6565b60008252606060208093015260043560005260c9825273ffffffffffffffffffffffffffffffffffffffff60406000209116600052815261053b6040600020612d63565b61037560405192839281845280518285015201516040808401526060830190611f0a565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610591611ec8565b61059961205a565b60cb5473ffffffffffffffffffffffffffffffffffffffff8281169060005b8381106105cc5761031a60243533876135e0565b806105e884846105de6105ed9561290b565b5054161415613653565b6127fc565b6105b8565b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610629611e82565b600435600052606560205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052602060ff604060002054166040519015158152f35b346102125760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125767ffffffffffffffff600435818111610212576106bb903690600401611e51565b91602435908111610212576106d4903690600401611e51565b9290916106df611ea5565b916106e8611eeb565b93608435906fffffffffffffffffffffffffffffffff821682036102125760a4359673ffffffffffffffffffffffffffffffffffffffff881688036102125760c43573ffffffffffffffffffffffffffffffffffffffff81168103610212576000549860ff8a60081c1615998a809b610de4575b8015610dcd575b15610d49578a60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055610d1a575b50858303610c96576107c260ff60005460081c166107b481612baa565b6107bd81612baa565b612baa565b60016097553360009081527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b602052604090205460ff1615610c14575b73ffffffffffffffffffffffffffffffffffffffff811660009081527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b602052604090205460ff1615610b7b575b5073ffffffffffffffffffffffffffffffffffffffff811660009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e7260205260409020547f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd2919060ff1615610ade575b5080600052606560205260406000203360005260205260ff6040600020541615610a6c575b5060005b848110610a0357505050918161096094936fffffffffffffffffffffffffffffffff61091661095695612851565b9173ffffffffffffffffffffffffffffffffffffffff604051976109398961248a565b1687528189166020880152166040860152606085015236916128a0565b6080820152612b56565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffffffffffffffffffffffffffffffff6109a160cc5493828516612b86565b1691161760cc556109ae57005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b610a0e818385612829565b3590610a1b818789612829565b359173ffffffffffffffffffffffffffffffffffffffff831683036102125773ffffffffffffffffffffffffffffffffffffffff610a67931660005260ca6020526040600020556127fc565b6108e8565b806000526065602052604060002033600052602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055339033907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4886108e4565b816000526065602052604060002073ffffffffffffffffffffffffffffffffffffffff8216600052602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339116827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4896108bf565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a48961084d565b3360008181527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905581907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a46107ff565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f52657761726420746f6b656e73206d757374206861766520612072657761726460448201527f506572426c6f636b2076616c75650000000000000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101176000558a610797565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156107635750600160ff821614610763565b50600160ff82161061075c565b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125773ffffffffffffffffffffffffffffffffffffffff610e3d611ec8565b1660005260ca6020526020604060002054604051908152f35b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760005b60cb5481101561031a5780610e9a610ea09261307d565b506127fc565b610e83565b34610212576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610edd611ec8565b60cb54610ee981612839565b91610ef760405193846124fa565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610f2483612839565b018460005b828110610fe55750505060005b828110610fbd575050506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610f735785850386f35b909192938280610fad837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a600196030186528851612026565b9601920196019592919092610f66565b80610fcb83610fe093612de2565b610fd58287612d88565b52610e9a8186612d88565b610f36565b610fed612c35565b828288010152018590610f29565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435611030613326565b61104261103c8261290b565b50612ca4565b908060005260c9602052604060002033600052602052604060002061108273ffffffffffffffffffffffffffffffffffffffff84511682549033906135e0565b600080825560019384830191859160800190825b6110cc575b505050505490337fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595600080a4609755005b81515181101561111b57806110e4611115928661330e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82549160031b1b191690556127fc565b82611096565b61109b565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761037561115860043561307d565b60405191829182611f88565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435602435906fffffffffffffffffffffffffffffffff9182811692838203610212576111ba61205a565b6111e573ffffffffffffffffffffffffffffffffffffffff6111db8561290b565b50541615156132a9565b60cc54918160016111f58661290b565b5001541682841603908282116112735761120e91612b86565b167fffffffffffffffffffffffffffffffff000000000000000000000000000000008092161760cc558260016112438461290b565b5001918254161790557f942cc7e17a17c164bd977f32ab8c54265d5b9d481e4e352bf874f1e568874e7c600080a3005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576112d4611ec8565b602435604435906064359273ffffffffffffffffffffffffffffffffffffffff9283851680860361021257611307613326565b61130f61205a565b8190821561145c576113229015156136b8565b61132b8461307d565b918460005260c96020528560406000209416938460005260205261135d60406000209761135789612d63565b8561371d565b8654808211156114445750505061138085548095600088555b83511633906135e0565b60019480860191869160608201916080016000845b6113ca575b5050505050507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568600080a4609755005b81515181101561143f57611439906105e864e8d4a510006113f886546113f1858a51612d88565b5190612627565b04611403838a61330e565b9091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83549160031b92831b921b1916179055565b84611395565b61139a565b956114558397926113809493612d9c565b8855611376565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20302d77697468647261770000000000000000000000000000000000006044820152fd5b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576114f1611e82565b3373ffffffffffffffffffffffffffffffffffffffff82160361151a5761031a90600435612585565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152fd5b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576004356115d8611e82565b8160005260656020526115f260016040600020015461232c565b81600052606560205273ffffffffffffffffffffffffffffffffffffffff60406000209116908160005260205260ff604060002054161561162f57005b816000526065602052604060002081600052602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760043560005260656020526020600160406000200154604051908152f35b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760206fffffffffffffffffffffffffffffffff60cc5416604051908152f35b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761176d613050565b5061037561115861103c60043561290b565b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576117b1611ec8565b6044356024356117bf613326565b6117c88161290b565b50926117ed73ffffffffffffffffffffffffffffffffffffffff8095541615156132a9565b6117f68261307d565b938260005260209460c9865281604060002093169283600052865260406000206001968782019384548015611955575b509161188084928a9594869551167f23b872dd00000000000000000000000000000000000000000000000000000000604051928301523360248301523060448301528a60648301526064825261187b8261248a565b613395565b61188b88825461263a565b905560006060608083019201925b6118cd575b50505050507f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15600080a4609755005b81515181101561195057806105e864e8d4a510006118f96118f261194a958851612d88565b518c612627565b04611916611907848a61330e565b91909283548360031b1c61263a565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83549160031b92831b921b1916179055565b83611899565b61189e565b611963608086015151612851565b9081519167ffffffffffffffff83116119c4576801000000000000000083116119c457611995838693818b558a612945565b0186600052836000208b60005b8481106119b25750505050611826565b86845194019381840155018c906119a2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125773ffffffffffffffffffffffffffffffffffffffff611a3a611ec8565b611a4261205a565b1660005260ca602052602435604060002055600080f35b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435602435611a91611ea5565b91611a9a613326565b81801561145c5773ffffffffffffffffffffffffffffffffffffffff92611ac484861615156136b8565b611acd8361307d565b918360005260c9602052604060002033600052602052611af560406000209661135788612d63565b855480821115611b9257505050611b1884548094600087555b33908451166135e0565b60019380850191859160608201916080016000845b611b60575b848888337ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568600080a4609755005b815151811015611b8d57611b87906105e864e8d4a510006113f886546113f1858a51612d88565b84611b2d565b611b32565b94611ba3839692611b189493612d9c565b8755611b0e565b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602060cb54604051908152f35b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760043567ffffffffffffffff811161021257611c30903690600401611e51565b90611c39611e82565b90604435906fffffffffffffffffffffffffffffffff9384831680840361021257611c62611eeb565b95611c6b61205a565b60cb5473ffffffffffffffffffffffffffffffffffffffff9687169660005b828110611d7e575050508215611d205761031a96610956957fffffffffffffffffffffffffffffffff0000000000000000000000000000000083611cd360cc5493828516612b86565b1691161760cc558181161515600014611d17575b611cf084612851565b9260405197611cfe8961248a565b88526020880152166040860152606085015236916128a0565b50804316611ce7565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4b523a2021726577617264546f6b656e730000000000000000000000000000006044820152fd5b806105e88a846105de611d909561290b565b611c8a565b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361021257817f7965db0b0000000000000000000000000000000000000000000000000000000060209314908115611e27575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483611e20565b9181601f840112156102125782359167ffffffffffffffff8311610212576020808501948460051b01011161021257565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361021257565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361021257565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361021257565b606435906fffffffffffffffffffffffffffffffff8216820361021257565b90815180825260208080930193019160005b828110611f2a575050505090565b835185529381019392810192600101611f1c565b90815180825260208080930193019160005b828110611f5e575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101611f50565b90612023916020815273ffffffffffffffffffffffffffffffffffffffff82511660208201526fffffffffffffffffffffffffffffffff80602084015116604083015260408301511660608201526080611ff0606084015160a08385015260c0840190611f0a565b9201519060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082850301910152611f3e565b90565b612023918151815260406120496020840151606060208501526060840190611f3e565b920151906040818403910152611f0a565b3360009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e7260209081526040808320549092907f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd29060ff16156120bf5750505050565b6120c833612687565b8451916120d4836124de565b604283528483019360603686378351156122ff57603085538351906001918210156122ff5790607860218601536041915b818311612234575050506121d8576121609385936121a4936121956048946121d4995198857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008b978801528251928391603789019101612467565b8401917f206973206d697373696e6720726f6c6520000000000000000000000000000000603784015251809386840190612467565b010360288101855201836124fa565b519182917f08c379a00000000000000000000000000000000000000000000000000000000083526004830161253b565b0390fd5b6064848651907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f811660108110156122d2577f3031323334353637383961626364656600000000000000000000000000000000901a6122718588612647565b5360041c9280156122a5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019190612105565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526032600452fd5b600081815260209060658252604092838220338352835260ff8483205416156123555750505050565b61235e33612687565b84519161236a836124de565b604283528483019360603686378351156122ff57603085538351906001918210156122ff5790607860218601536041915b8183116123f6575050506121d8576121609385936121a4936121956048946121d4995198857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008b978801528251928391603789019101612467565b909192600f811660108110156122d2577f3031323334353637383961626364656600000000000000000000000000000000901a6124338588612647565b5360041c9280156122a5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01919061239b565b60005b83811061247a5750506000910152565b818101518382015260200161246a565b60a0810190811067ffffffffffffffff8211176119c457604052565b6040810190811067ffffffffffffffff8211176119c457604052565b6060810190811067ffffffffffffffff8211176119c457604052565b6080810190811067ffffffffffffffff8211176119c457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176119c457604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040936020845261257e8151809281602088015260208888019101612467565b0116010190565b90600091808352606560205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff6040842054166125c457505050565b808352606560205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b8181029291811591840414171561127357565b9190820180921161127357565b908151811015612658570160200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60405190612694826124c2565b602a82526020820160403682378251156126585760309053815160019081101561265857607860218401536029905b8082116127315750506126d35790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156127ce577f3031323334353637383961626364656600000000000000000000000000000000901a61276d8486612647565b5360041c9180156127a0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906126c3565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112735760010190565b91908110156126585760051b0190565b67ffffffffffffffff81116119c45760051b60200190565b9061285b82612839565b61286860405191826124fa565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06128968294612839565b0190602036910137565b92916128ab82612839565b916128b960405193846124fa565b829481845260208094019160051b810192831161021257905b8282106128df5750505050565b813573ffffffffffffffffffffffffffffffffffffffff811681036102125781529083019083016128d2565b60cb548110156126585760cb60005260021b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b909182811061295357505050565b60009182526020822092830192015b82811061296e57505050565b818155600101612962565b90612b275773ffffffffffffffffffffffffffffffffffffffff91828151167fffffffffffffffffffffffff00000000000000000000000000000000000000008354161782556020926fffffffffffffffffffffffffffffffff8483015116936040830151947fffffffffffffffffffffffffffffffff0000000000000000000000000000000060019660801b1617858501556002840191606084015180519567ffffffffffffffff968781116119c45768010000000000000000928382116119c4578590612a4d838954818b558a612945565b0160009687528587208a885b848110612b15575050505050600360809101950151908151968711612ae8578611612abb578290612a8f87875481895588612945565b01938352818320925b858110612aa85750505050505050565b8451821684820155938201938601612a98565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b88845194019381840155018b90612a59565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b60cb5490680100000000000000008210156119c457612b7e826001612b84940160cb5561290b565b90612979565b565b9190916fffffffffffffffffffffffffffffffff8080941691160191821161127357565b15612bb157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60405190612c42826124c2565b6060604083600081528260208201520152565b9060405191828154918282526020928383019160005283600020936000905b828210612c8a57505050612b84925003836124fa565b855484526001958601958895509381019390910190612c74565b9060405191612cb28361248a565b8273ffffffffffffffffffffffffffffffffffffffff808354168252600192600384820154916020926fffffffffffffffffffffffffffffffff81168487015260801c6040860152612d0660028201612c55565b606086015201906040519485869483855492838152019460005283600020936000915b838310612d495750505050505060809291612d459103846124fa565b0152565b855481168752899750958101959484019491840191612d29565b90604051612d70816124a6565b6020612d83600183958054855201612c55565b910152565b80518210156126585760209160051b010190565b9190820391821161127357565b8115612db3570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b602490929192612df0612c35565b50612dfd61103c8261290b565b938160005260c960205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052612e366040600020612d63565b90602073ffffffffffffffffffffffffffffffffffffffff865116604051948580927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa92831561304457600093613010575b50608085015191825192612ea584612851565b9060405193612eb3856124c2565b845260208401526040830152819584151580613006575b612ed6575b5050505050565b60cc546fffffffffffffffffffffffffffffffff1660005b858110612efc575050612ecf565b612f0a816060850151612d88565b519073ffffffffffffffffffffffffffffffffffffffff612f2f826080870151612d88565b511660005260ca602052612f9183612f8c612f6f604060002054612f696fffffffffffffffffffffffffffffffff60408b01511643612d9c565b90612627565b6fffffffffffffffffffffffffffffffff60208901511690612627565b612da9565b918264e8d4a5100081020464e8d4a5100014831517156112735764e8d4a51000612fd7612fd0612fed93612fca8d856130019902612da9565b9061263a565b8851612627565b04612fe6836020890151612d88565b5190612d9c565b612ffb826040890151612d88565b526127fc565b612eee565b5081511515612eca565b9092506020813d60201161303c575b8161302c602093836124fa565b8101031261021257519138612e92565b3d915061301f565b6040513d6000823e3d90fd5b6040519061305d8261248a565b606060808360008152600060208201526000604082015282808201520152565b90613086613050565b5061309361103c8361290b565b916fffffffffffffffffffffffffffffffff60408401511643116130b45750565b602073ffffffffffffffffffffffffffffffffffffffff845116604051918280927f70a0823100000000000000000000000000000000000000000000000000000000825230600483015260249384915afa91821561304457600092613272575b5081613142575b505082612b7e612b84926fffffffffffffffffffffffffffffffff4316604084015261290b565b9093916000906fffffffffffffffffffffffffffffffff60cc5416915b6080850151805182101561325f5761318c8273ffffffffffffffffffffffffffffffffffffffff92612d88565b511660005260ca6020526131e383612f8c6131c6604060002054612f696fffffffffffffffffffffffffffffffff60408c01511643612d9c565b6fffffffffffffffffffffffffffffffff60208a01511690612627565b64e8d4a51000908082810204821481151715613231578861322c93926132099202612da9565b612ffb8261322660608a0151936132208386612d88565b5161263a565b92612d88565b61315f565b857f4e487b710000000000000000000000000000000000000000000000000000000060005260116004526000fd5b509395509250849150612b7e905061311b565b90916020823d6020116132a1575b8161328d602093836124fa565b8101031261329e5750519038613114565b80fd5b3d9150613280565b156132b057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152fd5b80548210156126585760005260206000200190600090565b600260975414613337576002609755565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff16906134026040516133bb816124a6565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16133fc6134be565b9161351c565b805180613410575b50505050565b818491810103126134ba578201519081159182150361329e57506134365780808061340a565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b5080fd5b3d15613517573d9067ffffffffffffffff82116119c4576040519161350b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846124fa565b82523d6000602084013e565b606090565b919290156135975750815115613530575090565b3b156135395790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156135aa5750805190602001fd5b6121d4906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526004830161253b565b9173ffffffffffffffffffffffffffffffffffffffff604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff8411176119c457612b8492604052613395565b1561365a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20706f6f6c4578697374730000000000000000000000000000000000006044820152fd5b156136bf57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4b523a2021726577617264526563697069656e740000000000000000000000006044820152fd5b919290926000805b608085018051518210156137e35790613774918161376564e8d4a510006137568a6113f18560608f51930151612d88565b04612fe68360208d0151612d88565b9182613779575b5050506127fc565b613725565b6137b273ffffffffffffffffffffffffffffffffffffffff92826137ac868b876137a586829951612d88565b51166135e0565b51612d88565b51169086167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc98680a438818161376c565b50505050915050565b91909173ffffffffffffffffffffffffffffffffffffffff61381181841615156136b8565b61381a8461307d565b9360005260c960205260406000209116600052602052604060002090815461384157505050565b6138549061384e83612d63565b8461371d565b600180820192909160608201916080016000845b613875575b505050505050565b8151518110156138a25761389c906105e864e8d4a510006113f886546113f1858a51612d88565b84613868565b61386d56fea26469706673582212201beb828431d0f874be65c7f99d2dfb0de7e2e7e64fd71bf12d68525b0cbd1a8464736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611d95575080630802f76814611be6578063081e3eda14611baa5780630ad58d2f14611a595780630dbd1a38146119f35780630efe6a8b1461177f5780631526fe271461173657806317caf6f1146116e8578063248a9ca31461169b5780632f2ff15d1461159e57806336568abe146114ba57806343a4534b146112a25780634d7ee6441461116457806351eb05a6146111205780635312ea8e14610ffb5780635ea3f4fa14610ea5578063630b5ba114610e5657806368e2f7b714610df1578063759be5151461066b57806391d14854146105f257806392bb9fbf1461055f57806393f1a40b146104b3578063a217fddf14610479578063ba8fc5bf146103d0578063bf82b7b514610379578063d18df53c1461031c578063d547741f146102bd578063ddd5e1b214610270578063f5b541a6146102175763fc82f0841461016957600080fd5b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761019b61205a565b600080808047335af16101ac6134be565b50156101b457005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152fd5b600080fd5b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760206040517f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd28152f35b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576102b66102a5611e82565b6102ad613326565b600435336137ec565b6001609755005b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761031a6004356102fa611e82565b9080600052606560205261031560016040600020015461232c565b612585565b005b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610375610361610359611e82565b600435612de2565b604051918291602083526020830190612026565b0390f35b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576102b66103ae611ec8565b6103b6611ea5565b906103bf613326565b6103c761205a565b602435906137ec565b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610407611ec8565b60008060cb549273ffffffffffffffffffffffffffffffffffffffff809116905b848410610441575b604080518581528415156020820152f35b909192828261044f8361290b565b5054161461046857610460906127fc565b929190610428565b925050506040915060018380610430565b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602060405160008152f35b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576104ea611e82565b604051906104f7826124a6565b60008252606060208093015260043560005260c9825273ffffffffffffffffffffffffffffffffffffffff60406000209116600052815261053b6040600020612d63565b61037560405192839281845280518285015201516040808401526060830190611f0a565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610591611ec8565b61059961205a565b60cb5473ffffffffffffffffffffffffffffffffffffffff8281169060005b8381106105cc5761031a60243533876135e0565b806105e884846105de6105ed9561290b565b5054161415613653565b6127fc565b6105b8565b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610629611e82565b600435600052606560205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052602060ff604060002054166040519015158152f35b346102125760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125767ffffffffffffffff600435818111610212576106bb903690600401611e51565b91602435908111610212576106d4903690600401611e51565b9290916106df611ea5565b916106e8611eeb565b93608435906fffffffffffffffffffffffffffffffff821682036102125760a4359673ffffffffffffffffffffffffffffffffffffffff881688036102125760c43573ffffffffffffffffffffffffffffffffffffffff81168103610212576000549860ff8a60081c1615998a809b610de4575b8015610dcd575b15610d49578a60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055610d1a575b50858303610c96576107c260ff60005460081c166107b481612baa565b6107bd81612baa565b612baa565b60016097553360009081527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b602052604090205460ff1615610c14575b73ffffffffffffffffffffffffffffffffffffffff811660009081527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b602052604090205460ff1615610b7b575b5073ffffffffffffffffffffffffffffffffffffffff811660009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e7260205260409020547f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd2919060ff1615610ade575b5080600052606560205260406000203360005260205260ff6040600020541615610a6c575b5060005b848110610a0357505050918161096094936fffffffffffffffffffffffffffffffff61091661095695612851565b9173ffffffffffffffffffffffffffffffffffffffff604051976109398961248a565b1687528189166020880152166040860152606085015236916128a0565b6080820152612b56565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffffffffffffffffffffffffffffffff6109a160cc5493828516612b86565b1691161760cc556109ae57005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b610a0e818385612829565b3590610a1b818789612829565b359173ffffffffffffffffffffffffffffffffffffffff831683036102125773ffffffffffffffffffffffffffffffffffffffff610a67931660005260ca6020526040600020556127fc565b6108e8565b806000526065602052604060002033600052602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055339033907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4886108e4565b816000526065602052604060002073ffffffffffffffffffffffffffffffffffffffff8216600052602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339116827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4896108bf565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a48961084d565b3360008181527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905581907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a46107ff565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f52657761726420746f6b656e73206d757374206861766520612072657761726460448201527f506572426c6f636b2076616c75650000000000000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101176000558a610797565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156107635750600160ff821614610763565b50600160ff82161061075c565b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125773ffffffffffffffffffffffffffffffffffffffff610e3d611ec8565b1660005260ca6020526020604060002054604051908152f35b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760005b60cb5481101561031a5780610e9a610ea09261307d565b506127fc565b610e83565b34610212576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257610edd611ec8565b60cb54610ee981612839565b91610ef760405193846124fa565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610f2483612839565b018460005b828110610fe55750505060005b828110610fbd575050506040519082820192808352815180945260408301938160408260051b8601019301916000955b828710610f735785850386f35b909192938280610fad837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a600196030186528851612026565b9601920196019592919092610f66565b80610fcb83610fe093612de2565b610fd58287612d88565b52610e9a8186612d88565b610f36565b610fed612c35565b828288010152018590610f29565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435611030613326565b61104261103c8261290b565b50612ca4565b908060005260c9602052604060002033600052602052604060002061108273ffffffffffffffffffffffffffffffffffffffff84511682549033906135e0565b600080825560019384830191859160800190825b6110cc575b505050505490337fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595600080a4609755005b81515181101561111b57806110e4611115928661330e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82549160031b1b191690556127fc565b82611096565b61109b565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761037561115860043561307d565b60405191829182611f88565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435602435906fffffffffffffffffffffffffffffffff9182811692838203610212576111ba61205a565b6111e573ffffffffffffffffffffffffffffffffffffffff6111db8561290b565b50541615156132a9565b60cc54918160016111f58661290b565b5001541682841603908282116112735761120e91612b86565b167fffffffffffffffffffffffffffffffff000000000000000000000000000000008092161760cc558260016112438461290b565b5001918254161790557f942cc7e17a17c164bd977f32ab8c54265d5b9d481e4e352bf874f1e568874e7c600080a3005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576112d4611ec8565b602435604435906064359273ffffffffffffffffffffffffffffffffffffffff9283851680860361021257611307613326565b61130f61205a565b8190821561145c576113229015156136b8565b61132b8461307d565b918460005260c96020528560406000209416938460005260205261135d60406000209761135789612d63565b8561371d565b8654808211156114445750505061138085548095600088555b83511633906135e0565b60019480860191869160608201916080016000845b6113ca575b5050505050507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568600080a4609755005b81515181101561143f57611439906105e864e8d4a510006113f886546113f1858a51612d88565b5190612627565b04611403838a61330e565b9091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83549160031b92831b921b1916179055565b84611395565b61139a565b956114558397926113809493612d9c565b8855611376565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20302d77697468647261770000000000000000000000000000000000006044820152fd5b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576114f1611e82565b3373ffffffffffffffffffffffffffffffffffffffff82160361151a5761031a90600435612585565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152fd5b346102125760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576004356115d8611e82565b8160005260656020526115f260016040600020015461232c565b81600052606560205273ffffffffffffffffffffffffffffffffffffffff60406000209116908160005260205260ff604060002054161561162f57005b816000526065602052604060002081600052602052604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760043560005260656020526020600160406000200154604051908152f35b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760206fffffffffffffffffffffffffffffffff60cc5416604051908152f35b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125761176d613050565b5061037561115861103c60043561290b565b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610212576117b1611ec8565b6044356024356117bf613326565b6117c88161290b565b50926117ed73ffffffffffffffffffffffffffffffffffffffff8095541615156132a9565b6117f68261307d565b938260005260209460c9865281604060002093169283600052865260406000206001968782019384548015611955575b509161188084928a9594869551167f23b872dd00000000000000000000000000000000000000000000000000000000604051928301523360248301523060448301528a60648301526064825261187b8261248a565b613395565b61188b88825461263a565b905560006060608083019201925b6118cd575b50505050507f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15600080a4609755005b81515181101561195057806105e864e8d4a510006118f96118f261194a958851612d88565b518c612627565b04611916611907848a61330e565b91909283548360031b1c61263a565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83549160031b92831b921b1916179055565b83611899565b61189e565b611963608086015151612851565b9081519167ffffffffffffffff83116119c4576801000000000000000083116119c457611995838693818b558a612945565b0186600052836000208b60005b8481106119b25750505050611826565b86845194019381840155018c906119a2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125773ffffffffffffffffffffffffffffffffffffffff611a3a611ec8565b611a4261205a565b1660005260ca602052602435604060002055600080f35b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435602435611a91611ea5565b91611a9a613326565b81801561145c5773ffffffffffffffffffffffffffffffffffffffff92611ac484861615156136b8565b611acd8361307d565b918360005260c9602052604060002033600052602052611af560406000209661135788612d63565b855480821115611b9257505050611b1884548094600087555b33908451166135e0565b60019380850191859160608201916080016000845b611b60575b848888337ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568600080a4609755005b815151811015611b8d57611b87906105e864e8d4a510006113f886546113f1858a51612d88565b84611b2d565b611b32565b94611ba3839692611b189493612d9c565b8755611b0e565b346102125760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257602060cb54604051908152f35b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102125760043567ffffffffffffffff811161021257611c30903690600401611e51565b90611c39611e82565b90604435906fffffffffffffffffffffffffffffffff9384831680840361021257611c62611eeb565b95611c6b61205a565b60cb5473ffffffffffffffffffffffffffffffffffffffff9687169660005b828110611d7e575050508215611d205761031a96610956957fffffffffffffffffffffffffffffffff0000000000000000000000000000000083611cd360cc5493828516612b86565b1691161760cc558181161515600014611d17575b611cf084612851565b9260405197611cfe8961248a565b88526020880152166040860152606085015236916128a0565b50804316611ce7565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4b523a2021726577617264546f6b656e730000000000000000000000000000006044820152fd5b806105e88a846105de611d909561290b565b611c8a565b346102125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021257600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361021257817f7965db0b0000000000000000000000000000000000000000000000000000000060209314908115611e27575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483611e20565b9181601f840112156102125782359167ffffffffffffffff8311610212576020808501948460051b01011161021257565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361021257565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361021257565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361021257565b606435906fffffffffffffffffffffffffffffffff8216820361021257565b90815180825260208080930193019160005b828110611f2a575050505090565b835185529381019392810192600101611f1c565b90815180825260208080930193019160005b828110611f5e575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101611f50565b90612023916020815273ffffffffffffffffffffffffffffffffffffffff82511660208201526fffffffffffffffffffffffffffffffff80602084015116604083015260408301511660608201526080611ff0606084015160a08385015260c0840190611f0a565b9201519060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082850301910152611f3e565b90565b612023918151815260406120496020840151606060208501526060840190611f3e565b920151906040818403910152611f0a565b3360009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e7260209081526040808320549092907f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd29060ff16156120bf5750505050565b6120c833612687565b8451916120d4836124de565b604283528483019360603686378351156122ff57603085538351906001918210156122ff5790607860218601536041915b818311612234575050506121d8576121609385936121a4936121956048946121d4995198857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008b978801528251928391603789019101612467565b8401917f206973206d697373696e6720726f6c6520000000000000000000000000000000603784015251809386840190612467565b010360288101855201836124fa565b519182917f08c379a00000000000000000000000000000000000000000000000000000000083526004830161253b565b0390fd5b6064848651907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f811660108110156122d2577f3031323334353637383961626364656600000000000000000000000000000000901a6122718588612647565b5360041c9280156122a5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019190612105565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526032600452fd5b600081815260209060658252604092838220338352835260ff8483205416156123555750505050565b61235e33612687565b84519161236a836124de565b604283528483019360603686378351156122ff57603085538351906001918210156122ff5790607860218601536041915b8183116123f6575050506121d8576121609385936121a4936121956048946121d4995198857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008b978801528251928391603789019101612467565b909192600f811660108110156122d2577f3031323334353637383961626364656600000000000000000000000000000000901a6124338588612647565b5360041c9280156122a5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01919061239b565b60005b83811061247a5750506000910152565b818101518382015260200161246a565b60a0810190811067ffffffffffffffff8211176119c457604052565b6040810190811067ffffffffffffffff8211176119c457604052565b6060810190811067ffffffffffffffff8211176119c457604052565b6080810190811067ffffffffffffffff8211176119c457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176119c457604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040936020845261257e8151809281602088015260208888019101612467565b0116010190565b90600091808352606560205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff6040842054166125c457505050565b808352606560205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b8181029291811591840414171561127357565b9190820180921161127357565b908151811015612658570160200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60405190612694826124c2565b602a82526020820160403682378251156126585760309053815160019081101561265857607860218401536029905b8082116127315750506126d35790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156127ce577f3031323334353637383961626364656600000000000000000000000000000000901a61276d8486612647565b5360041c9180156127a0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906126c3565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112735760010190565b91908110156126585760051b0190565b67ffffffffffffffff81116119c45760051b60200190565b9061285b82612839565b61286860405191826124fa565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06128968294612839565b0190602036910137565b92916128ab82612839565b916128b960405193846124fa565b829481845260208094019160051b810192831161021257905b8282106128df5750505050565b813573ffffffffffffffffffffffffffffffffffffffff811681036102125781529083019083016128d2565b60cb548110156126585760cb60005260021b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b909182811061295357505050565b60009182526020822092830192015b82811061296e57505050565b818155600101612962565b90612b275773ffffffffffffffffffffffffffffffffffffffff91828151167fffffffffffffffffffffffff00000000000000000000000000000000000000008354161782556020926fffffffffffffffffffffffffffffffff8483015116936040830151947fffffffffffffffffffffffffffffffff0000000000000000000000000000000060019660801b1617858501556002840191606084015180519567ffffffffffffffff968781116119c45768010000000000000000928382116119c4578590612a4d838954818b558a612945565b0160009687528587208a885b848110612b15575050505050600360809101950151908151968711612ae8578611612abb578290612a8f87875481895588612945565b01938352818320925b858110612aa85750505050505050565b8451821684820155938201938601612a98565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b88845194019381840155018b90612a59565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b60cb5490680100000000000000008210156119c457612b7e826001612b84940160cb5561290b565b90612979565b565b9190916fffffffffffffffffffffffffffffffff8080941691160191821161127357565b15612bb157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60405190612c42826124c2565b6060604083600081528260208201520152565b9060405191828154918282526020928383019160005283600020936000905b828210612c8a57505050612b84925003836124fa565b855484526001958601958895509381019390910190612c74565b9060405191612cb28361248a565b8273ffffffffffffffffffffffffffffffffffffffff808354168252600192600384820154916020926fffffffffffffffffffffffffffffffff81168487015260801c6040860152612d0660028201612c55565b606086015201906040519485869483855492838152019460005283600020936000915b838310612d495750505050505060809291612d459103846124fa565b0152565b855481168752899750958101959484019491840191612d29565b90604051612d70816124a6565b6020612d83600183958054855201612c55565b910152565b80518210156126585760209160051b010190565b9190820391821161127357565b8115612db3570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b602490929192612df0612c35565b50612dfd61103c8261290b565b938160005260c960205273ffffffffffffffffffffffffffffffffffffffff60406000209116600052602052612e366040600020612d63565b90602073ffffffffffffffffffffffffffffffffffffffff865116604051948580927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa92831561304457600093613010575b50608085015191825192612ea584612851565b9060405193612eb3856124c2565b845260208401526040830152819584151580613006575b612ed6575b5050505050565b60cc546fffffffffffffffffffffffffffffffff1660005b858110612efc575050612ecf565b612f0a816060850151612d88565b519073ffffffffffffffffffffffffffffffffffffffff612f2f826080870151612d88565b511660005260ca602052612f9183612f8c612f6f604060002054612f696fffffffffffffffffffffffffffffffff60408b01511643612d9c565b90612627565b6fffffffffffffffffffffffffffffffff60208901511690612627565b612da9565b918264e8d4a5100081020464e8d4a5100014831517156112735764e8d4a51000612fd7612fd0612fed93612fca8d856130019902612da9565b9061263a565b8851612627565b04612fe6836020890151612d88565b5190612d9c565b612ffb826040890151612d88565b526127fc565b612eee565b5081511515612eca565b9092506020813d60201161303c575b8161302c602093836124fa565b8101031261021257519138612e92565b3d915061301f565b6040513d6000823e3d90fd5b6040519061305d8261248a565b606060808360008152600060208201526000604082015282808201520152565b90613086613050565b5061309361103c8361290b565b916fffffffffffffffffffffffffffffffff60408401511643116130b45750565b602073ffffffffffffffffffffffffffffffffffffffff845116604051918280927f70a0823100000000000000000000000000000000000000000000000000000000825230600483015260249384915afa91821561304457600092613272575b5081613142575b505082612b7e612b84926fffffffffffffffffffffffffffffffff4316604084015261290b565b9093916000906fffffffffffffffffffffffffffffffff60cc5416915b6080850151805182101561325f5761318c8273ffffffffffffffffffffffffffffffffffffffff92612d88565b511660005260ca6020526131e383612f8c6131c6604060002054612f696fffffffffffffffffffffffffffffffff60408c01511643612d9c565b6fffffffffffffffffffffffffffffffff60208a01511690612627565b64e8d4a51000908082810204821481151715613231578861322c93926132099202612da9565b612ffb8261322660608a0151936132208386612d88565b5161263a565b92612d88565b61315f565b857f4e487b710000000000000000000000000000000000000000000000000000000060005260116004526000fd5b509395509250849150612b7e905061311b565b90916020823d6020116132a1575b8161328d602093836124fa565b8101031261329e5750519038613114565b80fd5b3d9150613280565b156132b057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152fd5b80548210156126585760005260206000200190600090565b600260975414613337576002609755565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff16906134026040516133bb816124a6565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16133fc6134be565b9161351c565b805180613410575b50505050565b818491810103126134ba578201519081159182150361329e57506134365780808061340a565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b5080fd5b3d15613517573d9067ffffffffffffffff82116119c4576040519161350b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846124fa565b82523d6000602084013e565b606090565b919290156135975750815115613530575090565b3b156135395790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156135aa5750805190602001fd5b6121d4906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526004830161253b565b9173ffffffffffffffffffffffffffffffffffffffff604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff8411176119c457612b8492604052613395565b1561365a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20706f6f6c4578697374730000000000000000000000000000000000006044820152fd5b156136bf57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4b523a2021726577617264526563697069656e740000000000000000000000006044820152fd5b919290926000805b608085018051518210156137e35790613774918161376564e8d4a510006137568a6113f18560608f51930151612d88565b04612fe68360208d0151612d88565b9182613779575b5050506127fc565b613725565b6137b273ffffffffffffffffffffffffffffffffffffffff92826137ac868b876137a586829951612d88565b51166135e0565b51612d88565b51169086167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc98680a438818161376c565b50505050915050565b91909173ffffffffffffffffffffffffffffffffffffffff61381181841615156136b8565b61381a8461307d565b9360005260c960205260406000209116600052602052604060002090815461384157505050565b6138549061384e83612d63565b8461371d565b600180820192909160608201916080016000845b613875575b505050505050565b8151518110156138a25761389c906105e864e8d4a510006113f886546113f1858a51612d88565b84613868565b61386d56fea26469706673582212201beb828431d0f874be65c7f99d2dfb0de7e2e7e64fd71bf12d68525b0cbd1a8464736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addPool(address[],address,uint128,uint128)": {
        "params": {
          "_allocPoint": "weight of rewards this pool receives",
          "_depositToken": "token to deposit for rewards",
          "_rewardTokens": "tokens to reward from this pool",
          "_startBlock": "block when rewards start"
        }
      },
      "allPendingRewards(address)": {
        "params": {
          "_account": "to get rewards for"
        },
        "returns": {
          "allRewards": "all pending rewards"
        }
      },
      "claim(uint256,address)": {
        "params": {
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "address to send rewards to"
        }
      },
      "claimFor(address,uint256,address)": {
        "params": {
          "_for": "account to claim for",
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "address that receives rewards"
        }
      },
      "deposit(address,uint256,uint256)": {
        "params": {
          "_amount": "amount of tokens to deposit",
          "_pid": "in `_poolInfo`",
          "_to": "address that msg.sender deposits tokens for"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "pool id to withdraw tokens from"
        }
      },
      "getPidFor(address)": {
        "params": {
          "_depositToken": "depositToken in `_poolInfo`"
        },
        "returns": {
          "found": "ensure 0 index",
          "pid": "of pool with `_depositToken`"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pendingRewards(uint256,address)": {
        "params": {
          "_pid": "id in `_poolInfo`",
          "_user": "id in `_userInfo[_pid]`"
        },
        "returns": {
          "rewards": "pending rewards"
        }
      },
      "poolInfo(uint256)": {
        "params": {
          "_pid": "in `_poolInfo`"
        },
        "returns": {
          "_0": "pool information"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setPool(uint256,uint128)": {
        "params": {
          "_newAllocPoint": "new allocation (weight) for rewards",
          "_pid": "pool to modify"
        }
      },
      "setRewardPerBlockFor(address,uint256)": {
        "params": {
          "_rewardPerBlock": "tokens to drip per block",
          "_rewardToken": "token to adjust the drip for"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "pool to update"
        }
      },
      "userInfo(uint256,address)": {
        "params": {
          "_account": "to get information for",
          "_pid": "in `_poolInfo`"
        },
        "returns": {
          "_0": "information on the account"
        }
      },
      "withdraw(uint256,uint256,address)": {
        "params": {
          "_amount": "amount to withdraw",
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "address to send rewards to"
        }
      },
      "withdrawFor(address,uint256,uint256,address)": {
        "params": {
          "_amount": "amount to withdraw",
          "_for": "account to withdraw from",
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "reward recipient"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256,uint256)": {
        "notice": "================================================== ============== Events ============================ =================================================="
      }
    },
    "kind": "user",
    "methods": {
      "addPool(address[],address,uint128,uint128)": {
        "notice": "Adds a new reward poolUpdates reward token count in case of adding extra tokens"
      },
      "allPendingRewards(address)": {
        "notice": "Get all pending rewards for an account"
      },
      "claim(uint256,address)": {
        "notice": "Claim rewards only"
      },
      "claimFor(address,uint256,address)": {
        "notice": "Trusted helper contract can claim rewards on behalf of an account"
      },
      "deposit(address,uint256,uint256)": {
        "notice": "Deposits tokens for @param _to"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Emergency function, withdraws deposits from a poolThis will forfeit your rewards."
      },
      "getPidFor(address)": {
        "notice": "Get id for a tokenUseful for external contracts"
      },
      "initialize(address[],uint256[],address,uint128,uint128,address,address)": {
        "notice": "Initialize the contract with a single poolSets initial reward token and ratesSets the caller as DEFAULT_ADMIN"
      },
      "massUpdatePools()": {
        "notice": "Updates all pools to be up-to date"
      },
      "pendingRewards(uint256,address)": {
        "notice": "Get pending rewards from a certain pool"
      },
      "poolInfo(uint256)": {
        "notice": "Get pool information"
      },
      "poolLength()": {
        "notice": "Amount of pools"
      },
      "rescueNative()": {
        "notice": "A rescue function for missent msg.valueSince we are using payable functions to save gas on calls"
      },
      "rescueNonPoolToken(address,uint256)": {
        "notice": "A rescue function for missent tokens / airdropsThis cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier."
      },
      "setPool(uint256,uint128)": {
        "notice": "Set new allocations for a poolSet `_newAllocPoint` to 0 to retire a pool"
      },
      "setRewardPerBlockFor(address,uint256)": {
        "notice": "Adjust/Set reward per block for a particular reward token"
      },
      "updatePool(uint256)": {
        "notice": "Updates a pools reward variables to be up-to date"
      },
      "userInfo(uint256,address)": {
        "notice": "Get account information on a pool"
      },
      "withdraw(uint256,uint256,address)": {
        "notice": "Withdraw deposited tokens and rewards."
      },
      "withdrawFor(address,uint256,uint256,address)": {
        "notice": "Trusted helper contract can withdraw rewards and deposits on behalf of an accountFor eg. withdraw + remove liquidity"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2024,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2027,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2711,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2930,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1623,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1618_storage)"
      },
      {
        "astId": 1918,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2327,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 2385,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 29682,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_userInfo",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)31381_storage))"
      },
      {
        "astId": 29686,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "rewardPerBlockFor",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 29690,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_poolInfo",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_struct(PoolInfo)31395_storage)dyn_storage"
      },
      {
        "astId": 29692,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "204",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)31395_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)31395_storage",
        "encoding": "dynamic_array",
        "label": "struct IKrStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4888": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)31381_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IKrStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)31381_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1618_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1618_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)31381_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IKrStaking.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)31381_storage)"
      },
      "t_struct(PoolInfo)31395_storage": {
        "encoding": "inplace",
        "label": "struct IKrStaking.PoolInfo",
        "members": [
          {
            "astId": 31384,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "depositToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)4888"
          },
          {
            "astId": 31386,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 31388,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "lastRewardBlock",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 31391,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "accRewardPerShares",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 31394,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "rewardTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)1618_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1615,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1617,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)31381_storage": {
        "encoding": "inplace",
        "label": "struct IKrStaking.UserInfo",
        "members": [
          {
            "astId": 31377,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31380,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "rewardDebts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}