{
  "console.log": {
    "prefix": "clg",
    "description": "console.log",
    "scope": "solidity",
    "body": ["console.log($1);"]
  },
  "console.log": {
    "prefix": "clg2",
    "description": "console2.log",
    "scope": "solidity",
    "body": ["console2.log($1);"]
  },
  "spdxpragma": {
    "prefix": "spdxpragma",
    "description": "spdxpragma",
    "scope": "solidity",
    "body": ["// SPDX-License-Identifier: MIT", "pragma solidity <0.9.0;"]
  },
  "hhc": {
    "prefix": "hhc",
    "description": "hhc",
    "scope": "solidity",
    "body": ["import \"hardhat/console.sol\";"]
  },
  "fc2": {
    "prefix": "forgeconsole2",
    "description": "fc2",
    "scope": "solidity",
    "body": ["import {console2} from \"forge-std/console2.sol\";"]
  },
  "natfunc": {
    "prefix": "natfunc",
    "description": "natfunc",
    "scope": "solidity",
    "body": ["/**", "* @notice $1", "* @dev $2", "* @param $3", "*/"]
  },
  "natcontract": {
    "prefix": "natcontract",
    "description": "natcontract",
    "scope": "solidity",
    "body": ["/** ", "* @title $1", "* @author Kresko", "* @notice $2", "* @dev $3", "*/"]
  },
  "Forge Test Template": {
    "prefix": "forgetesttemplate",
    "body": [
      "// solhint-disable no-console",
      "",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {TestBase} from \"kresko-lib/utils/TestBase.sol\";",
      "import {LibTest} from \"kresko-lib/utils/LibTest.sol\";",
      "",
      "import {WadRay} from \"libs/WadRay.sol\";",
      "import {PercentageMath} from \"libs/PercentageMath.sol\";",
      "import {console2} from \"forge-std/console2.sol\";",
      "",
      "using WadRay for uint256;",
      "using PercentageMath for uint256;",
      "",
      "contract NewTest is TestBase(\"MNEMONIC_TESTNET\") {",
      "    using LibTest for *;",
      "",
      "    address internal addr;",
      "    uint256 internal value;",
      "",
      "    function setUp() public {",
      "        console2.log(\"setup\");",
      "        addr = address(0x123);",
      "        value = 1;",
      "    }",
      "",
      "    function testSomething() public {",
      "        value.equals(1);",
      "        addr.equals(address(0x123));",
      "    }",
      "}"
    ],
    "description": "Quick base for a new forge test file"
  },
  "Forge Protocol Test Template": {
    "prefix": "forgetestprotocoltemplate",
    "body": [
      "// solhint-disable",
      "",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {LibTest} from \"kresko-lib/utils/LibTest.sol\";",
      "import {TestBase} from \"kresko-lib/utils/TestBase.sol\";",
      "import {KreskoForgeUtils} from \"scripts/utils/KreskoForgeUtils.s.sol\";",
      "import {PercentageMath} from \"libs/PercentageMath.sol\";",
      "import {WadRay} from \"libs/WadRay.sol\";",
      "import {Asset} from \"common/Types.sol\";",
      "import {console2} from \"forge-std/console2.sol\";",
      "",
      "contract NewKreskoTest is TestBase(\"MNEMONIC_TESTNET\"), KreskoForgeUtils {",
      "    using LibTest for *;",
      "    using WadRay for uint256;",
      "    using PercentageMath for uint256;",
      "",
      "    MockTokenDeployInfo internal usdc;",
      "    KrAssetInfo internal krETH;",
      "",
      "    string usdcPrice = \"USDC:1:8\";",
      "    string ethPrice = \"ETH:2000:8\";",
      "    string initialPrices = \"USDC:1:8,ETH:2000:8\";",
      "",
      "    function setUp() public users(address(11), address(22), address(33)) {",
      "        deployArgs = CoreConfig({",
      "            admin: testAdmin,",
      "            seqFeed: getMockSeqFeed(),",
      "            minterMcr: 150e2,",
      "            minterLt: 140e2,",
      "            scdpMcr: 200e2,",
      "            scdpLt: 150e2,",
      "            sdiPrecision: 8,",
      "            oraclePrecision: 8,",
      "            staleTime: 86401,",
      "            council: getMockSafe(testAdmin),",
      "            treasury: TEST_TREASURY",
      "        });",
      "        vm.startPrank(deployArgs.admin);",
      "",
      "        kresko = deployDiamond(deployArgs);",
      "        vm.warp(3601);",
      "",
      "        usdc = mockCollateral(",
      "            bytes32(\"USDC\"),",
      "            MockConfig({symbol: \"USDC\", price: 1e8, setFeeds: true, tknDecimals: 18, oracleDecimals: 8}),",
      "            fullCollateral",
      "        );",
      "        krETH = mockKrAsset(",
      "            bytes32(\"ETH\"),",
      "            address(0),",
      "            MockConfig({symbol: \"krETH\", price: 2000e8, setFeeds: true, tknDecimals: 18, oracleDecimals: 8}),",
      "            defaultKrAsset,",
      "            deployArgs",
      "        );",
      "    }",
      "",
      "    function testSomething() public {",
      "        kresko.getAsset(usdc.addr).ticker.equals(\"USDC\");",
      "        kresko.getAsset(krETH.addr).ticker.equals(\"ETH\");",
      "    }",
      "}"
    ],
    "description": "Quick template for a protocol forge test"
  }
}
