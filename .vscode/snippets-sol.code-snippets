{
  "kresko: default spdx and pragma": {
    "prefix": "kresko_spdx_pragma",
    "description": "Add default SPDX license identifier and pragma solidity version.",
    "scope": "solidity",
    "body": ["// SPDX-License-Identifier: ${2:BUSL-1.1}", "pragma solidity ${1:^0.8.0};", ""]
  },
  "kresko: stub natspec for function": {
    "prefix": "kresko_natspec_function",
    "description": "Function natspec template",
    "scope": "solidity",
    "body": ["/**", "* @notice $1", "* @dev $2", "* @param $3", "*/"]
  },
  "kresko: stub natspec for contract": {
    "prefix": "kresko_natspec_contract",
    "description": "Contract natspec template.",
    "scope": "solidity",
    "body": ["/** ", "* @title $1", "* @author Kresko", "* @notice $2", "* @dev $3", "*/"]
  },
  "kresko: disable solhint rules in forge test/script": {
    "prefix": "kresko_solhint_disable",
    "description": "Disable solhint rules in forge files",
    "scope": "solidity",
    "body": [
      "// solhint-disable state-visibility, max-states-count, var-name-mixedcase, no-global-import, const-name-snakecase, no-empty-blocks, no-console"
    ]
  },
  "kresko: forge test template with workspace tools": {
    "isFileTemplate": true,
    "prefix": "kresko_forge_test_template",
    "scope": "solidity",
    "body": [
      "// solhint-disable state-visibility, max-states-count, no-empty-blocks, no-console",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {Deployed} from \"scripts/deploy/libs/Deployed.s.sol\";",
      "import {Log, Help} from \"kresko-lib/utils/s/LibVm.s.sol\";",
      "import {ShortAssert} from \"kresko-lib/utils/s/ShortAssert.t.sol\";",
      "import {Tested} from \"kresko-lib/utils/s/Tested.t.sol\";",
      "",
      "contract TestSnip is Tested {",
      "    using Log for *;",
      "    using Help for *;",
      "    using Deployed for *;",
      "    using ShortAssert for *;",
      "",
      "    function setUp() public users(address(111), address(222), address(333)) {",
      "        useMnemonic(\"MNEMONIC_DEVNET\");",
      "    }",
      "",
      "    function testTheThing() public {",
      "        prank(user0);",
      "        user0.eq(address(111), \"user-address\");",
      "        user0.clg(\"user-address\");",
      "    }",
      "}"
    ],
    "description": "Base for a new forge test using workspace utils"
  },
  "kresko: forge test template with protocol deployment": {
    "isFileTemplate": true,
    "prefix": "kresko_forge_test_protocol_template",
    "scope": "solidity",
    "body": [
      "// solhint-disable state-visibility, max-states-count, no-empty-blocks, no-console",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {Deployed} from \"scripts/deploy/libs/Deployed.s.sol\";",
      "import {Deploy} from \"scripts/deploy/Deploy.s.sol\";",
      "import {Log, Help} from \"kresko-lib/utils/Libs.s.sol\";",
      "import {ShortAssert} from \"kresko-lib/utils/ShortAssert.t.sol\";",
      "import {IKrMulticall} from \"periphery/IKrMulticall.sol\";",
      "import {Tested} from \"kresko-lib/utils/Tested.t.sol\";",
      "",
      "contract TestSnip is Tested, Deploy {",
      "    using Log for *;",
      "    using Help for *;",
      "    using Deployed for *;",
      "    using ShortAssert for *;",
      "",
      "",
      "    address krETH;",
      "    address admin;",
      "",
      "    function setUp() public {",
      "        admin = Deploy.deployTest(\"MNEMONIC_DEVNET\", \"test-base\", 0).params.common.admin;",
      "        krETH = (\"krETH\").addr();",
      "    }",
      "",
      "    function testTheThing() public {",
      "        prank(admin);",
      "",
      "        weth.approve(krETH, type(uint256).max);",
      "",
      "        admin.notEq(address(0), \"admin-address-0\");",
      "        admin.clg(\"admin-address\");",
      "    }",
      "}"
    ],
    "description": "Base for a new forge test using minimal protocol deployment"
  },
  "kresko: forge script template": {
    "isFileTemplate": true,
    "prefix": "kresko_script_template",
    "scope": "solidity",
    "body": [
      "// solhint-disable state-visibility",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {Scripted} from \"kresko-lib/utils/Scripted.s.sol\";",
      "import {Help, Log} from \"kresko-lib/utils/Libs.s.sol\";",
      "import {IDataV1} from \"periphery/interfaces/IDataV1.sol\";",
      "import {Deployed} from \"scripts/deploy/libs/Deployed.s.sol\";",
      "import {IDeploymentFactory} from \"factory/IDeploymentFactory.sol\";",
      "import {IKreskoAssetAnchor} from \"kresko-asset/IKreskoAssetAnchor.sol\";",
      "import {MockERC20} from \"mocks/MockERC20.sol\";",
      "import {IKreskoAsset} from \"kresko-asset/IKreskoAsset.sol\";",
      "import {IExtendedDiamondCutFacet} from \"diamond/interfaces/IDiamondCutFacet.sol\";",
      "import {IKresko} from \"periphery/IKresko.sol\";",
      "import {IKISS} from \"kiss/interfaces/IKISS.sol\";",
      "import {IVault} from \"vault/interfaces/IVault.sol\";",
      "import {IKrMulticall} from \"periphery/IKrMulticall.sol\";",
      "",
      "contract ScriptSnip is Scripted {",
      "    using Log for *;",
      "    using Help for *;",
      "    using Deployed for *;",
      "    IDeploymentFactory factory;",
      "    IKresko kresko;",
      "    IExtendedDiamondCutFacet diamond;",
      "    IKreskoAsset krETH;",
      "    IKreskoAssetAnchor akrETH;",
      "    IDataV1 datav1;",
      "    IVault vault;",
      "    IKISS kiss;",
      "    IKrMulticall multicall;",
      "    MockERC20 token;",
      "",
      "    function init() private {",
      "        vm.createSelectFork(\"arbitrumSepolia\");",
      "",
      "        useMnemonic(\"MNEMONIC_DEVNET\");",
      "",
      "        kresko = IKresko(Deployed.addr(\"Kresko\"));",
      "",
      "        multicall = IKrMulticall(Deployed.addr(\"Multicall\"));",
      "        diamond = IExtendedDiamondCutFacet(address(kresko));",
      "        vault = IVault(Deployed.addr(\"Vault\"));",
      "        datav1 = IDataV1(Deployed.addr(\"DataV1\"));",
      "        krETH = IKreskoAsset(Deployed.addr(\"krETH\"));",
      "        akrETH = IKreskoAssetAnchor(Deployed.addr(\"akrETH\"));",
      "    }",
      "",
      "    function run() public {",
      "        init();",
      "        // do the thing",
      "    }",
      "}"
    ],
    "description": "Base for a new forge script using live protocol"
  }
}
