{
  "kresko: default spdx and pragma": {
    "prefix": "kresko_spdx_pragma",
    "description": "Add default SPDX license identifier and pragma solidity version.",
    "scope": "solidity",
    "body": ["// SPDX-License-Identifier: ${2:BUSL-1.1}", "pragma solidity ${1:^0.8.0};", ""]
  },
  "kresko: stub natspec for function": {
    "prefix": "kresko_natspec_function",
    "description": "Function natspec template",
    "scope": "solidity",
    "body": ["/**", "* @notice $1", "* @dev $2", "* @param $3", "*/"]
  },
  "kresko: stub natspec for contract": {
    "prefix": "kresko_natspec_contract",
    "description": "Contract natspec template.",
    "scope": "solidity",
    "body": ["/** ", "* @title $1", "* @author Kresko", "* @notice $2", "* @dev $3", "*/"]
  },
  "kresko: disable solhint rules in forge test/script": {
    "prefix": "kresko_solhint_disable",
    "description": "Disable solhint rules in forge files",
    "scope": "solidity",
    "body": [
      "// solhint-disable state-visibility, max-states-count, var-name-mixedcase, no-global-import, const-name-snakecase, no-empty-blocks, no-console"
    ]
  },
  "kresko: forge test template with workspace tools": {
    "isFileTemplate": true,
    "prefix": "kresko_forge_test_template",
    "scope": "solidity",
    "body": [
      "// solhint-disable state-visibility, max-states-count, var-name-mixedcase, no-global-import, const-name-snakecase, no-empty-blocks, no-console",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {TestBase} from \"kresko-lib/utils/TestBase.t.sol\";",
      "import {Help, Log} from \"kresko-lib/utils/Libs.sol\";",
      "import {ShortAssert} from \"kresko-lib/utils/ShortAssert.sol\";",
      "",
      "contract NewTest is TestBase(\"MNEMONIC_DEVNET\") {",
      "    using Help for *;",
      "    using ShortAssert for *;",
      "    using Log for *;",
      "",
      "    address internal addr;",
      "    uint256 internal value;",
      "",
      "    function setUp() public {",
      "        console2.log(\"setup\");",
      "        addr = address(0x123);",
      "        value = 1;",
      "    }",
      "",
      "    function testSomething() public {",
      "        value.eq(1);",
      "        addr.eq(address(0x123));",
      "    }",
      "}"
    ],
    "description": "Base for a new forge test using workspace utils"
  },

  "kresko: forge test template with protocol deployment": {
    "isFileTemplate": true,
    "prefix": "kresko_forge_test_protocol_template",
    "scope": "solidity",
    "body": [
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {ShortAssert} from \"kresko-lib/utils/ShortAssert.sol\";",
      "import {Help, Log} from \"kresko-lib/utils/Libs.sol\";",
      "import {Role} from \"common/Constants.sol\";",
      "import {Local} from \"scripts/deploy/Run.s.sol\";",
      "import {Test} from \"forge-std/Test.sol\";",
      "import {state} from \"scripts/deploy/base/DeployState.s.sol\";",
      "",
      "// solhint-disable state-visibility, max-states-count, var-name-mixedcase, no-global-import, const-name-snakecase, no-empty-blocks, no-console",
      "",
      "contract NewProtocolTest is Local, Test {",
      "    using ShortAssert for *;",
      "    using Help for *;",
      "    using Log for *;",
      "",
      "    bytes redstoneCallData;",
      "",
      "    function setUp() public {",
      "        // enableLogger();",
      "        redstoneCallData = getRedstonePayload(initialPrices);",
      "        address deployer = getAddr(0);",
      "        address admin = getAddr(0);",
      "        address treasury = getAddr(10);",
      "        vm.deal(deployer, 100 ether);",
      "",
      "        UserCfg[] memory userCfg = super.createUserConfig(testUsers);",
      "        AssetsOnChain memory assets = deploy(deployer, admin, treasury);",
      "        setupUsers(userCfg, assets);",
      "",
      "        prank(getAddr(0));"
      "        call(kresko.swapSCDP.selector, getAddr(0), address(state().kiss), krETH.addr, 1000e18, 0, initialPrices);",
      "    }",
      "",
      "    function testSomething() external {",
      "        uint256 cr = staticCall(kresko.getCollateralRatioSCDP.selector, initialPrices);",
      "        cr.gt(0, \"cr-zero\");",
      "    }",
      "}"
    ],
    "description": "Base for a new forge test using minimal protocol deployment"
  }
}
