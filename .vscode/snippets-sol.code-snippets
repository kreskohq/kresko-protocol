{
  "kresko: default spdx and pragma": {
    "prefix": "kresko_spdx_pragma",
    "description": "Add default SPDX license identifier and pragma solidity version.",
    "scope": "solidity",
    "body": ["// SPDX-License-Identifier: ${2:BUSL-1.1}", "pragma solidity ${1:^0.8.0};", ""]
  },
  "kresko: stub natspec for function": {
    "prefix": "kresko_natspec_function",
    "description": "Function natspec template",
    "scope": "solidity",
    "body": ["/**", "* @notice $1", "* @dev $2", "* @param $3", "*/"]
  },
  "kresko: stub natspec for contract": {
    "prefix": "kresko_natspec_contract",
    "description": "Contract natspec template.",
    "scope": "solidity",
    "body": ["/** ", "* @title $1", "* @author Kresko", "* @notice $2", "* @dev $3", "*/"]
  },
  "kresko: disable solhint rules in forge test/script": {
    "prefix": "kresko_solhint_disable",
    "description": "Disable solhint rules in forge files",
    "scope": "solidity",
    "body": [
      "// solhint-disable state-visibility, max-states-count, var-name-mixedcase, no-global-import, const-name-snakecase, no-empty-blocks, no-console"
    ]
  },
  "kresko: forge test template with workspace tools": {
    "isFileTemplate": true,
    "prefix": "kresko_forge_test_template",
    "body": [
      "// solhint-disable state-visibility, max-states-count, var-name-mixedcase, no-global-import, const-name-snakecase, no-empty-blocks, no-console",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {TestBase} from \"kresko-lib/utils/TestBase.sol\";",
      "import {LibTest} from \"kresko-lib/utils/LibTest.sol\";",
      "",
      "import {WadRay} from \"libs/WadRay.sol\";",
      "import {PercentageMath} from \"libs/PercentageMath.sol\";",
      "import {console2} from \"forge-std/console2.sol\";",
      "",
      "using WadRay for uint256;",
      "using PercentageMath for uint256;",
      "",
      "contract NewTest is TestBase(\"MNEMONIC_DEVNET\") {",
      "    using LibTest for *;",
      "",
      "    address internal addr;",
      "    uint256 internal value;",
      "",
      "    function setUp() public {",
      "        console2.log(\"setup\");",
      "        addr = address(0x123);",
      "        value = 1;",
      "    }",
      "",
      "    function testSomething() public {",
      "        value.equals(1);",
      "        addr.equals(address(0x123));",
      "    }",
      "}"
    ],
    "description": "Base for a new forge test using workspace utils"
  },
  "kresko: forge test template with protocol deployment": {
    "isFileTemplate": true,
    "prefix": "kresko_forge_test_protocol_template",
    "body": [
      "// solhint-disable state-visibility, max-states-count, var-name-mixedcase, no-global-import, const-name-snakecase, no-empty-blocks, no-console",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity ^0.8.0;",
      "",
      "import {LibTest} from \"kresko-lib/utils/LibTest.sol\";",
      "import {TestBase} from \"kresko-lib/utils/TestBase.sol\";",
      "import {KreskoForgeUtils} from \"scripts/utils/KreskoForgeUtils.s.sol\";",
      "import {PercentageMath} from \"libs/PercentageMath.sol\";",
      "import {WadRay} from \"libs/WadRay.sol\";",
      "import {Asset} from \"common/Types.sol\";",
      "import {console2} from \"forge-std/console2.sol\";",
      "",
      "contract NewKreskoTest is TestBase(\"MNEMONIC_TESTNET\"), KreskoForgeUtils {",
      "    using LibTest for *;",
      "    using WadRay for uint256;",
      "    using PercentageMath for uint256;",
      "",
      "    MockConfig usdConfig = MockConfig({symbol: \"USDC\", price: 1e8, setFeeds: true, dec: 18, feedDec: 8});",
      "    MockConfig krETHConfig = MockConfig({symbol: \"krETH\", price: 2000e8, setFeeds: true, dec: 18, feedDec: 8});",
      "    MockTokenInfo internal usdc;",
      "    KrAssetInfo internal krETH;",
      "",
      "    string usdcPrice = \"USDC:1:8\";",
      "    string ethPrice = \"ETH:2000:8\";",
      "    string initialPrices = \"USDC:1:8,ETH:2000:8\";",
      "",
      "    function setUp() public users(address(11), address(22), address(33)) {",
      "        deployCfg = CoreConfig({",
      "            admin: TEST_ADMIN,",
      "            seqFeed: getMockSeqFeed(),",
      "            minterMcr: 150e2,",
      "            minterLt: 140e2,",
      "            scdpMcr: 200e2,",
      "            scdpLt: 150e2,",
      "            sdiPrecision: 8,",
      "            oraclePrecision: 8,",
      "            staleTime: 86401,",
      "            council: getMockSafe(TEST_ADMIN),",
      "            treasury: TEST_TREASURY",
      "        });",
      "        prank(deployCfg.admin);",
      "        kresko = deployDiamond(deployCfg);",
      "        proxyFactory = deployProxyFactory(TEST_ADMIN);",
      "        vm.warp(3601);",
      "        usdc = mockCollateral(bytes32(\"USDC\"), usdConfig, ext_full);",
      "        krETH = mockKrAsset(bytes32(\"ETH\"), address(0), krETHConfig, kr_default, deployCfg);",
      "    }",
      "",
      "    function testSomething() public {",
      "        kresko.getAsset(usdc.addr).ticker.equals(\"USDC\");",
      "        kresko.getAsset(krETH.addr).ticker.equals(\"ETH\");",
      "    }",
      "}"
    ],
    "description": "Base for a new forge test using minimal protocol deployment"
  }
}
