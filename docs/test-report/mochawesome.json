{
  "stats": {
    "suites": 90,
    "tests": 277,
    "passes": 256,
    "pending": 21,
    "failures": 0,
    "start": "2024-02-01T21:19:00.788Z",
    "end": "2024-02-01T21:20:32.194Z",
    "duration": 91406,
    "testsRegistered": 277,
    "passPercent": 100,
    "pendingPercent": 7.581227436823104,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6c98671b-2670-4fe3-baf8-02cb537bf730",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "40076e21-e3b4-4412-b7e1-3b54458b63f6",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.assetValuesFixture)();\nf.user = hre.users.userEight;\nUser = hre.Diamond.connect(f.user);",
              "err": {},
              "uuid": "d2145fab-72db-4ba4-be2d-8c2fe340514e",
              "parentUUID": "40076e21-e3b4-4412-b7e1-3b54458b63f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9822cf64-6438-4ebb-bb61-fee02b0da490",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\n;\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "470608bd-85b7-46ac-b51f-df1148884633",
                  "parentUUID": "9822cf64-6438-4ebb-bb61-fee02b0da490",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\n;\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "959d1bae-ff81-4de5-ad68-40a9e1ec29aa",
                  "parentUUID": "9822cf64-6438-4ebb-bb61-fee02b0da490",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\n;\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "d42cf7e2-ae22-4864-a32c-4155758333b2",
                  "parentUUID": "9822cf64-6438-4ebb-bb61-fee02b0da490",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.depositCollateral(f.user.address, f.CollateralAsset.address, (0, _values.toBig)(10));\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, (0, _values.toBig)(10, 8));\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, (0, _values.toBig)(10, 21));\nconst expectedDepositValue = (0, _values.toBig)(150, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "d5d5fb63-0a4d-444c-9684-2fbcfb81e444",
                  "parentUUID": "9822cf64-6438-4ebb-bb61-fee02b0da490",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "470608bd-85b7-46ac-b51f-df1148884633",
                "959d1bae-ff81-4de5-ad68-40a9e1ec29aa",
                "d42cf7e2-ae22-4864-a32c-4155758333b2",
                "d5d5fb63-0a4d-444c-9684-2fbcfb81e444"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "5c5a25c7-76ac-4191-b0e7-558f8ab8e842",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral({\n    account: f.user.address,\n    asset: f.CollateralAsset.address,\n    amount: depositAmount,\n    collateralIndex: withdrawIndex,\n    receiver: f.user.address\n}, await hre.updateData());\nconst balance = await f.CollateralAsset.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance));",
                  "err": {},
                  "uuid": "27919043-febf-4f28-9ca2-4c7f9c14712a",
                  "parentUUID": "5c5a25c7-76ac-4191-b0e7-558f8ab8e842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset8Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral({\n    account: f.user.address,\n    asset: f.CollateralAsset8Dec.address,\n    amount: depositAmount,\n    collateralIndex: withdrawIndex,\n    receiver: f.user.address\n}, await hre.updateData());\nconst balance = await f.CollateralAsset8Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 8));",
                  "err": {},
                  "uuid": "4410f419-caa0-445a-b543-8cc8b0de450e",
                  "parentUUID": "5c5a25c7-76ac-4191-b0e7-558f8ab8e842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst collateralIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset21Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral({\n    account: f.user.address,\n    asset: f.CollateralAsset21Dec.address,\n    amount: depositAmount,\n    collateralIndex,\n    receiver: f.user.address\n}, await hre.updateData());\nconst balance = await f.CollateralAsset21Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 21));",
                  "err": {},
                  "uuid": "ceaa41f8-503a-4b23-b554-c97b4a855eb7",
                  "parentUUID": "5c5a25c7-76ac-4191-b0e7-558f8ab8e842",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27919043-febf-4f28-9ca2-4c7f9c14712a",
                "4410f419-caa0-445a-b543-8cc8b0de450e",
                "ceaa41f8-503a-4b23-b554-c97b4a855eb7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 194,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2361783f-1c8f-45f1-bb3e-42132092a4d1",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 154,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals) // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\n;\nawait User.mintKreskoAsset({\n    account: f.user.address,\n    krAsset: f.KreskoAsset.address,\n    amount: mintAmount,\n    receiver: f.user.address\n}, await hre.updateData());\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)) // 2.475\n;",
                  "err": {},
                  "uuid": "72115922-f4d2-4e93-abc4-5fa9604dbe1f",
                  "parentUUID": "2361783f-1c8f-45f1-bb3e-42132092a4d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 155,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals) // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\n;\nawait User.mintKreskoAsset({\n    account: f.user.address,\n    krAsset: f.KreskoAsset.address,\n    amount: mintAmount,\n    receiver: f.user.address\n}, await hre.updateData());\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)) // 2.475\n;",
                  "err": {},
                  "uuid": "a925228b-9cc0-48c8-b79d-aa7ab863599d",
                  "parentUUID": "2361783f-1c8f-45f1-bb3e-42132092a4d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 161,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals) // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\n;\nawait User.mintKreskoAsset({\n    account: f.user.address,\n    krAsset: f.KreskoAsset.address,\n    amount: mintAmount,\n    receiver: f.user.address\n}, await hre.updateData());\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)) // 2.475\n;",
                  "err": {},
                  "uuid": "69627274-a40d-424a-a30e-ccd09d7c28b2",
                  "parentUUID": "2361783f-1c8f-45f1-bb3e-42132092a4d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72115922-f4d2-4e93-abc4-5fa9604dbe1f",
                "a925228b-9cc0-48c8-b79d-aa7ab863599d",
                "69627274-a40d-424a-a30e-ccd09d7c28b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 470,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f6458fd2-5ba8-4918-8a63-f3b592bf0057",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "7301004a-88ae-4de7-a198-d246de3300b9",
              "parentUUID": "f6458fd2-5ba8-4918-8a63-f3b592bf0057",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0a54a5aa-6b27-46b5-b1d7-647271755cfe",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "e9b716fe-e227-4758-83fd-4c9b06f6c244",
                  "parentUUID": "0a54a5aa-6b27-46b5-b1d7-647271755cfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = f.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "5ecf51e7-da0e-4287-b5cb-180e1877a068",
                  "parentUUID": "0a54a5aa-6b27-46b5-b1d7-647271755cfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = f.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "a5fa2f54-2e1c-4e20-82d0-4fe22eacd5cb",
                  "parentUUID": "0a54a5aa-6b27-46b5-b1d7-647271755cfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9b716fe-e227-4758-83fd-4c9b06f6c244",
                "5ecf51e7-da0e-4287-b5cb-180e1877a068",
                "a5fa2f54-2e1c-4e20-82d0-4fe22eacd5cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "aa06eabc-f056-47a5-ab26-f282debf800e",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "5d220a56-761c-46f0-9416-bdcc71881b1b",
              "parentUUID": "aa06eabc-f056-47a5-ab26-f282debf800e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8aa2fa57-58b6-4f80-8c5f-23c1f267f7df",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.owner()).to.equal(hre.addr.deployer);",
                  "err": {},
                  "uuid": "7b6aec3d-501f-41aa-8662-fb63cc9c8dfa",
                  "parentUUID": "8aa2fa57-58b6-4f80-8c5f-23c1f267f7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "bb918ca2-0fe5-4804-b65f-5f9f50101e90",
                  "parentUUID": "8aa2fa57-58b6-4f80-8c5f-23c1f267f7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await hre.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "664d9976-c830-4c2a-bbea-6e66182ca0f6",
                  "parentUUID": "8aa2fa57-58b6-4f80-8c5f-23c1f267f7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\nawait hre.Diamond.connect(pendingOwner).acceptOwnership();\n(0, _chai.expect)(await hre.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "8086d1a2-3629-4fff-b244-ed7e05f92221",
                  "parentUUID": "8aa2fa57-58b6-4f80-8c5f-23c1f267f7df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b6aec3d-501f-41aa-8662-fb63cc9c8dfa",
                "bb918ca2-0fe5-4804-b65f-5f9f50101e90",
                "664d9976-c830-4c2a-bbea-6e66182ca0f6",
                "8086d1a2-3629-4fff-b244-ed7e05f92221"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2844601c-2914-4a14-87d8-1e4cd95ebf13",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "d5a437df-db30-42a4-895f-13b7f2c83fc1",
              "parentUUID": "2844601c-2914-4a14-87d8-1e4cd95ebf13",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f109b500-11e1-4088-9e4e-cd5ae594019f",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 1015,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hre.ethers.utils.id('kresko.test.operator');\nconst isTestOperator = await hre.Diamond.hasRole(TEST_OPERATOR_ROLE, hre.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await hre.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], hre.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator() // Retrieved from SmockStorage\n;\n(0, _chai.expect)(operatorFromNewStorage).to.equal(hre.addr.userOne);",
                  "err": {},
                  "uuid": "66c99982-e040-4aeb-9921-22489bcb0984",
                  "parentUUID": "f109b500-11e1-4088-9e4e-cd5ae594019f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 492,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: 'SmockFacet',\n    initializerName: 'SmockInit',\n    initializerArgs: hre.addr.userOne\n});\nconst facetsBefore = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: 'SmockFacet'\n});\nconst facetsAfter = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "a41bdfe9-e445-4548-88c2-ba0225eaadc7",
                  "parentUUID": "f109b500-11e1-4088-9e4e-cd5ae594019f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondStateFacet\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.notAdmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hre.Diamond.facetAddress(signature);\nconst functions = await hre.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hre.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hre.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await hre.ethers.getContractAt('DSCore', hre.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(hre.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(hre.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.notAdmin).acceptOwnership()).to.be.reverted;",
                  "err": {},
                  "uuid": "276d054c-bac6-4a55-8207-32c6ebd325d7",
                  "parentUUID": "f109b500-11e1-4088-9e4e-cd5ae594019f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.notAdmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hre.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hre.deploy('DiamondStateFacet', {\n    deploymentName: 'DiamondStateFacet2'\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.notAdmin).acceptOwnership()).to.be.reverted;\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hre.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hre.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)(hre.Diamond.connect(hre.users.userOne).acceptOwnership());\nconst currentOwner = await hre.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "e116f1d0-b372-492f-9cd5-8ab36dee6b41",
                  "parentUUID": "f109b500-11e1-4088-9e4e-cd5ae594019f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 927,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock('SmockInit');\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hre.Diamond.executeInitializer(tx.to, tx.data);\n(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "eac76abc-a885-4d4d-86f8-7bcf4bd5113d",
                  "parentUUID": "f109b500-11e1-4088-9e4e-cd5ae594019f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 1641,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await hre.ethers.getContractAt('SmockFacet', hre.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock('SmockFacet2');\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hre.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hre.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hre.ethers.getContractAt('SmockFacet2', hre.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "516fbe06-8e96-4d94-97bb-1e0fcf103400",
                  "parentUUID": "f109b500-11e1-4088-9e4e-cd5ae594019f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66c99982-e040-4aeb-9921-22489bcb0984",
                "a41bdfe9-e445-4548-88c2-ba0225eaadc7",
                "276d054c-bac6-4a55-8207-32c6ebd325d7",
                "e116f1d0-b372-492f-9cd5-8ab36dee6b41",
                "eac76abc-a885-4d4d-86f8-7bcf4bd5113d",
                "516fbe06-8e96-4d94-97bb-1e0fcf103400"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "582c073e-7c99-4840-8f4c-661d61148d78",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/03-protocol.ts",
          "file": "/src/test/diamond/03-protocol.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.defaultFixture)();",
              "err": {},
              "uuid": "c520a09c-2f84-4ce0-bc89-29c995565444",
              "parentUUID": "582c073e-7c99-4840-8f4c-661d61148d78",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91220433-56b1-40c7-b03d-192d58a6281f",
              "title": "#protocol initialization",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/03-protocol.ts",
              "file": "/src/test/diamond/03-protocol.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initialized all facets",
                  "fullTitle": "Diamond #protocol initialization initialized all facets",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hre.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._deploy.diamondFacets,\n    ..._deploy.minterFacets,\n    ..._deploy.scdpFacets,\n    ..._deploy.commonFacets,\n    ..._deploy.peripheryFacets\n].map(async (name)=>{\n    const deployment = await hre.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "f7d609f2-44ad-4844-9797-001cc4391d09",
                  "parentUUID": "91220433-56b1-40c7-b03d-192d58a6281f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "initialized correct state",
                  "fullTitle": "Diamond #protocol initialization initialized correct state",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst GatingManager = await hre.deployments.get('GatingManager');\nconst { args } = await (0, _deploy.getCommonInitializer)(hre, GatingManager.address);\nconst { args: minterArgs } = await (0, _deploy.getMinterInitializer)(hre);\nconst { args: scdpArgs } = await (0, _deploy.getSCDPInitializer)(hre);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.SAFETY_COUNCIL, hre.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getFeeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await hre.Diamond.getPythEndpoint()).to.equal(args.pythEp);\n(0, _chai.expect)(await hre.Diamond.getMinCollateralRatioMinter()).to.equal(minterArgs.minCollateralRatio);\n(0, _chai.expect)(await hre.Diamond.getLiquidationThresholdMinter()).to.equal(minterArgs.liquidationThreshold);\n(0, _chai.expect)(await hre.Diamond.getMinDebtValueMinter()).to.equal(minterArgs.minDebtValue);\n(0, _chai.expect)(await hre.Diamond.getMaxLiquidationRatioMinter()).to.equal(Number(minterArgs.liquidationThreshold) + 0.01e4);\nconst scdpParams = await hre.Diamond.getParametersSCDP();\n(0, _chai.expect)(scdpParams.minCollateralRatio).to.equal(scdpArgs.minCollateralRatio);\n(0, _chai.expect)(scdpParams.liquidationThreshold).to.equal(scdpArgs.liquidationThreshold);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(args.maxPriceDeviationPct);",
                  "err": {},
                  "uuid": "dc98952a-9d6f-4596-977c-0a7f19ed5c59",
                  "parentUUID": "91220433-56b1-40c7-b03d-192d58a6281f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can modify configuration parameters",
                  "fullTitle": "Diamond #protocol initialization can modify configuration parameters",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(hre.Diamond.setMaxPriceDeviationPct(0.05e4)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setSequencerGracePeriod(1000)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setDefaultOraclePrecision(9)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setMinDebtValueMinter(20e8)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getMinDebtValueMinter()).to.equal(20e8);\n(0, _chai.expect)(await hre.Diamond.getDefaultOraclePrecision()).to.equal(9);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(0.05e4);\n(0, _chai.expect)(await hre.Diamond.getSequencerGracePeriod()).to.equal(1000);",
                  "err": {},
                  "uuid": "970bccbf-5fa2-4919-9d5c-4c79ee2d6278",
                  "parentUUID": "91220433-56b1-40c7-b03d-192d58a6281f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7d609f2-44ad-4844-9797-001cc4391d09",
                "dc98952a-9d6f-4596-977c-0a7f19ed5c59",
                "970bccbf-5fa2-4919-9d5c-4c79ee2d6278"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 133,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6d11c01d-1126-48ab-b530-d75bb871deb3",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f7d947a8-9928-4474-8b0b-88453b484cb1",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f72b2cd7-3364-4888-8138-53f54803f8cc",
                  "parentUUID": "f7d947a8-9928-4474-8b0b-88453b484cb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "f72b2cd7-3364-4888-8138-53f54803f8cc"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fbc61c4a-9990-4e88-bc62-2a43a335e4f5",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5fcbdf2f-c206-4c09-986a-9b1110b3ef7a",
                  "parentUUID": "fbc61c4a-9990-4e88-bc62-2a43a335e4f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "5fcbdf2f-c206-4c09-986a-9b1110b3ef7a"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "27f4272e-7504-4512-b545-d631229d2a84",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.kreskoAssetFixture)({\n    name,\n    symbol,\n    underlyingToken: _viem.zeroAddress\n});",
              "err": {},
              "uuid": "1a2806fc-c6e7-4353-93fc-26a1357b4150",
              "parentUUID": "27f4272e-7504-4512-b545-d631229d2a84",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1e80de59-3848-4e00-8c91-68e7d4da6be5",
              "title": "KreskoAsset",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset KreskoAsset sets correct state",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await f.KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "4ed55ed8-0a35-4f9e-89b5-0ee755df49a7",
                  "parentUUID": "1e80de59-3848-4e00-8c91-68e7d4da6be5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset KreskoAsset can reinitialize metadata",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "582ed52f-759d-4855-ab32-a944d10ac9b4",
                  "parentUUID": "1e80de59-3848-4e00-8c91-68e7d4da6be5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "c37d0ddf-ec58-4fab-a779-9aa13750036d",
                  "title": "#initialization",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
                  "file": "/src/test/krasset/00-init.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "cant initialize twice",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization cant initialize twice",
                      "timedOut": false,
                      "duration": 11,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.KreskoAsset.initialize(name, symbol, 18, hre.addr.deployer, hre.Diamond.address, hre.ethers.constants.AddressZero, hre.addr.deployer, 0, 0)).to.be.reverted;",
                      "err": {},
                      "uuid": "9adb1f22-1c6a-4707-98cc-2fa7be44bfd8",
                      "parentUUID": "c37d0ddf-ec58-4fab-a779-9aa13750036d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cant initialize implementation",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization cant initialize implementation",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "e932c721-29e6-4bc4-a313-5970f2604893",
                      "parentUUID": "c37d0ddf-ec58-4fab-a779-9aa13750036d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "sets correct state",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization sets correct state",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await f.KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.DEFAULT_ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                      "err": {},
                      "uuid": "44d89be2-ba26-49c3-8afe-7af6ab607f2c",
                      "parentUUID": "c37d0ddf-ec58-4fab-a779-9aa13750036d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can reinitialize metadata",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization can reinitialize metadata",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(newSymbol);",
                      "err": {},
                      "uuid": "c12fe700-566e-4d27-956c-7a01e993c902",
                      "parentUUID": "c37d0ddf-ec58-4fab-a779-9aa13750036d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9adb1f22-1c6a-4707-98cc-2fa7be44bfd8",
                    "44d89be2-ba26-49c3-8afe-7af6ab607f2c",
                    "c12fe700-566e-4d27-956c-7a01e993c902"
                  ],
                  "failures": [],
                  "pending": [
                    "e932c721-29e6-4bc4-a313-5970f2604893"
                  ],
                  "skipped": [],
                  "duration": 54,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "4ed55ed8-0a35-4f9e-89b5-0ee755df49a7",
                "582ed52f-759d-4855-ab32-a944d10ac9b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 33,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c8ea9895-164a-438a-ba46-d56b1e4b301c",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(f.KreskoAssetAnchor.initialize(f.KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.reverted;",
                  "err": {},
                  "uuid": "9340f7a8-8065-4d19-ad80-5be00e886ff2",
                  "parentUUID": "c8ea9895-164a-438a-ba46-d56b1e4b301c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(anchorName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(anchorSymbol);\n(0, _chai.expect)(await f.KreskoAssetAnchor.asset()).to.equal(f.KreskoAsset.address);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalAssets()).to.equal(await f.KreskoAsset.totalSupply());\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "665bbe19-d81f-45db-9f39-5ffc56fc066e",
                  "parentUUID": "c8ea9895-164a-438a-ba46-d56b1e4b301c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hre.deployments.get(anchorSymbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(hre.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await hre.ethers.getContractAt('KreskoAssetAnchor', implementationAddress);\nawait (0, _chai.expect)(KreskoAssetAnchorImpl.initialize(f.KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.reverted;",
                  "err": {},
                  "uuid": "dce1d15b-7002-4627-9f89-3f96ca9aedb2",
                  "parentUUID": "c8ea9895-164a-438a-ba46-d56b1e4b301c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(newSymbol);\nawait f.KreskoAssetAnchor.reinitializeERC20(name, symbol, 3);",
                  "err": {},
                  "uuid": "fc033ad7-375d-465d-9344-5ada6bb508fe",
                  "parentUUID": "c8ea9895-164a-438a-ba46-d56b1e4b301c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9340f7a8-8065-4d19-ad80-5be00e886ff2",
                "665bbe19-d81f-45db-9f39-5ffc56fc066e",
                "dce1d15b-7002-4627-9f89-3f96ca9aedb2",
                "fc033ad7-375d-465d-9344-5ada6bb508fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fb45b53e-90e7-4d33-b0f8-24239e2824fd",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH',\n    underlyingToken: _viem.zeroAddress\n}));\nthis.mintAmount = 125;\nthis.owner = hre.users.deployer;\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "4b355e5a-2223-4185-ae21-831f950a7c64",
              "parentUUID": "fb45b53e-90e7-4d33-b0f8-24239e2824fd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "645c679b-160f-4461-83e1-c665d17ec243",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "5e92cf69-2de2-4ffa-b167-1b62065bcecb",
                  "parentUUID": "645c679b-160f-4461-83e1-c665d17ec243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "dd8ed790-6cfa-4880-9b12-44ca1302ae0f",
                  "parentUUID": "645c679b-160f-4461-83e1-c665d17ec243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.reverted;\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "c164d095-ee79-49ba-a3e8-77dd6bb36d89",
                  "parentUUID": "645c679b-160f-4461-83e1-c665d17ec243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.renounceRole(_roles.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount)).to.be.reverted;",
                  "err": {},
                  "uuid": "66e8f02a-8839-409c-975d-ddcf0c608a87",
                  "parentUUID": "645c679b-160f-4461-83e1-c665d17ec243",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e92cf69-2de2-4ffa-b167-1b62065bcecb",
                "dd8ed790-6cfa-4880-9b12-44ca1302ae0f",
                "c164d095-ee79-49ba-a3e8-77dd6bb36d89",
                "66e8f02a-8839-409c-975d-ddcf0c608a87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 60,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "733f4b50-e084-4d96-90c4-5e016ec0b8fa",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, this.owner.address);",
                  "err": {},
                  "uuid": "c2013db7-6037-4a1d-b125-12d1c7c788fc",
                  "parentUUID": "733f4b50-e084-4d96-90c4-5e016ec0b8fa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "7c13bf30-7342-417f-a28e-a6c73a0c58bd",
                  "parentUUID": "733f4b50-e084-4d96-90c4-5e016ec0b8fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).approve(hre.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "03caeb2e-f072-429e-965b-d18562c0b2d0",
                  "parentUUID": "733f4b50-e084-4d96-90c4-5e016ec0b8fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await KreskoAsset.balanceOf(hre.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "df204aed-34ea-49f8-b15e-6661596705d9",
                  "parentUUID": "733f4b50-e084-4d96-90c4-5e016ec0b8fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.connect(hre.users.userTwo).burn(hre.users.userOne.address, this.mintAmount)).to.be.revertedWithCustomError(KreskoAsset, 'AccessControlUnauthorizedAccount').withArgs(hre.users.userTwo.address, _roles.Role.OPERATOR);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "eb3defe9-2188-4852-84e9-c58d99933c52",
                  "parentUUID": "733f4b50-e084-4d96-90c4-5e016ec0b8fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c13bf30-7342-417f-a28e-a6c73a0c58bd",
                "03caeb2e-f072-429e-965b-d18562c0b2d0",
                "df204aed-34ea-49f8-b15e-6661596705d9",
                "eb3defe9-2188-4852-84e9-c58d99933c52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6519cc63-2ae5-427f-943f-c5ec8cb74fa7",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 1077,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await hre.deployments.fixture('diamond-init');\nif (result.Diamond) {\n    hre.Diamond = await hre.getContractOrFork('Kresko');\n}\nKreskoAsset = (await (0, _createkrasset.createKrAsset)('krSYMBOL', 'Kresko Asset: SYMBOL', 18, _viem.zeroAddress)).KreskoAsset;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "93fad941-9cb9-451c-bc21-db94d6a54cbc",
              "parentUUID": "6519cc63-2ae5-427f-943f-c5ec8cb74fa7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0aaa9bea-97fc-48fc-8379-a3c7a76c77ba",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "2b98a949-1acb-424f-8b18-bbc1e16e6e4a",
                  "parentUUID": "0aaa9bea-97fc-48fc-8379-a3c7a76c77ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "98539ee6-a36a-44d8-9b9b-a0a86f7421d5",
                  "parentUUID": "0aaa9bea-97fc-48fc-8379-a3c7a76c77ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "52dd7f3f-25f1-43c4-9734-22a079f9ee75",
                  "parentUUID": "0aaa9bea-97fc-48fc-8379-a3c7a76c77ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 11,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount);",
                      "err": {},
                      "uuid": "4b91ed97-46b3-42f4-910f-9494fb3bcfd3",
                      "parentUUID": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "a33a3123-6c23-403b-83d7-7be0805fcd71",
                      "parentUUID": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "4e5516f6-d421-43ef-b983-cae6ac9fc728",
                      "parentUUID": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "18b538a8-af24-4643-92d8-2bf27bb05cf1",
                      "parentUUID": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "5ffbe1a6-2980-469b-a4df-e9336e6c2b2e",
                      "parentUUID": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "4697c356-dda3-448c-9c02-9ed11e1b1751",
                      "parentUUID": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "2d8bd881-822f-427f-89f7-bfd2856e7f2a",
                      "parentUUID": "a153315c-fd84-4cf0-b4d3-c28b00e190c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4b91ed97-46b3-42f4-910f-9494fb3bcfd3",
                    "a33a3123-6c23-403b-83d7-7be0805fcd71",
                    "4e5516f6-d421-43ef-b983-cae6ac9fc728",
                    "18b538a8-af24-4643-92d8-2bf27bb05cf1",
                    "5ffbe1a6-2980-469b-a4df-e9336e6c2b2e",
                    "4697c356-dda3-448c-9c02-9ed11e1b1751",
                    "2d8bd881-822f-427f-89f7-bfd2856e7f2a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 100,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "75eca25b-77a9-4bb3-8125-7bc8533e89db",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "a2c00001-7a55-42d9-9e9a-3ed9f94e6ea1",
                      "parentUUID": "75eca25b-77a9-4bb3-8125-7bc8533e89db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "eac0a8bf-c94f-455b-afb1-dc11c5652ebe",
                      "parentUUID": "75eca25b-77a9-4bb3-8125-7bc8533e89db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "bbdd9453-476c-4923-a26b-dfeb82b00f4d",
                      "parentUUID": "75eca25b-77a9-4bb3-8125-7bc8533e89db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "44cc232e-5fe0-4772-afe2-f96817bc6d1d",
                      "parentUUID": "75eca25b-77a9-4bb3-8125-7bc8533e89db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "ff9e0dc9-bfc5-40b9-a81d-6720bb870c52",
                      "parentUUID": "75eca25b-77a9-4bb3-8125-7bc8533e89db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "fe4eb14b-3bed-4482-a5d1-e5d43e13f687",
                      "parentUUID": "75eca25b-77a9-4bb3-8125-7bc8533e89db",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a2c00001-7a55-42d9-9e9a-3ed9f94e6ea1",
                    "eac0a8bf-c94f-455b-afb1-dc11c5652ebe",
                    "bbdd9453-476c-4923-a26b-dfeb82b00f4d",
                    "44cc232e-5fe0-4772-afe2-f96817bc6d1d",
                    "ff9e0dc9-bfc5-40b9-a81d-6720bb870c52",
                    "fe4eb14b-3bed-4482-a5d1-e5d43e13f687"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 199,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "2b98a949-1acb-424f-8b18-bbc1e16e6e4a",
                "98539ee6-a36a-44d8-9b9b-a0a86f7421d5",
                "52dd7f3f-25f1-43c4-9734-22a079f9ee75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "e92f1de6-1429-4eb7-9560-8984a693aa26",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 816,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await hre.deployments.fixture('diamond-init');\nif (result.Diamond) {\n    hre.Diamond = await hre.getContractOrFork('Kresko');\n}\nconst deployments = await (0, _createkrasset.createKrAsset)('krSYMBOL', 'Kresko Asset: SYMBOL', 18, _viem.zeroAddress);\nKreskoAsset = deployments.KreskoAsset;\nKreskoAssetAnchor = deployments.KreskoAssetAnchor;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer);\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_roles.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "15010dab-962f-403b-8451-c33f472e7767",
              "parentUUID": "e92f1de6-1429-4eb7-9560-8984a693aa26",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "065329ee-1b98-451d-beca-64f2f5a37bb9",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount.add(_mocks.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "446be92b-5ba9-45e5-a9f6-37083f3592ad",
                  "parentUUID": "065329ee-1b98-451d-beca-64f2f5a37bb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "856a2204-f3fa-414f-bd5c-8728b959592b",
                  "parentUUID": "065329ee-1b98-451d-beca-64f2f5a37bb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f7a396c5-50cc-4521-9734-4ff3b24757d6",
                  "parentUUID": "065329ee-1b98-451d-beca-64f2f5a37bb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ab54f5c0-2125-4b39-8e8f-470dd8a4c841",
                  "parentUUID": "065329ee-1b98-451d-beca-64f2f5a37bb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5054421c-5af9-44ef-975f-83ad0be36bc5",
                  "parentUUID": "065329ee-1b98-451d-beca-64f2f5a37bb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "25b2fbcd-d8a0-4c7b-a3d8-f0251c6496b9",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "04157c6a-2f7a-4532-aff1-6f7bc43f439b",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d27176c3-13ad-4421-8dd4-b3c909068dec",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "abbbd0df-f1cf-48a0-88c8-e9edf80939c8",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6316f76e-7492-49ed-9b35-691a0c7e5595",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "1db0ca12-ffad-4517-9ba2-d7bbe571457d",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c0dd28be-cb6e-47ad-83b1-d6eb875a1bc0",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4632e802-5890-45e4-8a65-02497ad97a5f",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c6a3e21c-dd7c-4bc7-b697-a3e8ca9e4458",
                          "parentUUID": "1e14c09a-bad1-4151-84a6-0fc3ed586e2b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "04157c6a-2f7a-4532-aff1-6f7bc43f439b",
                        "d27176c3-13ad-4421-8dd4-b3c909068dec",
                        "abbbd0df-f1cf-48a0-88c8-e9edf80939c8",
                        "6316f76e-7492-49ed-9b35-691a0c7e5595",
                        "1db0ca12-ffad-4517-9ba2-d7bbe571457d",
                        "c0dd28be-cb6e-47ad-83b1-d6eb875a1bc0",
                        "4632e802-5890-45e4-8a65-02497ad97a5f",
                        "c6a3e21c-dd7c-4bc7-b697-a3e8ca9e4458"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "446be92b-5ba9-45e5-a9f6-37083f3592ad"
              ],
              "failures": [],
              "pending": [
                "856a2204-f3fa-414f-bd5c-8728b959592b",
                "f7a396c5-50cc-4521-9734-4ff3b24757d6",
                "ab54f5c0-2125-4b39-8e8f-470dd8a4c841",
                "5054421c-5af9-44ef-975f-83ad0be36bc5"
              ],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "02ef674b-b625-452b-a4d7-f2a405324f16",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "baa4f1aa-29ae-4a2c-b85b-1becf2774c85",
              "parentUUID": "02ef674b-b625-452b-a4d7-f2a405324f16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "45222216-c603-4d1e-81db-e13f3eda8e80",
              "parentUUID": "02ef674b-b625-452b-a4d7-f2a405324f16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "baa4f1aa-29ae-4a2c-b85b-1becf2774c85",
            "45222216-c603-4d1e-81db-e13f3eda8e80"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a07ae723-51c2-475d-9fb1-ab5df8d9e7d6",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
          "file": "/src/test/krasset/05-krasset-wrap.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "operator = hre.users.deployer;\nuser = hre.users.userOne;\ntreasury = hre.addr.treasury;\n({ KreskoAsset } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH'\n}));\n// Deploy WETH\nWETH = await hre.ethers.deployContract('WETH9');\n// Give WETH to deployer\nawait WETH.connect(user).deposit({\n    value: (0, _values.toBig)(100)\n});\nawait KreskoAsset.connect(hre.users.deployer).grantRole(_roles.Role.OPERATOR, operator.address);\nawait KreskoAsset.connect(hre.users.deployer).setUnderlying(WETH.address);\n// Approve WETH for KreskoAsset\nawait WETH.connect(user).approve(KreskoAsset.address, hre.ethers.constants.MaxUint256);",
              "err": {},
              "uuid": "bea2e3ff-a348-4644-a889-bc1e76e4f119",
              "parentUUID": "a07ae723-51c2-475d-9fb1-ab5df8d9e7d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "94e23f37-1bdb-4b98-ac97-4f98282a38c9",
              "title": "Deposit / Wrap",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
              "file": "/src/test/krasset/05-krasset-wrap.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot deposit when paused",
                  "fullTitle": "KreskoAsset Deposit / Wrap cannot deposit when paused",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).pause();\nawait (0, _chai.expect)(KreskoAsset.wrap(user.address, (0, _values.toBig)(10))).to.be.revertedWithCustomError(KreskoAsset, 'EnforcedPause');\nawait KreskoAsset.connect(operator).unpause();",
                  "err": {},
                  "uuid": "f96696cc-15df-4297-893f-d1c2c66cb6d9",
                  "parentUUID": "94e23f37-1bdb-4b98-ac97-4f98282a38c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can deposit with token",
                  "fullTitle": "KreskoAsset Deposit / Wrap can deposit with token",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\n(0, _chai.expect)(await KreskoAsset.balanceOf(user.address)).to.equal((0, _values.toBig)(10));",
                  "err": {},
                  "uuid": "cb4e1fc9-c17d-4da3-bbdc-67c69187c488",
                  "parentUUID": "94e23f37-1bdb-4b98-ac97-4f98282a38c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot deposit native token if not enabled",
                  "fullTitle": "KreskoAsset Deposit / Wrap cannot deposit native token if not enabled",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n})).to.be.reverted;",
                  "err": {},
                  "uuid": "ee587a4b-4d7c-4fe4-9b5d-3211e853270d",
                  "parentUUID": "94e23f37-1bdb-4b98-ac97-4f98282a38c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can deposit native token if enabled",
                  "fullTitle": "KreskoAsset Deposit / Wrap can deposit native token if enabled",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).enableNativeUnderlying(true);\nconst prevBalance = await KreskoAsset.balanceOf(user.address);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\nconst currentBalance = await KreskoAsset.balanceOf(user.address);\n(0, _chai.expect)(currentBalance.sub(prevBalance)).to.equal((0, _values.toBig)(10));",
                  "err": {},
                  "uuid": "e98c8182-4e27-47c8-a417-fd88b69a49e7",
                  "parentUUID": "94e23f37-1bdb-4b98-ac97-4f98282a38c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "transfers the correct fees to feeRecipient",
                  "fullTitle": "KreskoAsset Deposit / Wrap transfers the correct fees to feeRecipient",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).setOpenFee(0.1e4);\nawait KreskoAsset.connect(operator).enableNativeUnderlying(true);\nlet prevBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst treasuryWETHBal = await WETH.balanceOf(treasury);\nawait KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\nlet currentBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst currentWETHBalanceTreasury = await WETH.balanceOf(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(9));\n(0, _chai.expect)(currentWETHBalanceTreasury.sub(treasuryWETHBal)).to.equal((0, _values.toBig)(1));\nprevBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst prevBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\ncurrentBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst currentBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(9));\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(1));\n// Set openfee to 0\nawait KreskoAsset.connect(operator).setOpenFee(0);",
                  "err": {},
                  "uuid": "5edda6cb-3d28-4ce6-8ba6-5cfa2fa331bf",
                  "parentUUID": "94e23f37-1bdb-4b98-ac97-4f98282a38c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f96696cc-15df-4297-893f-d1c2c66cb6d9",
                "cb4e1fc9-c17d-4da3-bbdc-67c69187c488",
                "ee587a4b-4d7c-4fe4-9b5d-3211e853270d",
                "e98c8182-4e27-47c8-a417-fd88b69a49e7",
                "5edda6cb-3d28-4ce6-8ba6-5cfa2fa331bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 237,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "5f2231c4-f785-4fea-8858-92843b35a28b",
              "title": "Withdraw / Unwrap",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
              "file": "/src/test/krasset/05-krasset-wrap.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Withdraw / Unwrap\"",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap \"before each\" hook in \"Withdraw / Unwrap\"",
                  "timedOut": false,
                  "duration": 92,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Deposit some tokens here\nawait KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\nawait KreskoAsset.connect(operator).enableNativeUnderlying(true);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(100)\n});",
                  "err": {},
                  "uuid": "83f83683-2fb7-4aa1-837e-8648af2b1580",
                  "parentUUID": "5f2231c4-f785-4fea-8858-92843b35a28b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot withdraw when paused",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap cannot withdraw when paused",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).pause();\nawait (0, _chai.expect)(KreskoAsset.connect(user).unwrap(user.address, (0, _values.toBig)(1), false)).to.be.revertedWithCustomError(KreskoAsset, 'EnforcedPause');\nawait KreskoAsset.connect(operator).unpause();",
                  "err": {},
                  "uuid": "a9f9ccb8-ab20-453d-91b2-855b501c28ec",
                  "parentUUID": "5f2231c4-f785-4fea-8858-92843b35a28b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can withdraw",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap can withdraw",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prevBalance = await WETH.balanceOf(user.address);\nawait KreskoAsset.connect(user).unwrap(user.address, (0, _values.toBig)(1), false);\nconst currentBalance = await WETH.balanceOf(user.address);\n(0, _chai.expect)(currentBalance).to.equal((0, _values.toBig)(1).add(prevBalance));",
                  "err": {},
                  "uuid": "3eff9562-b194-4f04-8f18-08d43a3c894f",
                  "parentUUID": "5f2231c4-f785-4fea-8858-92843b35a28b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can withdraw native token if enabled",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap can withdraw native token if enabled",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).enableNativeUnderlying(true);\nconst prevBalance = await KreskoAsset.balanceOf(user.address);\nawait KreskoAsset.connect(user).unwrap(user.address, (0, _values.toBig)(1), true);\nconst currentBalance = await KreskoAsset.balanceOf(user.address);\n(0, _chai.expect)(prevBalance.sub(currentBalance)).to.equal((0, _values.toBig)(1));",
                  "err": {},
                  "uuid": "4c3c7406-267a-4ef5-a930-2efcc11c0def",
                  "parentUUID": "5f2231c4-f785-4fea-8858-92843b35a28b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "transfers the correct fees to feeRecipient",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap transfers the correct fees to feeRecipient",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// set close fee to 10%\nawait KreskoAsset.connect(operator).setCloseFee(0.1e4);\nconst prevBalanceDevOne = await WETH.balanceOf(user.address);\nlet prevBalanceTreasury = await WETH.balanceOf(treasury);\nawait KreskoAsset.connect(user).unwrap(user.address, (0, _values.toBig)(9), false);\nconst currentBalanceDevOne = await WETH.balanceOf(user.address);\nlet currentBalanceTreasury = await WETH.balanceOf(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(8.1));\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(0.9));\n// Withdraw native token and check if fee is transferred\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\nprevBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\nawait KreskoAsset.connect(user).unwrap(user.address, (0, _values.toBig)(9), true);\ncurrentBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(0.9));",
                  "err": {},
                  "uuid": "c21bfe72-bf28-41e7-9794-e37f12fb28d5",
                  "parentUUID": "5f2231c4-f785-4fea-8858-92843b35a28b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9f9ccb8-ab20-453d-91b2-855b501c28ec",
                "3eff9562-b194-4f04-8f18-08d43a3c894f",
                "4c3c7406-267a-4ef5-a930-2efcc11c0def",
                "c21bfe72-bf28-41e7-9794-e37f12fb28d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 170,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4d1a2769-59b5-43b0-a745-d70b14f2f665",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();",
              "err": {},
              "uuid": "db76e253-e606-4edd-b720-0831a7caebb2",
              "parentUUID": "4d1a2769-59b5-43b0-a745-d70b14f2f665",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6f35d878-70d6-4e95-8560-aefb9dd43328",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = (0, _mocks.testMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(hre.Diamond.setMinCollateralRatioMinter(update.minCollateralRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setLiquidationThresholdMinter(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setMaxLiquidationRatioMinter(update.maxLiquidationRatio)).to.not.be.reverted;\nconst params = await hre.Diamond.getParametersMinter();\n(0, _chai.expect)(update.minCollateralRatio).to.equal(params.minCollateralRatio);\n(0, _chai.expect)(update.maxLiquidationRatio).to.equal(params.maxLiquidationRatio);\n(0, _chai.expect)(update.liquidationThreshold).to.equal(params.liquidationThreshold);",
                  "err": {},
                  "uuid": "b11efae4-14c2-43ab-b647-cc759d06c549",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 753,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, _collaterals.addMockExtAsset)(_mocks.testCollateralConfig);\n(0, _chai.expect)(await hre.Diamond.getCollateralExists(contract.address)).to.equal(true);\nconst priceOfOne = await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1));\n(0, _chai.expect)(Number(priceOfOne)).to.equal((0, _values.toBig)(_mocks.testCollateralConfig.price, 8));",
                  "err": {},
                  "uuid": "c09c2ff8-4e9c-4100-b443-14fb807acd90",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 1990,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, assetInfo } = await (0, _krassets.addMockKreskoAsset)({\n    ..._mocks.testKrAssetConfig,\n    name: 'Kresko Asset: 5',\n    symbol: 'KrAsset5',\n    ticker: 'KrAsset5'\n});\nconst values = await assetInfo();\nconst kreskoPriceAnswer = (0, _values.fromBig)(await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1)), 8);\nconst config = _mocks.testKrAssetConfig.krAssetConfig;\n(0, _chai.expect)(values.isMinterMintable).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal(config.kFactor);\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_mocks.testKrAssetConfig.price);\n(0, _chai.expect)(values.maxDebtMinter).to.equal(config.maxDebtMinter);\n(0, _chai.expect)(values.closeFee).to.equal(config.closeFee);\n(0, _chai.expect)(values.openFee).to.equal(config.openFee);",
                  "err": {},
                  "uuid": "a32db91f-4826-4a99-bd03-11c71c9df6d6",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update default oracle precision decimals",
                  "fullTitle": "Minter - Configuration #configuration can update default oracle precision decimals",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.setDefaultOraclePrecision(decimals);\n(0, _chai.expect)(await hre.Diamond.getDefaultOraclePrecision()).to.equal(decimals);",
                  "err": {},
                  "uuid": "301bd9e3-e11f-4db5-afc0-ab7c2ed436f7",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update minter max liquidation ratio",
                  "fullTitle": "Minter - Configuration #configuration can update minter max liquidation ratio",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.getMaxLiquidationRatioMinter();\nconst newMLR = 1.42e4;\n(0, _chai.expect)(currentMLM).to.not.eq(newMLR);\nawait (0, _chai.expect)(hre.Diamond.setMaxLiquidationRatioMinter(newMLR)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getMaxLiquidationRatioMinter()).to.eq(newMLR);",
                  "err": {},
                  "uuid": "89bcc6f5-4716-41b4-8fc1-3ef4ff337ef1",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update global oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update global oracle deviation pct",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentDeviationPct = await hre.Diamond.getOracleDeviationPct();\nconst newDeviationPct = 0.03e4;\n(0, _chai.expect)(currentDeviationPct).to.not.equal(newDeviationPct);\nawait (0, _chai.expect)(hre.Diamond.setMaxPriceDeviationPct(newDeviationPct)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(newDeviationPct);",
                  "err": {},
                  "uuid": "f2d207ef-cff3-4ee2-86ce-47b84436272a",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.KrAsset.address)).kFactor;\nconst newRatio = 1.2e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.setAssetKFactor(f.KrAsset.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.KrAsset.address)).kFactor === newRatio).to.be.true;",
                  "err": {},
                  "uuid": "1f2a108f-d065-4cae-86b8-47c2074ccc25",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.Collateral.address)).factor;\nconst newRatio = 0.9e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.setAssetCFactor(f.Collateral.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.Collateral.address)).factor === newRatio).to.be.true;",
                  "err": {},
                  "uuid": "93a90b1b-8546-49da-a2f4-a2205c83063e",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update configuration of an asset",
                  "fullTitle": "Minter - Configuration #configuration can update configuration of an asset",
                  "timedOut": false,
                  "duration": 241,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oracleAnswer = (0, _values.fromBig)((await f.KrAsset.priceFeed.latestRoundData())[1], 8);\nconst priceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(priceOfOne);\n(0, _chai.expect)(oracleAnswer).to.equal(_mocks.testKrAssetConfig.price);\nconst update = {\n    kFactor: 1.2e4,\n    maxDebtMinter: (0, _values.toBig)(12000),\n    closeFee: 0.03e4,\n    openFee: 0.03e4,\n    anchor: f.KrAsset.anchor.address\n};\nconst FakeFeed = await (0, _oracle.createOracles)(hre, f.KrAsset.pythId.toString(), 20);\nconst newConfig = await (0, _general.getAssetConfig)(f.KrAsset.contract, {\n    ..._mocks.testKrAssetConfig,\n    feed: FakeFeed.address,\n    price: 20,\n    krAssetConfig: update\n});\nawait hre.Diamond.setFeedsForTicker(newConfig.assetStruct.ticker, newConfig.feedConfig);\nawait hre.Diamond.connect(hre.users.deployer).updateAsset(f.KrAsset.address, newConfig.assetStruct);\nconst newValues = await hre.Diamond.getAsset(f.KrAsset.address);\nconst updatedOracleAnswer = (0, _values.fromBig)((await FakeFeed.latestRoundData())[1], 8);\nconst newPriceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(newValues.isMinterMintable).to.equal(true);\n(0, _chai.expect)(newValues.isMinterCollateral).to.equal(false);\n(0, _chai.expect)(newValues.kFactor).to.equal(update.kFactor);\n(0, _chai.expect)(newValues.maxDebtMinter).to.equal(update.maxDebtMinter);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newPriceOfOne);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(20);\nconst update2 = {\n    ...await hre.Diamond.getAsset(f.KrAsset.address),\n    kFactor: 1.75e4,\n    maxDebtMinter: (0, _values.toBig)(12000),\n    closeFee: 0.052e4,\n    openFee: 0.052e4,\n    isSwapMintable: true,\n    swapInFeeSCDP: 0.052e4,\n    liqIncentiveSCDP: 1.1e4,\n    anchor: f.KrAsset.anchor.address\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update2);\nconst newValues2 = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(newValues2.isMinterMintable).to.equal(true);\n(0, _chai.expect)(newValues2.isSharedOrSwappedCollateral).to.equal(true);\n(0, _chai.expect)(newValues2.isSwapMintable).to.equal(true);\n(0, _chai.expect)(newValues2.isMinterCollateral).to.equal(false);\n(0, _chai.expect)(newValues2.isSharedCollateral).to.equal(false);\n(0, _chai.expect)(newValues2.isCoverAsset).to.equal(false);\n(0, _chai.expect)(newValues2.kFactor).to.equal(update2.kFactor);\n(0, _chai.expect)(newValues2.openFee).to.equal(update2.closeFee);\n(0, _chai.expect)(newValues2.closeFee).to.equal(update2.openFee);\n(0, _chai.expect)(newValues2.swapInFeeSCDP).to.equal(update2.swapInFeeSCDP);\n(0, _chai.expect)(newValues2.maxDebtMinter).to.equal(update2.maxDebtMinter);\nawait f.KrAsset.setPrice(10);",
                  "err": {},
                  "uuid": "092223ed-8764-4aef-b6db-85e9ad870c23",
                  "parentUUID": "6f35d878-70d6-4e95-8560-aefb9dd43328",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b11efae4-14c2-43ab-b647-cc759d06c549",
                "c09c2ff8-4e9c-4100-b443-14fb807acd90",
                "a32db91f-4826-4a99-bd03-11c71c9df6d6",
                "301bd9e3-e11f-4db5-afc0-ab7c2ed436f7",
                "89bcc6f5-4716-41b4-8fc1-3ef4ff337ef1",
                "f2d207ef-cff3-4ee2-86ce-47b84436272a",
                "1f2a108f-d065-4cae-86b8-47c2074ccc25",
                "93a90b1b-8546-49da-a2f4-a2205c83063e",
                "092223ed-8764-4aef-b6db-85e9ad870c23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3076,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "83b63610-8099-4f0b-826d-f0acfe40cb7d",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.depositWithdrawFixture)();",
              "err": {},
              "uuid": "5c3ba675-71ba-40e0-b1f4-2b3261ec2760",
              "parentUUID": "83b63610-8099-4f0b-826d-f0acfe40cb7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f3744b3-3117-41fd-847b-e93d25ad3e0d",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(f.user, collateralAmount, _hardhat.default.Diamond.address);\nconst depositAmount = collateralAmount.div(2);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAssets(f.user.address)).to.include(f.KrAssetCollateral.address);\nawait (0, _chai.expect)(f.User.withdrawCollateral({\n    account: f.user.address,\n    asset: f.KrAssetCollateral.address,\n    amount: withdrawAmount,\n    collateralIndex: 0,\n    receiver: f.user.address\n}, await _hardhat.default.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'COLLATERAL_AMOUNT_LOW').withArgs(f.KrAssetCollateral.errorId, 9e11, 1e12);",
                      "err": {},
                      "uuid": "4f938cf1-4bd3-461e-a20d-9dfd93bf031b",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 17,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(f.user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, 9e11.toString())).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'COLLATERAL_AMOUNT_LOW').withArgs(f.KrAssetCollateral.errorId, 9e11, 1e12);",
                      "err": {},
                      "uuid": "16285026-7bab-4e55-94a9-b1816db7b94b",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 18,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Account has deposit entry\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAmount(f.depositor.address, f.Collateral.address)).to.equal(f.initialDeposits);\n// Kresko's balance has increased\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Account's balance has decreased\n(0, _chai.expect)((0, _values.fromBig)(await f.Collateral.balanceOf(f.depositor.address))).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "6eccfc24-d771-43c7-86aa-a5de9109b5f6",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the f.user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(f.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral, from f.depositor -> f.user.\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.user.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the f.user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the f.user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits);\n// Confirm the amount as been transferred from the f.user into Kresko.sol\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Confirm the f.depositor's wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await f.Collateral.balanceOf(f.depositor.address);\n(0, _chai.expect)((0, _values.fromBig)(depositorBalanceAfter)).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "bd394096-0442-466e-bd71-66dcd329ce9e",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the f.user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the f.user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.depositor.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.add(f.initialDeposits));",
                      "err": {},
                      "uuid": "eb01a713-9325-40f0-a8d3-f3b8a5c0be01",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load f.user account with a different type of collateral\nawait f.Collateral2.setBalance(f.depositor, f.initialBalance, _hardhat.default.Diamond.address);\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral2.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the f.user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral2.address\n]);",
                      "err": {},
                      "uuid": "9f282c22-2874-4eb4-b8a4-d3dcc13add40",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits);\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralDeposited');\n(0, _chai.expect)(event.account).to.equal(f.depositor.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                      "err": {},
                      "uuid": "70a8f6b7-c176-4345-8c5d-4db7aac8aa90",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, '0x0000000000000000000000000000000000000001', f.initialDeposits)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ASSET_NOT_MINTER_COLLATERAL').withArgs([\n    '',\n    '0x0000000000000000000000000000000000000001'\n]);",
                      "err": {},
                      "uuid": "869176c2-41e6-4614-b88d-181603b9b111",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ZERO_DEPOSIT').withArgs(f.Collateral.errorId);",
                      "err": {},
                      "uuid": "d8a390dd-69b5-4d9d-bd8d-bb208b771b6f",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devOne, extOne } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devOne,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(f.depositor).depositCollateral(f.depositor.address, f.Collateral.contract.address, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ASSET_PAUSED_FOR_THIS_ACTION').withArgs(f.Collateral.errorId, _types.Action.DEPOSIT);",
                      "err": {},
                      "uuid": "82c34c23-565f-47d9-a42a-b24b2b703709",
                      "parentUUID": "59ee0785-a9c6-4f7e-9076-0c02b1afbb88",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4f938cf1-4bd3-461e-a20d-9dfd93bf031b",
                    "16285026-7bab-4e55-94a9-b1816db7b94b",
                    "6eccfc24-d771-43c7-86aa-a5de9109b5f6",
                    "bd394096-0442-466e-bd71-66dcd329ce9e",
                    "eb01a713-9325-40f0-a8d3-f3b8a5c0be01",
                    "9f282c22-2874-4eb4-b8a4-d3dcc13add40",
                    "70a8f6b7-c176-4345-8c5d-4db7aac8aa90",
                    "869176c2-41e6-4614-b88d-181603b9b111",
                    "d8a390dd-69b5-4d9d-bd8d-bb208b771b6f",
                    "82c34c23-565f-47d9-a42a-b24b2b703709"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 279,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "f448cf08-fb2b-4e25-b0a5-03bfba49adbd",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "3e83191a-4b0c-4457-982a-0e06c3d631e8",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 63,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: f.initialDeposits,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the f.user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await f.Collateral.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "04fa8e0e-8199-4ddb-a226-c913f84de3ba",
                          "parentUUID": "3e83191a-4b0c-4457-982a-0e06c3d631e8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Ensure the change in the f.user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst userOneBalance = await f.Collateral.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits.sub(amountDeposited));",
                          "err": {},
                          "uuid": "192cc486-f88d-40af-a831-545b2a159b32",
                          "parentUUID": "3e83191a-4b0c-4457-982a-0e06c3d631e8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 68,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.grantRole(_roles.Role.MANAGER, f.user.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_roles.Role.MANAGER, f.user.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\nawait (0, _chai.expect)(f.User.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: f.initialDeposits,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData())).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(f.initialDeposits));",
                          "err": {},
                          "uuid": "7270fe87-696c-42a0-93bf-79ef07e64964",
                          "parentUUID": "3e83191a-4b0c-4457-982a-0e06c3d631e8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 50,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: f.initialDeposits,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralWithdrawn');\n(0, _chai.expect)(event.account).to.equal(f.withdrawer.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "dd4f73b7-ec23-4db3-a8bc-15cc6e806a4b",
                          "parentUUID": "3e83191a-4b0c-4457-982a-0e06c3d631e8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 46,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(f.User.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: f.initialBalance,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData())).to.be.revertedWith(`AccessControl: account ${f.user.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "ac12d2ab-c692-4135-9d2c-fe7442c1d04f",
                          "parentUUID": "3e83191a-4b0c-4457-982a-0e06c3d631e8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "d42fefb3-8f25-4b2b-b946-a9c6c74097b2",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 86,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne mints some kr assets\nthis.mintAmount = (0, _values.toBig)(100);\nawait f.Withdrawer.mintKreskoAsset({\n    account: f.withdrawer.address,\n    krAsset: f.KrAsset.address,\n    amount: this.mintAmount,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _optimizations.default.getMinCollateralRatioMinter();",
                              "err": {},
                              "uuid": "6fa71fa9-bcd2-4cb3-9cc9-e80e29568673",
                              "parentUUID": "d42fefb3-8f25-4b2b-b946-a9c6c74097b2",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 127,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _values.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst [accMinCollateralValue, accCollateralValue, withdrawnCollateralValue] = await Promise.all([\n    _hardhat.default.Diamond.getAccountMinCollateralAtRatio(f.withdrawer.address, this.mcr),\n    _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address),\n    _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount)\n]);\n(0, _chai.expect)(accCollateralValue.sub(withdrawnCollateralValue).gte(accMinCollateralValue)).to.be.true;\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\n// Ensure the change in the f.user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Check the balances of the contract and f.user\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst withdrawerBalance = await f.Collateral.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(withdrawerBalance).to.equal(withdrawAmount);\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(f.withdrawer.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "cb623a70-b157-4bfc-be1b-9c63f29e23e8",
                              "parentUUID": "d42fefb3-8f25-4b2b-b946-a9c6c74097b2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 74,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const randomUser = _hardhat.default.users.userFour;\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(0));\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(1000));\nawait f.Collateral.contract.connect(randomUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1000),\n    user: randomUser\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1010),\n    user: randomUser\n}, await _hardhat.default.updateData());\n(0, _chai.expect)(await f.Collateral.balanceOf(randomUser.address)).to.equal((0, _values.toBig)(1000));",
                              "err": {},
                              "uuid": "a299fc7e-e514-4d43-a056-989036346e3c",
                              "parentUUID": "d42fefb3-8f25-4b2b-b946-a9c6c74097b2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 48,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)(f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ZERO_AMOUNT').withArgs(f.Collateral.errorId);",
                              "err": {},
                              "uuid": "52d33178-c7d6-4b53-8ee2-738ab5d93a2c",
                              "parentUUID": "d42fefb3-8f25-4b2b-b946-a9c6c74097b2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 99,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = f.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(f.withdrawer.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\nconst withdrawnCollateralValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)(f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    collateralIndex: 0,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ACCOUNT_COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs(f.withdrawer.address, 0, 150000000000, await _hardhat.default.Diamond.getMinCollateralRatioMinter());",
                              "err": {},
                              "uuid": "58d87f20-8fe0-42b8-baa8-049f2811378c",
                              "parentUUID": "d42fefb3-8f25-4b2b-b946-a9c6c74097b2",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositIndex is incorrect",
                              "timedOut": false,
                              "duration": 48,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait (0, _chai.expect)(f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    collateralIndex: 1,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ARRAY_INDEX_OUT_OF_BOUNDS').withArgs(f.Collateral.errorId, 1, [\n    f.Collateral.address\n]);",
                              "err": {},
                              "uuid": "8095d75e-b80a-4770-92ce-1ca6e0be0511",
                              "parentUUID": "d42fefb3-8f25-4b2b-b946-a9c6c74097b2",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "cb623a70-b157-4bfc-be1b-9c63f29e23e8",
                            "a299fc7e-e514-4d43-a056-989036346e3c",
                            "52d33178-c7d6-4b53-8ee2-738ab5d93a2c",
                            "58d87f20-8fe0-42b8-baa8-049f2811378c",
                            "8095d75e-b80a-4770-92ce-1ca6e0be0511"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 396,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [
                        "04fa8e0e-8199-4ddb-a226-c913f84de3ba",
                        "192cc486-f88d-40af-a831-545b2a159b32",
                        "7270fe87-696c-42a0-93bf-79ef07e64964",
                        "dd4f73b7-ec23-4db3-a8bc-15cc6e806a4b",
                        "ac12d2ab-c692-4135-9d2c-fe7442c1d04f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 296,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "aa5185e4-6ce6-48cf-b9ba-836a4e66d7ac",
                  "title": "#deposit - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase \"before each\" hook in \"#deposit - rebase\"",
                      "timedOut": false,
                      "duration": 96,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setBalance(f.user, f.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// Allowance for Kresko\nawait f.KrAssetCollateral.contract.setVariable('_allowances', {\n    [f.user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait f.User.depositCollateral(f.user.address, f.Collateral.address, f.initialDeposits);\n// Mint some krAssets\nawait f.User.mintKreskoAsset({\n    account: f.user.address,\n    krAsset: f.KrAssetCollateral.address,\n    amount: mintAmount,\n    receiver: f.user.address\n}, await _hardhat.default.updateData());\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await f.User.getAccountDebtAmount(f.user.address, f.KrAssetCollateral.address);",
                      "err": {},
                      "uuid": "30bbf77a-d2a6-4edf-8b4f-6924206dead0",
                      "parentUUID": "aa5185e4-6ce6-48cf-b9ba-836a4e66d7ac",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "86064c76-dcfc-4ee8-a510-a229bf872644",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 35,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(expectedDepositsAfter);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "8f186e93-f65e-4050-a1a6-10056ecdbe92",
                          "parentUUID": "86064c76-dcfc-4ee8-a510-a229bf872644",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 32,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "d343d495-a5f0-43a5-bca2-6c0635ab1b4b",
                          "parentUUID": "86064c76-dcfc-4ee8-a510-a229bf872644",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 32,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "692c4568-6d0b-459f-94d5-e449f9a3ec90",
                          "parentUUID": "86064c76-dcfc-4ee8-a510-a229bf872644",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 29,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "c7f93b38-6a35-4041-a106-8ddff76999a7",
                          "parentUUID": "86064c76-dcfc-4ee8-a510-a229bf872644",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 53,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "30b4ae4b-dae5-420b-b6a1-1c450bb68fef",
                          "parentUUID": "86064c76-dcfc-4ee8-a510-a229bf872644",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 49,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "53054e7b-b017-4f6e-93e3-c82ca075cfa9",
                          "parentUUID": "86064c76-dcfc-4ee8-a510-a229bf872644",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "8f186e93-f65e-4050-a1a6-10056ecdbe92",
                        "d343d495-a5f0-43a5-bca2-6c0635ab1b4b",
                        "692c4568-6d0b-459f-94d5-e449f9a3ec90",
                        "c7f93b38-6a35-4041-a106-8ddff76999a7",
                        "30b4ae4b-dae5-420b-b6a1-1c450bb68fef",
                        "53054e7b-b017-4f6e-93e3-c82ca075cfa9"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 230,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "04c9f862-b372-4fb4-99c7-74f3b2b2ced3",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 114,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\nawait f.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "dd1cb7c2-f5e9-4052-b50f-9dd9225733a9",
                          "parentUUID": "04c9f862-b372-4fb4-99c7-74f3b2b2ced3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 114,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) * denominator;\nawait f.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "01eb579c-4316-4c26-a3ec-9ae1bf165784",
                          "parentUUID": "04c9f862-b372-4fb4-99c7-74f3b2b2ced3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 92,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "80914ffa-a1c3-45e6-ad4c-56323d7f8fe8",
                          "parentUUID": "04c9f862-b372-4fb4-99c7-74f3b2b2ced3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) * denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "705d6035-4ac4-4cb5-a339-789be759cb34",
                          "parentUUID": "04c9f862-b372-4fb4-99c7-74f3b2b2ced3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 129,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "266c3b3c-8e87-4919-a5f7-570132f82036",
                          "parentUUID": "04c9f862-b372-4fb4-99c7-74f3b2b2ced3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 132,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "10775637-b289-4933-895f-4448b67b0a50",
                          "parentUUID": "04c9f862-b372-4fb4-99c7-74f3b2b2ced3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "dd1cb7c2-f5e9-4052-b50f-9dd9225733a9",
                        "01eb579c-4316-4c26-a3ec-9ae1bf165784",
                        "80914ffa-a1c3-45e6-ad4c-56323d7f8fe8",
                        "705d6035-4ac4-4cb5-a339-789be759cb34",
                        "266c3b3c-8e87-4919-a5f7-570132f82036",
                        "10775637-b289-4933-895f-4448b67b0a50"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 672,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "baac382e-04ba-4a68-8f5e-81046644842b",
                  "title": "#withdraw - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase \"before each\" hook in \"#withdraw - rebase\"",
                      "timedOut": false,
                      "duration": 85,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Withdrawer.mintKreskoAsset({\n    account: f.withdrawer.address,\n    krAsset: f.KrAssetCollateral.address,\n    amount: mintAmount,\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await _optimizations.default.getAccountDebtAmount(f.withdrawer.address, f.KrAssetCollateral);",
                      "err": {},
                      "uuid": "1f9b86e5-e5b3-4674-9675-61c1bfae14ef",
                      "parentUUID": "baac382e-04ba-4a68-8f5e-81046644842b",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 110,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: rebasedDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "2bbc69aa-1592-4e1d-922a-e1e8dfd1538e",
                          "parentUUID": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 105,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: rebasedDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "40356db9-f9aa-47fc-b212-157de89c8ef3",
                          "parentUUID": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 106,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: rebasedDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "6c441e3c-5bf3-4d55-8ba8-16ed607cf971",
                          "parentUUID": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after a negative rebase",
                          "timedOut": false,
                          "duration": 106,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: rebasedDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "12042258-ea7c-4bcf-b180-0e89dcafe205",
                          "parentUUID": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 133,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: fullDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "cd0e9ede-8bcc-4495-9a59-a64c5f5c46ba",
                          "parentUUID": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 128,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: fullDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "f58631c1-7344-405f-8e16-a763d044351a",
                          "parentUUID": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 159,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await f.Collateral.contract.balanceOf(f.withdrawer.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.Collateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(f.withdrawer.address)).to.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "e7f39885-5124-47f7-9deb-e4194375a372",
                          "parentUUID": "e2c41191-01a0-4d0a-b481-979a78fc09cc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2bbc69aa-1592-4e1d-922a-e1e8dfd1538e",
                        "40356db9-f9aa-47fc-b212-157de89c8ef3",
                        "6c441e3c-5bf3-4d55-8ba8-16ed607cf971",
                        "12042258-ea7c-4bcf-b180-0e89dcafe205",
                        "cd0e9ede-8bcc-4495-9a59-a64c5f5c46ba",
                        "f58631c1-7344-405f-8e16-a763d044351a",
                        "e7f39885-5124-47f7-9deb-e4194375a372"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 847,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 155,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: rebasedDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "cefa6bfb-3e4b-4d63-bba0-bcf78292b743",
                          "parentUUID": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 155,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: rebasedDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "3293ef9b-26f0-451a-b1f3-7faa45b9da40",
                          "parentUUID": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 153,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: depositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
                          "uuid": "a3255f71-c22a-4c82-a94b-f4930884fa58",
                          "parentUUID": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 159,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: depositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
                          "uuid": "eea4165c-19b6-41a5-ab59-180051158b2f",
                          "parentUUID": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 202,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: fullDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "dda6014c-66d8-4782-abed-8693efed096e",
                          "parentUUID": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 203,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.KrAssetCollateral.address,\n    amount: fullDepositAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "d41f5878-8eba-46f6-b844-c76c3ce8b125",
                          "parentUUID": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 233,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)((await f.KrAssetCollateral.getPrice()).pyth, 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.Collateral.address);\nconst withdrawValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.Withdrawer.withdrawCollateral({\n    account: f.withdrawer.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    collateralIndex: _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address),\n    receiver: f.withdrawer.address\n}, await _hardhat.default.updateData());\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "a924fdba-fc3d-415d-b89b-e10a6b6fa7d8",
                          "parentUUID": "a9f4a0b8-cc29-4fca-a123-a6c04baf513f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "cefa6bfb-3e4b-4d63-bba0-bcf78292b743",
                        "3293ef9b-26f0-451a-b1f3-7faa45b9da40",
                        "a3255f71-c22a-4c82-a94b-f4930884fa58",
                        "eea4165c-19b6-41a5-ab59-180051158b2f",
                        "dda6014c-66d8-4782-abed-8693efed096e",
                        "d41f5878-8eba-46f6-b844-c76c3ce8b125",
                        "a924fdba-fc3d-415d-b89b-e10a6b6fa7d8"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1260,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c1b86d50-1316-413a-9fe9-4b6aa1123fbd",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 274,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.liquidationsFixture)();\nawait f.reset();",
              "err": {},
              "uuid": "1779a258-01a8-4c4a-8a5e-cb10749f54ac",
              "parentUUID": "c1b86d50-1316-413a-9fe9-4b6aa1123fbd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "afe55ab8-ffc7-4da6-8a18-4b0dc3b93672",
              "title": "#isAccountLiquidatable",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify accounts below their liquidation threshold",
                  "fullTitle": "Minter - Liquidations #isAccountLiquidatable should identify accounts below their liquidation threshold",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [cr, minCollateralUSD, initialCanLiquidate] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(f.user1.address),\n    hre.Diamond.getAccountMinCollateralAtRatio(f.user1.address, hre.Diamond.getLiquidationThresholdMinter()),\n    hre.Diamond.getAccountLiquidatable(f.user1.address)\n]);\n(0, _chai.expect)(cr).to.be.equal(1.5e4);\n(0, _chai.expect)(f.initialDeposits.mul(10).gt(minCollateralUSD));\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\nawait f.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.equal(true);",
                  "err": {},
                  "uuid": "4243c892-1e5d-453b-9295-be524f651134",
                  "parentUUID": "afe55ab8-ffc7-4da6-8a18-4b0dc3b93672",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4243c892-1e5d-453b-9295-be524f651134"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 124,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "885a995e-010c-473b-ac65-612886fe8c31",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 234,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const MLVBeforeC1 = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address);\nconst MLVBeforeC2 = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral2.address);\n(0, _chai.expect)(MLVBeforeC1.repayValue).to.be.closeTo(MLVBeforeC2.repayValue, USD_DELTA);\nawait hre.Diamond.setAssetCFactor(f.Collateral.address, 0.25e4);\nawait (0, _collaterals.depositMockCollateral)({\n    user: f.user1,\n    amount: f.initialDeposits.div(2),\n    asset: f.Collateral2\n});\nconst expectedCR = 1.125e4;\nconst [crAfter, isLiquidatableAfter, MLVAfterC1, MLVAfterC2] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(f.user1.address),\n    hre.Diamond.getAccountLiquidatable(f.user1.address),\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral2.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(crAfter).to.be.closeTo(expectedCR, 1);\n(0, _chai.expect)(MLVAfterC1.repayValue).to.gt(MLVBeforeC1.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue).to.gt(MLVBeforeC2.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue.gt(MLVAfterC1.repayValue)).to.be.true;",
                  "err": {},
                  "uuid": "99e1646c-3fee-4b54-b155-e576d704777f",
                  "parentUUID": "885a995e-010c-473b-ac65-612886fe8c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositMockCollateral)({\n    user: f.user1,\n    amount: (0, _values.toBig)(0.1, 8),\n    asset: f.Collateral8Dec\n});\nawait f.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.true;\nconst [maxLiq, maxLiq8Dec] = await Promise.all([\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(maxLiq.repayValue).gt(0);\n(0, _chai.expect)(maxLiq8Dec.repayValue).gt(0);\n(0, _chai.expect)(maxLiq.repayValue).gt(maxLiq8Dec.repayValue);",
                  "err": {},
                  "uuid": "78a73a0b-9f29-47a7-aea1-1146f827c854",
                  "parentUUID": "885a995e-010c-473b-ac65-612886fe8c31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99e1646c-3fee-4b54-b155-e576d704777f",
                "78a73a0b-9f29-47a7-aea1-1146f827c854"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 410,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8c703f64-9f10-4c45-aca8-0830870e4567",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 49,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setPrice(7.5);",
                      "err": {},
                      "uuid": "ed394485-d22b-43fe-822a-cc3e924865eb",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 144,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await _optimizations.default.getAccountCollateralAmount(f.user1.address, f.Collateral);\nconst userOneDebtBefore = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\nconst liquidatorBalanceBefore = await f.Collateral.balanceOf(f.liquidator.address);\nconst liquidatorBalanceKrBefore = await f.KrAsset.balanceOf(f.liquidator.address);\nconst kreskoBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxRepayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11, 8));\nawait f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: maxRepayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user1.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user1.address, f.Collateral.address),\n    prices: await hre.updateData()\n});\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst userOneDebtAfterLiquidation = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebtAfterLiquidation.eq(userOneDebtBefore.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst userOneCollateralAfterLiquidation = await _optimizations.default.getAccountCollateralAmount(f.user1.address, f.Collateral);\n(0, _chai.expect)(userOneCollateralAfterLiquidation.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\n(0, _chai.expect)(await f.KrAsset.balanceOf(f.liquidator.address)).eq(liquidatorBalanceKrBefore.sub(maxRepayAmount));\n// Confirm that userTwo has received some collateral from the contract\n(0, _chai.expect)(await f.Collateral.balanceOf(f.liquidator.address)).gt(liquidatorBalanceBefore);\n// Confirm that Kresko contract's collateral balance has decreased.\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).lt(kreskoBalanceBefore);",
                      "err": {},
                      "uuid": "2fa649cc-deba-4c86-9d1e-1ebb93dc1e6d",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with a single CDP",
                      "timedOut": false,
                      "duration": 216,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.setAssetCFactor(f.Collateral.address, 0.99e4);\nawait hre.Diamond.setAssetKFactor(f.KrAsset.address, 1.02e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address);\nawait f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: maxLiq.repayAmount.add((0, _values.toBig)(1222, 27)),\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: maxLiq.repayAssetIndex,\n    seizeAssetIndex: maxLiq.seizeAssetIndex,\n    prices: await hre.updateData()\n});\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(f.user1.address)).to.be.eq(await _optimizations.default.getMaxLiquidationRatioMinter());\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "aee4fe7d-67b7-4036-899f-7fa5090842a2",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with multiple CDPs",
                      "timedOut": false,
                      "duration": 385,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: f.user1,\n    amount: (0, _values.toBig)(10, 8),\n    asset: f.Collateral8Dec\n});\nawait f.Collateral.setPrice(5.5);\nawait f.Collateral8Dec.setPrice(6);\nawait hre.Diamond.setAssetCFactor(f.Collateral.address, 0.9754e4);\nawait hre.Diamond.setAssetKFactor(f.KrAsset.address, 1.05e4);\nawait (0, _liquidations.liquidate)(f.user1, f.KrAsset, f.Collateral8Dec);\nconst [crAfter, isLiquidatableAfter] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(f.user1.address),\n    hre.Diamond.getAccountLiquidatable(f.user1.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.false;\n(0, _chai.expect)(crAfter).to.be.eq(await _optimizations.default.getMaxLiquidationRatioMinter());",
                      "err": {},
                      "uuid": "5e9a5f54-80e0-4ca2-a0f1-c474e520ef1d",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 122,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11));\nconst tx = await f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user1.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user1.address, f.Collateral.address),\n    prices: await hre.updateData()\n});\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\n(0, _chai.expect)(event.args.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(f.liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);",
                      "err": {},
                      "uuid": "3e13b107-cb14-403a-a2e0-d8e744ed80e8",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 128,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setPrice(10);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: mintedKreskoAssetIndex,\n    seizeAssetIndex: depositedCollateralAssetIndex,\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_HEALTHY_ACCOUNT').withArgs(f.user1.address, 16500000000, 15400000000, await hre.Diamond.getLiquidationThresholdMinter());",
                      "err": {},
                      "uuid": "ea664d0f-603b-46eb-9c57-72274c05167f",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)(f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0,\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'LIQUIDATION_VALUE_IS_ZERO').withArgs(f.KrAsset.errorId, f.Collateral.errorId);",
                      "err": {},
                      "uuid": "8c5cb8e0-1cc3-409f-b76c-30403f890758",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should clamp liquidations if repay value/amount exceeds debt",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should clamp liquidations if repay value/amount exceeds debt",
                      "timedOut": false,
                      "duration": 205,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _values.toBig)(10));\nawait f.KrAsset.setBalance(f.liquidatorTwo, repayAmount, hre.Diamond.address);\n// Liquidation should fail\nconst liquidatorBalanceBefore = await f.KrAsset.balanceOf(f.liquidatorTwo.address);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address);\n(0, _chai.expect)(maxLiq.repayAmount).to.be.lt(repayAmount);\nconst tx = await f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0,\n    prices: await hre.updateData()\n});\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\nconst liquidatorBalanceAfter = await f.KrAsset.balanceOf(f.liquidatorTwo.address);\n(0, _chai.expect)(event.args.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(f.liquidatorTwo.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.args.repayAmount).to.not.equal(repayAmount);\n(0, _chai.expect)(event.args.repayAmount).to.equal(maxLiq.repayAmount);\n(0, _chai.expect)(event.args.collateralSent).to.be.equal(maxLiq.seizeAmount);\n(0, _chai.expect)(liquidatorBalanceAfter.add(repayAmount)).to.not.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(liquidatorBalanceAfter.add(maxLiq.repayAmount)).to.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(f.user1.address)).to.be.eq(await hre.Diamond.getMaxLiquidationRatioMinter());",
                      "err": {},
                      "uuid": "b0033150-36d5-464b-ade2-86743ebda7c3",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 179,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setPrice(f.Collateral.config.args.price);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinCollateralAtRatio(f.user1.address, _optimizations.default.getMinCollateralRatioMinter());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinCollateralAtRatio(f.user1.address, _optimizations.default.getLiquidationThresholdMinter());\nawait f.Collateral.setPrice(9.9);\nconst accountCollateralValue = await hre.Diamond.getAccountTotalCollateralValue(f.user1.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "a9296f45-f257-4e24-a852-51a9b7cd573d",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without f.liquidator token approval for Kresko Assets",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without f.liquidator token approval for Kresko Assets",
                      "timedOut": false,
                      "duration": 127,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that f.liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(f.liquidatorTwo.address, hre.Diamond.address)).to.equal(0);\nconst repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(f.liquidatorTwo, repayAmount);\nawait f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0,\n    prices: await hre.updateData()\n});\n// Confirm that f.liquidator's token approval is still 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(f.user2.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "f9a22d3b-3e27-48ae-b76e-5eff82fd83b6",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change f.liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change f.liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 126,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(f.liquidatorTwo, repayAmount);\nawait f.KrAsset.contract.setVariable('_allowances', {\n    [f.liquidatorTwo.address]: {\n        [hre.Diamond.address]: repayAmount\n    }\n});\nawait (0, _chai.expect)(f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0,\n    prices: await hre.updateData()\n})).not.to.be.reverted;\n// Confirm that f.liquidator's token approval is unchanged\n(0, _chai.expect)(await f.KrAsset.contract.allowance(f.liquidatorTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "3d971aaa-4273-45c1-8666-01551e729218",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 44,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)(f.User.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0,\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_SELF');",
                      "err": {},
                      "uuid": "e895554d-8200-4d5f-93a7-5cf2d74f1545",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should error on seize underflow",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should error on seize underflow",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "e4390721-ba38-465b-b360-8ef444108447",
                      "parentUUID": "d7a910fc-ebca-4818-a5a4-49516cc21483",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2fa649cc-deba-4c86-9d1e-1ebb93dc1e6d",
                    "aee4fe7d-67b7-4036-899f-7fa5090842a2",
                    "5e9a5f54-80e0-4ca2-a0f1-c474e520ef1d",
                    "3e13b107-cb14-403a-a2e0-d8e744ed80e8",
                    "ea664d0f-603b-46eb-9c57-72274c05167f",
                    "8c5cb8e0-1cc3-409f-b76c-30403f890758",
                    "b0033150-36d5-464b-ade2-86743ebda7c3",
                    "a9296f45-f257-4e24-a852-51a9b7cd573d",
                    "f9a22d3b-3e27-48ae-b76e-5eff82fd83b6",
                    "3d971aaa-4273-45c1-8666-01551e729218",
                    "e895554d-8200-4d5f-93a7-5cf2d74f1545"
                  ],
                  "failures": [],
                  "pending": [
                    "e4390721-ba38-465b-b360-8ef444108447"
                  ],
                  "skipped": [],
                  "duration": 1773,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "9782907a-c038-4313-9ad2-d7650d2c498b",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 95,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.resetRebasing();",
                      "err": {},
                      "uuid": "b0107e57-0f46-45e8-97db-f1ac46f2a632",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should setup correct",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should setup correct",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [mcr, cr, cr2, liquidatable] = await Promise.all([\n    _optimizations.default.getMinCollateralRatioMinter(),\n    hre.Diamond.getAccountCollateralRatio(f.user3.address),\n    hre.Diamond.getAccountCollateralRatio(f.user4.address),\n    hre.Diamond.getAccountLiquidatable(f.user3.address)\n]);\n(0, _chai.expect)(cr).to.closeTo(mcr, 8);\n(0, _chai.expect)(cr2).to.closeTo(mcr, 1);\n(0, _chai.expect)(liquidatable).to.be.false;",
                      "err": {},
                      "uuid": "2a2286f5-ad3e-4d63-8769-63fa916afd7e",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 122,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nawait f.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(f.Liquidator.liquidate({\n    account: f.user4.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: 100,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user4.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user4.address, f.Collateral.address),\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_HEALTHY_ACCOUNT').withArgs(f.user4.address, 1000000000000, 933333332400, await hre.Diamond.getLiquidationThresholdMinter());",
                      "err": {},
                      "uuid": "047ad603-f5de-4388-99cd-16eb958748dc",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 134,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nawait f.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(f.Liquidator.liquidate({\n    account: f.user4.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: 100,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user4.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user4.address, f.Collateral.address),\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_HEALTHY_ACCOUNT').withArgs(f.user4.address, 1000000000000, 933333332400, await hre.Diamond.getLiquidationThresholdMinter());",
                      "err": {},
                      "uuid": "91af50ae-4ada-4973-81b3-302d630eeec5",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 939,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nawait f.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.false;\nawait f.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.true;\nawait (0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral, true);\nawait (0, _chai.expect)((0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "92e4a54a-79cb-4c4a-90b4-3cc6c0732304",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 353,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nawait f.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.false;\nawait f.KrAsset.setPrice(rebasePrice + 1);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "5cf5e4da-2a16-4faf-8525-bdb6f5a0ae6a",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 272,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.setAssetCFactor(f.KrAssetCollateral.address, 0.99e4);\nawait hre.Diamond.setAssetKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nawait f.KrAssetCollateral.setBalance(f.liquidator, maxLiq.repayAmount, hre.Diamond.address);\nawait f.Liquidator.liquidate({\n    account: f.user3.address,\n    repayAssetAddr: f.KrAssetCollateral.address,\n    repayAmount: maxLiq.repayAmount.sub(1e9),\n    seizeAssetAddr: f.KrAssetCollateral.address,\n    repayAssetIndex: maxLiq.repayAssetIndex,\n    seizeAssetIndex: maxLiq.seizeAssetIndex,\n    prices: await hre.updateData()\n});\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(f.user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "50b2c21f-83ef-4503-bc37-b2c7cb7ef339",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate to 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate to 0",
                      "timedOut": false,
                      "duration": 266,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.setAssetCFactor(f.KrAssetCollateral.address, 1e4);\nawait hre.Diamond.setAssetKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nconst liquidationAmount = maxLiq.repayAmount.add((0, _values.toBig)(20, 27));\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, liquidationAmount, hre.Diamond.address);\nawait f.Liquidator.liquidate({\n    account: f.user3.address,\n    repayAssetAddr: f.KrAssetCollateral.address,\n    repayAmount: liquidationAmount,\n    seizeAssetAddr: f.KrAssetCollateral.address,\n    repayAssetIndex: maxLiq.repayAssetIndex,\n    seizeAssetIndex: maxLiq.seizeAssetIndex,\n    prices: await hre.updateData()\n});\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(f.user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(0);",
                      "err": {},
                      "uuid": "1dc15170-1291-4286-9c5d-f05635bc84d3",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 742,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nawait f.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user4.address)){\n    const values = await (0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nawait f.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user5.address)){\n    const values = await (0, _liquidations.liquidate)(f.user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid * denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "9c46c815-350c-455b-bb5e-72a40e084bb1",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 940,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nawait f.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user4.address)){\n    const values = await (0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nawait f.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user5.address)){\n    const values = await (0, _liquidations.liquidate)(f.user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid / denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "b41af149-67bb-4e5b-9ee6-e48b13c78b56",
                      "parentUUID": "9782907a-c038-4313-9ad2-d7650d2c498b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2a2286f5-ad3e-4d63-8769-63fa916afd7e",
                    "047ad603-f5de-4388-99cd-16eb958748dc",
                    "91af50ae-4ada-4973-81b3-302d630eeec5",
                    "92e4a54a-79cb-4c4a-90b4-3cc6c0732304",
                    "5cf5e4da-2a16-4faf-8525-bdb6f5a0ae6a",
                    "50b2c21f-83ef-4503-bc37-b2c7cb7ef339",
                    "1dc15170-1291-4286-9c5d-f05635bc84d3",
                    "9c46c815-350c-455b-bb5e-72a40e084bb1",
                    "b41af149-67bb-4e5b-9ee6-e48b13c78b56"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3851,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "983b41ce-f78c-45d9-9eb7-795a3a1ad38c",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 95,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.mintRepayFixture)();\nawait f.reset();",
              "err": {},
              "uuid": "45ad946d-a522-4bc9-9778-d7bc59077ac2",
              "parentUUID": "983b41ce-f78c-45d9-9eb7-795a3a1ad38c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9216b3a5-3f03-4add-a96d-89080834f70b",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "486a52ee-2430-47a4-a5fc-356c933a6019",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 100,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(f.initialMintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _values.toBig)(10);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "f7ee81b9-ec54-4fa9-a836-ab20179b2e39",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 187,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(50);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: firstMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(50);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: secondMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "235e3cee-9879-4b33-b163-8dedddf626db",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 193,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(10);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: firstMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(20);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset2.address,\n    amount: secondMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset2);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset2.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await f.KrAsset2.contract.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "e63418f3-09b0-4e6c-8581-725a4b6f64ba",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _values.toBig)(1) // 1 * $10 = $10\n;\nconst mintAmountUSDValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst currMinimumDebtValue = await hre.Diamond.getMinDebtValueMinter();\n(0, _chai.expect)(mintAmountUSDValue).to.equal(currMinimumDebtValue);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "882ec517-8414-4fd2-a2e2-fe5a6745b008",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.Role.MANAGER, f.user2.address);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _values.toBig)(1);\nawait f.User2.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Check that debt exists now for userOne\nconst userTwoBalanceAfter = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userTwoBalanceAfter).to.equal(mintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);",
                      "err": {},
                      "uuid": "32a71397-ca6d-404a-8570-5d96e489744a",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 84,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: f.initialMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetMinted');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount);",
                      "err": {},
                      "uuid": "7bb374ab-cef8-4449-a377-dbd974d6be73",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 49,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.User1.mintKreskoAsset({\n    account: f.user2.address,\n    krAsset: f.KrAsset.address,\n    amount: (0, _values.toBig)(1),\n    receiver: f.user2.address\n}, await hre.updateData())).to.be.revertedWith(`AccessControl: account ${f.user1.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "c95cc4c7-1042-4b70-a750-4535d6a9adba",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currMinimumDebtValue = await _optimizations.default.getMinDebtValue();\nconst mintAmount = currMinimumDebtValue.wadDiv(_mocks.TEN_USD.ebn(8)).sub(1e9);\nawait (0, _chai.expect)(f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'MINT_VALUE_LESS_THAN_MIN_DEBT_VALUE').withArgs(f.KrAsset.errorId, 10e8 - 1, currMinimumDebtValue);",
                      "err": {},
                      "uuid": "3c134b2a-4344-4a17-b205-d5915904a176",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 47,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)(f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: '0x0000000000000000000000000000000000000002',\n    amount: (0, _values.toBig)(1),\n    receiver: f.user1.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ASSET_NOT_MINTABLE_FROM_MINTER').withArgs([\n    '',\n    '0x0000000000000000000000000000000000000002'\n]);",
                      "err": {},
                      "uuid": "a1900ce3-4a3e-48ed-a424-0ba561a9911a",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmountDeposited = await _optimizations.default.getAccountCollateralAmount(f.user1.address, f.Collateral.address);\nconst MCR = await hre.Diamond.getMinCollateralRatioMinter();\nconst mcrAmount = collateralAmountDeposited.percentMul(MCR);\nconst mintAmount = mcrAmount.add(1);\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst userState = await hre.Diamond.getAccountState(f.user1.address);\nawait (0, _chai.expect)(f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ACCOUNT_COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs(f.user1.address, userState.totalCollateralValue, mintValue.percentMul(MCR), MCR);",
                      "err": {},
                      "uuid": "664f1977-0b84-4555-904e-3ee8646fa5f5",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 144,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait f.Collateral.setBalance(f.user1, (0, _values.toBig)(100000000));\nawait (0, _chai.expect)(f.User1.depositCollateral(f.user1.address, f.Collateral.address, (0, _values.toBig)(10000))).not.to.be.reverted;\nconst assetSupplyLimit = (0, _values.toBig)(1);\nconst mintAmount = (0, _values.toBig)(2);\nawait f.KrAsset.update({\n    maxDebtMinter: assetSupplyLimit\n});\nawait (0, _chai.expect)(f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'EXCEEDS_ASSET_MINTING_LIMIT').withArgs(f.KrAsset.errorId, (await f.KrAsset.contract.totalSupply()).add(mintAmount), assetSupplyLimit);\nawait f.KrAsset.update({\n    maxDebtMinter: assetSupplyLimit\n});",
                      "err": {},
                      "uuid": "56a32451-aa97-4cff-9a02-be56c274abce",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "0432ff77-fe51-416c-8342-7c3986b26fee",
                      "parentUUID": "486a52ee-2430-47a4-a5fc-356c933a6019",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f7ee81b9-ec54-4fa9-a836-ab20179b2e39",
                    "235e3cee-9879-4b33-b163-8dedddf626db",
                    "e63418f3-09b0-4e6c-8581-725a4b6f64ba",
                    "882ec517-8414-4fd2-a2e2-fe5a6745b008",
                    "32a71397-ca6d-404a-8570-5d96e489744a",
                    "7bb374ab-cef8-4449-a377-dbd974d6be73",
                    "c95cc4c7-1042-4b70-a750-4535d6a9adba",
                    "3c134b2a-4344-4a17-b205-d5915904a176",
                    "a1900ce3-4a3e-48ed-a424-0ba561a9911a",
                    "664f1977-0b84-4555-904e-3ee8646fa5f5",
                    "56a32451-aa97-4cff-9a02-be56c274abce"
                  ],
                  "failures": [],
                  "pending": [
                    "0432ff77-fe51-416c-8342-7c3986b26fee"
                  ],
                  "skipped": [],
                  "duration": 1166,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "627d087e-6141-48ba-8cd2-a0adb20937ab",
                  "title": "#mint - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1032d7e2-fa85-4922-b315-ab89b5ed74f1",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 93,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "6333be2c-b21d-4f6c-b25f-234904957ea9",
                          "parentUUID": "1032d7e2-fa85-4922-b315-ab89b5ed74f1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "ba27a201-61de-469d-b177-7ab074917d3a",
                          "parentUUID": "1032d7e2-fa85-4922-b315-ab89b5ed74f1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 92,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "265d5e77-9e8a-4865-82f4-15df70f743a5",
                          "parentUUID": "1032d7e2-fa85-4922-b315-ab89b5ed74f1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 96,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "3fcc4247-db06-42b1-851e-d13f4c5188aa",
                          "parentUUID": "1032d7e2-fa85-4922-b315-ab89b5ed74f1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "6333be2c-b21d-4f6c-b25f-234904957ea9",
                        "ba27a201-61de-469d-b177-7ab074917d3a",
                        "265d5e77-9e8a-4865-82f4-15df70f743a5",
                        "3fcc4247-db06-42b1-851e-d13f4c5188aa"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 372,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "170e44a7-ef42-4880-94aa-3b03e633fc50",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 164,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Adjust price accordingly\nconst { pyth: assetPrice } = await f.KrAsset.getPrice();\nawait f.KrAsset.setPrice((0, _values.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "8abc8077-3b70-4666-9ab9-8457a389969e",
                          "parentUUID": "170e44a7-ef42-4880-94aa-3b03e633fc50",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 164,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Adjust price accordingly\nconst { pyth: assetPrice } = await f.KrAsset.getPrice();\nawait f.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "c5531210-cfd7-44a6-aa20-3cab4d5543e5",
                          "parentUUID": "170e44a7-ef42-4880-94aa-3b03e633fc50",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 158,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst { pyth: assetPrice } = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nawait f.KrAsset.setPrice((0, _values.fromBig)(assetPrice, 8) / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: equalMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "890e00c9-b01d-4f27-9f33-4037ace8445d",
                          "parentUUID": "170e44a7-ef42-4880-94aa-3b03e633fc50",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 160,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst { pyth: assetPrice } = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nawait f.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: equalMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "7b2d69ad-51b1-4131-9bc0-a16079fc84ce",
                          "parentUUID": "170e44a7-ef42-4880-94aa-3b03e633fc50",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "8abc8077-3b70-4666-9ab9-8457a389969e",
                        "c5531210-cfd7-44a6-aa20-3cab4d5543e5",
                        "890e00c9-b01d-4f27-9f33-4037ace8445d",
                        "7b2d69ad-51b1-4131-9bc0-a16079fc84ce"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 646,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "1b0f929e-9808-4d41-9a30-6cbfdbd6d29a",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 288,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const { pyth: assetPrice } = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(f.user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nawait f.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(valueBeforeRebase);\n// Mint after rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmountAfterRebase,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await f.KrAsset.contract.balanceOf(f.user1.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, f.KrAsset)).to.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "60d8bd43-a82f-4720-a63c-067d88bd990c",
                          "parentUUID": "1b0f929e-9808-4d41-9a30-6cbfdbd6d29a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 285,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const { pyth: assetPrice } = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(f.user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nawait f.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, f.KrAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, f.KrAsset));\n// Mint after rebase\nawait f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmountAfterRebase,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "d5c35a53-78ae-444d-9ef2-2904c787035a",
                          "parentUUID": "1b0f929e-9808-4d41-9a30-6cbfdbd6d29a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "60d8bd43-a82f-4720-a63c-067d88bd990c",
                        "d5c35a53-78ae-444d-9ef2-2904c787035a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 573,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 81,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: f.initialMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());",
                      "err": {},
                      "uuid": "0c1c4505-0a54-4357-b869-13da5eaf752e",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 92,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: burnAmount,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalance).to.equal(f.initialMintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userDebt).to.closeTo(f.initialMintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "8473ee2c-f0cf-4fcc-9601-68340d2228a5",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.Role.MANAGER, f.user2.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nconst userOneBalanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait f.User2.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: burnAmount,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user2.address\n}, await hre.updateData());\n// await expect(f.User2.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be\n//   .reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await f.KrAsset.balanceOf(f.user1.address);\n(0, _chai.expect)(userOneBalance).to.equal(userOneBalanceBefore, 'userOneBalance');\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await f.KrAsset.balanceOf(f.user2.address);\n(0, _chai.expect)(userThreeBalance).to.equal(f.initialMintAmount.sub(burnAmount), 'userThreeBalance');\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount), 'totalSupplyAfter');\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user2.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n], 'mintedKreskoAssetsAfter');\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebt).to.equal(f.initialMintAmount.sub(burnAmount));",
                      "err": {},
                      "uuid": "a54ef063-42c1-4cb1-a474-bfb4ba4e0ccc",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "191d40aa-92c8-4d4e-9a27-891ce0de07f2",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 101,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await f.KrAsset.balanceOf(f.user1.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\nconst minDebtValue = (0, _values.fromBig)(await _optimizations.default.getMinDebtValue(), 8);\nconst oraclePrice = f.KrAsset.config.args.price;\nconst burnAmount = (0, _values.toBig)((0, _values.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: burnAmount,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(f.user1.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "134bd00f-63ca-4d38-8702-09d2672c6a58",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: f.initialMintAmount.div(5),\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData());\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetBurned');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount.div(5));",
                      "err": {},
                      "uuid": "d5b8b546-393d-4de9-a676-27fc5e149908",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 157,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = f.initialMintAmount.add(secondMintAmount);\nawait (0, _chai.expect)(f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: secondMintAmount,\n    receiver: f.user1.address\n}, await hre.updateData())).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)(f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: burnAmount,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData())).to.not.be.reverted;",
                      "err": {},
                      "uuid": "527ef719-4d14-48c0-b1b1-f79561afc748",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: 0,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ZERO_BURN');",
                      "err": {},
                      "uuid": "c1be995a-edda-4243-9f52-55149d1c3585",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 44,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(f.User2.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: 100,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData())).to.be.revertedWith(`AccessControl: account ${f.user2.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "570a77fa-d658-43e7-b570-28f975881e0e",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to use another repayee to burn kresko assets",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to use another repayee to burn kresko assets",
                      "timedOut": false,
                      "duration": 44,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: 100,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user2.address\n}, await hre.updateData())).to.be.revertedWith(`AccessControl: account ${f.user1.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "3fcc4330-24b6-4147-a0f8-9992d87fa613",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\nconst burnAmount = debt.add((0, _values.toBig)(1));\nawait (0, _chai.expect)(f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: burnAmount,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData())).to.be.reverted;",
                      "err": {},
                      "uuid": "baaa1d01-8064-482d-9b71-83aaca861c24",
                      "parentUUID": "1436a8c1-bf90-4f4e-a799-579aeea7b195",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "2d3edeae-5de6-490e-884e-87c3f6cbac6f",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "timedOut": false,
                          "duration": 165,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01e4;\nawait f.KrAsset.update({\n    openFee,\n    maxDebtMinter: _values.MaxUint128\n});\nconst mintAmount = (0, _values.toBig)(1);\nconst mintValue = mintAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst expectedFeeValue = mintValue.percentMul(openFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(_mocks.TEN_USD.ebn(8));\n// Get the balances prior to the fee being charged.\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Mint Kresko asset\nconst tx = await f.User1.mintKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: mintAmount,\n    receiver: f.user1.address\n}, await hre.updateData());\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.OPEN);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst [, values] = await hre.Diamond.previewFee(f.user1.address, f.KrAsset.address, mintAmount, _types.MinterFee.OPEN);\n(0, _chai.expect)(values[0]).eq(expectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "45b8b881-4884-40c3-bff1-cb37465fd7c9",
                          "parentUUID": "2d3edeae-5de6-490e-884e-87c3f6cbac6f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "45b8b881-4884-40c3-bff1-cb37465fd7c9"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 165,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "d5791e59-6530-463e-ac0a-47d7d60815e7",
                      "title": "Protocol Close Fee",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _values.toBig)(1);\nconst burnValue = burnAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst closeFee = f.KrAsset.config.args.krAssetConfig.closeFee // use toBig() to emulate closeFee's 18 decimals on contract\n;\nconst expectedFeeValue = burnValue.percentMul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(f.Collateral.config.args.price.ebn(8));\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: burnAmount,\n    mintIndex: kreskoAssetIndex,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.CLOSE);",
                          "err": {},
                          "uuid": "e757683e-3a9e-483d-84c0-e945e6238369",
                          "parentUUID": "d5791e59-6530-463e-ac0a-47d7d60815e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 298,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.CLOSE);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nawait f.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.mul(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: f.user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n}, await hre.updateData());\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "2b978380-f2a1-4114-b468-f3ca6d2bfd57",
                          "parentUUID": "d5791e59-6530-463e-ac0a-47d7d60815e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 339,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.CLOSE);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _values.fromBig)((await f.KrAsset.getPrice()).pyth, 8) * denominator;\nawait f.KrAsset.setPrice(priceAfter);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.div(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: f.user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n}, await hre.updateData());\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "615508b2-ec19-4bba-a593-c11767f874cf",
                          "parentUUID": "d5791e59-6530-463e-ac0a-47d7d60815e7",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e757683e-3a9e-483d-84c0-e945e6238369",
                        "2b978380-f2a1-4114-b468-f3ca6d2bfd57",
                        "615508b2-ec19-4bba-a593-c11767f874cf"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 728,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [
                    "8473ee2c-f0cf-4fcc-9601-68340d2228a5",
                    "a54ef063-42c1-4cb1-a474-bfb4ba4e0ccc",
                    "134bd00f-63ca-4d38-8702-09d2672c6a58",
                    "d5b8b546-393d-4de9-a676-27fc5e149908",
                    "527ef719-4d14-48c0-b1b1-f79561afc748",
                    "c1be995a-edda-4243-9f52-55149d1c3585",
                    "570a77fa-d658-43e7-b570-28f975881e0e",
                    "3fcc4330-24b6-4147-a0f8-9992d87fa613",
                    "baaa1d01-8064-482d-9b71-83aaca861c24"
                  ],
                  "failures": [],
                  "pending": [
                    "191d40aa-92c8-4d4e-9a27-891ce0de07f2"
                  ],
                  "skipped": [],
                  "duration": 725,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "56095378-91dd-4e5f-8a1d-0a543c2fdb27",
                  "title": "#burn - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase \"before each\" hook in \"#burn - rebase\"",
                      "timedOut": false,
                      "duration": 80,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: f.KrAsset,\n    amount: mintAmount,\n    user: f.user1\n});",
                      "err": {},
                      "uuid": "99d33b01-4e45-4810-8922-c1b3fe1bdda7",
                      "parentUUID": "56095378-91dd-4e5f-8a1d-0a543c2fdb27",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "c06fe9f1-4420-4aea-b877-ce58a5a16b23",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 138,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nawait f.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: repayAmount,\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(debtAfter).to.equal(0);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(0);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(f.initialMintAmount) // WEI\n;",
                          "err": {},
                          "uuid": "f18a2d38-5621-47f7-933e-dedc9bcdb374",
                          "parentUUID": "c06fe9f1-4420-4aea-b877-ce58a5a16b23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 155,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nawait f.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: repayAmount,\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "e0b34735-7645-4e12-af9c-fbe1dcf8a28e",
                          "parentUUID": "c06fe9f1-4420-4aea-b877-ce58a5a16b23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 139,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nawait f.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: repayAmount,\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _values.fromBig)(await f.KrAsset.contract.balanceOf(f.user1.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _values.toBig)(expectedBalanceAfterBurn * denominator).add(f.initialMintAmount));",
                          "err": {},
                          "uuid": "1aaa34b7-0216-4f87-a45f-00dafbbd4ede",
                          "parentUUID": "c06fe9f1-4420-4aea-b877-ce58a5a16b23",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 157,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nawait f.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: repayAmount,\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "b72ce11f-9608-40dc-9cfc-b1643e700465",
                          "parentUUID": "c06fe9f1-4420-4aea-b877-ce58a5a16b23",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f18a2d38-5621-47f7-933e-dedc9bcdb374",
                        "e0b34735-7645-4e12-af9c-fbe1dcf8a28e",
                        "1aaa34b7-0216-4f87-a45f-00dafbbd4ede",
                        "b72ce11f-9608-40dc-9cfc-b1643e700465"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 589,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "a72f7411-0321-4825-bcf5-138abfe09e3f",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 129,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nawait f.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: fullRepayAmount,\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "03ed5f03-8256-412d-9285-dca6a40f5cfd",
                          "parentUUID": "a72f7411-0321-4825-bcf5-138abfe09e3f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 169,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price according to rebase params\nawait f.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(f.KrAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: debt.div(2),\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "8c98d118-b851-4b2f-819d-c3316ea32915",
                          "parentUUID": "a72f7411-0321-4825-bcf5-138abfe09e3f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 136,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nawait f.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: fullRepayAmount,\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "28534b53-d54b-4b9a-bb19-b2007d6d2af1",
                          "parentUUID": "a72f7411-0321-4825-bcf5-138abfe09e3f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 164,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nawait f.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nawait f.User1.burnKreskoAsset({\n    account: f.user1.address,\n    krAsset: f.KrAsset.address,\n    amount: debt.div(2),\n    mintIndex: 0,\n    repayee: f.user1.address\n}, await hre.updateData());\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "94f64d34-dc71-4062-9c4d-76e9e0c4ee14",
                          "parentUUID": "a72f7411-0321-4825-bcf5-138abfe09e3f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "03ed5f03-8256-412d-9285-dca6a40f5cfd",
                        "8c98d118-b851-4b2f-819d-c3316ea32915",
                        "28534b53-d54b-4b9a-bb19-b2007d6d2af1",
                        "94f64d34-dc71-4062-9c4d-76e9e0c4ee14"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 598,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3526d770-771e-41f3-b961-c41f348103ce",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[, , [user]] = f.users;",
              "err": {},
              "uuid": "261d7b52-fc38-43d8-a09f-a2ad9701bc26",
              "parentUUID": "3526d770-771e-41f3-b961-c41f348103ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2f1007d2-53ae-469b-aefe-8f4669976cc1",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "78530f61-fef4-4ca1-9a9d-4fea71f7b497",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw withdraw correct amount",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nawait (0, _chai.expect)(f.Receiver.testWithdrawalAmount(f.Collateral.address, withdrawalAmount, await hre.updateData())).to.not.be.revertedWith('wrong amount received');\n(0, _chai.expect)(await f.Collateral.balanceOf(f.Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "1c2c3334-eb87-4aa3-bd1f-367d7004a073",
                      "parentUUID": "78530f61-fef4-4ca1-9a9d-4fea71f7b497",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 92,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst balKreskoBefore = await f.Collateral.contract.balanceOf(hre.Diamond.address);\nawait Receiver.test(f.Collateral.address, 1, await hre.updateData());\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(f.Collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(user.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await f.Collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "805cf763-c5d9-4830-a110-b7441805302c",
                      "parentUUID": "78530f61-fef4-4ca1-9a9d-4fea71f7b497",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 213,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(f.Collateral.address, maxWithdrawAmount, await hre.updateData());\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user.address)).to.be.eq(1.5e4);\nawait (0, _chai.expect)(Receiver.test(f.Collateral.address, 10e15.toString(), await hre.updateData())).to.be.reverted;",
                      "err": {},
                      "uuid": "e22867aa-831b-4d79-b169-6571bd41605d",
                      "parentUUID": "78530f61-fef4-4ca1-9a9d-4fea71f7b497",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 99,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nawait Receiver.testRedeposit(f.Collateral.address, deposits, await hre.updateData());\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await f.Collateral.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await f.Collateral.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "dfb13346-9fc4-4fa6-941a-572c3562a591",
                      "parentUUID": "78530f61-fef4-4ca1-9a9d-4fea71f7b497",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 142,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nawait f.Collateral2.setPrice(10);\nawait f.Collateral2.setBalance(user, f.depositAmount);\nawait f.Collateral2.contract.setVariable('_allowances', {\n    [user.address]: {\n        [hre.Diamond.address]: f.depositAmount,\n        [Receiver.address]: f.depositAmount\n    }\n});\nawait Receiver.testDepositAlternate(f.Collateral.address, deposits, f.Collateral2.address, await hre.updateData());\nconst secondCollateralDeposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral2.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "6a453cc3-b19a-43eb-a86e-a2de0b021339",
                      "parentUUID": "78530f61-fef4-4ca1-9a9d-4fea71f7b497",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1c2c3334-eb87-4aa3-bd1f-367d7004a073",
                    "805cf763-c5d9-4830-a110-b7441805302c",
                    "e22867aa-831b-4d79-b169-6571bd41605d",
                    "dfb13346-9fc4-4fa6-941a-572c3562a591",
                    "6a453cc3-b19a-43eb-a86e-a2de0b021339"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 643,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "12bc626a-a7ff-433b-b172-375d29d3be29",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 55,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 0, await hre.updateData())).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 0)).to.be.revertedWith(Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "dfedd798-50c7-4182-b982-8e44467b9102",
                      "parentUUID": "12bc626a-a7ff-433b-b172-375d29d3be29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.revokeRole(_roles.Role.MANAGER, f.Receiver.address);\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 10000, await hre.updateData())).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 10000)).to.be.revertedWith(\n            //     `AccessControl: account ${f.Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`,\n            // );",
                      "err": {},
                      "uuid": "261803fc-d94b-44aa-82b8-fcdb2db975cb",
                      "parentUUID": "12bc626a-a7ff-433b-b172-375d29d3be29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()), await hre.updateData())).to.be.reverted;",
                      "err": {},
                      "uuid": "84113803-31b5-44e9-b30d-788561fbcf52",
                      "parentUUID": "12bc626a-a7ff-433b-b172-375d29d3be29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()), await hre.updateData())).to.be.reverted;",
                      "err": {},
                      "uuid": "9b851428-21ab-4826-9895-a09f3191ce4d",
                      "parentUUID": "12bc626a-a7ff-433b-b172-375d29d3be29",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dfedd798-50c7-4182-b982-8e44467b9102",
                    "261803fc-d94b-44aa-82b8-fcdb2db975cb",
                    "84113803-31b5-44e9-b30d-788561fbcf52",
                    "9b851428-21ab-4826-9895-a09f3191ce4d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 328,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
          "title": "Gating",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/06-gating.ts",
          "file": "/src/test/minter/06-gating.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Gating\"",
              "fullTitle": "Gating \"before each\" hook in \"Gating\"",
              "timedOut": false,
              "duration": 126,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[nft] = await hre.deploy('MockERC1155', {\n    args: [\n        'MockERC1155_1',\n        'MockERC1155_1',\n        'https://mock.com/{id}.json',\n        'https://mock.com/contract.json'\n    ],\n    deploymentName: 'MockERC1155_1',\n    from: hre.users.deployer.address\n});\n[nft2] = await hre.deploy('MockERC1155', {\n    args: [\n        'MockERC1155_2',\n        'MockERC1155_2',\n        'https://mock2.com/{id}.json',\n        'https://mock2.com/contract2.json'\n    ],\n    deploymentName: 'MockERC1155_2',\n    from: hre.users.deployer.address\n});\n[this.GatingManager] = await hre.deploy('GatingManager', {\n    args: [\n        hre.users.deployer.address,\n        nft.address,\n        nft2.address,\n        1\n    ],\n    from: hre.users.deployer.address\n});\nawait hre.Diamond.setGatingManager(this.GatingManager.address);\n// setup collateral for userOne and userTwo\nthis.initialBalance = (0, _values.toBig)(100000);\nawait f.Collateral.setBalance(hre.users.userOne, this.initialBalance, hre.Diamond.address);\nawait f.Collateral.setBalance(hre.users.userTwo, this.initialBalance, hre.Diamond.address);\nthis.depositArgsOne = {\n    user: hre.users.userOne,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\nthis.depositArgsTwo = {\n    user: hre.users.userTwo,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};",
              "err": {},
              "uuid": "1ff76415-6292-4740-8127-17a40fefb5f0",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not allow users to access phase 1 without nfts",
              "fullTitle": "Gating should not allow users to access phase 1 without nfts",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 1, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 2, 1);\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "1815ef85-94d4-4812-b51d-e98f4c2c628e",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow users to access in phase 1",
              "fullTitle": "Gating should allow users to access in phase 1",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 1, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 2, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 3, 1);\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "63fb3cff-740f-4523-bdc2-706100ba4f36",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow users to access phase 2 without nfts",
              "fullTitle": "Gating should not allow users to access phase 2 without nfts",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(2);\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "a4713836-4a15-47b7-b8ed-6faa3c810a49",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow users to access in phase 2",
              "fullTitle": "Gating should allow users to access in phase 2",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(2);\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "3e410fd6-d25b-484f-8be3-0daeec21a1f0",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow users to access phase 3 without nfts",
              "fullTitle": "Gating should not allow users to access phase 3 without nfts",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(3);\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "80a7c735-cbda-400a-9582-7e82b71282bd",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow users to access in phase 3",
              "fullTitle": "Gating should allow users to access in phase 3",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(3);\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "5a662b04-17eb-432e-8908-f3d45d945c80",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After all the phases anyone should be able to deposit collateral",
              "fullTitle": "Gating After all the phases anyone should be able to deposit collateral",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(0);\n// Anyone should be able to deposit collateral\nawait (0, _chai.expect)(hre.Diamond.connect(this.depositArgsTwo.user).depositCollateral(this.depositArgsTwo.user.address, f.Collateral.address, this.depositArgsTwo.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "723698ec-9982-4111-a70b-1dbf7c505217",
              "parentUUID": "d6361d1d-c87f-43cf-82c5-aed3a4d64162",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1815ef85-94d4-4812-b51d-e98f4c2c628e",
            "63fb3cff-740f-4523-bdc2-706100ba4f36",
            "a4713836-4a15-47b7-b8ed-6faa3c810a49",
            "3e410fd6-d25b-484f-8be3-0daeec21a1f0",
            "80a7c735-cbda-400a-9582-7e82b71282bd",
            "5a662b04-17eb-432e-8908-f3d45d945c80",
            "723698ec-9982-4111-a70b-1dbf7c505217"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 182,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a908866b-b6dc-4da1-af94-c027d87a1816",
          "title": "Oracles",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/oracle/00-oracles.ts",
          "file": "/src/test/oracle/00-oracles.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Oracles\"",
              "fullTitle": "Oracles \"before each\" hook in \"Oracles\"",
              "timedOut": false,
              "duration": 64,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[, [user]] = f.users;\nthis.deployer = await hre.ethers.getNamedSigner('deployer');\nthis.userOne = await hre.ethers.getNamedSigner('userOne');\nawait f.Collateral.setPrice(10);\nmockPyth = await hre.getContractOrFork('MockPyth');",
              "err": {},
              "uuid": "cc0b3367-6c84-4de2-8604-aee4b69a46c3",
              "parentUUID": "a908866b-b6dc-4da1-af94-c027d87a1816",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8ce70d3b-4acb-4251-92b9-ffcd285f38b6",
              "title": "Redstone",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/oracle/00-oracles.ts",
              "file": "/src/test/oracle/00-oracles.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct setup",
                  "fullTitle": "Oracles Redstone should have correct setup",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check initial conditions\n(0, _chai.expect)(await hre.Diamond.getAccountTotalCollateralValue(user.address)).to.equal((0, _values.toBig)(10000, 8), 'collateral value should be $10');",
                  "err": {},
                  "uuid": "f950d571-4610-4781-841f-2d0d6675cc9a",
                  "parentUUID": "8ce70d3b-4acb-4251-92b9-ffcd285f38b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get primary price when price +- maxPriceDeviationPct of reference price ",
                  "fullTitle": "Oracles Redstone should get primary price when price +- maxPriceDeviationPct of reference price ",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.Collateral.setOracleOrder([\n    _types.OracleType.Pyth,\n    _types.OracleType.Chainlink\n]);\n/// set chainlink price to 12\nawait f.Collateral.setPrice(12);\n/// set price to 11\nconst pythPrice = 11;\nawait mockPyth.updatePriceFeeds(await (0, _oracle.mapToUpdateData)(mockPyth, [\n    [\n        f.Collateral.pythId,\n        pythPrice\n    ]\n]));\n(0, _chai.expect)(await hre.Diamond.getAccountTotalCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _values.toBig)(pythPrice, 8)), 'collateral value should be $11');",
                  "err": {},
                  "uuid": "0fa09ff4-0cd6-49ac-ba88-3c77e299092b",
                  "parentUUID": "8ce70d3b-4acb-4251-92b9-ffcd285f38b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Oracles Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nawait f.Collateral.setPrice(20);\nconst pythPrice = 10;\nawait mockPyth.updatePriceFeeds(await (0, _oracle.mapToUpdateData)(mockPyth, [\n    [\n        f.Collateral.pythId,\n        pythPrice\n    ]\n]));\n// should revert if price deviates more than maxPriceDeviationPct\nawait (0, _chai.expect)(hre.Diamond.getAccountTotalCollateralValue(user.address)).to.be.reverted;\nawait f.Collateral.setPrice(10);",
                  "err": {},
                  "uuid": "dbb05dfa-823e-4a81-8cdf-8d3df1cba7d9",
                  "parentUUID": "8ce70d3b-4acb-4251-92b9-ffcd285f38b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f950d571-4610-4781-841f-2d0d6675cc9a",
                "0fa09ff4-0cd6-49ac-ba88-3c77e299092b",
                "dbb05dfa-823e-4a81-8cdf-8d3df1cba7d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c11013e9-d291-4d56-8837-7987c37d687c",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devOne, userOne, extOne, extTwo } = await hre.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.userOne = userOne;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
              "uuid": "936b310e-3271-4278-b4b7-8e62297a59ff",
              "parentUUID": "c11013e9-d291-4d56-8837-7987c37d687c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d74cc84a-8b40-44a8-ace5-7df66edffd88",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'setSafetyStateSet', [\n    true\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst safetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "74f7443c-a1af-4a8f-9bd2-6a6a86a71425",
                  "parentUUID": "d74cc84a-8b40-44a8-ace5-7df66edffd88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74f7443c-a1af-4a8f-9bd2-6a6a86a71425"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "de1aa525-ff72-48e6-99ea-1a55a62187e9",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "084fc947-eb7b-4cec-8347-9204b23cee87",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "f81d20c0-326b-45b2-bc21-00d4e2ce65c5",
                      "parentUUID": "084fc947-eb7b-4cec-8347-9204b23cee87",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "05accffe-2de6-48a4-8527-c8e980cc90a2",
                      "parentUUID": "084fc947-eb7b-4cec-8347-9204b23cee87",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "d909952d-e003-47cd-86ea-3a61b7c83808",
                      "parentUUID": "084fc947-eb7b-4cec-8347-9204b23cee87",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "e8bde476-d760-4f6f-ab10-b026c08ed634",
                      "parentUUID": "084fc947-eb7b-4cec-8347-9204b23cee87",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f81d20c0-326b-45b2-bc21-00d4e2ce65c5",
                    "05accffe-2de6-48a4-8527-c8e980cc90a2",
                    "d909952d-e003-47cd-86ea-3a61b7c83808",
                    "e8bde476-d760-4f6f-ab10-b026c08ed634"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 109,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "0f39abd9-d8ed-4c21-9e9f-8ab68ea655ca",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "72279ce3-f3b4-4853-835d-0f3764040956",
                      "parentUUID": "0f39abd9-d8ed-4c21-9e9f-8ab68ea655ca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.KrAsset.address\n    ],\n    _types.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.REPAY.toString(), f.KrAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "1e030827-2fa1-47f7-8bc7-1581f1b2262b",
                      "parentUUID": "0f39abd9-d8ed-4c21-9e9f-8ab68ea655ca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hre.ethers.utils.computeAddress('0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d');\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        randomAddr\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "e22fded5-8f43-4587-a874-7cdfa43a9795",
                      "parentUUID": "0f39abd9-d8ed-4c21-9e9f-8ab68ea655ca",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "72279ce3-f3b4-4853-835d-0f3764040956",
                    "1e030827-2fa1-47f7-8bc7-1581f1b2262b",
                    "e22fded5-8f43-4587-a874-7cdfa43a9795"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 92,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "7bea7ca1-138d-4c4e-bb39-61a77aff99bb",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _types.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "0956f211-b345-4964-8cbe-7a03046aa382",
                      "parentUUID": "7bea7ca1-138d-4c4e-bb39-61a77aff99bb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "e997e283-5eda-4c38-8107-7086dc6115f6",
                      "parentUUID": "7bea7ca1-138d-4c4e-bb39-61a77aff99bb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0956f211-b345-4964-8cbe-7a03046aa382"
                  ],
                  "failures": [],
                  "pending": [
                    "e997e283-5eda-4c38-8107-7086dc6115f6"
                  ],
                  "skipped": [],
                  "duration": 29,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "b6266348-2afe-45dd-b14a-7953341f31d5",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "db40eb12-42da-4a6f-9fd7-6a7a1a902e56",
                      "parentUUID": "b6266348-2afe-45dd-b14a-7953341f31d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "9da9c272-405d-40f4-9e83-9c63f584ce47",
                      "parentUUID": "b6266348-2afe-45dd-b14a-7953341f31d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "cc7f3166-4046-4a9a-a6ca-17793fc9fa63",
                      "parentUUID": "b6266348-2afe-45dd-b14a-7953341f31d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 55,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "1d7987c7-38c6-4cb8-9cc7-e81d624a6dfd",
                      "parentUUID": "b6266348-2afe-45dd-b14a-7953341f31d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "6159fa93-0743-43fc-8c90-ac52cfa9f40d",
                      "parentUUID": "b6266348-2afe-45dd-b14a-7953341f31d5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "db40eb12-42da-4a6f-9fd7-6a7a1a902e56",
                    "9da9c272-405d-40f4-9e83-9c63f584ce47",
                    "cc7f3166-4046-4a9a-a6ca-17793fc9fa63",
                    "1d7987c7-38c6-4cb8-9cc7-e81d624a6dfd",
                    "6159fa93-0743-43fc-8c90-ac52cfa9f40d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 288,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "3ce35c0e-185a-4566-a624-7e021ac53244",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'SafetyStateChange');\n(0, _chai.expect)(event.action).to.equal(_types.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.description).to.equal('paused');",
                      "err": {},
                      "uuid": "4261fc3c-5c64-4fd9-889d-bae44aa0aa2e",
                      "parentUUID": "3ce35c0e-185a-4566-a624-7e021ac53244",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4261fc3c-5c64-4fd9-889d-bae44aa0aa2e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 26,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ca780314-d36f-43db-8d50-8a99cd2f0c3f",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 243,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.scdpFixture)();\nawait f.reset();",
              "err": {},
              "uuid": "30bd0051-dab6-4dc4-a8e6-8eff7f9f969b",
              "parentUUID": "ca780314-d36f-43db-8d50-8a99cd2f0c3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4855d738-9431-42e2-856c-a1eaf0e57097",
              "title": "#Configuration",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be initialized correctly",
                  "fullTitle": "SCDP #Configuration should be initialized correctly",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { args } = await (0, _deploy.getSCDPInitializer)(hre);\nconst configuration = await hre.Diamond.getParametersSCDP();\n(0, _chai.expect)(configuration.liquidationThreshold).to.equal(args.liquidationThreshold);\n(0, _chai.expect)(configuration.minCollateralRatio).to.equal(args.minCollateralRatio);\n(0, _chai.expect)(configuration.maxLiquidationRatio).to.equal(Number(args.liquidationThreshold) + 0.01e4);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include.members([\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst depositsEnabled = await Promise.all([\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral.address),\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral8Dec.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(depositsEnabled).to.deep.equal([\n    true,\n    true,\n    false,\n    false,\n    true\n]);\nconst depositAssets = await hre.Diamond.viewSCDPDepositAssets();\n(0, _chai.expect)(depositAssets).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KISS.address\n]);",
                  "err": {},
                  "uuid": "ed169397-c390-4fab-b5d5-04a95615dd29",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to whitelist new deposit asset",
                  "fullTitle": "SCDP #Configuration should be able to whitelist new deposit asset",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assetInfoBefore = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoBefore.isSharedCollateral).to.equal(false);\nawait hre.Diamond.updateAsset(f.KrAsset2.address, {\n    ...assetInfoBefore,\n    isSharedCollateral: true,\n    depositLimitSCDP: 1\n});\nconst assetInfoAfter = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoAfter.decimals).to.equal(await f.KrAsset2.contract.decimals());\n(0, _chai.expect)(assetInfoAfter.depositLimitSCDP).to.equal(1);\nconst indicesAfter = await hre.Diamond.getAssetIndexesSCDP(f.KrAsset2.address);\n(0, _chai.expect)(indicesAfter.currLiqIndex).to.equal(_values.RAY);\n(0, _chai.expect)(indicesAfter.currFeeIndex).to.equal(_values.RAY);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address)).to.equal(true);",
                  "err": {},
                  "uuid": "d9daeb58-3917-4f28-b9ff-c76861b1eed6",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update deposit limit of asset",
                  "fullTitle": "SCDP #Configuration should be able to update deposit limit of asset",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setDepositLimitSCDP(f.Collateral.address, 1);\nconst collateral = await hre.Diamond.getAsset(f.Collateral.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.Collateral.contract.decimals());\n(0, _chai.expect)(collateral.depositLimitSCDP).to.equal(1);\nconst indicesAfter = await hre.Diamond.getAssetIndexesSCDP(f.Collateral.address);\n(0, _chai.expect)(indicesAfter.currLiqIndex).to.equal(_values.RAY);\n(0, _chai.expect)(indicesAfter.currFeeIndex).to.equal(_values.RAY);",
                  "err": {},
                  "uuid": "1dab86a7-30aa-48d3-9348-e345b1aef6e3",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a deposit asset",
                  "fullTitle": "SCDP #Configuration should be able to disable a deposit asset",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setAssetIsSharedCollateralSCDP(f.Collateral.address, false);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.Collateral.address);\nconst depositAssets = await hre.Diamond.viewSCDPDepositAssets();\n(0, _chai.expect)(depositAssets).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                  "err": {},
                  "uuid": "390b9d4c-bbff-4875-aa3a-3f8b8b5694c9",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable and enable a collateral asset",
                  "fullTitle": "SCDP #Configuration should be able to disable and enable a collateral asset",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setAssetIsSharedOrSwappedCollateralSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.viewSCDPDepositAssets()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\nawait hre.Diamond.setAssetIsSharedCollateralSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setAssetIsSharedOrSwappedCollateralSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.viewSCDPDepositAssets()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setAssetIsSharedCollateralSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.viewSCDPDepositAssets()).to.include(f.Collateral.address);",
                  "err": {},
                  "uuid": "31f2a53f-2727-4e17-9bac-ba7e45e07a87",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to add whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(f.swapKrAssetConfig.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(f.swapKrAssetConfig.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(f.swapKrAssetConfig.liqIncentiveSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(f.swapKrAssetConfig.protocolFeeShareSCDP);",
                  "err": {},
                  "uuid": "dc1b58c6-3af9-4ba2-aea7-5c70b2aa93af",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to update a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = {\n    ...f.KrAsset.config.assetStruct,\n    swapInFeeSCDP: 0.05e4,\n    swapOutFeeSCDP: 0.05e4,\n    liqIncentiveSCDP: 1.06e4,\n    protocolFeeShareSCDP: 0.4e4\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update);\nconst assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(update.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(update.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(update.protocolFeeShareSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(update.liqIncentiveSCDP);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include(f.KrAsset.address);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "bbb0e23a-5b47-4b97-9af1-e76e8e257842",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to remove a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setAssetIsSwapMintableSCDP(f.KrAsset.address, false);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.not.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "e7b83771-42cb-46d7-a938-9ebcbb6a88a0",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to enable and disable swap pairs",
                  "fullTitle": "SCDP #Configuration should be able to enable and disable swap pairs",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapPairsEnabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: true\n    }\n];\nawait hre.Diamond.setSwapRoutesSCDP(swapPairsEnabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: false\n    }\n];\nawait hre.Diamond.setSwapRoutesSCDP(swapPairsDisabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(false);",
                  "err": {},
                  "uuid": "f57b2bef-bce7-4d29-9138-f77cf8d1e003",
                  "parentUUID": "4855d738-9431-42e2-856c-a1eaf0e57097",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed169397-c390-4fab-b5d5-04a95615dd29",
                "d9daeb58-3917-4f28-b9ff-c76861b1eed6",
                "1dab86a7-30aa-48d3-9348-e345b1aef6e3",
                "390b9d4c-bbff-4875-aa3a-3f8b8b5694c9",
                "31f2a53f-2727-4e17-9bac-ba7e45e07a87",
                "dc1b58c6-3af9-4ba2-aea7-5c70b2aa93af",
                "bbb0e23a-5b47-4b97-9af1-e76e8e257842",
                "e7b83771-42cb-46d7-a938-9ebcbb6a88a0",
                "f57b2bef-bce7-4d29-9138-f77cf8d1e003"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 288,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "e5fcce0a-5d48-439d-93e4-c51c6b217574",
              "title": "#Deposit",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deposit collateral, calculate correct deposit values",
                  "fullTitle": "SCDP #Deposit should be able to deposit collateral, calculate correct deposit values",
                  "timedOut": false,
                  "duration": 512,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedValueAdjusted = (f.CollateralPrice.num(8) * depositAmount).ebn(8) // cfactor = 1\n;\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait Promise.all(f.usersArr.map((user)=>{\n    return hre.Diamond.connect(user).depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n}));\nconst prices = hre.viewData();\nconst [userInfos, { scdp }, [assetInfo]] = await Promise.all([\n    hre.Diamond.viewSCDPAccounts(prices, f.usersArr.map((user)=>user.address), [\n        f.Collateral.address\n    ]),\n    hre.Diamond.viewProtocolData(prices),\n    hre.Diamond.viewSCDPAssets(prices, [\n        f.Collateral.address\n    ])\n]);\nfor (const userInfo of userInfos){\n    const balance = await f.Collateral.balanceOf(userInfo.addr);\n    (0, _chai.expect)(balance).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.totals.valColl).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.totals.valFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].val).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].valFees).to.equal(0);\n}\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.amountColl).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.valColl).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(scdp.totals.valColl).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(0);\n// Adjusted\n(0, _chai.expect)(assetInfo.valCollAdj).to.equal(expectedValueAdjusted.mul(f.usersArr.length));\n(0, _chai.expect)(scdp.totals.valCollAdj).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(scdp.totals.valDebtOgAdj).to.equal(0);\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(0);\n(0, _chai.expect)(scdp.totals.crOgAdj).to.equal(_viem.maxUint256);\n(0, _chai.expect)(scdp.totals.crOg).to.equal(_viem.maxUint256);\n(0, _chai.expect)(scdp.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "f5f532a6-5cae-4881-a322-34072e4285f1",
                  "parentUUID": "e5fcce0a-5d48-439d-93e4-c51c6b217574",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit multiple collaterals, calculate correct deposit values",
                  "fullTitle": "SCDP #Deposit should be able to deposit multiple collaterals, calculate correct deposit values",
                  "timedOut": false,
                  "duration": 578,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedValueAdjusted = (0, _values.toBig)(f.CollateralPrice.num(8) / 1 * depositAmount, 8) // cfactor = 1\n;\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * 0.8 * depositAmount, 8) // cfactor = 0.8\n;\nawait Promise.all(f.usersArr.map(async (user)=>{\n    const User = hre.Diamond.connect(user);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\n    await User.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral8Dec.address);\n    await User.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec);\n}));\nconst prices = hre.viewData();\nconst [userInfos, assetInfos, { scdp }] = await Promise.all([\n    hre.Diamond.viewSCDPAccounts(prices, f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.viewSCDPAssets(prices, [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.viewProtocolData(prices)\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].val).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[1].amount).to.equal(depositAmount8Dec);\n    (0, _chai.expect)(userInfo.deposits[1].val).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(userInfo.totals.valColl).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n}\n(0, _chai.expect)(assetInfos[0].amountColl).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfos[1].amountColl).to.equal(depositAmount8Dec.mul(f.usersArr.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(f.usersArr.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(f.usersArr.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(assetInfos[1].valCollAdj).to.equal(valueTotalAdjusted8Dec);\n(0, _chai.expect)(scdp.totals.valCollAdj).to.equal(valueAdjusted);\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(0);\n(0, _chai.expect)(scdp.totals.cr).to.equal(_viem.maxUint256);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(f.usersArr.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(f.usersArr.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(assetInfos[1].valColl).to.equal(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(scdp.totals.valColl).to.equal(valueUnadjusted);\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(0);\n(0, _chai.expect)(scdp.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "c20bbb31-995f-4f55-a6d9-5cc0a2bb72b8",
                  "parentUUID": "e5fcce0a-5d48-439d-93e4-c51c6b217574",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5f532a6-5cae-4881-a322-34072e4285f1",
                "c20bbb31-995f-4f55-a6d9-5cc0a2bb72b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1090,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8dec3ace-9e54-4081-9e7b-fa6aedd991b0",
              "title": "#Withdraw",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Withdraw\"",
                  "fullTitle": "SCDP #Withdraw \"before each\" hook in \"#Withdraw\"",
                  "timedOut": false,
                  "duration": 93,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = hre.Diamond.connect(user);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\n    await UserKresko.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral8Dec.address);\n    await UserKresko.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec);\n}));",
                  "err": {},
                  "uuid": "e6f5c268-9659-45fe-b0ef-b4e811c09a80",
                  "parentUUID": "8dec3ace-9e54-4081-9e7b-fa6aedd991b0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to withdraw full collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw full collateral of multiple assets",
                  "timedOut": false,
                  "duration": 874,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = hre.Diamond.connect(user);\n    return Promise.all([\n        UserKresko.withdrawSCDP({\n            account: user.address,\n            asset: f.Collateral.address,\n            amount: depositAmount18Dec,\n            receiver: user.address\n        }, await hre.updateData()),\n        UserKresko.withdrawSCDP({\n            account: user.address,\n            asset: f.Collateral8Dec.address,\n            amount: depositAmount8Dec,\n            receiver: user.address\n        }, await hre.updateData())\n    ]);\n}));\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(0);\nconst prices = hre.viewData();\nconst [userInfos, assetInfos, { scdp }] = await Promise.all([\n    hre.Diamond.viewSCDPAccounts(prices, f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.viewSCDPAssets(prices, [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.viewProtocolData(prices)\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(await f.Collateral.balanceOf(userInfo.addr)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].amount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.totals.valColl).to.equal(0);\n}\nfor (const assetInfo of assetInfos){\n    (0, _chai.expect)(assetInfo.valColl).to.equal(0);\n    (0, _chai.expect)(assetInfo.amountColl).to.equal(0);\n    (0, _chai.expect)(assetInfo.amountSwapDeposit).to.equal(0);\n}\n(0, _chai.expect)(scdp.totals.valColl).to.equal(0);\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(0);\n(0, _chai.expect)(scdp.totals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "38f4cd60-0467-4f2e-adbf-e245a66f0fee",
                  "parentUUID": "8dec3ace-9e54-4081-9e7b-fa6aedd991b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw partial collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw partial collateral of multiple assets",
                  "timedOut": false,
                  "duration": 901,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const partialWithdraw = depositAmount18Dec.div(f.usersArr.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(f.usersArr.length);\nconst expectedValueUnadjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * 1 * depositAmount, 8).mul(200).div(300) // cfactor = 1\n;\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * 0.8 * depositAmount, 8).mul(200).div(300) // cfactor = 0.8\n;\nawait Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = hre.Diamond.connect(user);\n    return Promise.all([\n        UserKresko.withdrawSCDP({\n            account: user.address,\n            asset: f.Collateral.address,\n            amount: partialWithdraw,\n            receiver: user.address\n        }, await hre.updateData()),\n        UserKresko.withdrawSCDP({\n            account: user.address,\n            asset: f.Collateral8Dec.address,\n            amount: partialWithdraw8Dec,\n            receiver: user.address\n        }, await hre.updateData())\n    ]);\n}));\nconst [collateralBalanceAfter, collateral8DecBalanceAfter, { scdp }, assetInfos, userInfos] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    f.Collateral8Dec.balanceOf(hre.Diamond.address),\n    hre.Diamond.viewProtocolData(hre.viewData()),\n    hre.Diamond.viewSCDPAssets(hre.viewData(), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.viewSCDPAccounts(hre.viewData(), f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ])\n]);\nfor (const userInfo of userInfos){\n    const [balance18Dec, balance8Dec] = await Promise.all([\n        f.Collateral.balanceOf(userInfo.addr),\n        f.Collateral8Dec.balanceOf(userInfo.addr)\n    ]);\n    (0, _chai.expect)(balance18Dec).to.equal(partialWithdraw);\n    (0, _chai.expect)(balance8Dec).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[0].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].amount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.deposits[1].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.totals.valColl).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _values.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(collateralBalanceAfter).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(collateral8DecBalanceAfter).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].amountColl).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(assetInfos[1].amountColl).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].valColl).to.closeTo(expectedValueUnadjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[0].valCollAdj).to.closeTo(expectedValueAdjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].valColl).to.closeTo(expectedValueUnadjusted8Dec.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].valCollAdj).to.closeTo(expectedValueAdjusted8Dec.mul(f.usersArr.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(f.usersArr.length).add(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(scdp.totals.valColl).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(0);\n(0, _chai.expect)(scdp.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "6e3b2ac6-89d7-47fe-836f-0f315b3d8204",
                  "parentUUID": "8dec3ace-9e54-4081-9e7b-fa6aedd991b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38f4cd60-0467-4f2e-adbf-e245a66f0fee",
                "6e3b2ac6-89d7-47fe-836f-0f315b3d8204"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1775,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "398a30df-c42b-49c8-9922-a9c218588ae3",
              "title": "#Fee Distribution",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Fee Distribution\"",
                  "fullTitle": "SCDP #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "incomeCumulator = hre.users.deployer;\nIncomeCumulator = hre.Diamond.connect(incomeCumulator);\nawait f.Collateral.setBalance(incomeCumulator, depositAmount18Dec.mul(f.usersArr.length), hre.Diamond.address);",
                  "err": {},
                  "uuid": "6a585e8c-c018-410e-b903-c41c7c66d73f",
                  "parentUUID": "398a30df-c42b-49c8-9922-a9c218588ae3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to cumulate fees into deposits",
                  "fullTitle": "SCDP #Fee Distribution should be able to cumulate fees into deposits",
                  "timedOut": false,
                  "duration": 871,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nconst feePerUser = depositAmount18Dec;\nconst feesToCumulate = feePerUser.mul(f.usersArr.length);\nconst feePerUserValue = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedDepositValue = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\n// deposit some\nawait Promise.all(f.usersArr.map((signer)=>hre.Diamond.connect(signer).depositSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\n// cumulate some income\nawait IncomeCumulator.cumulateIncomeSCDP(f.Collateral.address, feesToCumulate);\n// check that the fees are cumulated\nfor (const data of (await hre.Diamond.viewSCDPAccounts(hre.viewData(), f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    (0, _chai.expect)(data.deposits[0].val).to.equal(expectedDepositValue);\n    (0, _chai.expect)(data.deposits[0].valFees).to.equal(feePerUserValue);\n    (0, _chai.expect)(data.totals.valColl).to.equal(expectedDepositValue);\n    (0, _chai.expect)(data.totals.valFees).to.equal(feePerUserValue);\n}\n// withdraw principal\nawait Promise.all(f.usersArr.map(async (signer)=>hre.Diamond.connect(signer).withdrawSCDP({\n        account: signer.address,\n        asset: f.Collateral.address,\n        amount: depositAmount18Dec,\n        receiver: signer.address\n    }, await hre.updateData())));\nconst prices = hre.viewData();\nfor (const user of (await hre.Diamond.viewSCDPAccounts(prices, f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(user.addr);\n    (0, _chai.expect)(user.deposits[0].val).to.equal(0);\n    (0, _chai.expect)(user.deposits[0].valFees).to.equal(0);\n    (0, _chai.expect)(user.totals.valFees).to.equal(0);\n    (0, _chai.expect)(user.totals.valColl).to.equal(0);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec.add(feePerUser));\n}\nconst [[assetInfo], { scdp }, balance] = await Promise.all([\n    hre.Diamond.viewSCDPAssets(prices, [\n        f.Collateral.address\n    ]),\n    hre.Diamond.viewProtocolData(prices),\n    f.Collateral.balanceOf(hre.Diamond.address)\n]);\n(0, _chai.expect)(balance).to.equal(0);\n(0, _chai.expect)(assetInfo.amountColl).to.equal(0);\n(0, _chai.expect)(assetInfo.valColl).to.equal(0);\n(0, _chai.expect)(assetInfo.valCollAdj).to.equal(0);\n(0, _chai.expect)(scdp.totals.valColl).to.equal(0);\n// nothing left in protocol.\nconst [colalteralBalanceKresko, [assetInfoFinal]] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    hre.Diamond.viewSCDPAssets(prices, [\n        f.Collateral.address\n    ])\n]);\n(0, _chai.expect)(colalteralBalanceKresko).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.amountColl).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.valColl).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.valCollAdj).to.equal(0);",
                  "err": {},
                  "uuid": "a36df1d6-6bc4-43c8-bf82-2f3cf292a359",
                  "parentUUID": "398a30df-c42b-49c8-9922-a9c218588ae3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a36df1d6-6bc4-43c8-bf82-2f3cf292a359"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 871,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "faf3ab71-850c-4230-a227-ecb7a28346ee",
              "title": "#Swap",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Swap\"",
                  "fullTitle": "SCDP #Swap \"before each\" hook in \"#Swap\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor, (0, _values.toBig)(10_000));\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "ea406629-04b0-4852-9cf0-b6f85a7522e4",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have collateral in pool",
                  "fullTitle": "SCDP #Swap should have collateral in pool",
                  "timedOut": false,
                  "duration": 395,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { scdp } = await hre.Diamond.viewProtocolData(hre.viewData());\n(0, _chai.expect)(scdp.totals.valColl).to.equal((0, _values.toBig)(depositAmount, 8));\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(0);\n(0, _chai.expect)(scdp.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "71116865-9d6f-4830-9e9a-13dc746f7bb9",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to preview a swap",
                  "fullTitle": "SCDP #Swap should be able to preview a swap",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\n(0, _chai.expect)((await f.KrAsset2.getPrice()).pyth).to.equal(f.KrAsset2Price);\nconst feePercentageProtocol = Number(f.KISS.config.assetStruct.protocolFeeShareSCDP) + Number(f.KrAsset2.config.assetStruct.protocolFeeShareSCDP);\nconst expectedTotalFee = swapAmount.percentMul(f.KRASSET_KISS_ROUTE_FEE);\nconst expectedProtocolFee = expectedTotalFee.percentMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(f.KISSPrice).wadDiv(f.KrAsset2Price);\nconst [amountOut, feeAmount, feeAmountProtocol] = await hre.Diamond.previewSwapSCDP(f.KISS.address, f.KrAsset2.address, swapAmount);\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                  "err": {},
                  "uuid": "7dc0d8f2-0067-450d-8571-ad7d3299bfad",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == 0 | swap collateral == 0",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == 0 | swap collateral == 0",
                  "timedOut": false,
                  "duration": 577,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1) // $1\n;\nconst kissInAfterFees = swapAmount.sub(swapAmount.percentMul(f.KRASSET_KISS_ROUTE_FEE));\nconst expectedAmountOut = kissInAfterFees.wadMul(f.KISSPrice).wadDiv(f.KrAsset2Price);\nconst tx = await f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\nconst prices = hre.viewData();\nconst [KR2Balance, KISSBalance, swapperInfos, assetInfos, { scdp }] = await Promise.all([\n    f.KrAsset2.balanceOf(f.swapper.address),\n    f.KISS.balanceOf(f.swapper.address),\n    hre.Diamond.viewSCDPAccounts(prices, [\n        f.swapper.address\n    ], [\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.viewSCDPAssets(prices, [\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.viewProtocolData(prices)\n]);\nconst swapperInfo = swapperInfos[0];\n(0, _chai.expect)(KR2Balance).to.equal(expectedAmountOut);\n(0, _chai.expect)(KISSBalance).to.equal((0, _values.toBig)(10_000).sub(swapAmount));\n(0, _chai.expect)(swapperInfo.deposits[0].val).to.equal(0);\n(0, _chai.expect)(swapperInfo.deposits[1].val).to.equal(0);\n(0, _chai.expect)(assetInfos[0].amountDebt).to.equal(expectedAmountOut);\n(0, _chai.expect)(assetInfos[1].amountSwapDeposit).to.equal(kissInAfterFees);\nconst expectedDepositValue = (0, _values.toBig)(depositAmount, 8).add(kissInAfterFees.wadMul(f.KISSPrice));\n(0, _chai.expect)(assetInfos[1].valColl).to.equal(expectedDepositValue);\n(0, _chai.expect)(assetInfos[0].valDebt).to.equal(expectedAmountOut.wadMul(f.KrAsset2Price));\n(0, _chai.expect)(scdp.totals.valColl).to.equal(expectedDepositValue);\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(expectedAmountOut.wadMul(f.KrAsset2Price));\n(0, _chai.expect)(scdp.totals.cr).to.equal(expectedDepositValue.percentDiv(expectedAmountOut.wadMul(f.KrAsset2Price)));",
                  "err": {},
                  "uuid": "d1d8e4d6-8227-43d9-a61f-492e07dfb6b8",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(100) // $100\n;\nconst swapAmountAsset = swapAmount.percentMul(1e4 - Number(f.KRASSET_KISS_ROUTE_FEE)).wadMul(f.KISSPrice.wadDiv(f.KrAsset2Price));\nconst expectedKissOut = swapAmountAsset.percentMul(1e4 - f.KRASSET_KISS_ROUTE_FEE).wadMul(f.KrAsset2Price).wadDiv(f.KISSPrice);\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: f.swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: f.swapper,\n    asset: f.KrAsset2,\n    amount: (0, _values.toBig)(0.1)\n});\nconst { scdp } = await hre.Diamond.viewProtocolData(hre.viewData());\n(0, _chai.expect)(scdp.totals.valColl).to.equal(initialDepositValue);\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\n// the swap that clears debt\nconst tx = await f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: swapAmountAsset,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst [event, assetInfos] = await Promise.all([\n    (0, _events.getNamedEvent)(tx, 'Swap'),\n    hre.Diamond.viewSCDPAssets(hre.viewData(), [\n        f.KISS.address,\n        f.KrAsset2.address\n    ])\n]);\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(assetInfos[0].amountSwapDeposit).to.equal(0);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal(initialDepositValue);\n(0, _chai.expect)(assetInfos[1].valDebt).to.equal(0);\n(0, _chai.expect)(assetInfos[1].amountDebt).to.equal(0);\nconst { scdp: scdpAfter } = await hre.Diamond.viewProtocolData(hre.viewData());\n(0, _chai.expect)(scdpAfter.totals.valColl).to.equal((0, _values.toBig)(1000, 8));\n(0, _chai.expect)(scdpAfter.totals.valDebt).to.equal(0);\n(0, _chai.expect)(scdpAfter.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "21f9ed34-99a3-4a43-8d70-d0d737aad3d4",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                  "timedOut": false,
                  "duration": 686,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1) // $1\n;\nconst swapValue = (0, _values.toBig)(1, 8);\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst [assetInfoKISS] = await hre.Diamond.viewSCDPAssets(hre.viewData(), [\n    f.KISS.address\n]);\nconst feeValueFirstSwap = swapValue.percentMul(f.KRASSET_KISS_ROUTE_FEE);\nconst valueInAfterFees = swapValue.sub(feeValueFirstSwap);\n(0, _chai.expect)(assetInfoKISS.valColl).to.equal(depositValue.add(valueInAfterFees));\nconst expectedSwapDeposits = valueInAfterFees.num(8).ebn(18);\n(0, _chai.expect)(assetInfoKISS.amountSwapDeposit).to.equal(expectedSwapDeposits);\nconst swapAmountSecond = (0, _values.toBig)(0.009) // this is $0.90, so less than $0.96 since we want to ensure debt > assetsIn | swap deposits > assetsOut\n;\nconst swapValueSecond = swapAmountSecond.wadMul(f.KrAsset2Price);\nconst feeValueSecondSwap = swapValueSecond.sub(swapValueSecond.percentMul(f.KRASSET_KISS_ROUTE_FEE));\nconst expectedKissOut = feeValueSecondSwap.wadDiv(f.KISSPrice) // 0.8685\n;\nconst tx = await f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: swapAmountSecond,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountSecond);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst [depositValueKR2, depositValueKISS, assetInfos, { scdp }] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.swapper.address, f.KrAsset2.address),\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.swapper.address, f.KISS.address),\n    hre.Diamond.viewSCDPAssets(hre.viewData(), [\n        f.KISS.address,\n        f.KrAsset2.address\n    ]),\n    hre.Diamond.viewProtocolData(hre.viewData())\n]);\n(0, _chai.expect)(depositValueKR2).to.equal(0);\n(0, _chai.expect)(depositValueKISS).to.equal(0);\nconst expectedSwapDepositsAfter = expectedSwapDeposits.sub((0, _values.toBig)(0.9));\nconst expectedSwapDepositsValue = expectedSwapDepositsAfter.wadMul(assetInfoKISS.price);\n(0, _chai.expect)(assetInfos[0].amountSwapDeposit).to.equal(expectedSwapDepositsAfter);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal((0, _values.toBig)(depositAmount, 8).add(expectedSwapDepositsValue));\n(0, _chai.expect)(assetInfos[1].valDebt).to.equal(expectedSwapDepositsValue);\nconst expectedDebtAfter = expectedSwapDepositsValue.wadDiv((await f.KrAsset2.getPrice()).pyth);\n(0, _chai.expect)(assetInfos[0].amountDebt).to.equal(0);\n(0, _chai.expect)(assetInfos[1].amountDebt).to.equal(expectedDebtAfter);\nconst expectedCollateralValue = expectedSwapDepositsValue.add(depositAmount.ebn(8));\n(0, _chai.expect)(scdp.totals.valColl).to.equal(expectedCollateralValue) // swap deposits + collateral deposited\n;\n(0, _chai.expect)(scdp.totals.valDebt).to.equal(expectedSwapDepositsValue) //\n;\n(0, _chai.expect)(scdp.totals.cr).to.equal(expectedCollateralValue.percentDiv(expectedSwapDepositsValue));",
                  "err": {},
                  "uuid": "72fcd599-1984-4644-9b21-081278cc979b",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                  "timedOut": false,
                  "duration": 1494,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmountKiss = (0, _values.toBig)(100) // $100\n;\nconst swapAmountKrAsset = (0, _values.toBig)(2) // $200\n;\nconst swapValue = 200;\nconst firstSwapFeeAmount = swapAmountKiss.percentMul(f.KRASSET_KISS_ROUTE_FEE);\nconst expectedKissOutSecondSwap = swapAmountKrAsset.sub(swapAmountKrAsset.percentMul(f.KRASSET_KISS_ROUTE_FEE)).wadMul(f.KrAsset2Price).wadDiv(f.KISSPrice);\nconst krAssetOutFirstSwap = swapAmountKiss.sub(firstSwapFeeAmount).wadMul(f.KISSPrice).wadDiv(f.KrAsset2Price);\nconst krAssetOutFirstSwapValue = krAssetOutFirstSwap.wadMul(f.KrAsset2Price);\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: f.swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(400)\n});\nconst ICDPMintAmount = (0, _values.toBig)(1.04);\nawait (0, _krassets.mintKrAsset)({\n    user: f.swapper,\n    asset: f.KrAsset2,\n    amount: ICDPMintAmount\n});\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmountKiss,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst expectedSwapDeposits = swapAmountKiss.sub(firstSwapFeeAmount);\nconst { scdp } = await hre.Diamond.viewProtocolData(hre.viewData());\n(0, _chai.expect)(await f.KreskoSwapper.getSwapDepositsSCDP(f.KISS.address)).to.equal(expectedSwapDeposits);\n(0, _chai.expect)(scdp.totals.valColl).to.be.eq(depositAmount.ebn().add(expectedSwapDeposits).wadMul(f.KISSPrice));\n// the swap that matters, here user has 0.96 (previous swap) + 1.04 (mint). expecting 192 kiss from swap.\nconst [expectedAmountOut] = await f.KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmountKrAsset);\n(0, _chai.expect)(expectedAmountOut).to.equal(expectedKissOutSecondSwap);\nconst tx = await f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: swapAmountKrAsset,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOutSecondSwap);\nconst assetInfos = await hre.Diamond.viewSCDPAssets(hre.viewData(), [\n    f.KISS.address,\n    f.KrAsset2.address\n]);\n// f.KISS deposits sent in swap\nconst acocuntPrincipalDepositsKISS = await f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(assetInfos[0].amountSwapDeposit).to.equal(0) // half of 2 krAsset\n;\n(0, _chai.expect)(assetInfos[0].amountColl).to.equal(acocuntPrincipalDepositsKISS);\n// KrAsset debt is cleared\n(0, _chai.expect)(assetInfos[1].valDebt).to.equal(0);\n(0, _chai.expect)(assetInfos[1].amountDebt).to.equal(0);\n// KISS debt is issued\nconst expectedKissDebtValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[0].valDebt).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(assetInfos[0].amountDebt).to.equal(expectedKissDebtValue.wadDiv(f.KISSPrice));\n// krAsset swap deposits\nconst expectedSwapDepositValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[1].amountSwapDeposit).to.equal((0, _values.toBig)(2).sub(krAssetOutFirstSwap));\n(0, _chai.expect)(assetInfos[1].valColl).to.equal(expectedSwapDepositValue) // asset price is $100\n;\nconst { scdp: scdpAfter } = await hre.Diamond.viewProtocolData(hre.viewData());\nconst expectedCollateralValue = (0, _values.toBig)(1000, 8).add(expectedSwapDepositValue);\n(0, _chai.expect)(scdpAfter.totals.valColl).to.equal(expectedCollateralValue);\n(0, _chai.expect)(scdpAfter.totals.valDebt).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(scdpAfter.totals.cr).to.equal(expectedCollateralValue.percentDiv(expectedKissDebtValue));",
                  "err": {},
                  "uuid": "bff5e91e-94bc-4c99-96c0-f6b76f647355",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cumulates fees on swap",
                  "fullTitle": "SCDP #Swap cumulates fees on swap",
                  "timedOut": false,
                  "duration": 363,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmountNew = (0, _values.toBig)(10000 - depositAmount);\nawait f.KISS.setBalance(f.depositor, depositAmountNew);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, depositAmountNew);\nconst swapAmount = (0, _values.toBig)(2600);\nconst feesBeforeSwap = await f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address);\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst feesAfterSwap = await f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(feesAfterSwap).to.gt(feesBeforeSwap);\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: f.KrAsset2.balanceOf(f.swapper.address),\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst feesAfterSecondSwap = await f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(feesAfterSecondSwap).to.gt(feesAfterSwap);\nawait f.KreskoDepositor.claimFeesSCDP(f.depositor.address, f.KISS.address, f.depositor.address);\nconst [depositsAfter, feesAfter] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.KISS.address),\n    f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(feesAfter).to.eq(0);\n(0, _chai.expect)(depositsAfter).to.eq((0, _values.toBig)(10000));\nawait f.KreskoDepositor.withdrawSCDP({\n    account: f.depositor.address,\n    asset: f.KISS.address,\n    amount: (0, _values.toBig)(10000),\n    receiver: f.depositor.address\n}, await hre.updateData());\nconst [depositsAfterWithdraw, feesAfterWithdraw] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.depositor.address, f.KISS.address),\n    f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(depositsAfterWithdraw).to.eq(0);\n(0, _chai.expect)(feesAfterWithdraw).to.eq(0);",
                  "err": {},
                  "uuid": "db93bf92-3129-4199-ac19-ff771e992a39",
                  "parentUUID": "faf3ab71-850c-4230-a227-ecb7a28346ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71116865-9d6f-4830-9e9a-13dc746f7bb9",
                "7dc0d8f2-0067-450d-8571-ad7d3299bfad",
                "d1d8e4d6-8227-43d9-a61f-492e07dfb6b8",
                "21f9ed34-99a3-4a43-8d70-d0d737aad3d4",
                "72fcd599-1984-4644-9b21-081278cc979b",
                "bff5e91e-94bc-4c99-96c0-f6b76f647355",
                "db93bf92-3129-4199-ac19-ff771e992a39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4704,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "03e8d2d4-1a4d-42a2-a8b4-bd0994c8a55f",
              "title": "#Liquidations",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Liquidations\"",
                  "fullTitle": "SCDP #Liquidations \"before each\" hook in \"#Liquidations\"",
                  "timedOut": false,
                  "duration": 47,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (const signer of f.usersArr){\n    await f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000));\n}\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor2, (0, _values.toBig)(10_000));\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec);\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral8Dec.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral8Dec.address, depositAmount8Dec);\nawait hre.Diamond.setFeeAssetSCDP(f.KISS.address);\nf.KreskoDepositor2.depositSCDP(f.depositor2.address, f.KISS.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "566b07aa-a54b-4e20-9dad-43ed5a1c609c",
                  "parentUUID": "03e8d2d4-1a4d-42a2-a8b4-bd0994c8a55f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is not underwater",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600) // $1\n;\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;",
                  "err": {},
                  "uuid": "45057dda-fc8b-4062-b72a-a3d2bbb0d62d",
                  "parentUUID": "03e8d2d4-1a4d-42a2-a8b4-bd0994c8a55f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert liquidations if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should revert liquidations if the pool is not underwater",
                  "timedOut": false,
                  "duration": 286,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600) // $1\n;\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;\nawait f.KrAsset2.setBalance(hre.users.liquidator, (0, _values.toBig)(1_000_000));\nawait (0, _chai.expect)(f.KreskoLiquidator.liquidateSCDP({\n    repayAsset: f.KrAsset2.address,\n    repayAmount: (0, _values.toBig)(7.7),\n    seizeAsset: f.Collateral8Dec.address,\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_GREATER_THAN_REQUIRED');",
                  "err": {},
                  "uuid": "7e306521-2944-4325-b2cf-4e6ee50bd842",
                  "parentUUID": "03e8d2d4-1a4d-42a2-a8b4-bd0994c8a55f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify if the pool is underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is underwater",
                  "timedOut": false,
                  "duration": 651,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600);\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nawait f.Collateral.setPrice(f.CollateralPrice.num(8) / 1000);\nawait f.Collateral8Dec.setPrice(f.CollateralPrice.num(8) / 1000);\nconst [{ scdp }, liquidatable] = await Promise.all([\n    hre.Diamond.viewProtocolData(hre.viewData()),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(scdp.totals.cr).to.be.lt(scdp.LT);\n(0, _chai.expect)(liquidatable).to.be.true;",
                  "err": {},
                  "uuid": "52b199d3-3ff7-4473-9960-6171aaf42bb4",
                  "parentUUID": "03e8d2d4-1a4d-42a2-a8b4-bd0994c8a55f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow liquidating the underwater pool",
                  "fullTitle": "SCDP #Liquidations should allow liquidating the underwater pool",
                  "timedOut": false,
                  "duration": 1805,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600);\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst newKreskoAssetPrice = 500;\nawait f.KrAsset2.setPrice(newKreskoAssetPrice);\nconst [scdpParams, maxLiquidatable, krAssetPrice, { scdp: scdpBefore }] = await Promise.all([\n    hre.Diamond.getParametersSCDP(),\n    hre.Diamond.getMaxLiqValueSCDP(f.KrAsset2.address, f.Collateral8Dec.address),\n    f.KrAsset2.getPrice(),\n    hre.Diamond.viewProtocolData(hre.viewData())\n]);\nconst repayAmount = maxLiquidatable.repayValue.wadDiv(krAssetPrice.pyth);\nawait f.KrAsset2.setBalance(hre.users.liquidator, repayAmount.add(1e18.toString()));\n(0, _chai.expect)(scdpBefore.totals.cr).to.lt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(scdpBefore.totals.cr).to.gt(1e4);\n// Liquidate the shared CDP\nconst tx = await f.KreskoLiquidator.liquidateSCDP({\n    repayAsset: f.KrAsset2.address,\n    repayAmount,\n    seizeAsset: f.Collateral8Dec.address,\n    prices: await hre.updateData()\n});\n// Check the state after liquidation\nconst [{ scdp: scdpAfter }, liquidatableAfter] = await Promise.all([\n    hre.Diamond.viewProtocolData(hre.viewData()),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(scdpAfter.totals.cr).to.gt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(scdpAfter.totals.crOgAdj).to.eq(2.01e4);\n(0, _chai.expect)(liquidatableAfter).to.eq(false);\n// Shared CDP should not be liquidatable since it is above the threshold\nawait (0, _chai.expect)(f.KreskoLiquidator.liquidateSCDP({\n    repayAsset: f.KrAsset2.address,\n    repayAmount,\n    seizeAsset: f.Collateral8Dec.address,\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_GREATER_THAN_REQUIRED');\n// Check what was emitted in the event\nconst event = await (0, _events.getNamedEvent)(tx, 'SCDPLiquidationOccured');\nconst expectedSeizeAmount = repayAmount.wadMul((0, _values.toBig)(newKreskoAssetPrice, 8)).percentMul(1.05e4).wadDiv(f.CollateralPrice).div(10 ** 10);\n(0, _chai.expect)(event.args.liquidator).to.eq(hre.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(f.Collateral8Dec.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(f.KrAsset2.address);\n// Check account state changes\nconst expectedDepositsAfter = depositAmount8Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(expectedDepositsAfter).to.be.lt(depositAmount8Dec);\nconst [principalDeposits, fees, params] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountFeesSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getParametersSCDP()\n]);\n(0, _chai.expect)(principalDeposits).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(fees).to.eq(0);\n// Sanity checking that users should be able to withdraw what is left\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec.mul(10));\nconst { scdp } = await hre.Diamond.viewProtocolData(hre.viewData());\n(0, _chai.expect)(scdp.totals.cr).to.gt(params.minCollateralRatio);\nawait (0, _chai.expect)(f.KreskoDepositor.withdrawSCDP({\n    account: f.depositor.address,\n    asset: f.Collateral8Dec.address,\n    amount: expectedDepositsAfter,\n    receiver: f.depositor.address\n}, await hre.updateData())).to.not.be.reverted;\nconst [principalEnd, feesAfter] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountFeesSCDP(f.depositor.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(principalEnd).to.eq(0);\n(0, _chai.expect)(feesAfter).to.eq(0);",
                  "err": {},
                  "uuid": "8743b640-2d4c-4673-9a8f-f5a8cec56345",
                  "parentUUID": "03e8d2d4-1a4d-42a2-a8b4-bd0994c8a55f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45057dda-fc8b-4062-b72a-a3d2bbb0d62d",
                "7e306521-2944-4325-b2cf-4e6ee50bd842",
                "52b199d3-3ff7-4473-9960-6171aaf42bb4",
                "8743b640-2d4c-4673-9a8f-f5a8cec56345"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2931,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6b1920e4-893f-459e-86e2-f647ae736542",
              "title": "#Error",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Error\"",
                  "fullTitle": "SCDP #Error \"before each\" hook in \"#Error\"",
                  "timedOut": false,
                  "duration": 45,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor, hre.ethers.BigNumber.from(1));\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec);\nawait hre.Diamond.setFeeAssetSCDP(f.KISS.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, 1);",
                  "err": {},
                  "uuid": "f2281f31-8d07-4c46-ba22-b05a37b9d563",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert depositing unsupported tokens",
                  "fullTitle": "SCDP #Error should revert depositing unsupported tokens",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [UnsupportedToken] = await hre.deploy('MockERC20', {\n    args: [\n        'UnsupportedToken',\n        'UnsupportedToken',\n        18,\n        (0, _values.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(hre.Diamond.address, hre.ethers.constants.MaxUint256);\nconst { deployer } = await hre.getNamedAccounts();\nawait (0, _chai.expect)(hre.Diamond.depositSCDP(deployer, UnsupportedToken.address, 1)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ASSET_NOT_FEE_ACCUMULATING_ASSET').withArgs([\n    'UnsupportedToken',\n    UnsupportedToken.address\n]);",
                  "err": {},
                  "uuid": "15e37cda-5f8c-48f6-b33b-86304004901c",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing without deposits",
                  "fullTitle": "SCDP #Error should revert withdrawing without deposits",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const withdrawAmount = 1;\nawait (0, _chai.expect)(f.KreskoSwapper.withdrawSCDP({\n    account: f.swapper.address,\n    asset: f.Collateral.address,\n    amount: withdrawAmount,\n    receiver: f.swapper.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ACCOUNT_HAS_NO_DEPOSITS').withArgs(f.swapper.address, f.Collateral.errorId);",
                  "err": {},
                  "uuid": "987e31fe-0427-48b0-b033-4b54966450f2",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals below MCR",
                  "fullTitle": "SCDP #Error should revert withdrawals below MCR",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1000) // $1000\n;\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KISS.address,\n    assetOut: f.KrAsset2.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n}) // generates the debt\n;\nconst deposits = await f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.Collateral.address);\nawait (0, _chai.expect)(f.KreskoDepositor.withdrawSCDP({\n    account: f.depositor.address,\n    asset: f.Collateral.address,\n    amount: deposits,\n    receiver: f.depositor.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs(960e8, 4800e8, 5e4);",
                  "err": {},
                  "uuid": "9ecf20d7-8195-455c-8184-e39e4fcf2e57",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals of swap owned collateral deposits",
                  "fullTitle": "SCDP #Error should revert withdrawals of swap owned collateral deposits",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nconst deposits = await f.KreskoSwapper.getSwapDepositsSCDP(f.KrAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(f.KreskoSwapper.withdrawSCDP({\n    account: f.swapper.address,\n    asset: f.KrAsset2.address,\n    amount: deposits,\n    receiver: f.depositor.address\n}, await hre.updateData())).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ASSET_DOES_NOT_HAVE_DEPOSITS').withArgs(f.KrAsset2.errorId);",
                  "err": {},
                  "uuid": "d07ce00a-d702-433b-8295-fc65901e136a",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping with price below minAmountOut",
                  "fullTitle": "SCDP #Error should revert swapping with price below minAmountOut",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nconst [amountOut] = await f.KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmount);\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: swapAmount,\n    amountOutMin: amountOut.add(1),\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'RECEIVED_LESS_THAN_DESIRED').withArgs(f.KISS.errorId, amountOut, amountOut.add(1));",
                  "err": {},
                  "uuid": "ab5e0d89-a2de-42c0-bbc4-9d3d696e6af9",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping unsupported asset",
                  "fullTitle": "SCDP #Error should revert swapping unsupported asset",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.Collateral.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'SWAP_ROUTE_NOT_ENABLED').withArgs(f.KrAsset2.errorId, f.Collateral.errorId);",
                  "err": {},
                  "uuid": "54f0a5ac-f304-4f0f-9882-722e50329b41",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping a disabled route",
                  "fullTitle": "SCDP #Error should revert swapping a disabled route",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait hre.Diamond.setSingleSwapRouteSCDP({\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    enabled: false\n});\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'SWAP_ROUTE_NOT_ENABLED').withArgs(f.KrAsset2.errorId, f.KISS.errorId);",
                  "err": {},
                  "uuid": "27e6021b-e161-4232-97ca-ac03168db868",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping causes CDP to go below MCR",
                  "fullTitle": "SCDP #Error should revert swapping causes CDP to go below MCR",
                  "timedOut": false,
                  "duration": 276,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1_500_000);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nconst tx = f.KreskoSwapper.swapSCDP({\n    receiver: f.swapper.address,\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    amountIn: swapAmount,\n    amountOutMin: 0,\n    prices: await hre.updateData()\n});\nawait (0, _chai.expect)(tx).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs('15001000000000000', '75000000000000000', 5e4);",
                  "err": {},
                  "uuid": "7b4999f4-426c-423a-8ca2-bc8fd0fa398d",
                  "parentUUID": "6b1920e4-893f-459e-86e2-f647ae736542",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15e37cda-5f8c-48f6-b33b-86304004901c",
                "987e31fe-0427-48b0-b033-4b54966450f2",
                "9ecf20d7-8195-455c-8184-e39e4fcf2e57",
                "d07ce00a-d702-433b-8295-fc65901e136a",
                "ab5e0d89-a2de-42c0-bbc4-9d3d696e6af9",
                "54f0a5ac-f304-4f0f-9882-722e50329b41",
                "27e6021b-e161-4232-97ca-ac03168db868",
                "7b4999f4-426c-423a-8ca2-bc8fd0fa398d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1037,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs/test-report",
        "assetsDir": "docs/test-report/assets",
        "reportTitle": "Kresko Protocol Hardhat Test Report",
        "reportPageTitle": "Kresko Protocol Hardhat Test Report"
      },
      "version": "6.2.0"
    }
  }
}