{
  "stats": {
    "suites": 90,
    "tests": 274,
    "passes": 252,
    "pending": 22,
    "failures": 0,
    "start": "2023-11-20T22:48:19.279Z",
    "end": "2023-11-20T22:50:35.486Z",
    "duration": 136207,
    "testsRegistered": 274,
    "passPercent": 100,
    "pendingPercent": 8.02919708029197,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b7d2cf5c-a4f3-49e1-bdd5-6340152697ae",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "14562f91-08b1-4ca4-9479-217a7e397473",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.assetValuesFixture)();\nf.user = hre.users.userEight;\nUser = (0, _redstone.wrapKresko)(hre.Diamond, f.user);",
              "err": {},
              "uuid": "b3fbbcc3-3b1d-43b8-9fb3-919c22decbd0",
              "parentUUID": "14562f91-08b1-4ca4-9479-217a7e397473",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "75a27cc6-b9c5-4130-9b5e-d8bcb47c6f3a",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\n;\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "6bd85e03-9cf4-457f-bf4d-fc77e27a3c36",
                  "parentUUID": "75a27cc6-b9c5-4130-9b5e-d8bcb47c6f3a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\n;\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "2cce24cb-cb54-4de2-aff8-187e5936fe82",
                  "parentUUID": "75a27cc6-b9c5-4130-9b5e-d8bcb47c6f3a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\n;\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "ab26c8aa-b31e-455a-a10b-cd195db605bd",
                  "parentUUID": "75a27cc6-b9c5-4130-9b5e-d8bcb47c6f3a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 246,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.depositCollateral(f.user.address, f.CollateralAsset.address, (0, _values.toBig)(10));\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, (0, _values.toBig)(10, 8));\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, (0, _values.toBig)(10, 21));\nconst expectedDepositValue = (0, _values.toBig)(150, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "c5d300f9-8083-4036-9832-20075c0db1bd",
                  "parentUUID": "75a27cc6-b9c5-4130-9b5e-d8bcb47c6f3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bd85e03-9cf4-457f-bf4d-fc77e27a3c36",
                "2cce24cb-cb54-4de2-aff8-187e5936fe82",
                "ab26c8aa-b31e-455a-a10b-cd195db605bd",
                "c5d300f9-8083-4036-9832-20075c0db1bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 567,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8949670b-6593-413d-9e37-791be3d06f8c",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance));",
                  "err": {},
                  "uuid": "50f62e51-06fb-4f07-ad36-e789b5d01a0e",
                  "parentUUID": "8949670b-6593-413d-9e37-791be3d06f8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset8Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset8Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 8));",
                  "err": {},
                  "uuid": "1989c2b2-6182-40b8-82dd-902c337f46c7",
                  "parentUUID": "8949670b-6593-413d-9e37-791be3d06f8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 143,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset21Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset21Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 21));",
                  "err": {},
                  "uuid": "031eb38e-ae56-4989-bf1c-fa7c00367332",
                  "parentUUID": "8949670b-6593-413d-9e37-791be3d06f8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50f62e51-06fb-4f07-ad36-e789b5d01a0e",
                "1989c2b2-6182-40b8-82dd-902c337f46c7",
                "031eb38e-ae56-4989-bf1c-fa7c00367332"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 402,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b79a2bc2-96d8-42ab-b2b0-6ef67f237364",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 614,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals) // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\n;\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)) // 2.475\n;",
                  "err": {},
                  "uuid": "04f42b95-b096-4541-9158-2916103e3e30",
                  "parentUUID": "b79a2bc2-96d8-42ab-b2b0-6ef67f237364",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 605,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals) // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\n;\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)) // 2.475\n;",
                  "err": {},
                  "uuid": "aa08a2e1-b653-40f2-98cd-f01bd4e36877",
                  "parentUUID": "b79a2bc2-96d8-42ab-b2b0-6ef67f237364",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 614,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals) // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\n;\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals) // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\n;\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)) // 2.475\n;",
                  "err": {},
                  "uuid": "c80716c2-c8d1-43c4-91ff-0878cf813891",
                  "parentUUID": "b79a2bc2-96d8-42ab-b2b0-6ef67f237364",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04f42b95-b096-4541-9158-2916103e3e30",
                "aa08a2e1-b653-40f2-98cd-f01bd4e36877",
                "c80716c2-c8d1-43c4-91ff-0878cf813891"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1833,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ce82fd84-53eb-4129-b8e9-a759616c94c4",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "3b4b5a52-6ab5-414a-9df2-ac8c1f98e5c7",
              "parentUUID": "ce82fd84-53eb-4129-b8e9-a759616c94c4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "110c21b5-5f36-4ede-9a4c-c34945ead381",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "a3c20e9c-1ff0-403d-9097-d9e55dcef40e",
                  "parentUUID": "110c21b5-5f36-4ede-9a4c-c34945ead381",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = f.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "01793294-e114-4fc7-b7c9-08168646053c",
                  "parentUUID": "110c21b5-5f36-4ede-9a4c-c34945ead381",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = f.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "cb391b18-c510-4e16-a3a7-9f6736daf517",
                  "parentUUID": "110c21b5-5f36-4ede-9a4c-c34945ead381",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3c20e9c-1ff0-403d-9097-d9e55dcef40e",
                "01793294-e114-4fc7-b7c9-08168646053c",
                "cb391b18-c510-4e16-a3a7-9f6736daf517"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 244,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d4d45b72-b301-470f-bef5-ec2526ab4463",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "07d291d3-cba7-42c9-ba9d-a8d798db92c0",
              "parentUUID": "d4d45b72-b301-470f-bef5-ec2526ab4463",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e2301ac-49f6-4c6e-ad6b-6a8849c04297",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.owner()).to.equal(hre.addr.deployer);",
                  "err": {},
                  "uuid": "27946b3f-bf46-436c-86f3-7205f92b9325",
                  "parentUUID": "0e2301ac-49f6-4c6e-ad6b-6a8849c04297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "870ad885-9e50-4476-87b4-28b3b067fb2f",
                  "parentUUID": "0e2301ac-49f6-4c6e-ad6b-6a8849c04297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await hre.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "4cd46f52-fe1d-4967-82ac-38fe63ad9686",
                  "parentUUID": "0e2301ac-49f6-4c6e-ad6b-6a8849c04297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _general.wrapContractWithSigner)(hre.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await hre.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "723d5785-4f73-4915-96e8-bb74361600c8",
                  "parentUUID": "0e2301ac-49f6-4c6e-ad6b-6a8849c04297",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27946b3f-bf46-436c-86f3-7205f92b9325",
                "870ad885-9e50-4476-87b4-28b3b067fb2f",
                "4cd46f52-fe1d-4967-82ac-38fe63ad9686",
                "723d5785-4f73-4915-96e8-bb74361600c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 267,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1db1e979-cd17-4ac1-9388-1ec5d04356a3",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "3f082ae1-c4bb-4acf-97bd-be58865b097c",
              "parentUUID": "1db1e979-cd17-4ac1-9388-1ec5d04356a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b25d126-6fd5-4a6a-85dd-dcce324e3351",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 688,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hre.ethers.utils.id('kresko.test.operator');\nconst isTestOperator = await hre.Diamond.hasRole(TEST_OPERATOR_ROLE, hre.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await hre.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], hre.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator() // Retrieved from SmockStorage\n;\n(0, _chai.expect)(operatorFromNewStorage).to.equal(hre.addr.userOne);",
                  "err": {},
                  "uuid": "56cdd5a4-2006-432a-b83f-937a333af2e7",
                  "parentUUID": "2b25d126-6fd5-4a6a-85dd-dcce324e3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 597,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: 'SmockFacet',\n    initializerName: 'SmockInit',\n    initializerArgs: hre.addr.userOne\n});\nconst facetsBefore = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: 'SmockFacet'\n});\nconst facetsAfter = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "b070e6d2-6d98-421a-a6b1-827d56cc6d6f",
                  "parentUUID": "2b25d126-6fd5-4a6a-85dd-dcce324e3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 157,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondStateFacet\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.notAdmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hre.Diamond.facetAddress(signature);\nconst functions = await hre.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hre.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hre.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await hre.ethers.getContractAt('DSCore', hre.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(hre.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(hre.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.notAdmin).acceptOwnership()).to.be.reverted;",
                  "err": {},
                  "uuid": "267f45b5-476d-40aa-8139-dadddd9d2d38",
                  "parentUUID": "2b25d126-6fd5-4a6a-85dd-dcce324e3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.notAdmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hre.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hre.deploy('DiamondStateFacet', {\n    deploymentName: 'DiamondStateFacet2'\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.notAdmin).acceptOwnership()).to.be.reverted;\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hre.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hre.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).acceptOwnership());\nconst currentOwner = await hre.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "c813e8d2-f80d-4016-a5c9-9ab2fdeda695",
                  "parentUUID": "2b25d126-6fd5-4a6a-85dd-dcce324e3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 559,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock('SmockInit');\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hre.Diamond.executeInitializer(tx.to, tx.data);\n(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "86a56f79-148e-4326-aa6b-9dd8686d8848",
                  "parentUUID": "2b25d126-6fd5-4a6a-85dd-dcce324e3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 1144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await hre.ethers.getContractAt('SmockFacet', hre.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock('SmockFacet2');\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hre.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hre.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hre.ethers.getContractAt('SmockFacet2', hre.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "54fb680d-8fa9-48df-8da3-c5982ae821cb",
                  "parentUUID": "2b25d126-6fd5-4a6a-85dd-dcce324e3351",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56cdd5a4-2006-432a-b83f-937a333af2e7",
                "b070e6d2-6d98-421a-a6b1-827d56cc6d6f",
                "267f45b5-476d-40aa-8139-dadddd9d2d38",
                "c813e8d2-f80d-4016-a5c9-9ab2fdeda695",
                "86a56f79-148e-4326-aa6b-9dd8686d8848",
                "54fb680d-8fa9-48df-8da3-c5982ae821cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3383,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9a6f1c79-bdd0-4d62-ab7e-7de672cc40fb",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/03-protocol.ts",
          "file": "/src/test/diamond/03-protocol.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.defaultFixture)();",
              "err": {},
              "uuid": "e91838fd-191c-4d18-bd16-fe3b6f71d634",
              "parentUUID": "9a6f1c79-bdd0-4d62-ab7e-7de672cc40fb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a9921ce4-4daf-49ff-95f2-934933859e2c",
              "title": "#protocol initialization",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/diamond/03-protocol.ts",
              "file": "/src/test/diamond/03-protocol.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initialized all facets",
                  "fullTitle": "Diamond #protocol initialization initialized all facets",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hre.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._deploy.diamondFacets,\n    ..._deploy.minterFacets,\n    ..._deploy.scdpFacets,\n    ..._deploy.commonFacets,\n    ..._deploy.peripheryFacets\n].map(async (name)=>{\n    const deployment = await hre.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "b491a8ae-8d52-44e4-beb5-983fce9e1d0d",
                  "parentUUID": "a9921ce4-4daf-49ff-95f2-934933859e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "initialized correct state",
                  "fullTitle": "Diamond #protocol initialization initialized correct state",
                  "timedOut": false,
                  "duration": 345,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(3);\nconst { args } = await (0, _deploy.getCommonInitializer)(hre);\nconst { args: minterArgs } = await (0, _deploy.getMinterInitializer)(hre);\nconst { args: scdpArgs } = await (0, _deploy.getSCDPInitializer)(hre);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.SAFETY_COUNCIL, hre.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getFeeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await hre.Diamond.getMinCollateralRatioMinter()).to.equal(minterArgs.minCollateralRatio);\n(0, _chai.expect)(await hre.Diamond.getLiquidationThresholdMinter()).to.equal(minterArgs.liquidationThreshold);\n(0, _chai.expect)(await hre.Diamond.getMinDebtValueMinter()).to.equal(minterArgs.minDebtValue);\n(0, _chai.expect)(await hre.Diamond.getMaxLiquidationRatioMinter()).to.equal(Number(minterArgs.liquidationThreshold) + 0.01e4);\nconst scdpParams = await hre.Diamond.getParametersSCDP();\n(0, _chai.expect)(scdpParams.minCollateralRatio).to.equal(scdpArgs.minCollateralRatio);\n(0, _chai.expect)(scdpParams.liquidationThreshold).to.equal(scdpArgs.liquidationThreshold);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(args.maxPriceDeviationPct);",
                  "err": {},
                  "uuid": "a3f93772-fb8c-4226-8390-d83755ed54e3",
                  "parentUUID": "a9921ce4-4daf-49ff-95f2-934933859e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can modify configuration parameters",
                  "fullTitle": "Diamond #protocol initialization can modify configuration parameters",
                  "timedOut": false,
                  "duration": 332,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(hre.Diamond.setMaxPriceDeviationPct(0.05e4)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setSequencerGracePeriod(1000)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setDefaultOraclePrecision(9)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setStaleTime(9)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setMinDebtValueMinter(20e8)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getMinDebtValueMinter()).to.equal(20e8);\n(0, _chai.expect)(await hre.Diamond.getDefaultOraclePrecision()).to.equal(9);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(0.05e4);\n(0, _chai.expect)(await hre.Diamond.getSequencerGracePeriod()).to.equal(1000);",
                  "err": {},
                  "uuid": "19107667-e7f3-40ae-9bd8-cc526a64336f",
                  "parentUUID": "a9921ce4-4daf-49ff-95f2-934933859e2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b491a8ae-8d52-44e4-beb5-983fce9e1d0d",
                "a3f93772-fb8c-4226-8390-d83755ed54e3",
                "19107667-e7f3-40ae-9bd8-cc526a64336f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 759,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3d964a4c-d9ce-4dcc-8d29-9b543d4cd99b",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "25181f3b-f3f4-42a8-8b98-cd78901a05d7",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "2691befe-1bf0-4cf2-84a6-2e676b540967",
                  "parentUUID": "25181f3b-f3f4-42a8-8b98-cd78901a05d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "2691befe-1bf0-4cf2-84a6-2e676b540967"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c641c291-17f4-4b6c-995b-7d1af436d03e",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "332463ed-4990-463c-97ca-dcf1c2a8842e",
                  "parentUUID": "c641c291-17f4-4b6c-995b-7d1af436d03e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "332463ed-4990-463c-97ca-dcf1c2a8842e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9798afed-3e5d-478d-b5c9-d0b72bc40144",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.kreskoAssetFixture)({\n    name,\n    symbol,\n    underlyingToken: _viem.zeroAddress\n});",
              "err": {},
              "uuid": "a4072b74-4ac0-4969-b1fb-0e870e3fb27f",
              "parentUUID": "9798afed-3e5d-478d-b5c9-d0b72bc40144",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7aa0f13b-c876-4875-8626-55a75089cac3",
              "title": "KreskoAsset",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset KreskoAsset sets correct state",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await f.KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "4c15ad0e-707c-4e61-92b9-de016835da7a",
                  "parentUUID": "7aa0f13b-c876-4875-8626-55a75089cac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset KreskoAsset can reinitialize metadata",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "75b25142-9e47-4a02-96bf-aa7c8a94f5c7",
                  "parentUUID": "7aa0f13b-c876-4875-8626-55a75089cac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b610272c-97c7-4595-b751-759c1d3e930b",
                  "title": "#initialization",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
                  "file": "/src/test/krasset/00-init.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "cant initialize twice",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization cant initialize twice",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.KreskoAsset.initialize(name, symbol, 18, hre.addr.deployer, hre.Diamond.address, hre.ethers.constants.AddressZero, hre.addr.deployer, 0, 0)).to.be.reverted;",
                      "err": {},
                      "uuid": "587ef1a6-6f9a-471e-b775-d9419000f026",
                      "parentUUID": "b610272c-97c7-4595-b751-759c1d3e930b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cant initialize implementation",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization cant initialize implementation",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "74b783fb-969d-4466-b10e-11a8862cd91f",
                      "parentUUID": "b610272c-97c7-4595-b751-759c1d3e930b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "sets correct state",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization sets correct state",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await f.KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.DEFAULT_ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                      "err": {},
                      "uuid": "f7d78e4b-6c85-4642-a4a5-719d723937bc",
                      "parentUUID": "b610272c-97c7-4595-b751-759c1d3e930b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can reinitialize metadata",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization can reinitialize metadata",
                      "timedOut": false,
                      "duration": 17,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(newSymbol);",
                      "err": {},
                      "uuid": "99aff180-b515-46ea-a94c-76d639f0d431",
                      "parentUUID": "b610272c-97c7-4595-b751-759c1d3e930b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "587ef1a6-6f9a-471e-b775-d9419000f026",
                    "f7d78e4b-6c85-4642-a4a5-719d723937bc",
                    "99aff180-b515-46ea-a94c-76d639f0d431"
                  ],
                  "failures": [],
                  "pending": [
                    "74b783fb-969d-4466-b10e-11a8862cd91f"
                  ],
                  "skipped": [],
                  "duration": 52,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "4c15ad0e-707c-4e61-92b9-de016835da7a",
                "75b25142-9e47-4a02-96bf-aa7c8a94f5c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6713b2d8-c51d-46e4-ba91-8bc6157942bb",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(f.KreskoAssetAnchor.initialize(f.KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.reverted;",
                  "err": {},
                  "uuid": "76bbbc1e-a8b1-42dd-bc37-a9af8da627b4",
                  "parentUUID": "6713b2d8-c51d-46e4-ba91-8bc6157942bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(anchorName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(anchorSymbol);\n(0, _chai.expect)(await f.KreskoAssetAnchor.asset()).to.equal(f.KreskoAsset.address);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.Role.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.Role.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalAssets()).to.equal(await f.KreskoAsset.totalSupply());\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "db2c30c0-dda9-4fcf-ba2a-f017130e59c6",
                  "parentUUID": "6713b2d8-c51d-46e4-ba91-8bc6157942bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hre.deployments.get(anchorSymbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(hre.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await hre.ethers.getContractAt('KreskoAssetAnchor', implementationAddress);\nawait (0, _chai.expect)(KreskoAssetAnchorImpl.initialize(f.KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.reverted;",
                  "err": {},
                  "uuid": "3d2acc61-84b1-47bc-9df1-dad9cc6cc08d",
                  "parentUUID": "6713b2d8-c51d-46e4-ba91-8bc6157942bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(newSymbol);\nawait f.KreskoAssetAnchor.reinitializeERC20(name, symbol, 3);",
                  "err": {},
                  "uuid": "5d3851be-565e-4c41-a652-a695cc6d1804",
                  "parentUUID": "6713b2d8-c51d-46e4-ba91-8bc6157942bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76bbbc1e-a8b1-42dd-bc37-a9af8da627b4",
                "db2c30c0-dda9-4fcf-ba2a-f017130e59c6",
                "3d2acc61-84b1-47bc-9df1-dad9cc6cc08d",
                "5d3851be-565e-4c41-a652-a695cc6d1804"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cdc324ed-baa5-4d78-b324-dcdad99d3abb",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH',\n    underlyingToken: _viem.zeroAddress\n}));\nthis.mintAmount = 125;\nthis.owner = hre.users.deployer;\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "d27db16e-39c9-453a-ac4a-aa9aa0d4a8a4",
              "parentUUID": "cdc324ed-baa5-4d78-b324-dcdad99d3abb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eb32c4e1-06b6-402c-bdd6-de6488aa2385",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "7d70a772-f010-4a83-81de-4ef4b104e064",
                  "parentUUID": "eb32c4e1-06b6-402c-bdd6-de6488aa2385",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "c378e5d8-d43f-4fc8-b395-7ddc64b7c200",
                  "parentUUID": "eb32c4e1-06b6-402c-bdd6-de6488aa2385",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.reverted;\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "25dd99ca-dc64-4464-8e29-342a657a94ec",
                  "parentUUID": "eb32c4e1-06b6-402c-bdd6-de6488aa2385",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.renounceRole(_roles.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount)).to.be.reverted;",
                  "err": {},
                  "uuid": "a59f6068-88e2-4262-bc29-6637da0c9498",
                  "parentUUID": "eb32c4e1-06b6-402c-bdd6-de6488aa2385",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d70a772-f010-4a83-81de-4ef4b104e064",
                "c378e5d8-d43f-4fc8-b395-7ddc64b7c200",
                "25dd99ca-dc64-4464-8e29-342a657a94ec",
                "a59f6068-88e2-4262-bc29-6637da0c9498"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 61,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "0fa8bfd0-e99c-4494-9bc9-794d654a73d6",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, this.owner.address);",
                  "err": {},
                  "uuid": "bf1dfa3e-5570-4842-8dcc-6a58337ce0a9",
                  "parentUUID": "0fa8bfd0-e99c-4494-9bc9-794d654a73d6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "6b416c3b-96d0-4919-a355-d0a9b99333c7",
                  "parentUUID": "0fa8bfd0-e99c-4494-9bc9-794d654a73d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).approve(hre.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "c0a6b481-5f7b-4a9c-89d2-1fcafa7d7797",
                  "parentUUID": "0fa8bfd0-e99c-4494-9bc9-794d654a73d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await KreskoAsset.balanceOf(hre.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "41cc9b3f-12c2-41a6-9d42-918c9e81f67c",
                  "parentUUID": "0fa8bfd0-e99c-4494-9bc9-794d654a73d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.connect(hre.users.userTwo).burn(hre.users.userOne.address, this.mintAmount)).to.be.revertedWithCustomError(KreskoAsset, 'AccessControlUnauthorizedAccount').withArgs(hre.users.userTwo.address, _roles.Role.OPERATOR);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "38938069-d091-4182-ab0d-27cb44a10567",
                  "parentUUID": "0fa8bfd0-e99c-4494-9bc9-794d654a73d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b416c3b-96d0-4919-a355-d0a9b99333c7",
                "c0a6b481-5f7b-4a9c-89d2-1fcafa7d7797",
                "41cc9b3f-12c2-41a6-9d42-918c9e81f67c",
                "38938069-d091-4182-ab0d-27cb44a10567"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "df654700-b932-478d-8c02-f23477acb66d",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 839,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await hre.deployments.fixture('diamond-init');\nif (result.Diamond) {\n    hre.Diamond = (0, _redstone.wrapKresko)(await hre.getContractOrFork('Kresko'));\n}\nKreskoAsset = (await (0, _createkrasset.createKrAsset)('krSYMBOL', 'Kresko Asset: SYMBOL', 18, _viem.zeroAddress)).KreskoAsset;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "e18cd882-7684-4df9-9d85-472b751addc5",
              "parentUUID": "df654700-b932-478d-8c02-f23477acb66d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a3429edb-88e4-4788-909d-5642c859df47",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "f857cf2b-630d-461f-8536-aa8fa3a7aa14",
                  "parentUUID": "a3429edb-88e4-4788-909d-5642c859df47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "57501b0c-bf20-4c89-b2b0-edcdfef47338",
                  "parentUUID": "a3429edb-88e4-4788-909d-5642c859df47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "1461d8c3-4903-43ce-9b1a-b48880d6afa2",
                  "parentUUID": "a3429edb-88e4-4788-909d-5642c859df47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount);",
                      "err": {},
                      "uuid": "72ce59f6-8856-4b83-9d18-656db0fc4ca3",
                      "parentUUID": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "f9b032ee-c447-4dac-a01b-75ae41a3419b",
                      "parentUUID": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "a273c2ea-d1b8-4d8d-a750-2ca38fe65ffa",
                      "parentUUID": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "1cf502db-04a4-4669-9960-61fa16e83655",
                      "parentUUID": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "535df6b1-5c6e-4f23-bb6b-541645287e29",
                      "parentUUID": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "d511724d-2b59-4956-b6f9-ef7455ed7441",
                      "parentUUID": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "8b31f1f5-83f5-4450-b0c2-da5035bc28aa",
                      "parentUUID": "26446b84-8ba7-4aa1-a47a-9ca58be94e0b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "72ce59f6-8856-4b83-9d18-656db0fc4ca3",
                    "f9b032ee-c447-4dac-a01b-75ae41a3419b",
                    "a273c2ea-d1b8-4d8d-a750-2ca38fe65ffa",
                    "1cf502db-04a4-4669-9960-61fa16e83655",
                    "535df6b1-5c6e-4f23-bb6b-541645287e29",
                    "d511724d-2b59-4956-b6f9-ef7455ed7441",
                    "8b31f1f5-83f5-4450-b0c2-da5035bc28aa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 99,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "81dc9f3a-0709-4da0-9639-8c20e0133594",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "bedd6427-605f-44ad-a68c-b9f4511aa457",
                      "parentUUID": "81dc9f3a-0709-4da0-9639-8c20e0133594",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "180a44ea-6688-45c7-a909-e772aa3e99f4",
                      "parentUUID": "81dc9f3a-0709-4da0-9639-8c20e0133594",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "efcfe2da-0cc6-4f38-b8dc-f84fe31dc144",
                      "parentUUID": "81dc9f3a-0709-4da0-9639-8c20e0133594",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "d8486655-f510-479b-a80d-e29835645bb1",
                      "parentUUID": "81dc9f3a-0709-4da0-9639-8c20e0133594",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "92955da5-069c-4a31-8316-38038300222a",
                      "parentUUID": "81dc9f3a-0709-4da0-9639-8c20e0133594",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "437af6dc-8fbd-45b6-879f-0bc21ed25018",
                      "parentUUID": "81dc9f3a-0709-4da0-9639-8c20e0133594",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bedd6427-605f-44ad-a68c-b9f4511aa457",
                    "180a44ea-6688-45c7-a909-e772aa3e99f4",
                    "efcfe2da-0cc6-4f38-b8dc-f84fe31dc144",
                    "d8486655-f510-479b-a80d-e29835645bb1",
                    "92955da5-069c-4a31-8316-38038300222a",
                    "437af6dc-8fbd-45b6-879f-0bc21ed25018"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 196,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "f857cf2b-630d-461f-8536-aa8fa3a7aa14",
                "57501b0c-bf20-4c89-b2b0-edcdfef47338",
                "1461d8c3-4903-43ce-9b1a-b48880d6afa2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a495fefb-dd3d-49d8-b2f5-0e13a55cde3c",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 843,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await hre.deployments.fixture('diamond-init');\nif (result.Diamond) {\n    hre.Diamond = (0, _redstone.wrapKresko)(await hre.getContractOrFork('Kresko'));\n}\nconst deployments = await (0, _createkrasset.createKrAsset)('krSYMBOL', 'Kresko Asset: SYMBOL', 18, _viem.zeroAddress);\nKreskoAsset = deployments.KreskoAsset;\nKreskoAssetAnchor = deployments.KreskoAssetAnchor;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer);\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_roles.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "c2480e66-7844-4198-9fdd-9ebb8c896dd0",
              "parentUUID": "a495fefb-dd3d-49d8-b2f5-0e13a55cde3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4a0e2da6-8940-4b7d-a9d2-09778df1894d",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount.add(_mocks.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "a0fe1e54-71cc-4b40-aaef-aa55897d830e",
                  "parentUUID": "4a0e2da6-8940-4b7d-a9d2-09778df1894d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "126832d8-a2e2-418d-9905-aed83ce0f1b2",
                  "parentUUID": "4a0e2da6-8940-4b7d-a9d2-09778df1894d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a171fe79-6be5-4b95-a539-fa5b53cd45a8",
                  "parentUUID": "4a0e2da6-8940-4b7d-a9d2-09778df1894d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c3847dc4-ce8f-4b51-9544-6c6ff065a008",
                  "parentUUID": "4a0e2da6-8940-4b7d-a9d2-09778df1894d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b50f6d8b-109a-4698-abe7-01b1a048429c",
                  "parentUUID": "4a0e2da6-8940-4b7d-a9d2-09778df1894d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "33788965-4818-457f-83db-074449433db6",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "9b990532-6d42-4097-a542-1787b34dfcdd",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "647809de-7f56-4168-9d65-a2eee960b718",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d975a7ce-66cc-467e-a3f7-bb48e0369c95",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0dbf4848-ed84-4bfe-a96e-9a55d1364336",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "99ad51b9-2c01-452c-802d-ed8bd8c29283",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4c5482ae-8078-4905-9748-ce6600342404",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "faf4e498-05eb-4e66-9432-bd83cdb1142c",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cef7f3f2-9b18-4dfd-9139-3ed229b1929e",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4e5f9cca-25d7-4d75-8af2-ede45910df92",
                          "parentUUID": "9b990532-6d42-4097-a542-1787b34dfcdd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "647809de-7f56-4168-9d65-a2eee960b718",
                        "d975a7ce-66cc-467e-a3f7-bb48e0369c95",
                        "0dbf4848-ed84-4bfe-a96e-9a55d1364336",
                        "99ad51b9-2c01-452c-802d-ed8bd8c29283",
                        "4c5482ae-8078-4905-9748-ce6600342404",
                        "faf4e498-05eb-4e66-9432-bd83cdb1142c",
                        "cef7f3f2-9b18-4dfd-9139-3ed229b1929e",
                        "4e5f9cca-25d7-4d75-8af2-ede45910df92"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "a0fe1e54-71cc-4b40-aaef-aa55897d830e"
              ],
              "failures": [],
              "pending": [
                "126832d8-a2e2-418d-9905-aed83ce0f1b2",
                "a171fe79-6be5-4b95-a539-fa5b53cd45a8",
                "c3847dc4-ce8f-4b51-9544-6c6ff065a008",
                "b50f6d8b-109a-4698-abe7-01b1a048429c"
              ],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0e02e299-008e-4407-91be-f6896e276c91",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "52987fd7-a6c3-4539-b622-389f916f0d8d",
              "parentUUID": "0e02e299-008e-4407-91be-f6896e276c91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "04edd644-a7a4-498a-87af-b110260eb209",
              "parentUUID": "0e02e299-008e-4407-91be-f6896e276c91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "52987fd7-a6c3-4539-b622-389f916f0d8d",
            "04edd644-a7a4-498a-87af-b110260eb209"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3c79b7a9-7d43-49fe-b01f-3f084b63f92b",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
          "file": "/src/test/krasset/05-krasset-wrap.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "operator = hre.users.deployer;\nuser = hre.users.userOne;\ntreasury = hre.addr.treasury;\n({ KreskoAsset } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH'\n}));\n// Deploy WETH\nWETH = await hre.ethers.deployContract('WETH9');\n// Give WETH to deployer\nawait WETH.connect(user).deposit({\n    value: (0, _values.toBig)(100)\n});\nawait KreskoAsset.connect(hre.users.deployer).grantRole(_roles.Role.OPERATOR, operator.address);\nawait KreskoAsset.connect(hre.users.deployer).setUnderlying(WETH.address);\n// Approve WETH for KreskoAsset\nawait WETH.connect(user).approve(KreskoAsset.address, hre.ethers.constants.MaxUint256);",
              "err": {},
              "uuid": "9411e917-b48a-4026-914e-6afa6a12aaa7",
              "parentUUID": "3c79b7a9-7d43-49fe-b01f-3f084b63f92b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0c5ab14-6004-4640-9843-c97195215f20",
              "title": "Deposit / Wrap",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
              "file": "/src/test/krasset/05-krasset-wrap.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot deposit when paused",
                  "fullTitle": "KreskoAsset Deposit / Wrap cannot deposit when paused",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).pause();\nawait (0, _chai.expect)(KreskoAsset.wrap(user.address, (0, _values.toBig)(10))).to.be.revertedWithCustomError(KreskoAsset, 'EnforcedPause');\nawait KreskoAsset.connect(operator).unpause();",
                  "err": {},
                  "uuid": "e53aaac2-ef5c-4f1a-8f8b-8def7fb09380",
                  "parentUUID": "a0c5ab14-6004-4640-9843-c97195215f20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can deposit with token",
                  "fullTitle": "KreskoAsset Deposit / Wrap can deposit with token",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\n(0, _chai.expect)(await KreskoAsset.balanceOf(user.address)).to.equal((0, _values.toBig)(10));",
                  "err": {},
                  "uuid": "3ec1888b-2b16-4b77-8aae-cdab70df2a63",
                  "parentUUID": "a0c5ab14-6004-4640-9843-c97195215f20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot deposit native token if not enabled",
                  "fullTitle": "KreskoAsset Deposit / Wrap cannot deposit native token if not enabled",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n})).to.be.reverted;",
                  "err": {},
                  "uuid": "1f7a0b7d-6f90-4fbf-9c21-331f4960dd8d",
                  "parentUUID": "a0c5ab14-6004-4640-9843-c97195215f20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can deposit native token if enabled",
                  "fullTitle": "KreskoAsset Deposit / Wrap can deposit native token if enabled",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).enableNativeUnderlying(true);\nconst prevBalance = await KreskoAsset.balanceOf(user.address);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\nconst currentBalance = await KreskoAsset.balanceOf(user.address);\n(0, _chai.expect)(currentBalance.sub(prevBalance)).to.equal((0, _values.toBig)(10));",
                  "err": {},
                  "uuid": "b69f9349-3958-4526-909d-b8cd8a4191ba",
                  "parentUUID": "a0c5ab14-6004-4640-9843-c97195215f20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "transfers the correct fees to feeRecipient",
                  "fullTitle": "KreskoAsset Deposit / Wrap transfers the correct fees to feeRecipient",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).setOpenFee(0.1e4);\nawait KreskoAsset.connect(operator).enableNativeUnderlying(true);\nlet prevBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst treasuryWETHBal = await WETH.balanceOf(treasury);\nawait KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\nlet currentBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst currentWETHBalanceTreasury = await WETH.balanceOf(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(9));\n(0, _chai.expect)(currentWETHBalanceTreasury.sub(treasuryWETHBal)).to.equal((0, _values.toBig)(1));\nprevBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst prevBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\ncurrentBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst currentBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(9));\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(1));\n// Set openfee to 0\nawait KreskoAsset.connect(operator).setOpenFee(0);",
                  "err": {},
                  "uuid": "84183506-843f-401d-a3f5-5bcabd0b0be2",
                  "parentUUID": "a0c5ab14-6004-4640-9843-c97195215f20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e53aaac2-ef5c-4f1a-8f8b-8def7fb09380",
                "3ec1888b-2b16-4b77-8aae-cdab70df2a63",
                "1f7a0b7d-6f90-4fbf-9c21-331f4960dd8d",
                "b69f9349-3958-4526-909d-b8cd8a4191ba",
                "84183506-843f-401d-a3f5-5bcabd0b0be2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 238,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fa53a691-5d5a-4fd0-996c-1ee13dae2332",
              "title": "Withdraw / Unwrap",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
              "file": "/src/test/krasset/05-krasset-wrap.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Withdraw / Unwrap\"",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap \"before each\" hook in \"Withdraw / Unwrap\"",
                  "timedOut": false,
                  "duration": 90,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Deposit some tokens here\nawait KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\nawait KreskoAsset.connect(operator).enableNativeUnderlying(true);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(100)\n});",
                  "err": {},
                  "uuid": "4f3129cb-e983-4179-a7f8-e088946e826c",
                  "parentUUID": "fa53a691-5d5a-4fd0-996c-1ee13dae2332",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot withdraw when paused",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap cannot withdraw when paused",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).pause();\nawait (0, _chai.expect)(KreskoAsset.unwrap((0, _values.toBig)(1), false)).to.be.revertedWithCustomError(KreskoAsset, 'EnforcedPause');\nawait KreskoAsset.connect(operator).unpause();",
                  "err": {},
                  "uuid": "66fd1e8e-5d67-431c-8292-2d109f78281f",
                  "parentUUID": "fa53a691-5d5a-4fd0-996c-1ee13dae2332",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can withdraw",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap can withdraw",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prevBalance = await WETH.balanceOf(user.address);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(1), false);\nconst currentBalance = await WETH.balanceOf(user.address);\n(0, _chai.expect)(currentBalance).to.equal((0, _values.toBig)(1).add(prevBalance));",
                  "err": {},
                  "uuid": "034a47f1-00c0-4be6-8639-00f6a1334d30",
                  "parentUUID": "fa53a691-5d5a-4fd0-996c-1ee13dae2332",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can withdraw native token if enabled",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap can withdraw native token if enabled",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).enableNativeUnderlying(true);\nconst prevBalance = await KreskoAsset.balanceOf(user.address);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(1), true);\nconst currentBalance = await KreskoAsset.balanceOf(user.address);\n(0, _chai.expect)(prevBalance.sub(currentBalance)).to.equal((0, _values.toBig)(1));",
                  "err": {},
                  "uuid": "ed3f6ef6-b0c1-4ece-b822-861c18e697fb",
                  "parentUUID": "fa53a691-5d5a-4fd0-996c-1ee13dae2332",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "transfers the correct fees to feeRecipient",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap transfers the correct fees to feeRecipient",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// set close fee to 10%\nawait KreskoAsset.connect(operator).setCloseFee(0.1e4);\nconst prevBalanceDevOne = await WETH.balanceOf(user.address);\nlet prevBalanceTreasury = await WETH.balanceOf(treasury);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(9), false);\nconst currentBalanceDevOne = await WETH.balanceOf(user.address);\nlet currentBalanceTreasury = await WETH.balanceOf(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(8.1));\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(0.9));\n// Withdraw native token and check if fee is transferred\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\nprevBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(9), true);\ncurrentBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(0.9));",
                  "err": {},
                  "uuid": "a3c1245d-a5fb-4e1e-ba2d-330aa8d14dcc",
                  "parentUUID": "fa53a691-5d5a-4fd0-996c-1ee13dae2332",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66fd1e8e-5d67-431c-8292-2d109f78281f",
                "034a47f1-00c0-4be6-8639-00f6a1334d30",
                "ed3f6ef6-b0c1-4ece-b822-861c18e697fb",
                "a3c1245d-a5fb-4e1e-ba2d-330aa8d14dcc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 165,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6e7244a6-89bd-4119-aff9-10770e3ebc4b",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();",
              "err": {},
              "uuid": "e27f1995-4a58-4e92-9a47-d90373f42f49",
              "parentUUID": "6e7244a6-89bd-4119-aff9-10770e3ebc4b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "77303337-b556-4568-b576-b5497f6867dd",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 162,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = (0, _mocks.testMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(hre.Diamond.setMinCollateralRatioMinter(update.minCollateralRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setLiquidationThresholdMinter(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.setMaxLiquidationRatioMinter(update.maxLiquidationRatio)).to.not.be.reverted;\nconst params = await hre.Diamond.getParametersMinter();\n(0, _chai.expect)(update.minCollateralRatio).to.equal(params.minCollateralRatio);\n(0, _chai.expect)(update.maxLiquidationRatio).to.equal(params.maxLiquidationRatio);\n(0, _chai.expect)(update.liquidationThreshold).to.equal(params.liquidationThreshold);",
                  "err": {},
                  "uuid": "485d4bee-c342-4126-9031-c33ae4fc6ddf",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 789,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, _collaterals.addMockExtAsset)(_mocks.testCollateralConfig);\n(0, _chai.expect)(await hre.Diamond.getCollateralExists(contract.address)).to.equal(true);\nconst priceOfOne = await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1));\n(0, _chai.expect)(Number(priceOfOne)).to.equal((0, _values.toBig)(_mocks.testCollateralConfig.price, 8));",
                  "err": {},
                  "uuid": "682ecbde-b462-48af-91f4-90c392ca9d40",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 1277,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, assetInfo } = await (0, _krassets.addMockKreskoAsset)({\n    ..._mocks.testKrAssetConfig,\n    name: 'Kresko Asset: 5',\n    symbol: 'KrAsset5',\n    ticker: 'KrAsset5'\n});\nconst values = await assetInfo();\nconst kreskoPriceAnswer = (0, _values.fromBig)(await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1)), 8);\nconst config = _mocks.testKrAssetConfig.krAssetConfig;\n(0, _chai.expect)(values.isMinterMintable).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal(config.kFactor);\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_mocks.testKrAssetConfig.price);\n(0, _chai.expect)(values.maxDebtMinter).to.equal(config.maxDebtMinter);\n(0, _chai.expect)(values.closeFee).to.equal(config.closeFee);\n(0, _chai.expect)(values.openFee).to.equal(config.openFee);",
                  "err": {},
                  "uuid": "8c97d08b-eded-4091-b983-0199a8433b04",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update default oracle precision decimals",
                  "fullTitle": "Minter - Configuration #configuration can update default oracle precision decimals",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.setDefaultOraclePrecision(decimals);\n(0, _chai.expect)(await hre.Diamond.getDefaultOraclePrecision()).to.equal(decimals);",
                  "err": {},
                  "uuid": "da5b9327-67a2-4e6b-8ddf-d5987da67f4a",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update minter max liquidation ratio",
                  "fullTitle": "Minter - Configuration #configuration can update minter max liquidation ratio",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.getMaxLiquidationRatioMinter();\nconst newMLR = 1.42e4;\n(0, _chai.expect)(currentMLM).to.not.eq(newMLR);\nawait (0, _chai.expect)(hre.Diamond.setMaxLiquidationRatioMinter(newMLR)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getMaxLiquidationRatioMinter()).to.eq(newMLR);",
                  "err": {},
                  "uuid": "966ea875-6878-4442-8c59-66741221dc0e",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update global oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update global oracle deviation pct",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentDeviationPct = await hre.Diamond.getOracleDeviationPct();\nconst newDeviationPct = 0.03e4;\n(0, _chai.expect)(currentDeviationPct).to.not.equal(newDeviationPct);\nawait (0, _chai.expect)(hre.Diamond.setMaxPriceDeviationPct(newDeviationPct)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(newDeviationPct);",
                  "err": {},
                  "uuid": "86e28e38-9907-4117-9160-b9de98878438",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.KrAsset.address)).kFactor;\nconst newRatio = 1.2e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.setAssetKFactor(f.KrAsset.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.KrAsset.address)).kFactor === newRatio).to.be.true;",
                  "err": {},
                  "uuid": "1c93aeda-7d1a-4179-afae-e11fe44e0008",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.Collateral.address)).factor;\nconst newRatio = 0.9e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.setAssetCFactor(f.Collateral.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.Collateral.address)).factor === newRatio).to.be.true;",
                  "err": {},
                  "uuid": "67d1ca7f-a273-4465-981a-f77cd9b8eb02",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update configuration of an asset",
                  "fullTitle": "Minter - Configuration #configuration can update configuration of an asset",
                  "timedOut": false,
                  "duration": 469,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oracleAnswer = (0, _values.fromBig)((await f.KrAsset.priceFeed.latestRoundData())[1], 8);\nconst priceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(priceOfOne);\n(0, _chai.expect)(oracleAnswer).to.equal(_mocks.testKrAssetConfig.price);\nconst update = {\n    kFactor: 1.2e4,\n    maxDebtMinter: (0, _values.toBig)(12000),\n    closeFee: 0.03e4,\n    openFee: 0.03e4,\n    anchor: f.KrAsset.anchor.address\n};\nconst FakeFeed = await (0, _oracle.getFakeOracle)(20);\nconst newConfig = await (0, _general.getAssetConfig)(f.KrAsset.contract, {\n    ..._mocks.testKrAssetConfig,\n    feed: FakeFeed.address,\n    price: 20,\n    krAssetConfig: update\n});\nawait hre.Diamond.setFeedsForTicker(newConfig.assetStruct.ticker, newConfig.feedConfig);\nawait (0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateAsset(f.KrAsset.address, newConfig.assetStruct);\nconst newValues = await hre.Diamond.getAsset(f.KrAsset.address);\nconst updatedOracleAnswer = (0, _values.fromBig)((await FakeFeed.latestRoundData())[1], 8);\nconst newPriceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(newValues.isMinterMintable).to.equal(true);\n(0, _chai.expect)(newValues.isMinterCollateral).to.equal(false);\n(0, _chai.expect)(newValues.kFactor).to.equal(update.kFactor);\n(0, _chai.expect)(newValues.maxDebtMinter).to.equal(update.maxDebtMinter);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newPriceOfOne);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(20);\nconst update2 = {\n    ...await hre.Diamond.getAsset(f.KrAsset.address),\n    kFactor: 1.75e4,\n    maxDebtMinter: (0, _values.toBig)(12000),\n    closeFee: 0.052e4,\n    openFee: 0.052e4,\n    isSwapMintable: true,\n    swapInFeeSCDP: 0.052e4,\n    liqIncentiveSCDP: 1.1e4,\n    anchor: f.KrAsset.anchor.address\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update2);\nconst newValues2 = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(newValues2.isMinterMintable).to.equal(true);\n(0, _chai.expect)(newValues2.isSharedOrSwappedCollateral).to.equal(true);\n(0, _chai.expect)(newValues2.isSwapMintable).to.equal(true);\n(0, _chai.expect)(newValues2.isMinterCollateral).to.equal(false);\n(0, _chai.expect)(newValues2.isSharedCollateral).to.equal(false);\n(0, _chai.expect)(newValues2.isCoverAsset).to.equal(false);\n(0, _chai.expect)(newValues2.kFactor).to.equal(update2.kFactor);\n(0, _chai.expect)(newValues2.openFee).to.equal(update2.closeFee);\n(0, _chai.expect)(newValues2.closeFee).to.equal(update2.openFee);\n(0, _chai.expect)(newValues2.swapInFeeSCDP).to.equal(update2.swapInFeeSCDP);\n(0, _chai.expect)(newValues2.maxDebtMinter).to.equal(update2.maxDebtMinter);",
                  "err": {},
                  "uuid": "b392038c-7f68-4e6a-8c41-60be858dbc0d",
                  "parentUUID": "77303337-b556-4568-b576-b5497f6867dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "485d4bee-c342-4126-9031-c33ae4fc6ddf",
                "682ecbde-b462-48af-91f4-90c392ca9d40",
                "8c97d08b-eded-4091-b983-0199a8433b04",
                "da5b9327-67a2-4e6b-8ddf-d5987da67f4a",
                "966ea875-6878-4442-8c59-66741221dc0e",
                "86e28e38-9907-4117-9160-b9de98878438",
                "1c93aeda-7d1a-4179-afae-e11fe44e0008",
                "67d1ca7f-a273-4465-981a-f77cd9b8eb02",
                "b392038c-7f68-4e6a-8c41-60be858dbc0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3214,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b7fcb7b7-f8e7-4e71-9897-036f118efbc2",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.depositWithdrawFixture)();",
              "err": {},
              "uuid": "e1e97340-68cb-4290-b1a9-a13b66498d02",
              "parentUUID": "b7fcb7b7-f8e7-4e71-9897-036f118efbc2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8aa7beed-ded3-4220-88a1-fb7ba3ea4562",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 128,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(f.user, collateralAmount, _hardhat.default.Diamond.address);\nconst depositAmount = collateralAmount.div(2);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAssets(f.user.address)).to.include(f.KrAssetCollateral.address);\nawait (0, _chai.expect)(f.User.withdrawCollateral(f.user.address, f.KrAssetCollateral.address, withdrawAmount, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'COLLATERAL_AMOUNT_LOW').withArgs(f.KrAssetCollateral.errorId, 9e11, 1e12);",
                      "err": {},
                      "uuid": "7ba4a20f-383b-4800-b0d0-522cc3e054da",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(f.user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, 9e11.toString())).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'COLLATERAL_AMOUNT_LOW').withArgs(f.KrAssetCollateral.errorId, 9e11, 1e12);",
                      "err": {},
                      "uuid": "2ff5beed-4bc5-4080-a37a-100e51ec6a8c",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Account has deposit entry\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAmount(f.depositor.address, f.Collateral.address)).to.equal(f.initialDeposits);\n// Kresko's balance has increased\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Account's balance has decreased\n(0, _chai.expect)((0, _values.fromBig)(await f.Collateral.balanceOf(f.depositor.address))).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "98431edc-4ca9-40ef-8a6a-dd4698251b08",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 146,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the f.user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(f.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral, from f.depositor -> f.user.\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.user.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the f.user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the f.user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits);\n// Confirm the amount as been transferred from the f.user into Kresko.sol\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Confirm the f.depositor's wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await f.Collateral.balanceOf(f.depositor.address);\n(0, _chai.expect)((0, _values.fromBig)(depositorBalanceAfter)).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "a9e1db58-d69a-48bd-8dfa-78ad434b381e",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 144,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the f.user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the f.user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.depositor.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.add(f.initialDeposits));",
                      "err": {},
                      "uuid": "5f1f2834-539d-43ce-8875-bec1cdeb759b",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load f.user account with a different type of collateral\nawait f.Collateral2.setBalance(f.depositor, f.initialBalance, _hardhat.default.Diamond.address);\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral2.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the f.user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(f.depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral2.address\n]);",
                      "err": {},
                      "uuid": "cd1f65a7-ffa9-4982-8e85-b484c97f1a70",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, f.initialDeposits);\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralDeposited');\n(0, _chai.expect)(event.account).to.equal(f.depositor.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                      "err": {},
                      "uuid": "624eb622-0862-4a08-a5d7-289ed245653d",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 33,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, '0x0000000000000000000000000000000000000001', f.initialDeposits)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ASSET_NOT_MINTER_COLLATERAL').withArgs([\n    '',\n    '0x0000000000000000000000000000000000000001'\n]);",
                      "err": {},
                      "uuid": "82630f3e-de3e-40e0-aa86-e41bac352cd1",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Depositor.depositCollateral(f.depositor.address, f.Collateral.address, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ZERO_DEPOSIT').withArgs(f.Collateral.errorId);",
                      "err": {},
                      "uuid": "29c6e765-796c-4a6c-bc4b-63c3496f64f9",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 121,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devOne, extOne } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devOne,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, f.depositor).depositCollateral(f.depositor.address, f.Collateral.contract.address, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ASSET_PAUSED_FOR_THIS_ACTION').withArgs(f.Collateral.errorId, _types.Action.DEPOSIT);",
                      "err": {},
                      "uuid": "6c3c4c3d-c1a7-43a0-bff5-89ea789af609",
                      "parentUUID": "d061157b-b5d3-4dba-b6c6-fc489d733e6d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7ba4a20f-383b-4800-b0d0-522cc3e054da",
                    "2ff5beed-4bc5-4080-a37a-100e51ec6a8c",
                    "98431edc-4ca9-40ef-8a6a-dd4698251b08",
                    "a9e1db58-d69a-48bd-8dfa-78ad434b381e",
                    "5f1f2834-539d-43ce-8875-bec1cdeb759b",
                    "cd1f65a7-ffa9-4982-8e85-b484c97f1a70",
                    "624eb622-0862-4a08-a5d7-289ed245653d",
                    "82630f3e-de3e-40e0-aa86-e41bac352cd1",
                    "29c6e765-796c-4a6c-bc4b-63c3496f64f9",
                    "6c3c4c3d-c1a7-43a0-bff5-89ea789af609"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 902,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "73b14954-2bb6-42ae-af2f-0862a31f8d0f",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "dc721eef-0707-4c52-b181-685b29d61f45",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 150,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the f.user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await f.Collateral.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "2af8ba75-15c1-49a6-b976-058b4b8f9103",
                          "parentUUID": "dc721eef-0707-4c52-b181-685b29d61f45",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 143,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure the change in the f.user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst userOneBalance = await f.Collateral.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits.sub(amountDeposited));",
                          "err": {},
                          "uuid": "25100eaa-50ca-4335-8735-7a97f23777bd",
                          "parentUUID": "dc721eef-0707-4c52-b181-685b29d61f45",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 181,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.grantRole(_roles.Role.MANAGER, f.user.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_roles.Role.MANAGER, f.user.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\nawait (0, _chai.expect)(f.User.withdrawCollateral(f.withdrawer.address, f.Collateral.address, f.initialDeposits, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(f.initialDeposits));",
                          "err": {},
                          "uuid": "1276135a-cb10-4673-b87d-7bd663d2075a",
                          "parentUUID": "dc721eef-0707-4c52-b181-685b29d61f45",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 38,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralWithdrawn');\n(0, _chai.expect)(event.account).to.equal(f.withdrawer.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "413e2743-0391-4572-85ca-c73ed3af2f5e",
                          "parentUUID": "dc721eef-0707-4c52-b181-685b29d61f45",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 47,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(f.User.withdrawCollateral(f.withdrawer.address, f.Collateral.address, f.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${f.user.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "cee9f584-f150-42fd-b03d-b7d2dd40e7b1",
                          "parentUUID": "dc721eef-0707-4c52-b181-685b29d61f45",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "38994e8b-a634-4409-8cfa-b9a03597870b",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 222,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne mints some kr assets\nthis.mintAmount = (0, _values.toBig)(100);\nawait f.Withdrawer.mintKreskoAsset(f.withdrawer.address, f.KrAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _optimizations.default.getMinCollateralRatioMinter();",
                              "err": {},
                              "uuid": "b78e05ac-0c67-4181-acd0-3f6ed0569dad",
                              "parentUUID": "38994e8b-a634-4409-8cfa-b9a03597870b",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 538,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _values.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst [accMinCollateralValue, accCollateralValue, withdrawnCollateralValue] = await Promise.all([\n    _hardhat.default.Diamond.getAccountMinCollateralAtRatio(f.withdrawer.address, this.mcr),\n    _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address),\n    _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount)\n]);\n(0, _chai.expect)(accCollateralValue.sub(withdrawnCollateralValue).gte(accMinCollateralValue)).to.be.true;\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(f.withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\n// Ensure the change in the f.user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Check the balances of the contract and f.user\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst withdrawerBalance = await f.Collateral.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(withdrawerBalance).to.equal(withdrawAmount);\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(f.withdrawer.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "c59dc19e-b730-4262-bafa-176eb889d9ed",
                              "parentUUID": "38994e8b-a634-4409-8cfa-b9a03597870b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the f.user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the f.user total deposit available",
                              "timedOut": false,
                              "duration": 146,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const randomUser = _hardhat.default.users.userFour;\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(0));\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(1000));\nawait f.Collateral.contract.connect(randomUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1000),\n    user: randomUser\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1010),\n    user: randomUser\n});\n(0, _chai.expect)(await f.Collateral.balanceOf(randomUser.address)).to.equal((0, _values.toBig)(1000));",
                              "err": {},
                              "uuid": "b92c4eff-c426-4ea1-8270-1fa05f40af0a",
                              "parentUUID": "38994e8b-a634-4409-8cfa-b9a03597870b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 36,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)(f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, 0, withdrawAmount)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ZERO_AMOUNT').withArgs(f.Collateral.errorId);",
                              "err": {},
                              "uuid": "d9ac9564-9dcd-4f54-8057-179d00fda13e",
                              "parentUUID": "38994e8b-a634-4409-8cfa-b9a03597870b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 329,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = f.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(f.withdrawer.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\nconst withdrawnCollateralValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)(f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, withdrawAmount, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ACCOUNT_COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs(f.withdrawer.address, 0, 150000000000, await _hardhat.default.Diamond.getMinCollateralRatioMinter());",
                              "err": {},
                              "uuid": "7a637943-e2c8-4a15-aa3d-e1227a203a38",
                              "parentUUID": "38994e8b-a634-4409-8cfa-b9a03597870b",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositIndex is incorrect",
                              "timedOut": false,
                              "duration": 37,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait (0, _chai.expect)(f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, withdrawAmount, 1)).to.be.revertedWithCustomError((0, _errors.Errors)(_hardhat.default), 'ARRAY_INDEX_OUT_OF_BOUNDS').withArgs(f.Collateral.errorId, 1, [\n    f.Collateral.address\n]);",
                              "err": {},
                              "uuid": "029e69e8-1dd2-4b75-8d8e-11d2ffee4426",
                              "parentUUID": "38994e8b-a634-4409-8cfa-b9a03597870b",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "c59dc19e-b730-4262-bafa-176eb889d9ed",
                            "b92c4eff-c426-4ea1-8270-1fa05f40af0a",
                            "d9ac9564-9dcd-4f54-8057-179d00fda13e",
                            "7a637943-e2c8-4a15-aa3d-e1227a203a38",
                            "029e69e8-1dd2-4b75-8d8e-11d2ffee4426"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 1086,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [
                        "2af8ba75-15c1-49a6-b976-058b4b8f9103",
                        "25100eaa-50ca-4335-8735-7a97f23777bd",
                        "1276135a-cb10-4673-b87d-7bd663d2075a",
                        "413e2743-0391-4572-85ca-c73ed3af2f5e",
                        "cee9f584-f150-42fd-b03d-b7d2dd40e7b1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 559,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "f987eb68-b856-4224-8975-80972b16863f",
                  "title": "#deposit - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase \"before each\" hook in \"#deposit - rebase\"",
                      "timedOut": false,
                      "duration": 215,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setBalance(f.user, f.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// Allowance for Kresko\nawait f.KrAssetCollateral.contract.setVariable('_allowances', {\n    [f.user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait f.User.depositCollateral(f.user.address, f.Collateral.address, f.initialDeposits);\n// Mint some krAssets\nawait f.User.mintKreskoAsset(f.user.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await f.User.getAccountDebtAmount(f.user.address, f.KrAssetCollateral.address);",
                      "err": {},
                      "uuid": "13a5189c-c75b-4e9a-9fda-d469336d1cb0",
                      "parentUUID": "f987eb68-b856-4224-8975-80972b16863f",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "3914ca7d-c1f4-462b-81ca-a7eed7befb0f",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 124,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(expectedDepositsAfter);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "59fc384a-a489-4c12-8a53-fb5f1c11291f",
                          "parentUUID": "3914ca7d-c1f4-462b-81ca-a7eed7befb0f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 123,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "3863692c-594c-46ea-9314-193e1de609c3",
                          "parentUUID": "3914ca7d-c1f4-462b-81ca-a7eed7befb0f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 118,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "7aa940fc-0b7a-4051-b7eb-5f3be9e843d8",
                          "parentUUID": "3914ca7d-c1f4-462b-81ca-a7eed7befb0f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 120,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "7e6cb056-e672-4166-ab07-6e5b3db1a9ab",
                          "parentUUID": "3914ca7d-c1f4-462b-81ca-a7eed7befb0f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 158,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "e4626076-ca4f-4e0d-81b4-dd88edd6272b",
                          "parentUUID": "3914ca7d-c1f4-462b-81ca-a7eed7befb0f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 164,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(f.user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "c8fbc696-4e64-404a-9d51-cf8cb53b171a",
                          "parentUUID": "3914ca7d-c1f4-462b-81ca-a7eed7befb0f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "59fc384a-a489-4c12-8a53-fb5f1c11291f",
                        "3863692c-594c-46ea-9314-193e1de609c3",
                        "7aa940fc-0b7a-4051-b7eb-5f3be9e843d8",
                        "7e6cb056-e672-4166-ab07-6e5b3db1a9ab",
                        "e4626076-ca4f-4e0d-81b4-dd88edd6272b",
                        "c8fbc696-4e64-404a-9d51-cf8cb53b171a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 807,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "3d7257b4-e2cf-42ae-a7d9-c03c508bddee",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 273,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "b27459d2-ec7d-48c3-8d9d-af008bd81f34",
                          "parentUUID": "3d7257b4-e2cf-42ae-a7d9-c03c508bddee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 280,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "dd396489-5f76-43bc-b4e4-0a580a553b1a",
                          "parentUUID": "3d7257b4-e2cf-42ae-a7d9-c03c508bddee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 203,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "bef9011b-7e16-4a88-9fc5-556ad7d6529e",
                          "parentUUID": "3d7257b4-e2cf-42ae-a7d9-c03c508bddee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 189,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "cfd2d288-14f7-4a54-bddd-f28698b88eff",
                          "parentUUID": "3d7257b4-e2cf-42ae-a7d9-c03c508bddee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 378,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "b74fa4d1-2ddb-44cd-83af-52641cd04068",
                          "parentUUID": "3d7257b4-e2cf-42ae-a7d9-c03c508bddee",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 381,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait f.User.depositCollateral(f.user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "a54a3436-4347-4520-a7eb-931c9c501863",
                          "parentUUID": "3d7257b4-e2cf-42ae-a7d9-c03c508bddee",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b27459d2-ec7d-48c3-8d9d-af008bd81f34",
                        "dd396489-5f76-43bc-b4e4-0a580a553b1a",
                        "bef9011b-7e16-4a88-9fc5-556ad7d6529e",
                        "cfd2d288-14f7-4a54-bddd-f28698b88eff",
                        "b74fa4d1-2ddb-44cd-83af-52641cd04068",
                        "a54a3436-4347-4520-a7eb-931c9c501863"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1704,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "ad61d297-d51d-4b42-bb6d-a5ea02594882",
                  "title": "#withdraw - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase \"before each\" hook in \"#withdraw - rebase\"",
                      "timedOut": false,
                      "duration": 195,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Withdrawer.mintKreskoAsset(f.withdrawer.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await _optimizations.default.getAccountDebtAmount(f.withdrawer.address, f.KrAssetCollateral);",
                      "err": {},
                      "uuid": "2178c54f-196e-4ee9-999f-c5e193f84f20",
                      "parentUUID": "ad61d297-d51d-4b42-bb6d-a5ea02594882",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 273,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "a7379b78-7eb3-416a-89b9-fe1d18e58753",
                          "parentUUID": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 277,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "47eb92e9-1caa-4e5e-8c3e-690dccff25b6",
                          "parentUUID": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 275,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "87d33f46-c9fd-460d-b30b-8dea77ff2c34",
                          "parentUUID": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after a negative rebase",
                          "timedOut": false,
                          "duration": 300,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "5e613d16-6078-4571-bf31-4d72b6ccdac7",
                          "parentUUID": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 389,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "4ced5006-3481-46e6-842c-c14d5de65465",
                          "parentUUID": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 383,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(f.withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "f299c7c8-3309-4ca3-b9c8-de7fccb2150a",
                          "parentUUID": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 249,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await f.Collateral.contract.balanceOf(f.withdrawer.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.Collateral.address));\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(f.withdrawer.address)).to.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "b13efab3-8ee5-4d69-b2d7-8c5be30ed19f",
                          "parentUUID": "bd71a4ab-8e6d-414a-8803-321941aad64a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a7379b78-7eb3-416a-89b9-fe1d18e58753",
                        "47eb92e9-1caa-4e5e-8c3e-690dccff25b6",
                        "87d33f46-c9fd-460d-b30b-8dea77ff2c34",
                        "5e613d16-6078-4571-bf31-4d72b6ccdac7",
                        "4ced5006-3481-46e6-842c-c14d5de65465",
                        "f299c7c8-3309-4ca3-b9c8-de7fccb2150a",
                        "b13efab3-8ee5-4d69-b2d7-8c5be30ed19f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2146,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 282,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "5d153f60-a2b3-4872-94ac-ff90004196b8",
                          "parentUUID": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 276,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "3bb9f0a1-d8be-4ea9-8591-e4baf72705e4",
                          "parentUUID": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 278,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
                          "uuid": "cb7da0e8-ad8e-47b1-a750-001688a9a810",
                          "parentUUID": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 275,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
                          "uuid": "76e3be7f-4dc5-47a0-9e36-1444834abbb7",
                          "parentUUID": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 463,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "4d1c5764-ee5e-4811-9447-a7765243d39d",
                          "parentUUID": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 477,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(f.withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "1c48ed32-e049-4134-a7f8-30b0bb2976da",
                          "parentUUID": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 690,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait f.Withdrawer.depositCollateral(f.withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.Collateral.address);\nconst withdrawValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.Withdrawer.withdrawCollateral(f.withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(f.withdrawer.address, f.KrAssetCollateral.address));\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(f.withdrawer.address);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(f.withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "5c95e471-2ec3-44bb-941f-1d76e9be205e",
                          "parentUUID": "d7d51364-c6d7-4132-9953-abd6d5984d97",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5d153f60-a2b3-4872-94ac-ff90004196b8",
                        "3bb9f0a1-d8be-4ea9-8591-e4baf72705e4",
                        "cb7da0e8-ad8e-47b1-a750-001688a9a810",
                        "76e3be7f-4dc5-47a0-9e36-1444834abbb7",
                        "4d1c5764-ee5e-4811-9447-a7765243d39d",
                        "1c48ed32-e049-4134-a7f8-30b0bb2976da",
                        "5c95e471-2ec3-44bb-941f-1d76e9be205e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2741,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "73604239-0c14-4004-9f65-91767663417e",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 80,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.liquidationsFixture)();\nawait f.reset();",
              "err": {},
              "uuid": "5587ac2e-90e0-4285-91b8-5c6067d1d528",
              "parentUUID": "73604239-0c14-4004-9f65-91767663417e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "63e90bc6-4fe4-4dd1-82d5-0b6c7a5ebe47",
              "title": "#isAccountLiquidatable",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify accounts below their liquidation threshold",
                  "fullTitle": "Minter - Liquidations #isAccountLiquidatable should identify accounts below their liquidation threshold",
                  "timedOut": false,
                  "duration": 472,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [cr, minCollateralUSD, initialCanLiquidate] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(f.user1.address),\n    hre.Diamond.getAccountMinCollateralAtRatio(f.user1.address, hre.Diamond.getLiquidationThresholdMinter()),\n    hre.Diamond.getAccountLiquidatable(f.user1.address)\n]);\n(0, _chai.expect)(cr).to.be.equal(1.5e4);\n(0, _chai.expect)(f.initialDeposits.mul(10).gt(minCollateralUSD));\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.equal(true);",
                  "err": {},
                  "uuid": "18987935-bb22-4291-82bc-d2652afc2674",
                  "parentUUID": "63e90bc6-4fe4-4dd1-82d5-0b6c7a5ebe47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18987935-bb22-4291-82bc-d2652afc2674"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 472,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "27f937e5-424e-41fc-87db-2967c9077acd",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 1354,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const MLVBeforeC1 = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address);\nconst MLVBeforeC2 = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral2.address);\n(0, _chai.expect)(MLVBeforeC1.repayValue).to.be.closeTo(MLVBeforeC2.repayValue, USD_DELTA);\nawait hre.Diamond.setAssetCFactor(f.Collateral.address, 0.25e4);\nawait (0, _collaterals.depositMockCollateral)({\n    user: f.user1,\n    amount: f.initialDeposits.div(2),\n    asset: f.Collateral2\n});\nconst expectedCR = 1.125e4;\nconst [crAfter, isLiquidatableAfter, MLVAfterC1, MLVAfterC2] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(f.user1.address),\n    hre.Diamond.getAccountLiquidatable(f.user1.address),\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral2.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(crAfter).to.be.closeTo(expectedCR, 1);\n(0, _chai.expect)(MLVAfterC1.repayValue).to.gt(MLVBeforeC1.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue).to.gt(MLVBeforeC2.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue.gt(MLVAfterC1.repayValue)).to.be.true;",
                  "err": {},
                  "uuid": "47ddca91-38ff-496f-abfe-3f22a8f8d5b5",
                  "parentUUID": "27f937e5-424e-41fc-87db-2967c9077acd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 810,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositMockCollateral)({\n    user: f.user1,\n    amount: (0, _values.toBig)(0.1, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.true;\nconst [maxLiq, maxLiq8Dec] = await Promise.all([\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(maxLiq.repayValue).gt(0);\n(0, _chai.expect)(maxLiq8Dec.repayValue).gt(0);\n(0, _chai.expect)(maxLiq.repayValue).gt(maxLiq8Dec.repayValue);",
                  "err": {},
                  "uuid": "6c966a98-5fca-4a29-9646-fd9396f1f142",
                  "parentUUID": "27f937e5-424e-41fc-87db-2967c9077acd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47ddca91-38ff-496f-abfe-3f22a8f8d5b5",
                "6c966a98-5fca-4a29-9646-fd9396f1f142"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2164,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c9b7d009-031b-472a-b225-bd2dbd5106df",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(7.5);",
                      "err": {},
                      "uuid": "19b7ca59-4fa4-42e2-8ab3-f98a887f0a92",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 543,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await _optimizations.default.getAccountCollateralAmount(f.user1.address, f.Collateral);\nconst userOneDebtBefore = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\nconst liquidatorBalanceBefore = await f.Collateral.balanceOf(f.liquidator.address);\nconst liquidatorBalanceKrBefore = await f.KrAsset.balanceOf(f.liquidator.address);\nconst kreskoBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxRepayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11, 8));\nawait f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: maxRepayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user1.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user1.address, f.Collateral.address)\n});\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst userOneDebtAfterLiquidation = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebtAfterLiquidation.eq(userOneDebtBefore.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst userOneCollateralAfterLiquidation = await _optimizations.default.getAccountCollateralAmount(f.user1.address, f.Collateral);\n(0, _chai.expect)(userOneCollateralAfterLiquidation.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\n(0, _chai.expect)(await f.KrAsset.balanceOf(f.liquidator.address)).eq(liquidatorBalanceKrBefore.sub(maxRepayAmount));\n// Confirm that userTwo has received some collateral from the contract\n(0, _chai.expect)(await f.Collateral.balanceOf(f.liquidator.address)).gt(liquidatorBalanceBefore);\n// Confirm that Kresko contract's collateral balance has decreased.\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).lt(kreskoBalanceBefore);",
                      "err": {},
                      "uuid": "a2e81798-1b62-4361-9d3a-5c17261bfa36",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with a single CDP",
                      "timedOut": false,
                      "duration": 857,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.setAssetCFactor(f.Collateral.address, 0.99e4);\nawait hre.Diamond.setAssetKFactor(f.KrAsset.address, 1.02e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address);\nawait f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: maxLiq.repayAmount.add((0, _values.toBig)(1222, 27)),\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: maxLiq.repayAssetIndex,\n    seizeAssetIndex: maxLiq.seizeAssetIndex\n});\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(f.user1.address)).to.be.eq(await _optimizations.default.getMaxLiquidationRatioMinter());\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "46f486ec-2cbd-49ed-91df-3d2ad45617bb",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with multiple CDPs",
                      "timedOut": false,
                      "duration": 1338,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: f.user1,\n    amount: (0, _values.toBig)(10, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(5.5);\nf.Collateral8Dec.setPrice(6);\nawait hre.Diamond.setAssetCFactor(f.Collateral.address, 0.9754e4);\nawait hre.Diamond.setAssetKFactor(f.KrAsset.address, 1.05e4);\nawait (0, _liquidations.liquidate)(f.user1, f.KrAsset, f.Collateral8Dec);\nconst [crAfter, isLiquidatableAfter] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(f.user1.address),\n    hre.Diamond.getAccountLiquidatable(f.user1.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.false;\n(0, _chai.expect)(crAfter).to.be.eq(await _optimizations.default.getMaxLiquidationRatioMinter());",
                      "err": {},
                      "uuid": "67ea4bbe-c5c1-4faf-80cb-05aaba064f73",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 795,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11));\nconst tx = await f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user1.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user1.address, f.Collateral.address)\n});\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\n(0, _chai.expect)(event.args.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(f.liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);",
                      "err": {},
                      "uuid": "cfc2ab4d-f229-4b32-a7e2-9833d005c72f",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 157,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(10);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(f.Liquidator.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: mintedKreskoAssetIndex,\n    seizeAssetIndex: depositedCollateralAssetIndex\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_HEALTHY_ACCOUNT').withArgs(f.user1.address, 16500000000, 15400000000, await hre.Diamond.getLiquidationThresholdMinter());",
                      "err": {},
                      "uuid": "ab67e782-005b-47d5-84d8-5600a7b46fc5",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 234,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)(f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'LIQUIDATION_VALUE_IS_ZERO').withArgs(f.KrAsset.errorId, f.Collateral.errorId);",
                      "err": {},
                      "uuid": "7eee8dba-d23e-4d8f-882a-731dc2382b0a",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should clamp liquidations if repay value/amount exceeds debt",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should clamp liquidations if repay value/amount exceeds debt",
                      "timedOut": false,
                      "duration": 745,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _values.toBig)(10));\nawait f.KrAsset.setBalance(f.liquidatorTwo, repayAmount, hre.Diamond.address);\n// Liquidation should fail\nconst liquidatorBalanceBefore = await f.KrAsset.balanceOf(f.liquidatorTwo.address);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user1.address, f.KrAsset.address, f.Collateral.address);\n(0, _chai.expect)(maxLiq.repayAmount).to.be.lt(repayAmount);\nconst tx = await f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0\n});\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\nconst liquidatorBalanceAfter = await f.KrAsset.balanceOf(f.liquidatorTwo.address);\n(0, _chai.expect)(event.args.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(f.liquidatorTwo.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.args.repayAmount).to.not.equal(repayAmount);\n(0, _chai.expect)(event.args.repayAmount).to.equal(maxLiq.repayAmount);\n(0, _chai.expect)(event.args.collateralSent).to.be.equal(maxLiq.seizeAmount);\n(0, _chai.expect)(liquidatorBalanceAfter.add(repayAmount)).to.not.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(liquidatorBalanceAfter.add(maxLiq.repayAmount)).to.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(f.user1.address)).to.be.eq(await hre.Diamond.getMaxLiquidationRatioMinter());",
                      "err": {},
                      "uuid": "e6951031-8e3f-4efb-a192-3e4468854591",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 521,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(f.Collateral.config.args.price);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinCollateralAtRatio(f.user1.address, _optimizations.default.getMinCollateralRatioMinter());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinCollateralAtRatio(f.user1.address, _optimizations.default.getLiquidationThresholdMinter());\nf.Collateral.setPrice(9.9);\nconst accountCollateralValue = await hre.Diamond.getAccountTotalCollateralValue(f.user1.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "2a008cdc-f359-4712-af60-11d29a123f85",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without f.liquidator token approval for Kresko Assets",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without f.liquidator token approval for Kresko Assets",
                      "timedOut": false,
                      "duration": 354,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that f.liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(f.liquidatorTwo.address, hre.Diamond.address)).to.equal(0);\nconst repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(f.liquidatorTwo, repayAmount);\nawait f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0\n});\n// Confirm that f.liquidator's token approval is still 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(f.user2.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "68c27bca-d1fe-47c1-9a4f-22e92afbf82e",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change f.liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change f.liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 354,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(f.liquidatorTwo, repayAmount);\nawait f.KrAsset.contract.setVariable('_allowances', {\n    [f.liquidatorTwo.address]: {\n        [hre.Diamond.address]: repayAmount\n    }\n});\nawait (0, _chai.expect)(f.LiquidatorTwo.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0\n})).not.to.be.reverted;\n// Confirm that f.liquidator's token approval is unchanged\n(0, _chai.expect)(await f.KrAsset.contract.allowance(f.liquidatorTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "84d444de-cb7c-42cc-91b2-2a02b0bfd011",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)(f.User.liquidate({\n    account: f.user1.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: repayAmount,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: 0,\n    seizeAssetIndex: 0\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_SELF');",
                      "err": {},
                      "uuid": "e0cca0af-f8a5-4be7-a6c0-fb36c2ba0fa4",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should error on seize underflow",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should error on seize underflow",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "746f2128-4a18-4096-9cff-b1cdcb5a1866",
                      "parentUUID": "a3545776-6d49-4b18-8a70-73e9c2cd95af",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a2e81798-1b62-4361-9d3a-5c17261bfa36",
                    "46f486ec-2cbd-49ed-91df-3d2ad45617bb",
                    "67ea4bbe-c5c1-4faf-80cb-05aaba064f73",
                    "cfc2ab4d-f229-4b32-a7e2-9833d005c72f",
                    "ab67e782-005b-47d5-84d8-5600a7b46fc5",
                    "7eee8dba-d23e-4d8f-882a-731dc2382b0a",
                    "e6951031-8e3f-4efb-a192-3e4468854591",
                    "2a008cdc-f359-4712-af60-11d29a123f85",
                    "68c27bca-d1fe-47c1-9a4f-22e92afbf82e",
                    "84d444de-cb7c-42cc-91b2-2a02b0bfd011",
                    "e0cca0af-f8a5-4be7-a6c0-fb36c2ba0fa4"
                  ],
                  "failures": [],
                  "pending": [
                    "746f2128-4a18-4096-9cff-b1cdcb5a1866"
                  ],
                  "skipped": [],
                  "duration": 5930,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "bef33c80-8244-4bff-ae49-f336d8846bda",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.resetRebasing();",
                      "err": {},
                      "uuid": "b4b9449b-9d9a-4b24-bf64-d4f668fd5023",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should setup correct",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should setup correct",
                      "timedOut": false,
                      "duration": 437,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [mcr, cr, cr2, liquidatable] = await Promise.all([\n    _optimizations.default.getMinCollateralRatioMinter(),\n    hre.Diamond.getAccountCollateralRatio(f.user3.address),\n    hre.Diamond.getAccountCollateralRatio(f.user4.address),\n    hre.Diamond.getAccountLiquidatable(f.user3.address)\n]);\n(0, _chai.expect)(cr).to.closeTo(mcr, 8);\n(0, _chai.expect)(cr2).to.closeTo(mcr, 1);\n(0, _chai.expect)(liquidatable).to.be.false;",
                      "err": {},
                      "uuid": "4e704099-ab50-42bd-9871-463637af31ed",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 186,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(f.Liquidator.liquidate({\n    account: f.user4.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: 100,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user4.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user4.address, f.Collateral.address)\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_HEALTHY_ACCOUNT').withArgs(f.user4.address, 1000000000000, 933333332400, await hre.Diamond.getLiquidationThresholdMinter());",
                      "err": {},
                      "uuid": "2177e082-e329-4966-b720-c0bf753050c0",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 194,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(f.Liquidator.liquidate({\n    account: f.user4.address,\n    repayAssetAddr: f.KrAsset.address,\n    repayAmount: 100,\n    seizeAssetAddr: f.Collateral.address,\n    repayAssetIndex: _optimizations.default.getAccountMintIndex(f.user4.address, f.KrAsset.address),\n    seizeAssetIndex: _optimizations.default.getAccountDepositIndex(f.user4.address, f.Collateral.address)\n})).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'CANNOT_LIQUIDATE_HEALTHY_ACCOUNT').withArgs(f.user4.address, 1000000000000, 933333332400, await hre.Diamond.getLiquidationThresholdMinter());",
                      "err": {},
                      "uuid": "9922a3aa-b93c-4d58-ab20-70c2447ba477",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 1494,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.false;\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.true;\nawait (0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral, true);\nawait (0, _chai.expect)((0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "1a225667-0dee-4264-bcaf-c244bb148d40",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 1020,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.false;\nf.KrAsset.setPrice(rebasePrice + 1);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user4.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "327140d6-8477-402f-bbb9-76fcaf940234",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 778,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.setAssetCFactor(f.KrAssetCollateral.address, 0.99e4);\nawait hre.Diamond.setAssetKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nawait f.KrAssetCollateral.setBalance(f.liquidator, maxLiq.repayAmount, hre.Diamond.address);\nawait f.Liquidator.liquidate({\n    account: f.user3.address,\n    repayAssetAddr: f.KrAssetCollateral.address,\n    repayAmount: maxLiq.repayAmount.sub(1e9),\n    seizeAssetAddr: f.KrAssetCollateral.address,\n    repayAssetIndex: maxLiq.repayAssetIndex,\n    seizeAssetIndex: maxLiq.seizeAssetIndex\n});\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(f.user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "dbe89918-8aee-4ac1-98bc-e03fea58e1af",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate to 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate to 0",
                      "timedOut": false,
                      "duration": 771,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.setAssetCFactor(f.KrAssetCollateral.address, 1e4);\nawait hre.Diamond.setAssetKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(f.user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nconst liquidationAmount = maxLiq.repayAmount.add((0, _values.toBig)(20, 27));\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, liquidationAmount, hre.Diamond.address);\nawait f.Liquidator.liquidate({\n    account: f.user3.address,\n    repayAssetAddr: f.KrAssetCollateral.address,\n    repayAmount: liquidationAmount,\n    seizeAssetAddr: f.KrAssetCollateral.address,\n    repayAssetIndex: maxLiq.repayAssetIndex,\n    seizeAssetIndex: maxLiq.seizeAssetIndex\n});\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(f.user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(0);",
                      "err": {},
                      "uuid": "0c008453-2f8b-4178-894e-6da5c6764b54",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 2914,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user4.address)){\n    const values = await (0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user5.address)){\n    const values = await (0, _liquidations.liquidate)(f.user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid * denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "1656a365-5169-4014-bab5-6effc34f6345",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 2485,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user4.address)){\n    const values = await (0, _liquidations.liquidate)(f.user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(f.user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(f.user5.address)){\n    const values = await (0, _liquidations.liquidate)(f.user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(f.user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(f.user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid / denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "d6ed2dea-55a2-4672-aee0-b9b96a3d6d35",
                      "parentUUID": "bef33c80-8244-4bff-ae49-f336d8846bda",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4e704099-ab50-42bd-9871-463637af31ed",
                    "2177e082-e329-4966-b720-c0bf753050c0",
                    "9922a3aa-b93c-4d58-ab20-70c2447ba477",
                    "1a225667-0dee-4264-bcaf-c244bb148d40",
                    "327140d6-8477-402f-bbb9-76fcaf940234",
                    "dbe89918-8aee-4ac1-98bc-e03fea58e1af",
                    "0c008453-2f8b-4178-894e-6da5c6764b54",
                    "1656a365-5169-4014-bab5-6effc34f6345",
                    "d6ed2dea-55a2-4672-aee0-b9b96a3d6d35"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 10279,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c9b1fb61-0dca-43d1-ac3d-12bf4b09ce40",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.mintRepayFixture)();\nawait f.reset();",
              "err": {},
              "uuid": "9b062618-8e42-46d6-a785-9489c2c9a4b3",
              "parentUUID": "c9b1fb61-0dca-43d1-ac3d-12bf4b09ce40",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5a067cb2-6ddc-4696-b2c1-f0bda8128574",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 273,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(f.initialMintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _values.toBig)(10);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "af6fc220-d637-4b72-a462-96ad07a82f2c",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 471,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(50);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(50);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "1d424274-e225-42fc-859a-86fbf20cb9c7",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 438,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(10);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(20);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset2.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset2);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset2.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await f.KrAsset2.contract.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "e45b8354-0173-4d7f-ba6f-b18780474f17",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 302,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _values.toBig)(1) // 1 * $10 = $10\n;\nconst mintAmountUSDValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst currMinimumDebtValue = await hre.Diamond.getMinDebtValueMinter();\n(0, _chai.expect)(mintAmountUSDValue).to.equal(currMinimumDebtValue);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "791cabf8-182b-4618-bbe0-66d241379542",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 247,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.Role.MANAGER, f.user2.address);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _values.toBig)(1);\nawait f.User2.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userTwoBalanceAfter = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userTwoBalanceAfter).to.equal(mintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);",
                      "err": {},
                      "uuid": "361c07de-2790-4d6f-8b2c-7fe4b9492b46",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 166,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, f.initialMintAmount);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetMinted');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount);",
                      "err": {},
                      "uuid": "5d51232f-e4da-40a7-aaf8-cff643e25a01",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 45,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.User1.mintKreskoAsset(f.user2.address, f.KrAsset.address, (0, _values.toBig)(1))).to.be.revertedWith(`AccessControl: account ${f.user1.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "c093e111-f02b-4ddf-b289-0ac8f148266c",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 113,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currMinimumDebtValue = await _optimizations.default.getMinDebtValue();\nconst mintAmount = currMinimumDebtValue.wadDiv(_mocks.TEN_USD.ebn(8)).sub(1e9);\nawait (0, _chai.expect)(f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'MINT_VALUE_LESS_THAN_MIN_DEBT_VALUE').withArgs(f.KrAsset.errorId, 10e8 - 1, currMinimumDebtValue);",
                      "err": {},
                      "uuid": "53160804-dc15-40a1-8cc2-ac1fb733ddf5",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)(f.User1.mintKreskoAsset(f.user1.address, '0x0000000000000000000000000000000000000002', (0, _values.toBig)(1))).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ASSET_NOT_MINTABLE_FROM_MINTER').withArgs([\n    '',\n    '0x0000000000000000000000000000000000000002'\n]);",
                      "err": {},
                      "uuid": "7d38c59f-9a45-484b-a331-a0069e8bbe8b",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 369,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmountDeposited = await _optimizations.default.getAccountCollateralAmount(f.user1.address, f.Collateral.address);\nconst MCR = await hre.Diamond.getMinCollateralRatioMinter();\nconst mcrAmount = collateralAmountDeposited.percentMul(MCR);\nconst mintAmount = mcrAmount.add(1);\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst userState = await hre.Diamond.getAccountState(f.user1.address);\nawait (0, _chai.expect)(f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ACCOUNT_COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs(f.user1.address, userState.totalCollateralValue, mintValue.percentMul(MCR), MCR);",
                      "err": {},
                      "uuid": "45f1378e-692c-40d5-860c-f479344bb17e",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 236,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait f.Collateral.setBalance(f.user1, (0, _values.toBig)(100000000));\nawait (0, _chai.expect)(f.User1.depositCollateral(f.user1.address, f.Collateral.address, (0, _values.toBig)(10000))).not.to.be.reverted;\nconst assetSupplyLimit = (0, _values.toBig)(1);\nconst mintAmount = (0, _values.toBig)(2);\nawait f.KrAsset.update({\n    maxDebtMinter: assetSupplyLimit\n});\nawait (0, _chai.expect)(f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'EXCEEDS_ASSET_MINTING_LIMIT').withArgs(f.KrAsset.errorId, (await f.KrAsset.contract.totalSupply()).add(mintAmount), assetSupplyLimit);\nawait f.KrAsset.update({\n    maxDebtMinter: assetSupplyLimit\n});",
                      "err": {},
                      "uuid": "e9657821-d443-40cd-8f8e-ebe3788202ae",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "2ddcedad-c36b-44d1-806e-60a590044650",
                      "parentUUID": "65d10da5-b62a-4101-a8f0-0b3a1f6efd59",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "af6fc220-d637-4b72-a462-96ad07a82f2c",
                    "1d424274-e225-42fc-859a-86fbf20cb9c7",
                    "e45b8354-0173-4d7f-ba6f-b18780474f17",
                    "791cabf8-182b-4618-bbe0-66d241379542",
                    "361c07de-2790-4d6f-8b2c-7fe4b9492b46",
                    "5d51232f-e4da-40a7-aaf8-cff643e25a01",
                    "c093e111-f02b-4ddf-b289-0ac8f148266c",
                    "53160804-dc15-40a1-8cc2-ac1fb733ddf5",
                    "7d38c59f-9a45-484b-a331-a0069e8bbe8b",
                    "45f1378e-692c-40d5-860c-f479344bb17e",
                    "e9657821-d443-40cd-8f8e-ebe3788202ae"
                  ],
                  "failures": [],
                  "pending": [
                    "2ddcedad-c36b-44d1-806e-60a590044650"
                  ],
                  "skipped": [],
                  "duration": 2692,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "fa40d2b9-22f2-43f4-b7e6-eb5053ed6c69",
                  "title": "#mint - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "3be632fe-5791-40cf-949b-cb14ccfac31c",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 204,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "adab4409-da04-4f38-bf31-cdea745372e6",
                          "parentUUID": "3be632fe-5791-40cf-949b-cb14ccfac31c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 206,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "9b21d093-245d-4cc9-a999-8782fb72d6b0",
                          "parentUUID": "3be632fe-5791-40cf-949b-cb14ccfac31c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 200,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "c22764c1-2b30-481f-be5b-daecab42a98a",
                          "parentUUID": "3be632fe-5791-40cf-949b-cb14ccfac31c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 207,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "bdaa6564-6848-4e6b-ac2c-376ff5d6ba26",
                          "parentUUID": "3be632fe-5791-40cf-949b-cb14ccfac31c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "adab4409-da04-4f38-bf31-cdea745372e6",
                        "9b21d093-245d-4cc9-a999-8782fb72d6b0",
                        "c22764c1-2b30-481f-be5b-daecab42a98a",
                        "bdaa6564-6848-4e6b-ac2c-376ff5d6ba26"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 817,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "04ac7fe3-1686-4009-955e-abb0b4703732",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 314,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "c2150bcc-9609-46b0-90f6-5ed5c540c22a",
                          "parentUUID": "04ac7fe3-1686-4009-955e-abb0b4703732",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 335,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "805878e7-7b49-4c20-b95a-65963c219002",
                          "parentUUID": "04ac7fe3-1686-4009-955e-abb0b4703732",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 310,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice, 8) / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "4eba6d7f-5ca5-426f-aad8-ce6d2bcda6ca",
                          "parentUUID": "04ac7fe3-1686-4009-955e-abb0b4703732",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 313,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "3bc8ae81-16af-4e4b-bfc5-a5fa89df5f0d",
                          "parentUUID": "04ac7fe3-1686-4009-955e-abb0b4703732",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c2150bcc-9609-46b0-90f6-5ed5c540c22a",
                        "805878e7-7b49-4c20-b95a-65963c219002",
                        "4eba6d7f-5ca5-426f-aad8-ce6d2bcda6ca",
                        "3bc8ae81-16af-4e4b-bfc5-a5fa89df5f0d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1272,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "4eca3b0e-8fdf-4595-b45f-d228ec79097b",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 717,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(f.user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(valueBeforeRebase);\n// Mint after rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await f.KrAsset.contract.balanceOf(f.user1.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, f.KrAsset)).to.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "3fb2e304-8a76-48fb-89b1-3081add593e9",
                          "parentUUID": "4eca3b0e-8fdf-4595-b45f-d228ec79097b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 711,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(f.user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(f.user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, f.KrAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, f.KrAsset));\n// Mint after rebase\nawait f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(f.user1.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "881332e4-51b4-410e-a014-9d07c16921f9",
                          "parentUUID": "4eca3b0e-8fdf-4595-b45f-d228ec79097b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "3fb2e304-8a76-48fb-89b1-3081add593e9",
                        "881332e4-51b4-410e-a014-9d07c16921f9"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1428,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 159,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, f.initialMintAmount);",
                      "err": {},
                      "uuid": "b9ad36de-d633-4ea1-bfa7-c6d694a16cd3",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 202,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(f.user1.address);\n(0, _chai.expect)(userBalance).to.equal(f.initialMintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userDebt).to.closeTo(f.initialMintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "c37cb68f-40ed-4753-aa17-61e396e95493",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "2f0a31e0-b6da-41af-954e-a72c1fadc42f",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 245,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.Role.MANAGER, f.user2.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nconst userOneBalanceBefore = await f.KrAsset.balanceOf(f.user1.address);\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait f.User2.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// await expect(f.User2.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be\n//   .reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await f.KrAsset.balanceOf(f.user1.address);\n(0, _chai.expect)(userOneBalance).to.equal(userOneBalanceBefore, 'userOneBalance');\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await f.KrAsset.balanceOf(f.user2.address);\n(0, _chai.expect)(userThreeBalance).to.equal(f.initialMintAmount.sub(burnAmount), 'userThreeBalance');\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount), 'totalSupplyAfter');\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user2.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n], 'mintedKreskoAssetsAfter');\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebt).to.equal(f.initialMintAmount.sub(burnAmount));",
                      "err": {},
                      "uuid": "a7eb4469-84ca-4940-bab9-a3d5a19ebe20",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "20a44efb-3796-4e18-a50b-a2635bf59cee",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 274,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await f.KrAsset.balanceOf(f.user1.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\nconst minDebtValue = (0, _values.fromBig)(await _optimizations.default.getMinDebtValue(), 8);\nconst oraclePrice = f.KrAsset.config.args.price;\nconst burnAmount = (0, _values.toBig)((0, _values.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(f.user1.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "8e455dae-a956-43bc-ad59-7d9788ca1e55",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 165,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, f.initialMintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetBurned');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount.div(5));",
                      "err": {},
                      "uuid": "cbbcd207-cb17-47a4-8c7a-26cb4ad4a257",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 282,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = f.initialMintAmount.add(secondMintAmount);\nawait (0, _chai.expect)(f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)(f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "185fb2b1-8d46-4d23-beb9-3feb970cab8a",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, 0, kreskoAssetIndex)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ZERO_BURN');",
                      "err": {},
                      "uuid": "8aca4fbd-0e25-416a-8f87-bdef34fe7204",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 45,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(f.User2.burnKreskoAsset(f.user1.address, f.KrAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${f.user2.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "36fa5f82-64fe-4ca1-88d8-06f4a7a1e2cf",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _optimizations.default.getAccountDebtAmount(f.user1.address, f.KrAsset);\nconst burnAmount = debt.add((0, _values.toBig)(1));\nawait (0, _chai.expect)(f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "62abecac-37b6-4696-ab08-8fdf1391119d",
                      "parentUUID": "2fa50053-e5a8-47ff-9eed-e0e4ceee1064",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "69e21e83-1f93-417a-ade9-799462acb90d",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "timedOut": false,
                          "duration": 635,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01e4;\nawait f.KrAsset.update({\n    openFee,\n    maxDebtMinter: _values.MaxUint128\n});\nconst mintAmount = (0, _values.toBig)(1);\nconst mintValue = mintAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst expectedFeeValue = mintValue.percentMul(openFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(_mocks.TEN_USD.ebn(8));\n// Get the balances prior to the fee being charged.\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Mint Kresko asset\nconst tx = await f.User1.mintKreskoAsset(f.user1.address, f.KrAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.OPEN);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst [, values] = await hre.Diamond.previewFee(f.user1.address, f.KrAsset.address, mintAmount, _types.MinterFee.OPEN);\n(0, _chai.expect)(values[0]).eq(expectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "a2ffe31e-9dbf-4847-86a5-d248c2923c48",
                          "parentUUID": "69e21e83-1f93-417a-ade9-799462acb90d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a2ffe31e-9dbf-4847-86a5-d248c2923c48"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 635,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "f4986804-607f-471a-8dea-479cbb3f58e8",
                      "title": "Protocol Close Fee",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "timedOut": false,
                          "duration": 203,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _values.toBig)(1);\nconst burnValue = burnAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst closeFee = f.KrAsset.config.args.krAssetConfig.closeFee // use toBig() to emulate closeFee's 18 decimals on contract\n;\nconst expectedFeeValue = burnValue.percentMul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(f.Collateral.config.args.price.ebn(8));\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.account).to.equal(f.user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.CLOSE);",
                          "err": {},
                          "uuid": "7bf0fe27-1fa7-4292-8343-a1e8133f4e59",
                          "parentUUID": "f4986804-607f-471a-8dea-479cbb3f58e8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 560,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.CLOSE);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.mul(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: f.user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "54fb67ad-cd84-4a5c-8a33-2e1d1610ebfe",
                          "parentUUID": "f4986804-607f-471a-8dea-479cbb3f58e8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 572,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_types.MinterFee.CLOSE);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _values.fromBig)(await f.KrAsset.getPrice(), 8) * denominator;\nf.KrAsset.setPrice(priceAfter);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.div(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: f.user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: f.user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "fff52718-e44c-4abb-a9b4-1134c7327332",
                          "parentUUID": "f4986804-607f-471a-8dea-479cbb3f58e8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "7bf0fe27-1fa7-4292-8343-a1e8133f4e59",
                        "54fb67ad-cd84-4a5c-8a33-2e1d1610ebfe",
                        "fff52718-e44c-4abb-a9b4-1134c7327332"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1335,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [
                    "c37cb68f-40ed-4753-aa17-61e396e95493",
                    "a7eb4469-84ca-4940-bab9-a3d5a19ebe20",
                    "8e455dae-a956-43bc-ad59-7d9788ca1e55",
                    "cbbcd207-cb17-47a4-8c7a-26cb4ad4a257",
                    "185fb2b1-8d46-4d23-beb9-3feb970cab8a",
                    "8aca4fbd-0e25-416a-8f87-bdef34fe7204",
                    "36fa5f82-64fe-4ca1-88d8-06f4a7a1e2cf",
                    "62abecac-37b6-4696-ab08-8fdf1391119d"
                  ],
                  "failures": [],
                  "pending": [
                    "2f0a31e0-b6da-41af-954e-a72c1fadc42f",
                    "20a44efb-3796-4e18-a50b-a2635bf59cee"
                  ],
                  "skipped": [],
                  "duration": 1322,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "a7e53149-5191-4d5d-bed3-92b8e8ce686c",
                  "title": "#burn - rebase",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase \"before each\" hook in \"#burn - rebase\"",
                      "timedOut": false,
                      "duration": 173,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: f.KrAsset,\n    amount: mintAmount,\n    user: f.user1\n});",
                      "err": {},
                      "uuid": "066882d6-6b5d-4d54-b23b-80ff653c544c",
                      "parentUUID": "a7e53149-5191-4d5d-bed3-92b8e8ce686c",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "3e37737c-75b5-4d0f-8d06-1e69f16ac786",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 205,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n(0, _chai.expect)(debtAfter).to.equal(0);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(0);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(f.initialMintAmount) // WEI\n;",
                          "err": {},
                          "uuid": "adbb55db-0237-474b-befa-f3181a36f2f9",
                          "parentUUID": "3e37737c-75b5-4d0f-8d06-1e69f16ac786",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 246,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "e48ac77e-a2c3-4f9d-9700-50b6ed5987da",
                          "parentUUID": "3e37737c-75b5-4d0f-8d06-1e69f16ac786",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 204,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _values.fromBig)(await f.KrAsset.contract.balanceOf(f.user1.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _values.toBig)(expectedBalanceAfterBurn * denominator).add(f.initialMintAmount));",
                          "err": {},
                          "uuid": "7fbf881b-ef2c-4d3e-bfe3-de5b9981b3d7",
                          "parentUUID": "3e37737c-75b5-4d0f-8d06-1e69f16ac786",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 260,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(f.user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "d4d18f1d-6226-4c84-a433-9cd1affe2c2b",
                          "parentUUID": "3e37737c-75b5-4d0f-8d06-1e69f16ac786",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "adbb55db-0237-474b-befa-f3181a36f2f9",
                        "e48ac77e-a2c3-4f9d-9700-50b6ed5987da",
                        "7fbf881b-ef2c-4d3e-bfe3-de5b9981b3d7",
                        "d4d18f1d-6226-4c84-a433-9cd1affe2c2b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 915,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "e9b0e7ad-d06a-4dd1-b0cb-a4eb5633fc7c",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 214,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "7a6d6a25-da98-41cc-b2b0-8d42ca7ff6d7",
                          "parentUUID": "e9b0e7ad-d06a-4dd1-b0cb-a4eb5633fc7c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 390,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(f.KrAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _optimizations.default.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "76491056-efef-4dd2-8333-1d92acd43eb3",
                          "parentUUID": "e9b0e7ad-d06a-4dd1-b0cb-a4eb5633fc7c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 196,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "0d51af7d-c329-4264-aff8-f383bda991d6",
                          "parentUUID": "e9b0e7ad-d06a-4dd1-b0cb-a4eb5633fc7c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 418,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nawait f.User1.burnKreskoAsset(f.user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(f.user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hre.Diamond.getAccountMintedAssets(f.user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "de6d3df2-f38f-4425-ade5-421510bcbd99",
                          "parentUUID": "e9b0e7ad-d06a-4dd1-b0cb-a4eb5633fc7c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "7a6d6a25-da98-41cc-b2b0-8d42ca7ff6d7",
                        "76491056-efef-4dd2-8333-1d92acd43eb3",
                        "0d51af7d-c329-4264-aff8-f383bda991d6",
                        "de6d3df2-f38f-4425-ade5-421510bcbd99"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1218,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fb6e8fdb-2d93-49d5-ba24-977bb4d58e4d",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[, , [user]] = f.users;",
              "err": {},
              "uuid": "3be4bbf8-d94f-4dbc-a720-2e194fda3d5d",
              "parentUUID": "fb6e8fdb-2d93-49d5-ba24-977bb4d58e4d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "af0914d1-e13b-4884-aae7-e95d825b65b6",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3154ac7b-1297-4ae6-891b-efdc9fc5e1fb",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw withdraw correct amount",
                      "timedOut": false,
                      "duration": 131,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nawait (0, _chai.expect)(f.Receiver.testWithdrawalAmount(f.Collateral.address, withdrawalAmount)).to.not.be.revertedWith('wrong amount received');\n(0, _chai.expect)(await f.Collateral.balanceOf(f.Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "52e11ce6-dac0-48a9-9f4a-9e5a87591c10",
                      "parentUUID": "3154ac7b-1297-4ae6-891b-efdc9fc5e1fb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 274,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst balKreskoBefore = await f.Collateral.contract.balanceOf(hre.Diamond.address);\nawait Receiver.test(f.Collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(f.Collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(user.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await f.Collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "ebc3e742-63d7-46e7-9759-c73ef33097e9",
                      "parentUUID": "3154ac7b-1297-4ae6-891b-efdc9fc5e1fb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 646,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(f.Collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user.address)).to.be.eq(1.5e4);\nawait (0, _chai.expect)(Receiver.test(f.Collateral.address, 10e15.toString())).to.be.reverted;",
                      "err": {},
                      "uuid": "dfd4d68c-9785-47e1-be7e-c9a381ab9d41",
                      "parentUUID": "3154ac7b-1297-4ae6-891b-efdc9fc5e1fb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 235,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nawait Receiver.testRedeposit(f.Collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await f.Collateral.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await f.Collateral.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "da455f03-7a7c-4523-8315-6ba78cab70cd",
                      "parentUUID": "3154ac7b-1297-4ae6-891b-efdc9fc5e1fb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 228,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nf.Collateral2.setPrice(10);\nawait f.Collateral2.setBalance(user, f.depositAmount);\nawait f.Collateral2.contract.setVariable('_allowances', {\n    [user.address]: {\n        [hre.Diamond.address]: f.depositAmount,\n        [Receiver.address]: f.depositAmount\n    }\n});\nawait Receiver.testDepositAlternate(f.Collateral.address, deposits, f.Collateral2.address);\nconst secondCollateralDeposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral2.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "5e16ffa3-781a-41cb-a181-6439f4e723ed",
                      "parentUUID": "3154ac7b-1297-4ae6-891b-efdc9fc5e1fb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "52e11ce6-dac0-48a9-9f4a-9e5a87591c10",
                    "ebc3e742-63d7-46e7-9759-c73ef33097e9",
                    "dfd4d68c-9785-47e1-be7e-c9a381ab9d41",
                    "da455f03-7a7c-4523-8315-6ba78cab70cd",
                    "5e16ffa3-781a-41cb-a181-6439f4e723ed"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1514,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "bbfa40d7-32d2-46be-88ad-232fb8b1f78f",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 52,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 0)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 0)).to.be.revertedWith(Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "34c86940-9e20-42c4-a6f9-72b859367fb5",
                      "parentUUID": "bbfa40d7-32d2-46be-88ad-232fb8b1f78f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 103,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.revokeRole(_roles.Role.MANAGER, f.Receiver.address);\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 10000)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 10000)).to.be.revertedWith(\n            //     `AccessControl: account ${f.Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`,\n            // );",
                      "err": {},
                      "uuid": "cf08841a-06a6-43ac-9192-83668cb81997",
                      "parentUUID": "bbfa40d7-32d2-46be-88ad-232fb8b1f78f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 320,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "e98dfded-fdb8-4d86-82be-ffc348fa3863",
                      "parentUUID": "bbfa40d7-32d2-46be-88ad-232fb8b1f78f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 322,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "9c51ce50-871b-43ed-9635-d78b3cd4e660",
                      "parentUUID": "bbfa40d7-32d2-46be-88ad-232fb8b1f78f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "34c86940-9e20-42c4-a6f9-72b859367fb5",
                    "cf08841a-06a6-43ac-9192-83668cb81997",
                    "e98dfded-fdb8-4d86-82be-ffc348fa3863",
                    "9c51ce50-871b-43ed-9635-d78b3cd4e660"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 797,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "460953e5-d9e1-4e98-8bb8-207b402d3181",
          "title": "Gating",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/06-gating.ts",
          "file": "/src/test/minter/06-gating.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Gating\"",
              "fullTitle": "Gating \"before each\" hook in \"Gating\"",
              "timedOut": false,
              "duration": 111,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// Set Gating phase to 3\nawait hre.Diamond.setGatingPhase(2);\n// setup collateral for userOne and userTwo\nthis.initialBalance = (0, _values.toBig)(100000);\nawait f.Collateral.setBalance(hre.users.userOne, this.initialBalance, hre.Diamond.address);\nawait f.Collateral.setBalance(hre.users.userTwo, this.initialBalance, hre.Diamond.address);\nthis.depositArgsOne = {\n    user: hre.users.userOne,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\nthis.depositArgsTwo = {\n    user: hre.users.userTwo,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\n[this.nft] = await hre.deploy('MockERC1155', {\n    args: [],\n    from: hre.users.deployer.address\n});\nawait hre.Diamond.setKreskianCollection(this.nft.address);",
              "err": {},
              "uuid": "1c563442-580a-450e-b8dd-77d35545fe4c",
              "parentUUID": "460953e5-d9e1-4e98-8bb8-207b402d3181",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not allow to deposit collateral if the user doesn't have required nft's",
              "fullTitle": "Gating should not allow to deposit collateral if the user doesn't have required nft's",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "89312fae-8103-4a95-9fa4-018364f0b9f8",
              "parentUUID": "460953e5-d9e1-4e98-8bb8-207b402d3181",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow to deposit collateral if the user has the required nft's",
              "fullTitle": "Gating should allow to deposit collateral if the user has the required nft's",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.nft.safeTransferFrom(hre.users.deployer.address, this.depositArgsOne.user.address, 0, 1, '0x00');\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "e76f822d-a437-44bf-a7b5-a09f90d5b63e",
              "parentUUID": "460953e5-d9e1-4e98-8bb8-207b402d3181",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After all the phases anyone should be able to deposit collateral",
              "fullTitle": "Gating After all the phases anyone should be able to deposit collateral",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await hre.Diamond.setGatingPhase(3);\n// Anyone should be able to deposit collateral\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsTwo.user).depositCollateral(this.depositArgsTwo.user.address, f.Collateral.address, this.depositArgsTwo.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "2bcbf553-c810-40c0-88e0-48a1e329de62",
              "parentUUID": "460953e5-d9e1-4e98-8bb8-207b402d3181",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89312fae-8103-4a95-9fa4-018364f0b9f8",
            "e76f822d-a437-44bf-a7b5-a09f90d5b63e",
            "2bcbf553-c810-40c0-88e0-48a1e329de62"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "14fe51b6-7fb3-4c4d-8ac7-35362f084fec",
          "title": "Oracles",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/oracle/00-oracles.ts",
          "file": "/src/test/oracle/00-oracles.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Oracles\"",
              "fullTitle": "Oracles \"before each\" hook in \"Oracles\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[, [user]] = f.users;\nthis.deployer = await hre.ethers.getNamedSigner('deployer');\nthis.userOne = await hre.ethers.getNamedSigner('userOne');\nf.Collateral.setPrice(10);",
              "err": {},
              "uuid": "c70e230d-936b-4d35-b7b6-1c3258501442",
              "parentUUID": "14fe51b6-7fb3-4c4d-8ac7-35362f084fec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3f191b81-06b3-4dba-9436-5a1bfe188af7",
              "title": "Redstone",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/oracle/00-oracles.ts",
              "file": "/src/test/oracle/00-oracles.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct setup",
                  "fullTitle": "Oracles Redstone should have correct setup",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check initial conditions\n(0, _chai.expect)(await hre.Diamond.getAccountTotalCollateralValue(user.address)).to.equal((0, _values.toBig)(10000, 8), 'collateral value should be $10');",
                  "err": {},
                  "uuid": "7db7cca0-45a8-4fd3-998d-fa4e645c7f61",
                  "parentUUID": "3f191b81-06b3-4dba-9436-5a1bfe188af7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Oracles Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nf.Collateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.ticker,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $20');",
                  "err": {},
                  "uuid": "c6a08a78-462e-4005-a5e9-efd15d6b0d9e",
                  "parentUUID": "3f191b81-06b3-4dba-9436-5a1bfe188af7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get primary price when price +- maxPriceDeviationPct of reference price ",
                  "fullTitle": "Oracles Redstone should get primary price when price +- maxPriceDeviationPct of reference price ",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.Collateral.setOracleOrder([\n    _types.OracleType.Redstone,\n    _types.OracleType.Chainlink\n]);\n/// set chainlink price to 12\nf.Collateral.setPrice(12);\n/// set redstone price to 11\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.ticker,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $11');",
                  "err": {},
                  "uuid": "327c1f12-7285-474e-9049-360e0b8d4ae1",
                  "parentUUID": "3f191b81-06b3-4dba-9436-5a1bfe188af7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Oracles Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nf.Collateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.ticker,\n        value: redstoneCollateralPrice\n    }\n]);\n// should revert if price deviates more than maxPriceDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.be.reverted;\nf.Collateral.setPrice(10);",
                  "err": {},
                  "uuid": "b7fa3b46-b2a6-49ce-8860-c49d1cf10b74",
                  "parentUUID": "3f191b81-06b3-4dba-9436-5a1bfe188af7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7db7cca0-45a8-4fd3-998d-fa4e645c7f61",
                "c6a08a78-462e-4005-a5e9-efd15d6b0d9e",
                "327c1f12-7285-474e-9049-360e0b8d4ae1",
                "b7fa3b46-b2a6-49ce-8860-c49d1cf10b74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 300,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a27fa316-b62e-42d9-892a-f114a2ffcbe4",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devOne, userOne, extOne, extTwo } = await hre.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.userOne = userOne;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
              "uuid": "7ac5c3ed-37fa-44e4-a558-43d4d3fd1af2",
              "parentUUID": "a27fa316-b62e-42d9-892a-f114a2ffcbe4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4d309548-5ae2-4d99-8e48-778a098bc0ed",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'setSafetyStateSet', [\n    true\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst safetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "428c2cb0-b311-4f66-a2e2-622b913a1216",
                  "parentUUID": "4d309548-5ae2-4d99-8e48-778a098bc0ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "428c2cb0-b311-4f66-a2e2-622b913a1216"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "39aab3cd-47d5-4ee7-b75f-76c3702699fb",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "16010f3c-9fc6-4c43-90b7-f799de5a0138",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "dc2b76db-2b1e-4dd3-b932-22bbb6e6e00b",
                      "parentUUID": "16010f3c-9fc6-4c43-90b7-f799de5a0138",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "cf8a760c-0007-4e8b-bd8f-a9ba57ccbdc2",
                      "parentUUID": "16010f3c-9fc6-4c43-90b7-f799de5a0138",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "5fd59065-c569-4ca9-8660-a282da95806a",
                      "parentUUID": "16010f3c-9fc6-4c43-90b7-f799de5a0138",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "7627bccb-07da-4540-9681-88e786038ae6",
                      "parentUUID": "16010f3c-9fc6-4c43-90b7-f799de5a0138",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dc2b76db-2b1e-4dd3-b932-22bbb6e6e00b",
                    "cf8a760c-0007-4e8b-bd8f-a9ba57ccbdc2",
                    "5fd59065-c569-4ca9-8660-a282da95806a",
                    "7627bccb-07da-4540-9681-88e786038ae6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 235,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "a72159f2-c03e-463d-acc1-b28ed4409474",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "71e944b7-b8e1-4136-a951-3bac6d47f7a9",
                      "parentUUID": "a72159f2-c03e-463d-acc1-b28ed4409474",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.KrAsset.address\n    ],\n    _types.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.REPAY.toString(), f.KrAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "8234ab94-4798-4a3d-9392-b1bdde533769",
                      "parentUUID": "a72159f2-c03e-463d-acc1-b28ed4409474",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hre.ethers.utils.computeAddress('0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d');\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        randomAddr\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "84c164fe-b5f9-42bd-a8b5-348ca3ca8240",
                      "parentUUID": "a72159f2-c03e-463d-acc1-b28ed4409474",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "71e944b7-b8e1-4136-a951-3bac6d47f7a9",
                    "8234ab94-4798-4a3d-9392-b1bdde533769",
                    "84c164fe-b5f9-42bd-a8b5-348ca3ca8240"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 181,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "c0a5fef6-edaa-489f-8da7-088990909884",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _types.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "7e6db576-68a7-41ad-8198-9ae98abe4479",
                      "parentUUID": "c0a5fef6-edaa-489f-8da7-088990909884",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "6516d3f2-269c-4a49-bba1-3dea358e20be",
                      "parentUUID": "c0a5fef6-edaa-489f-8da7-088990909884",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7e6db576-68a7-41ad-8198-9ae98abe4479"
                  ],
                  "failures": [],
                  "pending": [
                    "6516d3f2-269c-4a49-bba1-3dea358e20be"
                  ],
                  "skipped": [],
                  "duration": 65,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "97e7d115-7af4-4d5f-a5ab-0fd7dc5a5bd2",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 123,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "78e879c6-7222-43fa-bcda-e187b001b4ec",
                      "parentUUID": "97e7d115-7af4-4d5f-a5ab-0fd7dc5a5bd2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "3923cea0-a88c-4f84-8637-9dbd882b3603",
                      "parentUUID": "97e7d115-7af4-4d5f-a5ab-0fd7dc5a5bd2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "eae5d945-3052-427f-b1aa-7f9a27b2c5e6",
                      "parentUUID": "97e7d115-7af4-4d5f-a5ab-0fd7dc5a5bd2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "526df5ac-4f8e-4208-992e-03c08209442f",
                      "parentUUID": "97e7d115-7af4-4d5f-a5ab-0fd7dc5a5bd2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_types.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_types.Action.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "1376ceeb-1003-4132-8ce9-8a7cca589c5b",
                      "parentUUID": "97e7d115-7af4-4d5f-a5ab-0fd7dc5a5bd2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "78e879c6-7222-43fa-bcda-e187b001b4ec",
                    "3923cea0-a88c-4f84-8637-9dbd882b3603",
                    "eae5d945-3052-427f-b1aa-7f9a27b2c5e6",
                    "526df5ac-4f8e-4208-992e-03c08209442f",
                    "1376ceeb-1003-4132-8ce9-8a7cca589c5b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 601,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "e8651fdc-36ff-47cc-85cc-59164a062503",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _types.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'SafetyStateChange');\n(0, _chai.expect)(event.action).to.equal(_types.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.description).to.equal('paused');",
                      "err": {},
                      "uuid": "0272ae4b-81e4-4545-937b-17515f7638f0",
                      "parentUUID": "e8651fdc-36ff-47cc-85cc-59164a062503",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0272ae4b-81e4-4545-937b-17515f7638f0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 26,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f06817c5-c898-426e-a933-f64ad2348784",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.scdpFixture)();\nawait f.reset();",
              "err": {},
              "uuid": "6a4b08de-c546-4312-b98e-f4c2f865ae04",
              "parentUUID": "f06817c5-c898-426e-a933-f64ad2348784",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
              "title": "#Configuration",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be initialized correctly",
                  "fullTitle": "SCDP #Configuration should be initialized correctly",
                  "timedOut": false,
                  "duration": 326,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { args } = await (0, _deploy.getSCDPInitializer)(hre);\nconst configuration = await hre.Diamond.getParametersSCDP();\n(0, _chai.expect)(configuration.liquidationThreshold).to.equal(args.liquidationThreshold);\n(0, _chai.expect)(configuration.minCollateralRatio).to.equal(args.minCollateralRatio);\n(0, _chai.expect)(configuration.maxLiquidationRatio).to.equal(Number(args.liquidationThreshold) + 0.01e4);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include.members([\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst depositsEnabled = await Promise.all([\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral.address),\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral8Dec.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(depositsEnabled).to.deep.equal([\n    true,\n    true,\n    false,\n    false,\n    true\n]);\nconst depositAssets = await hre.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KISS.address\n]);",
                  "err": {},
                  "uuid": "713ade6e-5482-4737-bc1c-961cf8a8d2da",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to whitelist new deposit asset",
                  "fullTitle": "SCDP #Configuration should be able to whitelist new deposit asset",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assetInfoBefore = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoBefore.isSharedCollateral).to.equal(false);\nawait hre.Diamond.updateAsset(f.KrAsset2.address, {\n    ...assetInfoBefore,\n    isSharedCollateral: true,\n    depositLimitSCDP: 1\n});\nconst assetInfoAfter = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoAfter.decimals).to.equal(await f.KrAsset2.contract.decimals());\n(0, _chai.expect)(assetInfoAfter.depositLimitSCDP).to.equal(1);\nconst indicesAfter = await hre.Diamond.getAssetIndexesSCDP(f.KrAsset2.address);\n(0, _chai.expect)(indicesAfter.currLiqIndex).to.equal(_values.RAY);\n(0, _chai.expect)(indicesAfter.currFeeIndex).to.equal(_values.RAY);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address)).to.equal(true);",
                  "err": {},
                  "uuid": "9073f074-bae2-43c9-9745-bb345541210d",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update deposit limit of asset",
                  "fullTitle": "SCDP #Configuration should be able to update deposit limit of asset",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setDepositLimitSCDP(f.Collateral.address, 1);\nconst collateral = await hre.Diamond.getAsset(f.Collateral.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.Collateral.contract.decimals());\n(0, _chai.expect)(collateral.depositLimitSCDP).to.equal(1);\nconst indicesAfter = await hre.Diamond.getAssetIndexesSCDP(f.Collateral.address);\n(0, _chai.expect)(indicesAfter.currLiqIndex).to.equal(_values.RAY);\n(0, _chai.expect)(indicesAfter.currFeeIndex).to.equal(_values.RAY);",
                  "err": {},
                  "uuid": "5b65b16b-0c8d-48a4-8748-1be4bac78075",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a deposit asset",
                  "fullTitle": "SCDP #Configuration should be able to disable a deposit asset",
                  "timedOut": false,
                  "duration": 157,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setAssetIsSharedCollateralSCDP(f.Collateral.address, false);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.Collateral.address);\nconst depositAssets = await hre.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                  "err": {},
                  "uuid": "ee179c0b-df3a-4bd0-b24a-28fdd98dc6a8",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable and enable a collateral asset",
                  "fullTitle": "SCDP #Configuration should be able to disable and enable a collateral asset",
                  "timedOut": false,
                  "duration": 477,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setAssetIsSharedOrSwappedCollateralSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\nawait hre.Diamond.setAssetIsSharedCollateralSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setAssetIsSharedOrSwappedCollateralSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setAssetIsSharedCollateralSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.include(f.Collateral.address);",
                  "err": {},
                  "uuid": "c3306531-2164-4d51-9a84-3d6beeeceb8d",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to add whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(f.swapKrAssetConfig.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(f.swapKrAssetConfig.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(f.swapKrAssetConfig.liqIncentiveSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(f.swapKrAssetConfig.protocolFeeShareSCDP);",
                  "err": {},
                  "uuid": "c616720f-e3cc-483d-92b9-5f2670f764b8",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to update a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = {\n    ...f.KrAsset.config.assetStruct,\n    swapInFeeSCDP: 0.05e4,\n    swapOutFeeSCDP: 0.05e4,\n    liqIncentiveSCDP: 1.06e4,\n    protocolFeeShareSCDP: 0.4e4\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update);\nconst assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(update.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(update.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(update.protocolFeeShareSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(update.liqIncentiveSCDP);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include(f.KrAsset.address);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "b3d4ab99-65dd-47fd-a11a-36f8b395427a",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to remove a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setAssetIsSwapMintableSCDP(f.KrAsset.address, false);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.not.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "90bf28c0-eb65-439e-8f9d-60accbad11e5",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to enable and disable swap pairs",
                  "fullTitle": "SCDP #Configuration should be able to enable and disable swap pairs",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapPairsEnabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: true\n    }\n];\nawait hre.Diamond.setSwapRoutesSCDP(swapPairsEnabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: false\n    }\n];\nawait hre.Diamond.setSwapRoutesSCDP(swapPairsDisabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(false);",
                  "err": {},
                  "uuid": "2b250f74-811f-41b7-82f5-adb59be9ae45",
                  "parentUUID": "38e8aacb-b0e1-47d1-8686-8041f63eb31c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "713ade6e-5482-4737-bc1c-961cf8a8d2da",
                "9073f074-bae2-43c9-9745-bb345541210d",
                "5b65b16b-0c8d-48a4-8748-1be4bac78075",
                "ee179c0b-df3a-4bd0-b24a-28fdd98dc6a8",
                "c3306531-2164-4d51-9a84-3d6beeeceb8d",
                "c616720f-e3cc-483d-92b9-5f2670f764b8",
                "b3d4ab99-65dd-47fd-a11a-36f8b395427a",
                "90bf28c0-eb65-439e-8f9d-60accbad11e5",
                "2b250f74-811f-41b7-82f5-adb59be9ae45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1903,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "62909ab4-8978-48b4-8dd5-7465c09d7f8c",
              "title": "#Deposit",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deposit collateral, calculate correct deposit values",
                  "fullTitle": "SCDP #Deposit should be able to deposit collateral, calculate correct deposit values",
                  "timedOut": false,
                  "duration": 1918,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedValueAdjusted = (f.CollateralPrice.num(8) * depositAmount).ebn(8) // cfactor = 1\n;\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait Promise.all(f.usersArr.map((user)=>{\n    return (0, _redstone.wrapKresko)(hre.Diamond, user).depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n}));\nconst [userInfos, statistics, assetInfo] = await Promise.all([\n    hre.Diamond.getAccountsSCDP(f.usersArr.map((user)=>user.address), [\n        f.Collateral.address\n    ]),\n    hre.Diamond.getDataSCDP(),\n    hre.Diamond.getAssetDataSCDP(f.Collateral.address)\n]);\nfor (const userInfo of userInfos){\n    const balance = await f.Collateral.balanceOf(userInfo.addr);\n    (0, _chai.expect)(balance).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.totals.valColl).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.totals.valFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].val).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].valFees).to.equal(0);\n}\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.amountColl).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.valColl).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.totals.valColl).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.totals.valDebt).to.equal(0);\n// Adjusted\n(0, _chai.expect)(assetInfo.valCollAdj).to.equal(expectedValueAdjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.totals.valCollAdj).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.totals.valDebtOgAdj).to.equal(0);\n(0, _chai.expect)(statistics.totals.valDebt).to.equal(0);\n(0, _chai.expect)(statistics.totals.crOgAdj).to.equal(_viem.maxUint256);\n(0, _chai.expect)(statistics.totals.crOg).to.equal(_viem.maxUint256);\n(0, _chai.expect)(statistics.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "6f9d27ea-c61a-4852-af9e-06e9827f1a69",
                  "parentUUID": "62909ab4-8978-48b4-8dd5-7465c09d7f8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit multiple collaterals, calculate correct deposit values",
                  "fullTitle": "SCDP #Deposit should be able to deposit multiple collaterals, calculate correct deposit values",
                  "timedOut": false,
                  "duration": 2243,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedValueAdjusted = (0, _values.toBig)(f.CollateralPrice.num(8) / 1 * depositAmount, 8) // cfactor = 1\n;\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * 0.8 * depositAmount, 8) // cfactor = 0.8\n;\nawait Promise.all(f.usersArr.map(async (user)=>{\n    const User = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\n    await User.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral8Dec.address);\n    await User.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec);\n}));\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    hre.Diamond.getAccountsSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAssetDatasSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getDataSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].val).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[1].amount).to.equal(depositAmount8Dec);\n    (0, _chai.expect)(userInfo.deposits[1].val).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(userInfo.totals.valColl).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n}\n(0, _chai.expect)(assetInfos[0].amountColl).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfos[1].amountColl).to.equal(depositAmount8Dec.mul(f.usersArr.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(f.usersArr.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(f.usersArr.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(assetInfos[1].valCollAdj).to.equal(valueTotalAdjusted8Dec);\n(0, _chai.expect)(globals.totals.valCollAdj).to.equal(valueAdjusted);\n(0, _chai.expect)(globals.totals.valDebt).to.equal(0);\n(0, _chai.expect)(globals.totals.cr).to.equal(_viem.maxUint256);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(f.usersArr.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(f.usersArr.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(assetInfos[1].valColl).to.equal(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(globals.totals.valColl).to.equal(valueUnadjusted);\n(0, _chai.expect)(globals.totals.valDebt).to.equal(0);\n(0, _chai.expect)(globals.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "3bd1e30c-3cab-4d29-a88f-00c8e1347ad7",
                  "parentUUID": "62909ab4-8978-48b4-8dd5-7465c09d7f8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f9d27ea-c61a-4852-af9e-06e9827f1a69",
                "3bd1e30c-3cab-4d29-a88f-00c8e1347ad7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4161,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c264135b-eca6-4b9e-b71d-228b388b5f64",
              "title": "#Withdraw",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Withdraw\"",
                  "fullTitle": "SCDP #Withdraw \"before each\" hook in \"#Withdraw\"",
                  "timedOut": false,
                  "duration": 895,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\n    await UserKresko.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n    await hre.Diamond.setFeeAssetSCDP(f.Collateral8Dec.address);\n    await UserKresko.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec);\n}));",
                  "err": {},
                  "uuid": "82777c09-f110-40bd-bea4-7d2a50885d94",
                  "parentUUID": "c264135b-eca6-4b9e-b71d-228b388b5f64",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to withdraw full collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw full collateral of multiple assets",
                  "timedOut": false,
                  "duration": 2437,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(0);\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    hre.Diamond.getAccountsSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAssetDatasSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getDataSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(await f.Collateral.balanceOf(userInfo.addr)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].amount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.totals.valColl).to.equal(0);\n}\nfor (const assetInfo of assetInfos){\n    (0, _chai.expect)(assetInfo.valColl).to.equal(0);\n    (0, _chai.expect)(assetInfo.amountColl).to.equal(0);\n    (0, _chai.expect)(assetInfo.amountSwapDeposit).to.equal(0);\n}\n(0, _chai.expect)(globals.totals.valColl).to.equal(0);\n(0, _chai.expect)(globals.totals.valDebt).to.equal(0);\n(0, _chai.expect)(globals.totals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "e8063665-ecbb-4805-81cf-82691c22d9ea",
                  "parentUUID": "c264135b-eca6-4b9e-b71d-228b388b5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw partial collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw partial collateral of multiple assets",
                  "timedOut": false,
                  "duration": 2942,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const partialWithdraw = depositAmount18Dec.div(f.usersArr.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(f.usersArr.length);\nconst expectedValueUnadjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _values.toBig)(f.CollateralPrice.num(8) * 1 * depositAmount, 8).mul(200).div(300) // cfactor = 1\n;\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(f.CollateralPrice.num(8) * 0.8 * depositAmount, 8).mul(200).div(300) // cfactor = 0.8\n;\nawait Promise.all(f.usersArr.map((user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, partialWithdraw),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, partialWithdraw8Dec)\n    ]);\n}));\nconst [collateralBalanceAfter, collateral8DecBalanceAfter, globals, assetInfos, userInfos] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    f.Collateral8Dec.balanceOf(hre.Diamond.address),\n    hre.Diamond.getDataSCDP(),\n    hre.Diamond.getAssetDatasSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAccountsSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ])\n]);\nfor (const userInfo of userInfos){\n    const [balance18Dec, balance8Dec] = await Promise.all([\n        f.Collateral.balanceOf(userInfo.addr),\n        f.Collateral8Dec.balanceOf(userInfo.addr)\n    ]);\n    (0, _chai.expect)(balance18Dec).to.equal(partialWithdraw);\n    (0, _chai.expect)(balance8Dec).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(userInfo.deposits[0].amount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[0].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].amount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.deposits[1].amountFees).to.equal(0);\n    (0, _chai.expect)(userInfo.totals.valColl).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _values.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(collateralBalanceAfter).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(collateral8DecBalanceAfter).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].amountColl).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(assetInfos[1].amountColl).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].valColl).to.closeTo(expectedValueUnadjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[0].valCollAdj).to.closeTo(expectedValueAdjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].valColl).to.closeTo(expectedValueUnadjusted8Dec.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].valCollAdj).to.closeTo(expectedValueAdjusted8Dec.mul(f.usersArr.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(f.usersArr.length).add(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(globals.totals.valColl).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.totals.valDebt).to.equal(0);\n(0, _chai.expect)(globals.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "5bed397d-e4b7-46b5-8f6a-14bf01888288",
                  "parentUUID": "c264135b-eca6-4b9e-b71d-228b388b5f64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8063665-ecbb-4805-81cf-82691c22d9ea",
                "5bed397d-e4b7-46b5-8f6a-14bf01888288"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5379,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "315e464c-39fa-48bb-9bcd-4a9710b5131d",
              "title": "#Fee Distribution",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Fee Distribution\"",
                  "fullTitle": "SCDP #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "incomeCumulator = hre.users.deployer;\nIncomeCumulator = (0, _redstone.wrapKresko)(hre.Diamond, incomeCumulator);\nawait f.Collateral.setBalance(incomeCumulator, depositAmount18Dec.mul(f.usersArr.length), hre.Diamond.address);",
                  "err": {},
                  "uuid": "1175a5a5-0fbd-45dd-8a40-e254729441fa",
                  "parentUUID": "315e464c-39fa-48bb-9bcd-4a9710b5131d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to cumulate fees into deposits",
                  "fullTitle": "SCDP #Fee Distribution should be able to cumulate fees into deposits",
                  "timedOut": false,
                  "duration": 3615,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nconst feePerUser = depositAmount18Dec;\nconst feesToCumulate = feePerUser.mul(f.usersArr.length);\nconst feePerUserValue = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\nconst expectedDepositValue = (0, _values.toBig)(f.CollateralPrice.num(8) * depositAmount, 8);\n// deposit some\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(hre.Diamond, signer).depositSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\n// cumulate some income\nawait IncomeCumulator.cumulateIncomeSCDP(f.Collateral.address, feesToCumulate);\n// check that the fees are cumulated\nfor (const data of (await hre.Diamond.getAccountsSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    (0, _chai.expect)(data.deposits[0].val).to.equal(expectedDepositValue);\n    (0, _chai.expect)(data.deposits[0].valFees).to.equal(feePerUserValue);\n    (0, _chai.expect)(data.totals.valColl).to.equal(expectedDepositValue);\n    (0, _chai.expect)(data.totals.valFees).to.equal(feePerUserValue);\n}\n// withdraw principal\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(hre.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\nfor (const user of (await hre.Diamond.getAccountsSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(user.addr);\n    (0, _chai.expect)(user.deposits[0].val).to.equal(0);\n    (0, _chai.expect)(user.deposits[0].valFees).to.equal(0);\n    (0, _chai.expect)(user.totals.valFees).to.equal(0);\n    (0, _chai.expect)(user.totals.valColl).to.equal(0);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec.add(feePerUser));\n}\nconst [assetInfo, stats, balance] = await Promise.all([\n    hre.Diamond.getAssetDataSCDP(f.Collateral.address),\n    hre.Diamond.getDataSCDP(),\n    f.Collateral.balanceOf(hre.Diamond.address)\n]);\n(0, _chai.expect)(balance).to.equal(0);\n(0, _chai.expect)(assetInfo.amountColl).to.equal(0);\n(0, _chai.expect)(assetInfo.valColl).to.equal(0);\n(0, _chai.expect)(assetInfo.valCollAdj).to.equal(0);\n(0, _chai.expect)(stats.totals.valColl).to.equal(0);\n// nothing left in protocol.\nconst [colalteralBalanceKresko, assetInfoFinal] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    hre.Diamond.getAssetDataSCDP(f.Collateral.address)\n]);\n(0, _chai.expect)(colalteralBalanceKresko).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.amountColl).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.valColl).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.valCollAdj).to.equal(0);",
                  "err": {},
                  "uuid": "df16a066-c4ab-41e0-bd45-abca7ff4a26e",
                  "parentUUID": "315e464c-39fa-48bb-9bcd-4a9710b5131d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df16a066-c4ab-41e0-bd45-abca7ff4a26e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3615,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
              "title": "#Swap",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Swap\"",
                  "fullTitle": "SCDP #Swap \"before each\" hook in \"#Swap\"",
                  "timedOut": false,
                  "duration": 48,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor, (0, _values.toBig)(10_000));\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "81c2206e-988f-483b-a383-f3258a0da849",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have collateral in pool",
                  "fullTitle": "SCDP #Swap should have collateral in pool",
                  "timedOut": false,
                  "duration": 808,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = await hre.Diamond.getDataSCDP();\n(0, _chai.expect)(value.totals.valColl).to.equal((0, _values.toBig)(depositAmount, 8));\n(0, _chai.expect)(value.totals.valDebt).to.equal(0);\n(0, _chai.expect)(value.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "9341a4a9-b7d0-419c-a9cd-5cb01b4b1da7",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to preview a swap",
                  "fullTitle": "SCDP #Swap should be able to preview a swap",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\n(0, _chai.expect)(await f.KrAsset2.getPrice()).to.equal(f.KrAsset2Price);\nconst feePercentageProtocol = Number(f.KISS.config.assetStruct.protocolFeeShareSCDP) + Number(f.KrAsset2.config.assetStruct.protocolFeeShareSCDP);\nconst expectedTotalFee = swapAmount.percentMul(f.KRASSET_KISS_ROUTE_FEE);\nconst expectedProtocolFee = expectedTotalFee.percentMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(f.KISSPrice).wadDiv(f.KrAsset2Price);\nconst [amountOut, feeAmount, feeAmountProtocol] = await hre.Diamond.previewSwapSCDP(f.KISS.address, f.KrAsset2.address, swapAmount);\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                  "err": {},
                  "uuid": "8075e623-2041-4f65-9a42-317298d4ea03",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == 0 | swap collateral == 0",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == 0 | swap collateral == 0",
                  "timedOut": false,
                  "duration": 2096,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1) // $1\n;\nconst kissInAfterFees = swapAmount.sub(swapAmount.percentMul(f.KRASSET_KISS_ROUTE_FEE));\nconst expectedAmountOut = kissInAfterFees.wadMul(f.KISSPrice).wadDiv(f.KrAsset2Price);\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\nconst [KR2Balance, KISSBalance, swapperInfos, assetInfos, global] = await Promise.all([\n    f.KrAsset2.balanceOf(f.swapper.address),\n    f.KISS.balanceOf(f.swapper.address),\n    hre.Diamond.getAccountsSCDP([\n        f.swapper.address\n    ], [\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.getAssetDatasSCDP([\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.getDataSCDP()\n]);\nconst swapperInfo = swapperInfos[0];\n(0, _chai.expect)(KR2Balance).to.equal(expectedAmountOut);\n(0, _chai.expect)(KISSBalance).to.equal((0, _values.toBig)(10_000).sub(swapAmount));\n(0, _chai.expect)(swapperInfo.deposits[0].val).to.equal(0);\n(0, _chai.expect)(swapperInfo.deposits[1].val).to.equal(0);\n(0, _chai.expect)(assetInfos[0].amountDebt).to.equal(expectedAmountOut);\n(0, _chai.expect)(assetInfos[1].amountSwapDeposit).to.equal(kissInAfterFees);\nconst expectedDepositValue = (0, _values.toBig)(depositAmount, 8).add(kissInAfterFees.wadMul(f.KISSPrice));\n(0, _chai.expect)(assetInfos[1].valColl).to.equal(expectedDepositValue);\n(0, _chai.expect)(assetInfos[0].valDebt).to.equal(expectedAmountOut.wadMul(f.KrAsset2Price));\n(0, _chai.expect)(global.totals.valColl).to.equal(expectedDepositValue);\n(0, _chai.expect)(global.totals.valDebt).to.equal(expectedAmountOut.wadMul(f.KrAsset2Price));\n(0, _chai.expect)(global.totals.cr).to.equal(expectedDepositValue.percentDiv(expectedAmountOut.wadMul(f.KrAsset2Price)));",
                  "err": {},
                  "uuid": "d826e046-5754-480d-996b-549c7cc4b56a",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "timedOut": false,
                  "duration": 2673,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(100) // $100\n;\nconst swapAmountAsset = swapAmount.percentMul(1e4 - Number(f.KRASSET_KISS_ROUTE_FEE)).wadMul(f.KISSPrice.wadDiv(f.KrAsset2Price));\nconst expectedKissOut = swapAmountAsset.percentMul(1e4 - f.KRASSET_KISS_ROUTE_FEE).wadMul(f.KrAsset2Price).wadDiv(f.KISSPrice);\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: f.swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: f.swapper,\n    asset: f.KrAsset2,\n    amount: (0, _values.toBig)(0.1)\n});\nconst globalBefore = await hre.Diamond.getDataSCDP();\n(0, _chai.expect)(globalBefore.totals.valColl).to.equal(initialDepositValue);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountAsset, 0);\nconst [event, assetInfos] = await Promise.all([\n    (0, _events.getNamedEvent)(tx, 'Swap'),\n    hre.Diamond.getAssetDatasSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ])\n]);\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(assetInfos[0].amountSwapDeposit).to.equal(0);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal(initialDepositValue);\n(0, _chai.expect)(assetInfos[1].valDebt).to.equal(0);\n(0, _chai.expect)(assetInfos[1].amountDebt).to.equal(0);\nconst global = await hre.Diamond.getDataSCDP();\n(0, _chai.expect)(global.totals.valColl).to.equal((0, _values.toBig)(1000, 8));\n(0, _chai.expect)(global.totals.valDebt).to.equal(0);\n(0, _chai.expect)(global.totals.cr).to.equal(_viem.maxUint256);",
                  "err": {},
                  "uuid": "379774bb-8d08-4249-a76b-3ad80b00dcdd",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                  "timedOut": false,
                  "duration": 2109,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1) // $1\n;\nconst swapValue = (0, _values.toBig)(1, 8);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst assetInfoKISS = await hre.Diamond.getAssetDataSCDP(f.KISS.address);\nconst feeValueFirstSwap = swapValue.percentMul(f.KRASSET_KISS_ROUTE_FEE);\nconst valueInAfterFees = swapValue.sub(feeValueFirstSwap);\n(0, _chai.expect)(assetInfoKISS.valColl).to.equal(depositValue.add(valueInAfterFees));\nconst expectedSwapDeposits = valueInAfterFees.num(8).ebn(18);\n(0, _chai.expect)(assetInfoKISS.amountSwapDeposit).to.equal(expectedSwapDeposits);\nconst swapAmountSecond = (0, _values.toBig)(0.009) // this is $0.90, so less than $0.96 since we want to ensure debt > assetsIn | swap deposits > assetsOut\n;\nconst swapValueSecond = swapAmountSecond.wadMul(f.KrAsset2Price);\nconst feeValueSecondSwap = swapValueSecond.sub(swapValueSecond.percentMul(f.KRASSET_KISS_ROUTE_FEE));\nconst expectedKissOut = feeValueSecondSwap.wadDiv(f.KISSPrice) // 0.8685\n;\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountSecond, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountSecond);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst [depositValueKR2, depositValueKISS, assetInfos, globals] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.swapper.address, f.KrAsset2.address),\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.swapper.address, f.KISS.address),\n    hre.Diamond.getAssetDatasSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ]),\n    hre.Diamond.getDataSCDP()\n]);\n(0, _chai.expect)(depositValueKR2).to.equal(0);\n(0, _chai.expect)(depositValueKISS).to.equal(0);\nconst expectedSwapDepositsAfter = expectedSwapDeposits.sub((0, _values.toBig)(0.9));\nconst expectedSwapDepositsValue = expectedSwapDepositsAfter.wadMul(assetInfoKISS.price);\n(0, _chai.expect)(assetInfos[0].amountSwapDeposit).to.equal(expectedSwapDepositsAfter);\n(0, _chai.expect)(assetInfos[0].valColl).to.equal((0, _values.toBig)(depositAmount, 8).add(expectedSwapDepositsValue));\n(0, _chai.expect)(assetInfos[1].valDebt).to.equal(expectedSwapDepositsValue);\nconst expectedDebtAfter = expectedSwapDepositsValue.wadDiv(await f.KrAsset2.getPrice());\n(0, _chai.expect)(assetInfos[0].amountDebt).to.equal(0);\n(0, _chai.expect)(assetInfos[1].amountDebt).to.equal(expectedDebtAfter);\nconst expectedCollateralValue = expectedSwapDepositsValue.add(depositAmount.ebn(8));\n(0, _chai.expect)(globals.totals.valColl).to.equal(expectedCollateralValue) // swap deposits + collateral deposited\n;\n(0, _chai.expect)(globals.totals.valDebt).to.equal(expectedSwapDepositsValue) //\n;\n(0, _chai.expect)(globals.totals.cr).to.equal(expectedCollateralValue.percentDiv(expectedSwapDepositsValue));",
                  "err": {},
                  "uuid": "f853cd9d-64ea-4fc9-8108-48603c321764",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                  "timedOut": false,
                  "duration": 3903,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmountKiss = (0, _values.toBig)(100) // $100\n;\nconst swapAmountKrAsset = (0, _values.toBig)(2) // $200\n;\nconst swapValue = 200;\nconst firstSwapFeeAmount = swapAmountKiss.percentMul(f.KRASSET_KISS_ROUTE_FEE);\nconst expectedKissOutSecondSwap = swapAmountKrAsset.sub(swapAmountKrAsset.percentMul(f.KRASSET_KISS_ROUTE_FEE)).wadMul(f.KrAsset2Price).wadDiv(f.KISSPrice);\nconst krAssetOutFirstSwap = swapAmountKiss.sub(firstSwapFeeAmount).wadMul(f.KISSPrice).wadDiv(f.KrAsset2Price);\nconst krAssetOutFirstSwapValue = krAssetOutFirstSwap.wadMul(f.KrAsset2Price);\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: f.swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(400)\n});\nconst ICDPMintAmount = (0, _values.toBig)(1.04);\nawait (0, _krassets.mintKrAsset)({\n    user: f.swapper,\n    asset: f.KrAsset2,\n    amount: ICDPMintAmount\n});\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmountKiss, 0);\nconst expectedSwapDeposits = swapAmountKiss.sub(firstSwapFeeAmount);\nconst stats = await hre.Diamond.getDataSCDP();\n(0, _chai.expect)(await f.KreskoSwapper.getSwapDepositsSCDP(f.KISS.address)).to.equal(expectedSwapDeposits);\n(0, _chai.expect)(stats.totals.valColl).to.be.eq(depositAmount.ebn().add(expectedSwapDeposits).wadMul(f.KISSPrice));\n// the swap that matters, here user has 0.96 (previous swap) + 1.04 (mint). expecting 192 kiss from swap.\nconst [expectedAmountOut] = await f.KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmountKrAsset);\n(0, _chai.expect)(expectedAmountOut).to.equal(expectedKissOutSecondSwap);\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOutSecondSwap);\nconst assetInfos = await hre.Diamond.getAssetDatasSCDP([\n    f.KISS.address,\n    f.KrAsset2.address\n]);\n// f.KISS deposits sent in swap\nconst acocuntPrincipalDepositsKISS = await f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(assetInfos[0].amountSwapDeposit).to.equal(0) // half of 2 krAsset\n;\n(0, _chai.expect)(assetInfos[0].amountColl).to.equal(acocuntPrincipalDepositsKISS);\n// KrAsset debt is cleared\n(0, _chai.expect)(assetInfos[1].valDebt).to.equal(0);\n(0, _chai.expect)(assetInfos[1].amountDebt).to.equal(0);\n// KISS debt is issued\nconst expectedKissDebtValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[0].valDebt).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(assetInfos[0].amountDebt).to.equal(expectedKissDebtValue.wadDiv(f.KISSPrice));\n// krAsset swap deposits\nconst expectedSwapDepositValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[1].amountSwapDeposit).to.equal((0, _values.toBig)(2).sub(krAssetOutFirstSwap));\n(0, _chai.expect)(assetInfos[1].valColl).to.equal(expectedSwapDepositValue) // asset price is $100\n;\nconst global = await hre.Diamond.getDataSCDP();\nconst expectedCollateralValue = (0, _values.toBig)(1000, 8).add(expectedSwapDepositValue);\n(0, _chai.expect)(global.totals.valColl).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.totals.valDebt).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(global.totals.cr).to.equal(expectedCollateralValue.percentDiv(expectedKissDebtValue));",
                  "err": {},
                  "uuid": "9c3783a0-0479-4207-88f5-72b2d97fb164",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cumulates fees on swap",
                  "fullTitle": "SCDP #Swap cumulates fees on swap",
                  "timedOut": false,
                  "duration": 853,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmountNew = (0, _values.toBig)(10000 - depositAmount);\nawait f.KISS.setBalance(f.depositor, depositAmountNew);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, depositAmountNew);\nconst swapAmount = (0, _values.toBig)(2600);\nconst feesBeforeSwap = await f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst feesAfterSwap = await f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(feesAfterSwap).to.gt(feesBeforeSwap);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, f.KrAsset2.balanceOf(f.swapper.address), 0);\nconst feesAfterSecondSwap = await f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(feesAfterSecondSwap).to.gt(feesAfterSwap);\nawait f.KreskoDepositor.claimFeesSCDP(f.depositor.address, f.KISS.address);\nconst [depositsAfter, feesAfter] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.KISS.address),\n    f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(feesAfter).to.eq(0);\n(0, _chai.expect)(depositsAfter).to.eq((0, _values.toBig)(10000));\nawait f.KreskoDepositor.withdrawSCDP(f.depositor.address, f.KISS.address, (0, _values.toBig)(10000));\nconst [depositsAfterWithdraw, feesAfterWithdraw] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.depositor.address, f.KISS.address),\n    f.KreskoSwapper.getAccountFeesSCDP(f.depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(depositsAfterWithdraw).to.eq(0);\n(0, _chai.expect)(feesAfterWithdraw).to.eq(0);",
                  "err": {},
                  "uuid": "d59711a5-1c1c-438c-9e21-b018eff6dfe3",
                  "parentUUID": "50108da5-d594-47f4-a0f7-4bf1f1efe9f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9341a4a9-b7d0-419c-a9cd-5cb01b4b1da7",
                "8075e623-2041-4f65-9a42-317298d4ea03",
                "d826e046-5754-480d-996b-549c7cc4b56a",
                "379774bb-8d08-4249-a76b-3ad80b00dcdd",
                "f853cd9d-64ea-4fc9-8108-48603c321764",
                "9c3783a0-0479-4207-88f5-72b2d97fb164",
                "d59711a5-1c1c-438c-9e21-b018eff6dfe3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12565,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "f61f6949-7b2a-488b-a8be-836af8c11800",
              "title": "#Liquidations",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Liquidations\"",
                  "fullTitle": "SCDP #Liquidations \"before each\" hook in \"#Liquidations\"",
                  "timedOut": false,
                  "duration": 191,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (const signer of f.usersArr){\n    await f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000));\n}\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor2, (0, _values.toBig)(10_000));\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec);\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral8Dec.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral8Dec.address, depositAmount8Dec);\nawait hre.Diamond.setFeeAssetSCDP(f.KISS.address);\nf.KreskoDepositor2.depositSCDP(f.depositor2.address, f.KISS.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "ff3f7b7e-cd75-4a94-8505-01086c052233",
                  "parentUUID": "f61f6949-7b2a-488b-a8be-836af8c11800",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is not underwater",
                  "timedOut": false,
                  "duration": 566,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600) // $1\n;\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;",
                  "err": {},
                  "uuid": "58de442f-6aaa-4e51-b5c7-2539bd789f03",
                  "parentUUID": "f61f6949-7b2a-488b-a8be-836af8c11800",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert liquidations if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should revert liquidations if the pool is not underwater",
                  "timedOut": false,
                  "duration": 769,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600) // $1\n;\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;\nawait f.KrAsset2.setBalance(hre.users.liquidator, (0, _values.toBig)(1_000_000));\nawait (0, _chai.expect)(f.KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, (0, _values.toBig)(7.7), f.Collateral8Dec.address)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_GREATER_THAN_REQUIRED');",
                  "err": {},
                  "uuid": "641803ca-5f59-4b09-b6bf-5549c4d6ba28",
                  "parentUUID": "f61f6949-7b2a-488b-a8be-836af8c11800",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify if the pool is underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is underwater",
                  "timedOut": false,
                  "duration": 1669,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nf.Collateral.setPrice(f.CollateralPrice.num(8) / 1000);\nf.Collateral8Dec.setPrice(f.CollateralPrice.num(8) / 1000);\nconst [stats, liquidatable] = await Promise.all([\n    hre.Diamond.getDataSCDP(),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(stats.totals.cr).to.be.lt(stats.LT);\n(0, _chai.expect)(liquidatable).to.be.true;",
                  "err": {},
                  "uuid": "ef621e5b-52f4-4a59-bf6f-1c782c539f12",
                  "parentUUID": "f61f6949-7b2a-488b-a8be-836af8c11800",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow liquidating the underwater pool",
                  "fullTitle": "SCDP #Liquidations should allow liquidating the underwater pool",
                  "timedOut": false,
                  "duration": 5662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(2600);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nf.KrAsset2.setPrice(newKreskoAssetPrice);\nconst [scdpParams, maxLiquidatable, krAssetPrice, statsBefore] = await Promise.all([\n    hre.Diamond.getParametersSCDP(),\n    hre.Diamond.getMaxLiqValueSCDP(f.KrAsset2.address, f.Collateral8Dec.address),\n    f.KrAsset2.getPrice(),\n    hre.Diamond.getDataSCDP()\n]);\nconst repayAmount = maxLiquidatable.repayValue.wadDiv(krAssetPrice);\nawait f.KrAsset2.setBalance(hre.users.liquidator, repayAmount.add(1e18.toString()));\n(0, _chai.expect)(statsBefore.totals.cr).to.lt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(statsBefore.totals.cr).to.gt(1e4);\n// Liquidate the shared CDP\nconst tx = await f.KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address);\n// Check the state after liquidation\nconst [statsAfter, liquidatableAfter] = await Promise.all([\n    hre.Diamond.getDataSCDP(),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(statsAfter.totals.cr).to.gt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(statsAfter.totals.crOgAdj).to.eq(2.01e4);\n(0, _chai.expect)(liquidatableAfter).to.eq(false);\n// Shared CDP should not be liquidatable since it is above the threshold\nawait (0, _chai.expect)(f.KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_GREATER_THAN_REQUIRED');\n// Check what was emitted in the event\nconst event = await (0, _events.getNamedEvent)(tx, 'SCDPLiquidationOccured');\nconst expectedSeizeAmount = repayAmount.wadMul((0, _values.toBig)(newKreskoAssetPrice, 8)).percentMul(1.05e4).wadDiv(f.CollateralPrice).div(10 ** 10);\n(0, _chai.expect)(event.args.liquidator).to.eq(hre.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(f.Collateral8Dec.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(f.KrAsset2.address);\n// Check account state changes\nconst expectedDepositsAfter = depositAmount8Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(expectedDepositsAfter).to.be.lt(depositAmount8Dec);\nconst [principalDeposits, fees, params] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountFeesSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getParametersSCDP()\n]);\n(0, _chai.expect)(principalDeposits).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(fees).to.eq(0);\n// Sanity checking that users should be able to withdraw what is left\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec.mul(10));\nconst stats = await hre.Diamond.getDataSCDP();\n(0, _chai.expect)(stats.totals.cr).to.gt(params.minCollateralRatio);\nawait (0, _chai.expect)(f.KreskoDepositor.withdrawSCDP(f.depositor.address, f.Collateral8Dec.address, expectedDepositsAfter)).to.not.be.reverted;\nconst [principalEnd, feesAfter] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountFeesSCDP(f.depositor.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(principalEnd).to.eq(0);\n(0, _chai.expect)(feesAfter).to.eq(0);",
                  "err": {},
                  "uuid": "9116816d-4664-450f-8279-f5b5258811dd",
                  "parentUUID": "f61f6949-7b2a-488b-a8be-836af8c11800",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58de442f-6aaa-4e51-b5c7-2539bd789f03",
                "641803ca-5f59-4b09-b6bf-5549c4d6ba28",
                "ef621e5b-52f4-4a59-bf6f-1c782c539f12",
                "9116816d-4664-450f-8279-f5b5258811dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8666,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "5190790f-440a-412b-8066-c5672f92e406",
              "title": "#Error",
              "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Error\"",
                  "fullTitle": "SCDP #Error \"before each\" hook in \"#Error\"",
                  "timedOut": false,
                  "duration": 159,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor, hre.ethers.BigNumber.from(1));\nawait hre.Diamond.setFeeAssetSCDP(f.Collateral.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec);\nawait hre.Diamond.setFeeAssetSCDP(f.KISS.address);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, 1);",
                  "err": {},
                  "uuid": "6e474480-c64b-4d44-aad9-e3c3d7b690fe",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert depositing unsupported tokens",
                  "fullTitle": "SCDP #Error should revert depositing unsupported tokens",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [UnsupportedToken] = await hre.deploy('MockERC20', {\n    args: [\n        'UnsupportedToken',\n        'UnsupportedToken',\n        18,\n        (0, _values.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(hre.Diamond.address, hre.ethers.constants.MaxUint256);\nconst { deployer } = await hre.getNamedAccounts();\nawait (0, _chai.expect)(hre.Diamond.depositSCDP(deployer, UnsupportedToken.address, 1)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ASSET_NOT_FEE_ACCUMULATING_ASSET').withArgs([\n    'UnsupportedToken',\n    UnsupportedToken.address\n]);",
                  "err": {},
                  "uuid": "069b805a-584e-4970-9a3f-afc870fedb5d",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing without deposits",
                  "fullTitle": "SCDP #Error should revert withdrawing without deposits",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const withdrawAmount = 1;\nconst principalDeposits = 0;\nconst scaledDeposits = 0;\nawait (0, _chai.expect)(f.KreskoSwapper.withdrawSCDP(f.depositor.address, f.Collateral.address, withdrawAmount)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'NOTHING_TO_WITHDRAW').withArgs(f.swapper.address, f.Collateral.errorId, withdrawAmount, principalDeposits, scaledDeposits);",
                  "err": {},
                  "uuid": "7eb3b4ba-51fd-46c4-8ce0-9802413b4f69",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals below MCR",
                  "fullTitle": "SCDP #Error should revert withdrawals below MCR",
                  "timedOut": false,
                  "duration": 458,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1000) // $1000\n;\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0) // generates the debt\n;\nconst deposits = await f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.Collateral.address);\nawait (0, _chai.expect)(f.KreskoDepositor.withdrawSCDP(f.depositor.address, f.Collateral.address, deposits)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs(960e8, 4800e8, 5e4);",
                  "err": {},
                  "uuid": "4674785f-8cbc-4277-b178-2932ed05d88f",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals of swap owned collateral deposits",
                  "fullTitle": "SCDP #Error should revert withdrawals of swap owned collateral deposits",
                  "timedOut": false,
                  "duration": 402,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nconst deposits = await f.KreskoSwapper.getSwapDepositsSCDP(f.KrAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(f.KreskoSwapper.withdrawSCDP(f.swapper.address, f.KrAsset2.address, deposits)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'ASSET_DOES_NOT_HAVE_DEPOSITS').withArgs(f.KrAsset2.errorId);",
                  "err": {},
                  "uuid": "1de8a51f-093c-464c-8a85-36392f167ec4",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping with price below minAmountOut",
                  "fullTitle": "SCDP #Error should revert swapping with price below minAmountOut",
                  "timedOut": false,
                  "duration": 277,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nconst [amountOut] = await f.KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmount);\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'RECEIVED_LESS_THAN_DESIRED').withArgs(f.KISS.errorId, amountOut, amountOut.add(1));",
                  "err": {},
                  "uuid": "ccc41f50-b321-4917-bf01-9c1876a6984f",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping unsupported asset",
                  "fullTitle": "SCDP #Error should revert swapping unsupported asset",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.Collateral.address, swapAmount, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'SWAP_ROUTE_NOT_ENABLED').withArgs(f.KrAsset2.errorId, f.Collateral.errorId);",
                  "err": {},
                  "uuid": "ee8cba16-eb58-48f8-9ceb-10babb3c2282",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping a disabled route",
                  "fullTitle": "SCDP #Error should revert swapping a disabled route",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait hre.Diamond.setSingleSwapRouteSCDP({\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    enabled: false\n});\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0)).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'SWAP_ROUTE_NOT_ENABLED').withArgs(f.KrAsset2.errorId, f.KISS.errorId);",
                  "err": {},
                  "uuid": "ec688f3e-569a-4fc0-976b-82e2e0aaaa68",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping causes CDP to go below MCR",
                  "fullTitle": "SCDP #Error should revert swapping causes CDP to go below MCR",
                  "timedOut": false,
                  "duration": 348,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1_500_000);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nconst tx = f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nawait (0, _chai.expect)(tx).to.be.revertedWithCustomError((0, _errors.Errors)(hre), 'COLLATERAL_VALUE_LESS_THAN_REQUIRED').withArgs('15001000000000000', '75000000000000000', 5e4);",
                  "err": {},
                  "uuid": "b147b9ea-1178-4b99-9c5b-a849b1dd777c",
                  "parentUUID": "5190790f-440a-412b-8066-c5672f92e406",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "069b805a-584e-4970-9a3f-afc870fedb5d",
                "7eb3b4ba-51fd-46c4-8ce0-9802413b4f69",
                "4674785f-8cbc-4277-b178-2932ed05d88f",
                "1de8a51f-093c-464c-8a85-36392f167ec4",
                "ccc41f50-b321-4917-bf01-9c1876a6984f",
                "ee8cba16-eb58-48f8-9ceb-10babb3c2282",
                "ec688f3e-569a-4fc0-976b-82e2e0aaaa68",
                "b147b9ea-1178-4b99-9c5b-a849b1dd777c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1738,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs/test-report",
        "assetsDir": "docs/test-report/assets",
        "reportTitle": "Kresko Protocol Hardhat Test Report",
        "reportPageTitle": "Kresko Protocol Hardhat Test Report"
      },
      "version": "6.2.0"
    }
  }
}