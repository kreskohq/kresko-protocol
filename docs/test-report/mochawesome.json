{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-08T21:59:31.020Z",
    "end": "2023-12-08T21:59:33.696Z",
    "duration": 2676,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2a4e4f47-b43c-4e83-a9e8-80b9ad0005ec",
      "title": "",
      "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/06-gating.ts",
      "file": "/src/test/minter/06-gating.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "967f10ac-ce24-416f-bf61-580a76a6da4d",
          "title": "Gating",
          "fullFile": "/Users/panukettunen/projects/kresko-protocol/src/test/minter/06-gating.ts",
          "file": "/src/test/minter/06-gating.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Gating\"",
              "fullTitle": "Gating \"before each\" hook in \"Gating\"",
              "timedOut": false,
              "duration": 157,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[nft] = await hre.deploy('MockERC1155', {\n    args: [\n        'MockERC1155_1',\n        'MockERC1155_1',\n        'https://mock.com/{id}.json',\n        'https://mock.com/contract.json'\n    ],\n    deploymentName: 'MockERC1155_1',\n    from: hre.users.deployer.address\n});\n[nft2] = await hre.deploy('MockERC1155', {\n    args: [\n        'MockERC1155_2',\n        'MockERC1155_2',\n        'https://mock2.com/{id}.json',\n        'https://mock2.com/contract2.json'\n    ],\n    deploymentName: 'MockERC1155_2',\n    from: hre.users.deployer.address\n});\n[this.GatingManager] = await hre.deploy('GatingManager', {\n    args: [\n        hre.users.deployer.address,\n        nft.address,\n        nft2.address,\n        1\n    ],\n    from: hre.users.deployer.address\n});\nawait hre.Diamond.setGatingManager(this.GatingManager.address);\n// setup collateral for userOne and userTwo\nthis.initialBalance = (0, _values.toBig)(100000);\nawait f.Collateral.setBalance(hre.users.userOne, this.initialBalance, hre.Diamond.address);\nawait f.Collateral.setBalance(hre.users.userTwo, this.initialBalance, hre.Diamond.address);\nthis.depositArgsOne = {\n    user: hre.users.userOne,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\nthis.depositArgsTwo = {\n    user: hre.users.userTwo,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};",
              "err": {},
              "uuid": "2c330296-5618-4763-8865-3b31f3d30164",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not allow users to access phase 1 without nfts",
              "fullTitle": "Gating should not allow users to access phase 1 without nfts",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 1, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 2, 1);\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "a716a733-81f8-42b5-917c-8264d1f26ac1",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow users to access in phase 1",
              "fullTitle": "Gating should allow users to access in phase 1",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 1, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 2, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 3, 1);\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "27926422-2ecd-4a19-8093-690858f4b966",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow users to access phase 2 without nfts",
              "fullTitle": "Gating should not allow users to access phase 2 without nfts",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(2);\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "da9598ee-e623-416d-9f89-cc5418505ed6",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow users to access in phase 2",
              "fullTitle": "Gating should allow users to access in phase 2",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(2);\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait nft2['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "33f83e15-1dcd-4abe-afcd-5130f0c5a538",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow users to access phase 3 without nfts",
              "fullTitle": "Gating should not allow users to access phase 3 without nfts",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(3);\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "1528e116-57ef-41bb-836a-4b43a7429dfa",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow users to access in phase 3",
              "fullTitle": "Gating should allow users to access in phase 3",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(3);\nawait nft['mint(address,uint256,uint256)'](this.depositArgsOne.user.address, 0, 1);\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "91dbc669-018d-4cdc-af61-275715030d10",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After all the phases anyone should be able to deposit collateral",
              "fullTitle": "Gating After all the phases anyone should be able to deposit collateral",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.GatingManager.setPhase(0);\n// Anyone should be able to deposit collateral\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsTwo.user).depositCollateral(this.depositArgsTwo.user.address, f.Collateral.address, this.depositArgsTwo.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "800aada2-2227-48da-bd07-437957fb0a86",
              "parentUUID": "967f10ac-ce24-416f-bf61-580a76a6da4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a716a733-81f8-42b5-917c-8264d1f26ac1",
            "27926422-2ecd-4a19-8093-690858f4b966",
            "da9598ee-e623-416d-9f89-cc5418505ed6",
            "33f83e15-1dcd-4abe-afcd-5130f0c5a538",
            "1528e116-57ef-41bb-836a-4b43a7429dfa",
            "91dbc669-018d-4cdc-af61-275715030d10",
            "800aada2-2227-48da-bd07-437957fb0a86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 577,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs/test-report",
        "assetsDir": "docs/test-report/assets",
        "reportTitle": "Kresko Protocol Hardhat Test Report",
        "reportPageTitle": "Kresko Protocol Hardhat Test Report"
      },
      "version": "6.2.0"
    }
  }
}