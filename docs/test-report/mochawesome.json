{
  "stats": {
    "suites": 90,
    "tests": 275,
    "passes": 251,
    "pending": 24,
    "failures": 0,
    "start": "2023-10-11T14:17:57.551Z",
    "end": "2023-10-11T14:19:46.501Z",
    "duration": 108950,
    "testsRegistered": 275,
    "passPercent": 100,
    "pendingPercent": 8.727272727272728,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "29f12285-9645-4d0a-9579-dc8812ab38d1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "246d9216-dc0e-4f96-8351-6fdf66480aec",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.assetValuesFixture)();\nf.user = hre.users.userEight;\nUser = (0, _redstone.wrapKresko)(hre.Diamond, f.user);",
              "err": {},
              "uuid": "865697f4-73d7-47cc-b79c-7325cde8b70a",
              "parentUUID": "246d9216-dc0e-4f96-8351-6fdf66480aec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b6e727aa-3132-43f6-ab3f-45780bc45d52",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "dcd9010b-ba07-4504-990d-145e935165e3",
                  "parentUUID": "b6e727aa-3132-43f6-ab3f-45780bc45d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "32047038-3cd4-4df8-aaf7-e4ac8a0af877",
                  "parentUUID": "b6e727aa-3132-43f6-ab3f-45780bc45d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nconst expectedDepositValue = (0, _values.toBig)(50, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "92f90752-1b21-4c7a-b36e-f3272416b82e",
                  "parentUUID": "b6e727aa-3132-43f6-ab3f-45780bc45d52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.depositCollateral(f.user.address, f.CollateralAsset.address, (0, _values.toBig)(10));\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, (0, _values.toBig)(10, 8));\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, (0, _values.toBig)(10, 21));\nconst expectedDepositValue = (0, _values.toBig)(150, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "23d0c8b2-0a31-4fee-8281-3cd0c271d765",
                  "parentUUID": "b6e727aa-3132-43f6-ab3f-45780bc45d52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dcd9010b-ba07-4504-990d-145e935165e3",
                "32047038-3cd4-4df8-aaf7-e4ac8a0af877",
                "92f90752-1b21-4c7a-b36e-f3272416b82e",
                "23d0c8b2-0a31-4fee-8281-3cd0c271d765"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 556,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "27ea0453-3dcb-4beb-bd35-4eb2d49f0292",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance));",
                  "err": {},
                  "uuid": "601788b9-21d6-4ff2-b29d-bf325bf88d33",
                  "parentUUID": "27ea0453-3dcb-4beb-bd35-4eb2d49f0292",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset8Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset8Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 8));",
                  "err": {},
                  "uuid": "2cdabea6-0b93-42b1-a6d4-76c545467790",
                  "parentUUID": "27ea0453-3dcb-4beb-bd35-4eb2d49f0292",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _optimizations.default.getAccountDepositIndex(f.user.address, f.CollateralAsset21Dec.address);\nconst deposits = await hre.Diamond.getAccountCollateralAmount(f.user.address, f.CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait User.withdrawCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await f.CollateralAsset21Dec.balanceOf(f.user.address);\n(0, _chai.expect)(balance).to.equal((0, _values.toBig)(f.startingBalance, 21));",
                  "err": {},
                  "uuid": "32774d65-d91d-43bb-b10e-432bb709d7d3",
                  "parentUUID": "27ea0453-3dcb-4beb-bd35-4eb2d49f0292",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "601788b9-21d6-4ff2-b29d-bf325bf88d33",
                "2cdabea6-0b93-42b1-a6d4-76c545467790",
                "32774d65-d91d-43bb-b10e-432bb709d7d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 325,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bfcf8a13-703f-4fb4-9229-6c301f7dafbc",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 601,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10);\nawait User.depositCollateral(f.user.address, f.CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "4064b005-79ee-44eb-a911-5c3306588eba",
                  "parentUUID": "bfcf8a13-703f-4fb4-9229-6c301f7dafbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 586,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 8);\nawait User.depositCollateral(f.user.address, f.CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "2a33323e-1a7c-4e8d-91fa-c1ad5bf89c0c",
                  "parentUUID": "bfcf8a13-703f-4fb4-9229-6c301f7dafbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 582,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _values.toBig)(10, 21);\nawait User.depositCollateral(f.user.address, f.CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _values.toBig)(1);\nconst expectedMintValue = (0, _values.toBig)(20, f.oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait User.mintKreskoAsset(f.user.address, f.KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _values.toBig)(49.5, f.oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await hre.Diamond.getAccountTotalCollateralValue(f.user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await hre.Diamond.getAccountTotalDebtValue(f.user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await hre.Diamond.getValue(f.KreskoAsset.address, mintAmount);\nconst kFactor = (await hre.Diamond.getAsset(f.KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.percentDiv(kFactor));\nconst collateralRatio = await hre.Diamond.getAccountCollateralRatio(f.user.address);\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.percentDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "8b438fef-f1fd-4378-bed0-0dcfc461499b",
                  "parentUUID": "bfcf8a13-703f-4fb4-9229-6c301f7dafbc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4064b005-79ee-44eb-a911-5c3306588eba",
                "2a33323e-1a7c-4e8d-91fa-c1ad5bf89c0c",
                "8b438fef-f1fd-4378-bed0-0dcfc461499b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1769,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ec20ccc3-549b-41d7-8437-4424fc186813",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "8e141aac-4120-450a-b593-8b974415c486",
              "parentUUID": "ec20ccc3-549b-41d7-8437-4424fc186813",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "982bcdd9-2b90-40e0-93d0-478487a0f50a",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "a4d3b811-4916-42dd-9bda-1e891b0f3015",
                  "parentUUID": "982bcdd9-2b90-40e0-93d0-478487a0f50a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = f.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "100516fd-2096-4de4-bdd5-7d578badcda8",
                  "parentUUID": "982bcdd9-2b90-40e0-93d0-478487a0f50a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = f.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "528c9814-c710-4a80-a19e-9ac23828300e",
                  "parentUUID": "982bcdd9-2b90-40e0-93d0-478487a0f50a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4d3b811-4916-42dd-9bda-1e891b0f3015",
                "100516fd-2096-4de4-bdd5-7d578badcda8",
                "528c9814-c710-4a80-a19e-9ac23828300e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 226,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0bd00d90-a907-495e-b44c-6321e1c582a7",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "7908641d-fe80-46ea-93c5-0353af93c362",
              "parentUUID": "0bd00d90-a907-495e-b44c-6321e1c582a7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3d9ee7e6-feb1-4a3d-a928-66114eae7971",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.owner()).to.equal(hre.addr.deployer);",
                  "err": {},
                  "uuid": "a51c8ee6-f7aa-49ef-b231-f37c5c5787f4",
                  "parentUUID": "3d9ee7e6-feb1-4a3d-a928-66114eae7971",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.hasRole(_roles.default.ADMIN, hre.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "4c5d6403-e689-418c-9b3b-77eb4a013eda",
                  "parentUUID": "3d9ee7e6-feb1-4a3d-a928-66114eae7971",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await hre.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "26572414-1115-45f2-ae2f-98109422032e",
                  "parentUUID": "3d9ee7e6-feb1-4a3d-a928-66114eae7971",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hre.users.userOne;\nawait hre.Diamond.transferOwnership(pendingOwner.address);\nawait (0, _general.wrapContractWithSigner)(hre.Diamond, pendingOwner).acceptOwnership();\n(0, _chai.expect)(await hre.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "b9a7215f-69ac-44ad-808d-01eb6ccadcf6",
                  "parentUUID": "3d9ee7e6-feb1-4a3d-a928-66114eae7971",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a51c8ee6-f7aa-49ef-b231-f37c5c5787f4",
                "4c5d6403-e689-418c-9b3b-77eb4a013eda",
                "26572414-1115-45f2-ae2f-98109422032e",
                "b9a7215f-69ac-44ad-808d-01eb6ccadcf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 252,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "18225ecd-ab30-44c3-a947-e89d63a0a628",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.diamondFixture)();",
              "err": {},
              "uuid": "02aec7f6-d9a4-43fa-a1f8-e8ccd2a7f969",
              "parentUUID": "18225ecd-ab30-44c3-a947-e89d63a0a628",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "824257a9-2708-447a-a0a3-06b1657d757e",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 301,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hre.ethers.utils.id('kresko.test.operator');\nconst isTestOperator = await hre.Diamond.hasRole(TEST_OPERATOR_ROLE, hre.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await hre.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], hre.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(hre.addr.userOne);",
                  "err": {},
                  "uuid": "e11e4463-6901-485d-a36a-0a2b56a8a3d2",
                  "parentUUID": "824257a9-2708-447a-a0a3-06b1657d757e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 573,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: 'SmockFacet',\n    initializerName: 'SmockInit',\n    initializerArgs: hre.addr.userOne\n});\nconst facetsBefore = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: 'SmockFacet'\n});\nconst facetsAfter = await hre.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "5048bf40-aa1a-4d62-b1dd-a033255c4589",
                  "parentUUID": "824257a9-2708-447a-a0a3-06b1657d757e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.notAdmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hre.Diamond.facetAddress(signature);\nconst functions = await hre.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hre.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hre.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst contract = await hre.ethers.getContractAt('AuthEvent', hre.Diamond.address);\nconst filter = contract.filters.PendingOwnershipTransfer(hre.addr.deployer, correctOwner);\nconst [event] = await contract.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(hre.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.notAdmin).acceptOwnership()).to.be.reverted;",
                  "err": {},
                  "uuid": "2cdd8529-6227-47ae-93f1-3d41bde9fbdc",
                  "parentUUID": "824257a9-2708-447a-a0a3-06b1657d757e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(hre.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hre.addr.notAdmin;\nawait hre.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hre.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hre.Diamond.interface.functions['acceptOwnership()'];\nconst signature = hre.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hre.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hre.deploy('DiamondOwnershipFacet', {\n    deploymentName: 'DiamondOwnershipFacet2'\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hre.addr.userOne;\nconst initData = await hre.Diamond.populateTransaction.transferOwnership(correctOwner);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.notAdmin).acceptOwnership()).to.be.reverted;\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hre.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hre.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.userOne).acceptOwnership());\nconst currentOwner = await hre.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "b3ff7201-f24b-4cbc-8821-4664b8270ea6",
                  "parentUUID": "824257a9-2708-447a-a0a3-06b1657d757e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock('SmockInit');\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hre.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "0e0a763b-b84f-46b2-841f-6f7ef92fd01a",
                  "parentUUID": "824257a9-2708-447a-a0a3-06b1657d757e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 640,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock('SmockFacet');\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hre.deploy('SmockInit');\nconst signatures = hre.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hre.addr.userOne);\nawait hre.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await hre.ethers.getContractAt('SmockFacet', hre.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock('SmockFacet2');\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hre.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hre.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hre.ethers.getContractAt('SmockFacet2', hre.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "2e5381fe-0ed9-4fb3-8c42-822ebaeabee2",
                  "parentUUID": "824257a9-2708-447a-a0a3-06b1657d757e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e11e4463-6901-485d-a36a-0a2b56a8a3d2",
                "5048bf40-aa1a-4d62-b1dd-a033255c4589",
                "2cdd8529-6227-47ae-93f1-3d41bde9fbdc",
                "b3ff7201-f24b-4cbc-8821-4664b8270ea6",
                "0e0a763b-b84f-46b2-841f-6f7ef92fd01a",
                "2e5381fe-0ed9-4fb3-8c42-822ebaeabee2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2080,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d86fc2a9-9853-48d4-922b-036433e54e84",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/03-protocol.ts",
          "file": "/src/test/diamond/03-protocol.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _fixtures.defaultFixture)();",
              "err": {},
              "uuid": "f3c7d5d2-8986-4ea3-8b75-b8576fc70402",
              "parentUUID": "d86fc2a9-9853-48d4-922b-036433e54e84",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a7381ab3-dda4-43e5-8dff-49478ba1ddf1",
              "title": "#protocol initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/03-protocol.ts",
              "file": "/src/test/diamond/03-protocol.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initialized all facets",
                  "fullTitle": "Diamond #protocol initialization initialized all facets",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hre.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._deploy.minterFacets,\n    ..._deploy.diamondFacets,\n    ..._deploy.scdpFacets,\n    ..._deploy.commonFacets\n].map(async (name)=>{\n    const deployment = await hre.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "851c36f2-f89e-420a-b790-848ab514016d",
                  "parentUUID": "a7381ab3-dda4-43e5-8dff-49478ba1ddf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "initialized correct state",
                  "fullTitle": "Diamond #protocol initialization initialized correct state",
                  "timedOut": false,
                  "duration": 274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await hre.Diamond.getStorageVersion()).to.equal(4);\nconst { args } = await (0, _deploy.getCommonInitializer)(hre);\nconst { args: minterArgs } = await (0, _deploy.getMinterInitializer)(hre);\nconst { args: scdpArgs } = await (0, _deploy.getSCDPInitializer)(hre);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.hasRole(_roles.Role.SAFETY_COUNCIL, hre.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getFeeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await hre.Diamond.getMinCollateralRatio()).to.equal(minterArgs.minCollateralRatio);\nconst scdpParams = await hre.Diamond.getCurrentParametersSCDP();\n(0, _chai.expect)(scdpParams.minCollateralRatio).to.equal(scdpArgs.minCollateralRatio);\n(0, _chai.expect)(scdpParams.liquidationThreshold).to.equal(scdpArgs.liquidationThreshold);\n(0, _chai.expect)(scdpParams.swapFeeRecipient).to.equal(scdpArgs.swapFeeRecipient);\n(0, _chai.expect)(await hre.Diamond.getMinDebtValue()).to.equal(args.minDebtValue);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(args.oracleDeviationPct);",
                  "err": {},
                  "uuid": "d95196df-42f7-44ae-ad07-6bf7bca6718a",
                  "parentUUID": "a7381ab3-dda4-43e5-8dff-49478ba1ddf1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "851c36f2-f89e-420a-b790-848ab514016d",
                "d95196df-42f7-44ae-ad07-6bf7bca6718a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 352,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "11bcd63e-2acf-465b-b290-3bbd7dc8743b",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e635a86a-d2f5-4b5a-88f6-59b3672dedcd",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "00b15edd-d34d-4566-a5b4-d4623525ba8d",
                  "parentUUID": "e635a86a-d2f5-4b5a-88f6-59b3672dedcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "00b15edd-d34d-4566-a5b4-d4623525ba8d"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "01f5f10d-ca38-445f-a911-ce3c530e519e",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "26c2c044-d10e-42d9-947c-af71a800e3b4",
                  "parentUUID": "01f5f10d-ca38-445f-a911-ce3c530e519e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "26c2c044-d10e-42d9-947c-af71a800e3b4"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "14842eed-bb67-486e-a9b6-2c3244aaaa0f",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.kreskoAssetFixture)({\n    name,\n    symbol,\n    underlying: _lib.ZERO_ADDRESS\n});",
              "err": {},
              "uuid": "7713dbcd-1dca-4bba-997b-a6cd672dd8a1",
              "parentUUID": "14842eed-bb67-486e-a9b6-2c3244aaaa0f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a9664c2d-ddce-4417-ae4d-2258dc9dc324",
              "title": "KreskoAsset",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset KreskoAsset cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f003fc4d-a6b2-467c-8e7c-61c6e5a1351a",
                  "parentUUID": "a9664c2d-ddce-4417-ae4d-2258dc9dc324",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset KreskoAsset sets correct state",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await f.KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.default.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.default.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "7cd3180e-e2da-4bde-880b-5983ac6ccaa3",
                  "parentUUID": "a9664c2d-ddce-4417-ae4d-2258dc9dc324",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset KreskoAsset can reinitialize metadata",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "5b89c7c2-dae5-45e0-a476-523f17e5046d",
                  "parentUUID": "a9664c2d-ddce-4417-ae4d-2258dc9dc324",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a7e7ef5b-15ec-4df6-bdae-cdf0bbfdb47d",
                  "title": "#initialization - anchor",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
                  "file": "/src/test/krasset/00-init.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "cant initialize twice",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization - anchor cant initialize twice",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.KreskoAsset.initialize(name, symbol, 18, hre.addr.deployer, hre.Diamond.address, hre.ethers.constants.AddressZero, hre.addr.deployer, 0, 0)).to.be.reverted;",
                      "err": {},
                      "uuid": "183d96a7-302f-4236-98c7-eb8e7dc8a43f",
                      "parentUUID": "a7e7ef5b-15ec-4df6-bdae-cdf0bbfdb47d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cant initialize implementation",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization - anchor cant initialize implementation",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "0a714552-0cfe-416b-8e72-8b433ef99587",
                      "parentUUID": "a7e7ef5b-15ec-4df6-bdae-cdf0bbfdb47d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "sets correct state",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization - anchor sets correct state",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await f.KreskoAsset.kresko()).to.equal(hre.Diamond.address);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.default.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.hasRole(_roles.default.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                      "err": {},
                      "uuid": "e71a5a61-49fc-404e-a161-07a9bcd9cc3c",
                      "parentUUID": "a7e7ef5b-15ec-4df6-bdae-cdf0bbfdb47d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can reinitialize metadata",
                      "fullTitle": "KreskoAsset KreskoAsset #initialization - anchor can reinitialize metadata",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAsset.symbol()).to.equal(newSymbol);",
                      "err": {},
                      "uuid": "1a2a0744-f14c-417f-a480-d578c6425759",
                      "parentUUID": "a7e7ef5b-15ec-4df6-bdae-cdf0bbfdb47d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "183d96a7-302f-4236-98c7-eb8e7dc8a43f",
                    "e71a5a61-49fc-404e-a161-07a9bcd9cc3c",
                    "1a2a0744-f14c-417f-a480-d578c6425759"
                  ],
                  "failures": [],
                  "pending": [
                    "0a714552-0cfe-416b-8e72-8b433ef99587"
                  ],
                  "skipped": [],
                  "duration": 44,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "7cd3180e-e2da-4bde-880b-5983ac6ccaa3",
                "5b89c7c2-dae5-45e0-a476-523f17e5046d"
              ],
              "failures": [],
              "pending": [
                "f003fc4d-a6b2-467c-8e7c-61c6e5a1351a"
              ],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "514c69f5-e4c7-42bf-a5f1-92e748f4ce51",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(f.KreskoAssetAnchor.initialize(f.KreskoAsset.address, name, symbol, hre.addr.deployer)).to.be.reverted;",
                  "err": {},
                  "uuid": "11187fc2-6105-419a-9b4e-213b4126f0bf",
                  "parentUUID": "514c69f5-e4c7-42bf-a5f1-92e748f4ce51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(anchorName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(anchorSymbol);\n(0, _chai.expect)(await f.KreskoAssetAnchor.asset()).to.equal(f.KreskoAsset.address);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.default.ADMIN, hre.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.hasRole(_roles.default.OPERATOR, hre.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalSupply()).to.equal(0);\n(0, _chai.expect)(await f.KreskoAssetAnchor.totalAssets()).to.equal(await f.KreskoAsset.totalSupply());\nconst rebaseInfo = await f.KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "14779cfa-4c90-4f7d-a9eb-d49a9b213313",
                  "parentUUID": "514c69f5-e4c7-42bf-a5f1-92e748f4ce51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c757b9a4-6d2a-4bd1-9572-bed44c29ea1c",
                  "parentUUID": "514c69f5-e4c7-42bf-a5f1-92e748f4ce51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = 'foo';\nconst newSymbol = 'bar';\nawait (0, _chai.expect)(f.KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.reverted;\n(0, _chai.expect)(await f.KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await f.KreskoAssetAnchor.symbol()).to.equal(newSymbol);\nawait f.KreskoAssetAnchor.reinitializeERC20(name, symbol, 3);",
                  "err": {},
                  "uuid": "b27f7abb-0e1e-43a5-8544-c514652fb1ba",
                  "parentUUID": "514c69f5-e4c7-42bf-a5f1-92e748f4ce51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11187fc2-6105-419a-9b4e-213b4126f0bf",
                "14779cfa-4c90-4f7d-a9eb-d49a9b213313",
                "b27f7abb-0e1e-43a5-8544-c514652fb1ba"
              ],
              "failures": [],
              "pending": [
                "c757b9a4-6d2a-4bd1-9572-bed44c29ea1c"
              ],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "80f7cc71-20a0-4dd3-8952-b61d30e904e3",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH',\n    underlying: _lib.ZERO_ADDRESS\n}));\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_roles.default.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "a807af09-b2c6-4951-97f5-731f76aab449",
              "parentUUID": "80f7cc71-20a0-4dd3-8952-b61d30e904e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f753ec68-e608-4590-895f-6ee502ae4ac2",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "159e5675-0cae-4652-8bbd-3db393836724",
                  "parentUUID": "f753ec68-e608-4590-895f-6ee502ae4ac2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\nawait KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "b336e2cb-0688-4afc-a485-ce5a26dff3b4",
                  "parentUUID": "f753ec68-e608-4590-895f-6ee502ae4ac2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.reverted;\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "53f21201-2882-41e4-bc5a-3b1ec5b8731d",
                  "parentUUID": "f753ec68-e608-4590-895f-6ee502ae4ac2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.renounceRole(_roles.default.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).mint(this.owner.address, this.mintAmount)).to.be.reverted;",
                  "err": {},
                  "uuid": "fccc16c4-9539-4a88-aa84-65644041a19a",
                  "parentUUID": "f753ec68-e608-4590-895f-6ee502ae4ac2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "159e5675-0cae-4652-8bbd-3db393836724",
                "b336e2cb-0688-4afc-a485-ce5a26dff3b4",
                "53f21201-2882-41e4-bc5a-3b1ec5b8731d",
                "fccc16c4-9539-4a88-aa84-65644041a19a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6a71945f-a058-47dc-af52-df50dc9d4446",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).mint(hre.users.userOne.address, this.mintAmount);\nthis.owner = hre.users.deployer;\nthis.mintAmount = 125;\nawait KreskoAsset.grantRole(_roles.default.OPERATOR, this.owner.address);",
                  "err": {},
                  "uuid": "a7403a72-d9b3-4847-9962-adfb532cbc10",
                  "parentUUID": "6a71945f-a058-47dc-af52-df50dc9d4446",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "9a885dc8-6358-4b45-adbd-7d4e6ec97598",
                  "parentUUID": "6a71945f-a058-47dc-af52-df50dc9d4446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(this.owner).approve(hre.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);\nawait KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await KreskoAsset.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await KreskoAsset.allowance(this.owner.address, hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "4ca8a6a9-fa92-461f-9955-1ea77ecb15cc",
                  "parentUUID": "6a71945f-a058-47dc-af52-df50dc9d4446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await KreskoAsset.balanceOf(hre.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(KreskoAsset.connect(this.owner).burn(hre.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "f796570e-5b4c-4379-97c4-5fdaf3a0031f",
                  "parentUUID": "6a71945f-a058-47dc-af52-df50dc9d4446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.connect(hre.users.userTwo).burn(hre.users.userOne.address, this.mintAmount)).to.be.revertedWithCustomError(KreskoAsset, 'AccessControlUnauthorizedAccount').withArgs(hre.users.userTwo.address, _roles.default.OPERATOR);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "4ad763d0-b4ef-4cb2-b5d3-25458a70cf2b",
                  "parentUUID": "6a71945f-a058-47dc-af52-df50dc9d4446",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a885dc8-6358-4b45-adbd-7d4e6ec97598",
                "4ca8a6a9-fa92-461f-9955-1ea77ecb15cc",
                "f796570e-5b4c-4379-97c4-5fdaf3a0031f",
                "4ad763d0-b4ef-4cb2-b5d3-25458a70cf2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "90dbda8a-1086-44e2-9a77-75599e8027e5",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 310,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await hre.deployments.fixture('diamond-init');\nif (result.Diamond) {\n    hre.Diamond = (0, _redstone.wrapKresko)(await hre.getContractOrFork('Kresko'));\n}\nKreskoAsset = (await (0, _createkrasset.createKrAsset)('KreskoAsset', 'Kresko Asset', 18, _lib.ZERO_ADDRESS)).KreskoAsset;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_roles.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "f9c7a3b8-ba43-4f0e-bc7a-4436df3fba90",
              "parentUUID": "90dbda8a-1086-44e2-9a77-75599e8027e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ba7978e5-fb62-4cfc-a150-ffaa9a43eecb",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "45ba9a64-912a-4ba3-ba13-0b95fed101d0",
                  "parentUUID": "ba7978e5-fb62-4cfc-a150-ffaa9a43eecb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)('1.525');\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "4571b531-4273-415f-b9ba-7f555f7f1dc2",
                  "parentUUID": "ba7978e5-fb62-4cfc-a150-ffaa9a43eecb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _values.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "57dff88a-5376-4a6a-aa2a-858ce37a923b",
                  "parentUUID": "ba7978e5-fb62-4cfc-a150-ffaa9a43eecb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount);",
                      "err": {},
                      "uuid": "55c5324d-50b5-4a29-97e1-05974f35d095",
                      "parentUUID": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "c775e796-172d-4c14-824a-2e17083d7f9a",
                      "parentUUID": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "cb0fac00-9d98-4a8f-b437-41a5e984deff",
                      "parentUUID": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "08b95280-af84-4aa0-8465-f447b5cb7e40",
                      "parentUUID": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "f9381b49-ee1c-4e7e-89e4-1f9dfd1b1a42",
                      "parentUUID": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "3b28bddc-564a-4e4c-bec3-d4f74331edb5",
                      "parentUUID": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_mocks.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_mocks.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "f097d482-43ec-4f8b-b34c-9f8d5f64afef",
                      "parentUUID": "33307fab-3c73-4f1d-b1f4-86fd0d9f883b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "55c5324d-50b5-4a29-97e1-05974f35d095",
                    "c775e796-172d-4c14-824a-2e17083d7f9a",
                    "cb0fac00-9d98-4a8f-b437-41a5e984deff",
                    "08b95280-af84-4aa0-8465-f447b5cb7e40",
                    "f9381b49-ee1c-4e7e-89e4-1f9dfd1b1a42",
                    "3b28bddc-564a-4e4c-bec3-d4f74331edb5",
                    "f097d482-43ec-4f8b-b34c-9f8d5f64afef"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 101,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "2f1de7ed-5e94-4963-8450-a58efe827421",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "04108a59-ee48-4c12-9ce7-bebdf1107144",
                      "parentUUID": "2f1de7ed-5e94-4963-8450-a58efe827421",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "99d3a0db-de15-428b-ad52-fd9828e542b7",
                      "parentUUID": "2f1de7ed-5e94-4963-8450-a58efe827421",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "42332755-85dd-4d2e-94a6-4d4f833509c8",
                      "parentUUID": "2f1de7ed-5e94-4963-8450-a58efe827421",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "ad7514a3-ec4b-438c-a21f-2f6ac5d9a0cb",
                      "parentUUID": "2f1de7ed-5e94-4963-8450-a58efe827421",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "a19bad3e-3199-413c-b0d4-110dfd7202ba",
                      "parentUUID": "2f1de7ed-5e94-4963-8450-a58efe827421",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _values.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _mocks.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _values.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _mocks.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.reverted;\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "7c17737e-9af9-4632-a18e-03f069415a47",
                      "parentUUID": "2f1de7ed-5e94-4963-8450-a58efe827421",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "04108a59-ee48-4c12-9ce7-bebdf1107144",
                    "99d3a0db-de15-428b-ad52-fd9828e542b7",
                    "42332755-85dd-4d2e-94a6-4d4f833509c8",
                    "ad7514a3-ec4b-438c-a21f-2f6ac5d9a0cb",
                    "a19bad3e-3199-413c-b0d4-110dfd7202ba",
                    "7c17737e-9af9-4632-a18e-03f069415a47"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 197,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "45ba9a64-912a-4ba3-ba13-0b95fed101d0",
                "4571b531-4273-415f-b9ba-7f555f7f1dc2",
                "57dff88a-5376-4a6a-aa2a-858ce37a923b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b45e7491-efcd-4051-9346-44662ffd113c",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 322,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({ KreskoAsset, KreskoAssetAnchor } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Kresko Asset',\n    symbol: 'KreskoAsset',\n    underlying: _lib.ZERO_ADDRESS\n}));\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_roles.default.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_roles.default.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "fc09bc87-96de-4690-94ff-532e00b1f563",
              "parentUUID": "b45e7491-efcd-4051-9346-44662ffd113c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2875c974-3a5a-4ef1-8ee4-0b73f328fe71",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _mocks.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_mocks.defaultMintAmount.add(_mocks.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "80adfc2e-10a3-43e3-87b0-4df8ea3fe4a0",
                  "parentUUID": "2875c974-3a5a-4ef1-8ee4-0b73f328fe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ad8c16ed-0235-44c3-ba5b-3735f50fc121",
                  "parentUUID": "2875c974-3a5a-4ef1-8ee4-0b73f328fe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "975d255a-cb81-4012-ad8c-6d7b10025f2a",
                  "parentUUID": "2875c974-3a5a-4ef1-8ee4-0b73f328fe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "62a2a07c-632d-4595-8f02-fd37d5085363",
                  "parentUUID": "2875c974-3a5a-4ef1-8ee4-0b73f328fe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7e474cb3-7c16-4154-99a3-a1fe97d658ac",
                  "parentUUID": "2875c974-3a5a-4ef1-8ee4-0b73f328fe71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "fdefe2db-bdbc-418f-9a6c-e94f66cc186b",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "df432f95-e04e-4338-be46-de842565539e",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "2d6fe1f6-d819-466e-8033-c9d6ef80d151",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "22f56145-e224-41dc-b7d0-f7ea31a3df85",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cf48ce2d-a2bf-4c92-bcc1-035392137cd6",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6be3bb54-1b9f-4b5f-bc98-f42827065623",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "e2d6bb8b-4c23-47c8-9265-689e1d8dc56a",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b78e7bcd-e597-4e46-9ff5-a69d7195dcea",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d53fe9d7-cf92-4d12-80b1-ec95bdf32107",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c9e4419a-1882-45cb-8030-24f6ac3b1520",
                          "parentUUID": "df432f95-e04e-4338-be46-de842565539e",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "2d6fe1f6-d819-466e-8033-c9d6ef80d151",
                        "22f56145-e224-41dc-b7d0-f7ea31a3df85",
                        "cf48ce2d-a2bf-4c92-bcc1-035392137cd6",
                        "6be3bb54-1b9f-4b5f-bc98-f42827065623",
                        "e2d6bb8b-4c23-47c8-9265-689e1d8dc56a",
                        "b78e7bcd-e597-4e46-9ff5-a69d7195dcea",
                        "d53fe9d7-cf92-4d12-80b1-ec95bdf32107",
                        "c9e4419a-1882-45cb-8030-24f6ac3b1520"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [
                "80adfc2e-10a3-43e3-87b0-4df8ea3fe4a0"
              ],
              "failures": [],
              "pending": [
                "ad8c16ed-0235-44c3-ba5b-3735f50fc121",
                "975d255a-cb81-4012-ad8c-6d7b10025f2a",
                "62a2a07c-632d-4595-8f02-fd37d5085363",
                "7e474cb3-7c16-4154-99a3-a1fe97d658ac"
              ],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "ceea9a35-2727-4986-ac4e-d2d9147c5458",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d7bf101e-f396-481e-9c7d-a2c0d41dc5e6",
              "parentUUID": "ceea9a35-2727-4986-ac4e-d2d9147c5458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b51e5a17-bbfa-4ca2-bfaf-91f80b217bd5",
              "parentUUID": "ceea9a35-2727-4986-ac4e-d2d9147c5458",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "d7bf101e-f396-481e-9c7d-a2c0d41dc5e6",
            "b51e5a17-bbfa-4ca2-bfaf-91f80b217bd5"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "cf7c4b66-fef6-4e38-889a-86263207f23e",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
          "file": "/src/test/krasset/05-krasset-wrap.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "operator = hre.users.deployer;\nuser = hre.users.userOne;\ntreasury = hre.addr.treasury;\n({ KreskoAsset } = await (0, _fixtures.kreskoAssetFixture)({\n    name: 'Ether',\n    symbol: 'krETH'\n}));\n// Deploy WETH\nWETH = await hre.ethers.deployContract('WETH9');\n// Give WETH to deployer\nawait WETH.connect(user).deposit({\n    value: (0, _values.toBig)(100)\n});\nawait KreskoAsset.connect(hre.users.deployer).grantRole(_roles.default.OPERATOR, operator.address);\nawait KreskoAsset.connect(hre.users.deployer).setUnderlying(WETH.address);\n// Approve WETH for KreskoAsset\nawait WETH.connect(user).approve(KreskoAsset.address, hre.ethers.constants.MaxUint256);",
              "err": {},
              "uuid": "54f0d3f6-df08-43fe-958e-d4c35b319004",
              "parentUUID": "cf7c4b66-fef6-4e38-889a-86263207f23e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c578dc51-be82-440c-9cbc-7d3a0645cff9",
              "title": "Deposit / Wrap",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
              "file": "/src/test/krasset/05-krasset-wrap.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot deposit when paused",
                  "fullTitle": "KreskoAsset Deposit / Wrap cannot deposit when paused",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).pause();\nawait (0, _chai.expect)(KreskoAsset.wrap(user.address, (0, _values.toBig)(10))).to.be.revertedWithCustomError(KreskoAsset, 'EnforcedPause');\nawait KreskoAsset.connect(operator).unpause();",
                  "err": {},
                  "uuid": "2abfb3d9-c47e-4574-a76a-a3e1d538f4b0",
                  "parentUUID": "c578dc51-be82-440c-9cbc-7d3a0645cff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can deposit with token",
                  "fullTitle": "KreskoAsset Deposit / Wrap can deposit with token",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\n(0, _chai.expect)(await KreskoAsset.balanceOf(user.address)).to.equal((0, _values.toBig)(10));",
                  "err": {},
                  "uuid": "d3936fa6-b373-41fe-a76c-4dd3825136d8",
                  "parentUUID": "c578dc51-be82-440c-9cbc-7d3a0645cff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot deposit native token if not enabled",
                  "fullTitle": "KreskoAsset Deposit / Wrap cannot deposit native token if not enabled",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n})).to.be.reverted;",
                  "err": {},
                  "uuid": "3c6e3b85-07e0-4704-ba6a-1658e9f017bc",
                  "parentUUID": "c578dc51-be82-440c-9cbc-7d3a0645cff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can deposit native token if enabled",
                  "fullTitle": "KreskoAsset Deposit / Wrap can deposit native token if enabled",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).enableNativeUnderlying(true);\nconst prevBalance = await KreskoAsset.balanceOf(user.address);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\nconst currentBalance = await KreskoAsset.balanceOf(user.address);\n(0, _chai.expect)(currentBalance.sub(prevBalance)).to.equal((0, _values.toBig)(10));",
                  "err": {},
                  "uuid": "dcaa95b7-0fb7-4f0f-8115-85498d163273",
                  "parentUUID": "c578dc51-be82-440c-9cbc-7d3a0645cff9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "transfers the correct fees to feeRecipient",
                  "fullTitle": "KreskoAsset Deposit / Wrap transfers the correct fees to feeRecipient",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).setOpenFee(0.1e4);\nawait KreskoAsset.connect(operator).enableNativeUnderlying(true);\nlet prevBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst treasuryWETHBal = await WETH.balanceOf(treasury);\nawait KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\nlet currentBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst currentWETHBalanceTreasury = await WETH.balanceOf(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(9));\n(0, _chai.expect)(currentWETHBalanceTreasury.sub(treasuryWETHBal)).to.equal((0, _values.toBig)(1));\nprevBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst prevBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\ncurrentBalanceDevOne = await KreskoAsset.balanceOf(user.address);\nconst currentBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(9));\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(1));\n// Set openfee to 0\nawait KreskoAsset.connect(operator).setOpenFee(0);",
                  "err": {},
                  "uuid": "902c56da-ee89-42dc-8956-d09a2c3916bb",
                  "parentUUID": "c578dc51-be82-440c-9cbc-7d3a0645cff9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2abfb3d9-c47e-4574-a76a-a3e1d538f4b0",
                "d3936fa6-b373-41fe-a76c-4dd3825136d8",
                "3c6e3b85-07e0-4704-ba6a-1658e9f017bc",
                "dcaa95b7-0fb7-4f0f-8115-85498d163273",
                "902c56da-ee89-42dc-8956-d09a2c3916bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 234,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "60526051-084f-4e6c-914b-34b0d4c479c2",
              "title": "Withdraw / Unwrap",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/05-krasset-wrap.ts",
              "file": "/src/test/krasset/05-krasset-wrap.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Withdraw / Unwrap\"",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap \"before each\" hook in \"Withdraw / Unwrap\"",
                  "timedOut": false,
                  "duration": 98,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Deposit some tokens here\nawait KreskoAsset.connect(user).wrap(user.address, (0, _values.toBig)(10));\nawait KreskoAsset.connect(operator).enableNativeUnderlying(true);\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(100)\n});",
                  "err": {},
                  "uuid": "1b9efd3d-2d93-4142-869e-1ab1f7744023",
                  "parentUUID": "60526051-084f-4e6c-914b-34b0d4c479c2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot withdraw when paused",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap cannot withdraw when paused",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).pause();\nawait (0, _chai.expect)(KreskoAsset.unwrap((0, _values.toBig)(1), false)).to.be.revertedWithCustomError(KreskoAsset, 'EnforcedPause');\nawait KreskoAsset.connect(operator).unpause();",
                  "err": {},
                  "uuid": "ca33d3b3-e8f1-4ef5-b4bc-1ee7365dcabb",
                  "parentUUID": "60526051-084f-4e6c-914b-34b0d4c479c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can withdraw",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap can withdraw",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prevBalance = await WETH.balanceOf(user.address);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(1), false);\nconst currentBalance = await WETH.balanceOf(user.address);\n(0, _chai.expect)(currentBalance).to.equal((0, _values.toBig)(1).add(prevBalance));",
                  "err": {},
                  "uuid": "b7a6652b-f5b8-4bc4-864a-400a5fd7c8f3",
                  "parentUUID": "60526051-084f-4e6c-914b-34b0d4c479c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can withdraw native token if enabled",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap can withdraw native token if enabled",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.connect(operator).enableNativeUnderlying(true);\nconst prevBalance = await KreskoAsset.balanceOf(user.address);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(1), true);\nconst currentBalance = await KreskoAsset.balanceOf(user.address);\n(0, _chai.expect)(prevBalance.sub(currentBalance)).to.equal((0, _values.toBig)(1));",
                  "err": {},
                  "uuid": "13affd77-7d0a-4f38-9412-56eff676ee7c",
                  "parentUUID": "60526051-084f-4e6c-914b-34b0d4c479c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "transfers the correct fees to feeRecipient",
                  "fullTitle": "KreskoAsset Withdraw / Unwrap transfers the correct fees to feeRecipient",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// set close fee to 10%\nawait KreskoAsset.connect(operator).setCloseFee(0.1e4);\nconst prevBalanceDevOne = await WETH.balanceOf(user.address);\nlet prevBalanceTreasury = await WETH.balanceOf(treasury);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(9), false);\nconst currentBalanceDevOne = await WETH.balanceOf(user.address);\nlet currentBalanceTreasury = await WETH.balanceOf(treasury);\n(0, _chai.expect)(currentBalanceDevOne.sub(prevBalanceDevOne)).to.equal((0, _values.toBig)(8.1));\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(0.9));\n// Withdraw native token and check if fee is transferred\nawait user.sendTransaction({\n    to: KreskoAsset.address,\n    value: (0, _values.toBig)(10)\n});\nprevBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\nawait KreskoAsset.connect(user).unwrap((0, _values.toBig)(9), true);\ncurrentBalanceTreasury = await hre.ethers.provider.getBalance(treasury);\n(0, _chai.expect)(currentBalanceTreasury.sub(prevBalanceTreasury)).to.equal((0, _values.toBig)(0.9));",
                  "err": {},
                  "uuid": "0e1d079b-5295-4ddf-be04-86b84b7b1ff3",
                  "parentUUID": "60526051-084f-4e6c-914b-34b0d4c479c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca33d3b3-e8f1-4ef5-b4bc-1ee7365dcabb",
                "b7a6652b-f5b8-4bc4-864a-400a5fd7c8f3",
                "13affd77-7d0a-4f38-9412-56eff676ee7c",
                "0e1d079b-5295-4ddf-be04-86b84b7b1ff3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 174,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "63db21d9-b6d9-4cfa-acda-3fd5307592c2",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();",
              "err": {},
              "uuid": "0dc529f0-acb7-49ae-a159-06ebf6f3bb86",
              "parentUUID": "63db21d9-b6d9-4cfa-acda-3fd5307592c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 388,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = (0, _mocks.testMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(hre.Diamond.updateMinCollateralRatio(update.minCollateralRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(update.MLR)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(0.05e4)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateSequencerGracePeriodTime(1000)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateExtOracleDecimals(2)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMinDebtValue(20e8)).to.not.be.reverted;\nconst { minCollateralRatio, maxLiquidationRatio, liquidationThreshold } = await hre.Diamond.getMinterParameters();\n(0, _chai.expect)(await hre.Diamond.getMinDebtValue()).to.equal(20e8);\n(0, _chai.expect)(await hre.Diamond.getExtOracleDecimals()).to.equal(2);\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(0.05e4);\n(0, _chai.expect)(update.minCollateralRatio).to.equal(minCollateralRatio);\n(0, _chai.expect)(update.MLR).to.equal(maxLiquidationRatio);\n(0, _chai.expect)(update.liquidationThreshold).to.equal(liquidationThreshold);",
                  "err": {},
                  "uuid": "fd9027e6-c1a6-409e-a39a-faed58ff01ce",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 550,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, _collaterals.addMockExtAsset)(_mocks.testCollateralConfig);\n(0, _chai.expect)(await hre.Diamond.getCollateralExists(contract.address)).to.equal(true);\nconst priceOfOne = await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1));\n(0, _chai.expect)(Number(priceOfOne)).to.equal((0, _values.toBig)(_mocks.testCollateralConfig.price, 8));",
                  "err": {},
                  "uuid": "aff9db0f-c4cd-4d44-a7db-125ac832823d",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 896,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, assetInfo } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await assetInfo();\nconst kreskoPriceAnswer = (0, _values.fromBig)(await hre.Diamond.getValue(contract.address, (0, _values.toBig)(1)), 8);\nconst config = _mocks.testKrAssetConfig.krAssetConfig;\n(0, _chai.expect)(values.isKrAsset).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal(config.kFactor);\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_mocks.testKrAssetConfig.price);\n(0, _chai.expect)(values.supplyLimit).to.equal(config.supplyLimit);\n(0, _chai.expect)(values.closeFee).to.equal(config.closeFee);\n(0, _chai.expect)(values.openFee).to.equal(config.openFee);",
                  "err": {},
                  "uuid": "ec5d670a-f7b8-4aeb-b530-d57b9380cffd",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.getExtOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "fe4cf4e3-9e7f-4998-9a05-14ce7b125b3f",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidation ratio",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidation ratio",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.getMaxLiquidationRatio();\nconst newMLR = 1.42e4;\n(0, _chai.expect)(currentMLM).to.not.eq(newMLR);\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationRatio(newMLR)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getMaxLiquidationRatio()).to.eq(newMLR);",
                  "err": {},
                  "uuid": "b77437ab-bc18-4d7f-8154-93599f0a336e",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update oracle deviation pct",
                  "fullTitle": "Minter - Configuration #configuration can update oracle deviation pct",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentDeviationPct = await hre.Diamond.getOracleDeviationPct();\nconst newDeviationPct = 0.03e4;\n(0, _chai.expect)(currentDeviationPct).to.not.equal(newDeviationPct);\nawait (0, _chai.expect)(hre.Diamond.updateOracleDeviationPct(newDeviationPct)).to.not.be.reverted;\n(0, _chai.expect)(await hre.Diamond.getOracleDeviationPct()).to.equal(newDeviationPct);",
                  "err": {},
                  "uuid": "a3259825-7d14-4e21-b244-559de102bdb9",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.KrAsset.address)).kFactor;\nconst newRatio = 1.2e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(f.KrAsset.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.KrAsset.address)).kFactor === newRatio).to.be.true;",
                  "err": {},
                  "uuid": "ac222a0e-01a4-44f3-840a-13cc747c5a38",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oldRatio = (await hre.Diamond.getAsset(f.Collateral.address)).factor;\nconst newRatio = 0.9e4;\n(0, _chai.expect)(oldRatio === newRatio).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCollateralFactor(f.Collateral.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.getAsset(f.Collateral.address)).factor === newRatio).to.be.true;",
                  "err": {},
                  "uuid": "838986af-8c3f-433a-b088-76ea59db78f3",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 439,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const oracleAnswer = (0, _values.fromBig)((await f.KrAsset.priceFeed.latestRoundData())[1], 8);\nconst priceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(priceOfOne);\n(0, _chai.expect)(oracleAnswer).to.equal(_mocks.testKrAssetConfig.price);\nconst update = {\n    kFactor: 1.2e4,\n    supplyLimit: (0, _values.toBig)(12000),\n    closeFee: 0.03e4,\n    openFee: 0.03e4,\n    anchor: f.KrAsset.anchor.address\n};\nconst FakeFeed = await (0, _oracle.getFakeOracle)(20);\nconst newConfig = await (0, _general.getAssetConfig)(f.KrAsset.contract, {\n    ..._mocks.testKrAssetConfig,\n    feed: FakeFeed.address,\n    price: 20,\n    krAssetConfig: update\n});\nawait hre.Diamond.updateFeeds(newConfig.assetStruct.underlyingId, newConfig.feedConfig);\nawait (0, _general.wrapContractWithSigner)(hre.Diamond, hre.users.deployer).updateAsset(f.KrAsset.address, newConfig.assetStruct);\nconst newValues = await hre.Diamond.getAsset(f.KrAsset.address);\nconst updatedOracleAnswer = (0, _values.fromBig)((await FakeFeed.latestRoundData())[1], 8);\nconst newPriceOfOne = (0, _values.fromBig)(await hre.Diamond.getValue(f.KrAsset.address, (0, _values.toBig)(1)), 8);\n(0, _chai.expect)(newValues.isKrAsset).to.equal(true);\n(0, _chai.expect)(newValues.isCollateral).to.equal(false);\n(0, _chai.expect)(newValues.kFactor).to.equal(update.kFactor);\n(0, _chai.expect)(newValues.supplyLimit).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newPriceOfOne);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(20);\nconst update2 = {\n    ...await hre.Diamond.getAsset(f.KrAsset.address),\n    kFactor: 1.75e4,\n    supplyLimit: (0, _values.toBig)(12000),\n    closeFee: 0.052e4,\n    openFee: 0.052e4,\n    isSCDPKrAsset: true,\n    swapInFeeSCDP: 0.052e4,\n    liqIncentiveSCDP: 1.1e4,\n    anchor: f.KrAsset.anchor.address\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update2);\nconst newValues2 = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(newValues2.isKrAsset).to.equal(true);\n(0, _chai.expect)(newValues2.isSCDPCollateral).to.equal(true);\n(0, _chai.expect)(newValues2.isCollateral).to.equal(false);\n(0, _chai.expect)(newValues2.isSCDPDepositAsset).to.equal(false);\n(0, _chai.expect)(newValues2.isSCDPCoverAsset).to.equal(false);\n(0, _chai.expect)(newValues2.kFactor).to.equal(update2.kFactor);\n(0, _chai.expect)(newValues2.openFee).to.equal(update2.closeFee);\n(0, _chai.expect)(newValues2.closeFee).to.equal(update2.openFee);\n(0, _chai.expect)(newValues2.swapInFeeSCDP).to.equal(update2.swapInFeeSCDP);\n(0, _chai.expect)(newValues2.supplyLimit).to.equal(update2.supplyLimit);",
                  "err": {},
                  "uuid": "17ecd551-b1c9-478e-8ccb-12bbf0ffdadf",
                  "parentUUID": "d1f246f8-2ad0-41c1-ba5b-a636620eacbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd9027e6-c1a6-409e-a39a-faed58ff01ce",
                "aff9db0f-c4cd-4d44-a7db-125ac832823d",
                "ec5d670a-f7b8-4aeb-b530-d57b9380cffd",
                "fe4cf4e3-9e7f-4998-9a05-14ce7b125b3f",
                "b77437ab-bc18-4d7f-8154-93599f0a336e",
                "a3259825-7d14-4e21-b244-559de102bdb9",
                "ac222a0e-01a4-44f3-840a-13cc747c5a38",
                "838986af-8c3f-433a-b088-76ea59db78f3",
                "17ecd551-b1c9-478e-8ccb-12bbf0ffdadf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2774,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "d02a7af1-d550-4751-8029-50ad0d0a5b05",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.depositWithdrawFixture)();\n[[user, User], [depositor, Depositor], [withdrawer, Withdrawer]] = f.users;",
              "err": {},
              "uuid": "c5b43a09-7837-4798-8a1b-76c55c863ed6",
              "parentUUID": "d02a7af1-d550-4751-8029-50ad0d0a5b05",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a86e3b7e-df4c-4175-aa22-344536291629",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts withdraws of krAsset collateral when deposits go below MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 115,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nconst depositAmount = collateralAmount.div(2);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Rebase the asset according to params\nconst denominator = 4;\nconst positive = true;\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst rebasedDepositAmount = depositAmount.mul(denominator);\nconst withdrawAmount = rebasedDepositAmount.sub(9e11.toString());\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAssets(user.address)).to.include(f.KrAssetCollateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(user.address, f.KrAssetCollateral.address, withdrawAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_VALUE_LOW');",
                      "err": {},
                      "uuid": "68390e48-c214-4a85-9139-34ef0571c12b",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit reverts deposits of krAsset collateral for less than MIN_KRASSET_COLLATERAL_AMOUNT",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmount = (0, _values.toBig)(100);\nawait f.KrAssetCollateral.setBalance(user, collateralAmount, _hardhat.default.Diamond.address);\nawait (0, _chai.expect)(User.depositCollateral(user.address, f.KrAssetCollateral.address, 9e11.toString())).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_VALUE_LOW');",
                      "err": {},
                      "uuid": "11d401ee-a622-448a-8108-9d1d5aef3847",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Account has deposit entry\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralAmount(depositor.address, f.Collateral.address)).to.equal(f.initialDeposits);\n// Kresko's balance has increased\n(0, _chai.expect)(await f.Collateral.balanceOf(_hardhat.default.Diamond.address)).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Account's balance has decreased\n(0, _chai.expect)((0, _values.fromBig)(await f.Collateral.balanceOf(depositor.address))).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "8e3acce7-faa0-4739-b897-eec60f197d33",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 138,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral, from depositor -> user.\nawait (0, _chai.expect)(Depositor.depositCollateral(user.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.add(f.initialDeposits));\n// Confirm the depositor's wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await f.Collateral.balanceOf(depositor.address);\n(0, _chai.expect)((0, _values.fromBig)(depositorBalanceAfter)).to.equal((0, _values.fromBig)(f.initialBalance) - (0, _values.fromBig)(f.initialDeposits));",
                      "err": {},
                      "uuid": "64637cd9-905a-463a-8c5a-328b3548b317",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 134,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(depositor.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.add(f.initialDeposits));",
                      "err": {},
                      "uuid": "3db8ef99-495b-424d-8dd7-5aa322792031",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 102,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nawait f.Collateral2.setBalance(depositor, f.initialBalance, _hardhat.default.Diamond.address);\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral2.address, f.initialDeposits)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getAccountCollateralAssets(depositor.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    f.Collateral.address,\n    f.Collateral2.address\n]);",
                      "err": {},
                      "uuid": "95a5f4e0-5e33-44dc-b74f-923caa59beaf",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await Depositor.depositCollateral(depositor.address, f.Collateral.address, f.initialDeposits);\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralDeposited');\n(0, _chai.expect)(event.account).to.equal(depositor.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                      "err": {},
                      "uuid": "6282cf82-679a-4e98-8714-d2912afe5ff9",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 31,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, '0x0000000000000000000000000000000000000001', f.initialDeposits)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_DOES_NOT_EXIST').withArgs('0x0000000000000000000000000000000000000001');",
                      "err": {},
                      "uuid": "6986f7a9-979d-4dfc-80a8-09ab9a8cec79",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(Depositor.depositCollateral(depositor.address, f.Collateral.address, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'ZERO_DEPOSIT').withArgs(f.Collateral.address);",
                      "err": {},
                      "uuid": "f90cf6b3-edb6-44ac-8bc8-1de09205063f",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devOne, extOne } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devOne,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)((0, _redstone.wrapKresko)(_hardhat.default.Diamond, depositor).depositCollateral(depositor.address, f.Collateral.contract.address, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'ACTION_PAUSED_FOR_ASSET');",
                      "err": {},
                      "uuid": "e163df51-ba88-4ab6-abfe-ce9e889814a9",
                      "parentUUID": "91bb44ef-b36c-49a6-aef5-5f0c6abbc367",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "68390e48-c214-4a85-9139-34ef0571c12b",
                    "11d401ee-a622-448a-8108-9d1d5aef3847",
                    "8e3acce7-faa0-4739-b897-eec60f197d33",
                    "64637cd9-905a-463a-8c5a-328b3548b317",
                    "3db8ef99-495b-424d-8dd7-5aa322792031",
                    "95a5f4e0-5e33-44dc-b74f-923caa59beaf",
                    "6282cf82-679a-4e98-8714-d2912afe5ff9",
                    "6986f7a9-979d-4dfc-80a8-09ab9a8cec79",
                    "f90cf6b3-edb6-44ac-8bc8-1de09205063f",
                    "e163df51-ba88-4ab6-abfe-ce9e889814a9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 850,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "d68edace-b6ed-45d6-bf20-0127ea7a247a",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "3c52d2d8-3872-4424-bc4d-f0fc855b0645",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 137,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "091e8920-54c7-4f45-a23e-c4e6065f2d12",
                          "parentUUID": "3c52d2d8-3872-4424-bc4d-f0fc855b0645",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 136,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst userOneBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(userOneBalance).to.equal(f.initialDeposits.sub(amountDeposited));",
                          "err": {},
                          "uuid": "7ee3e691-312c-4632-838e-20f9db7d266a",
                          "parentUUID": "3c52d2d8-3872-4424-bc4d-f0fc855b0645",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 173,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.grantRole(_roles.default.MANAGER, user.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_roles.default.MANAGER, user.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nawait (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(f.initialDeposits));",
                          "err": {},
                          "uuid": "5e580557-5201-4393-b1da-fc25ecd371b6",
                          "parentUUID": "3c52d2d8-3872-4424-bc4d-f0fc855b0645",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 36,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialDeposits, 0);\nconst event = await (0, _events.getInternalEvent)(tx, _hardhat.default.Diamond, 'CollateralWithdrawn');\n(0, _chai.expect)(event.account).to.equal(withdrawer.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialDeposits);",
                          "err": {},
                          "uuid": "b45c547c-20d0-40a6-a711-6074f58780b6",
                          "parentUUID": "3c52d2d8-3872-4424-bc4d-f0fc855b0645",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 50,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(User.withdrawCollateral(withdrawer.address, f.Collateral.address, f.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${user.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "a2c2d76d-dbfa-4c56-adb1-aebde3c9651a",
                          "parentUUID": "3c52d2d8-3872-4424-bc4d-f0fc855b0645",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "ca3b92f7-5cd9-4067-96f0-32915c512b21",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 213,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne mints some kr assets\nthis.mintAmount = (0, _values.toBig)(100);\nawait Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _optimizations.default.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _optimizations.default.getMinCollateralRatio();",
                              "err": {},
                              "uuid": "9215809a-86cd-489a-81aa-1666b859a17c",
                              "parentUUID": "ca3b92f7-5cd9-4067-96f0-32915c512b21",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 514,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _values.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst [accMinCollateralValue, accCollateralValue, withdrawnCollateralValue] = await Promise.all([\n    _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr),\n    _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address),\n    _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount)\n]);\n(0, _chai.expect)(accCollateralValue.sub(withdrawnCollateralValue).gte(accMinCollateralValue)).to.be.true;\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getAccountCollateralAssets(withdrawer.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    f.Collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(f.initialDeposits.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await f.Collateral.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(f.initialDeposits.sub(withdrawAmount));\nconst withdrawerBalance = await f.Collateral.balanceOf(withdrawer.address);\n(0, _chai.expect)(withdrawerBalance).to.equal(withdrawAmount);\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "d0cc0ff7-6640-4de8-9b5f-73845e5ba9d5",
                              "parentUUID": "ca3b92f7-5cd9-4067-96f0-32915c512b21",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 109,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const randomUser = _hardhat.default.users.userFour;\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(0));\nawait f.Collateral.setBalance(randomUser, (0, _values.toBig)(1000));\nawait f.Collateral.contract.connect(randomUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1000),\n    user: randomUser\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(1010),\n    user: randomUser\n});\n(0, _chai.expect)(await f.Collateral.balanceOf(randomUser.address)).to.equal((0, _values.toBig)(1000));",
                              "err": {},
                              "uuid": "200b16e9-7ba3-4d1d-965a-b3d89adc1173",
                              "parentUUID": "ca3b92f7-5cd9-4067-96f0-32915c512b21",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 35,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, 0, withdrawAmount)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'ZERO_AMOUNT').withArgs(f.Collateral.address);",
                              "err": {},
                              "uuid": "779bdc88-00ba-4dc8-98ac-5f16fbdb1bab",
                              "parentUUID": "ca3b92f7-5cd9-4067-96f0-32915c512b21",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 285,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = f.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinCollateralAtRatio(withdrawer.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\nconst withdrawnCollateralValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'COLLATERAL_VALUE_LOW').withArgs(0, 150000000000);",
                              "err": {},
                              "uuid": "b667a4c1-6ed2-43f0-84c5-c197c61ff1d6",
                              "parentUUID": "ca3b92f7-5cd9-4067-96f0-32915c512b21",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 30,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = f.initialDeposits.div(2);\nawait (0, _chai.expect)(Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, 1)).to.be.revertedWithCustomError((0, _errors.CError)(_hardhat.default), 'INVALID_ASSET_INDEX').withArgs(f.Collateral.address, 1, 0);",
                              "err": {},
                              "uuid": "220d7275-ba51-4cd4-8c26-2308356fadab",
                              "parentUUID": "ca3b92f7-5cd9-4067-96f0-32915c512b21",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "d0cc0ff7-6640-4de8-9b5f-73845e5ba9d5",
                            "200b16e9-7ba3-4d1d-965a-b3d89adc1173",
                            "779bdc88-00ba-4dc8-98ac-5f16fbdb1bab",
                            "b667a4c1-6ed2-43f0-84c5-c197c61ff1d6",
                            "220d7275-ba51-4cd4-8c26-2308356fadab"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 973,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 30000
                        }
                      ],
                      "passes": [
                        "091e8920-54c7-4f45-a23e-c4e6065f2d12",
                        "7ee3e691-312c-4632-838e-20f9db7d266a",
                        "5e580557-5201-4393-b1da-fc25ecd371b6",
                        "b45c547c-20d0-40a6-a711-6074f58780b6",
                        "a2c2d76d-dbfa-4c56-adb1-aebde3c9651a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 532,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "4c5faa6e-a32e-4b68-b8e4-5169fd756440",
                  "title": "#deposit - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase \"before each\" hook in \"#deposit - rebase\"",
                      "timedOut": false,
                      "duration": 227,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.Collateral.setBalance(user, f.initialBalance, _hardhat.default.Diamond.address);\n// Add krAsset as a collateral with anchor and cFactor of 1\n// Allowance for Kresko\nawait f.KrAssetCollateral.contract.setVariable('_allowances', {\n    [user.address]: {\n        [_hardhat.default.Diamond.address]: _hardhat.default.ethers.constants.MaxInt256\n    }\n});\n// Deposit some collateral\nawait User.depositCollateral(user.address, f.Collateral.address, f.initialDeposits);\n// Mint some krAssets\nawait User.mintKreskoAsset(user.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await User.getAccountDebtAmount(user.address, f.KrAssetCollateral.address);",
                      "err": {},
                      "uuid": "7555bd91-9bae-4d6c-90e1-5050597136b7",
                      "parentUUID": "4c5faa6e-a32e-4b68-b8e4-5169fd756440",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "bc65f603-35a0-4404-8b08-509d3f002f54",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 118,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(expectedDepositsAfter);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "a501663f-f9fc-4009-9ff4-70361035c4ae",
                          "parentUUID": "bc65f603-35a0-4404-8b08-509d3f002f54",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 118,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "f64435b0-1b8f-4aa1-840f-ea975950c2e5",
                          "parentUUID": "bc65f603-35a0-4404-8b08-509d3f002f54",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 114,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "e2d8a839-85d9-4ead-8bd6-99257c87f3b4",
                          "parentUUID": "bc65f603-35a0-4404-8b08-509d3f002f54",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 114,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.equal(depositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "78206d80-58e1-4cd5-97f5-363d4c86b738",
                          "parentUUID": "bc65f603-35a0-4404-8b08-509d3f002f54",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 155,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "36fa2c3c-68f9-429b-80e1-326dfc601cf2",
                          "parentUUID": "bc65f603-35a0-4404-8b08-509d3f002f54",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 160,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.equal(halfDepositAfterRebase);\n// Deposit second time\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(user.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalDeposits).to.equal(fullDepositAmount);\n(0, _chai.expect)(await f.KrAssetCollateral.balanceOf(user.address)).to.equal(0);",
                          "err": {},
                          "uuid": "79530167-5785-45cc-b8e1-2dc18d95519b",
                          "parentUUID": "bc65f603-35a0-4404-8b08-509d3f002f54",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a501663f-f9fc-4009-9ff4-70361035c4ae",
                        "f64435b0-1b8f-4aa1-840f-ea975950c2e5",
                        "e2d8a839-85d9-4ead-8bd6-99257c87f3b4",
                        "78206d80-58e1-4cd5-97f5-363d4c86b738",
                        "36fa2c3c-68f9-429b-80e1-326dfc601cf2",
                        "79530167-5785-45cc-b8e1-2dc18d95519b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 779,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "023ed46f-7cac-40e0-b3f1-03477c6e74c5",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 270,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "10b2144f-2be4-412e-809a-c6a773c2091f",
                          "parentUUID": "023ed46f-7cac-40e0-b3f1-03477c6e74c5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 271,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await User.depositCollateral(user.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nf.KrAssetCollateral.setPrice(newPrice);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountTotalCollateralValue(user.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "20f97669-f9a0-43db-9caf-fb1ae803bbc0",
                          "parentUUID": "023ed46f-7cac-40e0-b3f1-03477c6e74c5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 304,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "3dc4f63f-f6b7-4203-9cdc-f45d65d5ac51",
                          "parentUUID": "023ed46f-7cac-40e0-b3f1-03477c6e74c5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 190,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, depositAmount);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, depositAmount);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfter);",
                          "err": {},
                          "uuid": "ae13f91f-b5e7-427b-9894-1dfa3656bfcd",
                          "parentUUID": "023ed46f-7cac-40e0-b3f1-03477c6e74c5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 447,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "8521fee9-dc04-4a2b-bf78-db2a3539f266",
                          "parentUUID": "023ed46f-7cac-40e0-b3f1-03477c6e74c5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 367,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositBeforeRebase);\nconst expectedValue = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst valueAfterRebase = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst expectedValueAfterSecondDeposit = await _hardhat.default.Diamond.getValue(f.KrAssetCollateral.address, fullDepositAmount);\n// Deposit more\nawait User.depositCollateral(user.address, f.KrAssetCollateral.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(user.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "83f96164-ac65-4726-a188-6b23edd6bf29",
                          "parentUUID": "023ed46f-7cac-40e0-b3f1-03477c6e74c5",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "10b2144f-2be4-412e-809a-c6a773c2091f",
                        "20f97669-f9a0-43db-9caf-fb1ae803bbc0",
                        "3dc4f63f-f6b7-4203-9cdc-f45d65d5ac51",
                        "ae13f91f-b5e7-427b-9894-1dfa3656bfcd",
                        "8521fee9-dc04-4a2b-bf78-db2a3539f266",
                        "83f96164-ac65-4726-a188-6b23edd6bf29"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1849,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "1dc7400a-71b8-43c1-9f66-88a538073ccf",
                  "title": "#withdraw - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase \"before each\" hook in \"#withdraw - rebase\"",
                      "timedOut": false,
                      "duration": 191,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await Withdrawer.mintKreskoAsset(withdrawer.address, f.KrAssetCollateral.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await _optimizations.default.getAccountDebtAmount(withdrawer.address, f.KrAssetCollateral);",
                      "err": {},
                      "uuid": "6efe8e8e-8cf1-4e58-8237-fa245193e031",
                      "parentUUID": "1dc7400a-71b8-43c1-9f66-88a538073ccf",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "2decd780-e15c-4d8b-ac23-10144440f17a",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 238,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "262ca372-d68b-4839-a19f-c49bcbc7cd5b",
                          "parentUUID": "2decd780-e15c-4d8b-ac23-10144440f17a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 230,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "3414ba48-32a8-45fd-9c4e-2f90b9f4de3b",
                          "parentUUID": "2decd780-e15c-4d8b-ac23-10144440f17a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 231,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "04b7d50d-b3c4-42dd-b0ff-9c571ff649b6",
                          "parentUUID": "2decd780-e15c-4d8b-ac23-10144440f17a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made after a negative rebase",
                          "timedOut": false,
                          "duration": 247,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "b84eaf7b-b3dd-4d11-a77f-4dd173895cf3",
                          "parentUUID": "2decd780-e15c-4d8b-ac23-10144440f17a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 335,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "e95e65f9-3b1a-4d36-b090-9087d87d1194",
                          "parentUUID": "2decd780-e15c-4d8b-ac23-10144440f17a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 333,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsFirst).to.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalDeposits = await _hardhat.default.Diamond.getAccountCollateralAmount(withdrawer.address, f.KrAssetCollateral.address);\nconst finalBalance = await f.KrAssetCollateral.contract.balanceOf(withdrawer.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "2c7b3556-8401-4c05-b939-4cd696bd7f6e",
                          "parentUUID": "2decd780-e15c-4d8b-ac23-10144440f17a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 239,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await f.Collateral.contract.balanceOf(withdrawer.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.Collateral.address));\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(withdrawer.address)).to.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "2edddb8b-ef43-460f-b95f-4629cd2fbef3",
                          "parentUUID": "2decd780-e15c-4d8b-ac23-10144440f17a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "262ca372-d68b-4839-a19f-c49bcbc7cd5b",
                        "3414ba48-32a8-45fd-9c4e-2f90b9f4de3b",
                        "04b7d50d-b3c4-42dd-b0ff-9c571ff649b6",
                        "b84eaf7b-b3dd-4d11-a77f-4dd173895cf3",
                        "e95e65f9-3b1a-4d36-b090-9087d87d1194",
                        "2c7b3556-8401-4c05-b939-4cd696bd7f6e",
                        "2edddb8b-ef43-460f-b95f-4629cd2fbef3"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1853,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 246,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "bbaea546-9817-4850-9498-31f625237b54",
                          "parentUUID": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 241,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, rebasedDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "83454bdf-100a-47f1-8ed9-d7b04cd26850",
                          "parentUUID": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 313,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
                          "uuid": "dc45618c-e9b6-4cc4-8996-b20c15018c49",
                          "parentUUID": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 232,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, depositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(depositAmount);",
                          "err": {},
                          "uuid": "a7fb9a26-49ac-49ac-bbe5-fb5d9152bd56",
                          "parentUUID": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 436,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "8cfa8b30-0266-4a74-a767-33be281c90ff",
                          "parentUUID": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 420,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.equal(valueAfterRebase);\n// Deposit more\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, secondDepositAmount);\n// Withdraw the full rebased amount\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.KrAssetCollateral.address, fullDepositAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await f.KrAssetCollateral.contract.balanceOf(withdrawer.address)).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "21b5acda-994c-4251-9b10-e62d0ef78e62",
                          "parentUUID": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 619,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _values.fromBig)(await f.KrAssetCollateral.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _values.toBig)(10);\nawait Withdrawer.depositCollateral(withdrawer.address, f.KrAssetCollateral.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.Collateral.address);\nconst withdrawValue = await _hardhat.default.Diamond.getValue(f.Collateral.address, withdrawAmount);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nf.KrAssetCollateral.setPrice(newPrice);\nawait f.KrAssetCollateral.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait Withdrawer.withdrawCollateral(withdrawer.address, f.Collateral.address, withdrawAmount, _optimizations.default.getAccountDepositIndex(withdrawer.address, f.KrAssetCollateral.address));\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountTotalCollateralValue(withdrawer.address);\nconst [finalValue] = await _hardhat.default.Diamond.getAccountCollateralValues(withdrawer.address, f.Collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "65e9fec1-8204-4935-8dcd-9924f099f34b",
                          "parentUUID": "43a57cfa-eb43-427c-b001-1f1b11125fbc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "bbaea546-9817-4850-9498-31f625237b54",
                        "83454bdf-100a-47f1-8ed9-d7b04cd26850",
                        "dc45618c-e9b6-4cc4-8996-b20c15018c49",
                        "a7fb9a26-49ac-49ac-bbe5-fb5d9152bd56",
                        "8cfa8b30-0266-4a74-a767-33be281c90ff",
                        "21b5acda-994c-4251-9b10-e62d0ef78e62",
                        "65e9fec1-8204-4935-8dcd-9924f099f34b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2507,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "56c9963d-7eb8-492e-8e27-e6075b28aabd",
          "title": "Minter - Liquidations",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Liquidations\"",
              "fullTitle": "Minter - Liquidations \"before each\" hook in \"Minter - Liquidations\"",
              "timedOut": false,
              "duration": 72,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.liquidationsFixture)();\n[[user1, User], [user2], [user3], [user4], [user5], [liquidator, Liquidator], [liquidatorTwo, LiquidatorTwo]] = f.users;\nawait f.reset();",
              "err": {},
              "uuid": "8a98f9ef-c092-48f9-9e33-e368e3088457",
              "parentUUID": "56c9963d-7eb8-492e-8e27-e6075b28aabd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4e28de09-b981-481e-9fed-56b46eb90bb3",
              "title": "#isAccountLiquidatable",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify accounts below their liquidation threshold",
                  "fullTitle": "Minter - Liquidations #isAccountLiquidatable should identify accounts below their liquidation threshold",
                  "timedOut": false,
                  "duration": 480,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [cr, minCollateralUSD, initialCanLiquidate] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(user1.address),\n    hre.Diamond.getAccountMinCollateralAtRatio(user1.address, hre.Diamond.getLiquidationThreshold()),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(cr).to.be.equal(1.5e4);\n(0, _chai.expect)(f.initialDeposits.mul(10).gt(minCollateralUSD));\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.equal(true);",
                  "err": {},
                  "uuid": "5f0690ba-8756-42b6-89e5-e4e9e8a58ae9",
                  "parentUUID": "4e28de09-b981-481e-9fed-56b46eb90bb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f0690ba-8756-42b6-89e5-e4e9e8a58ae9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 480,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ed60c5d0-8bdf-4518-b5c7-7b1ab3bfa3d8",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 1250,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const MLVBeforeC1 = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address);\nconst MLVBeforeC2 = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral2.address);\n(0, _chai.expect)(MLVBeforeC1.repayValue).to.be.closeTo(MLVBeforeC2.repayValue, USD_DELTA);\nawait hre.Diamond.updateCollateralFactor(f.Collateral.address, 0.25e4);\nawait (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: f.initialDeposits.div(2),\n    asset: f.Collateral2\n});\nconst expectedCR = 1.125e4;\nconst [crAfter, isLiquidatableAfter, MLVAfterC1, MLVAfterC2] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address),\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral2.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.true;\n(0, _chai.expect)(crAfter).to.be.closeTo(expectedCR, 1);\n(0, _chai.expect)(MLVAfterC1.repayValue).to.gt(MLVBeforeC1.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue).to.gt(MLVBeforeC2.repayValue);\n(0, _chai.expect)(MLVAfterC2.repayValue.gt(MLVAfterC1.repayValue)).to.be.true;",
                  "err": {},
                  "uuid": "a9145c97-b8f7-4d73-8a6d-ad865b00de54",
                  "parentUUID": "ed60c5d0-8bdf-4518-b5c7-7b1ab3bfa3d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter - Liquidations #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 671,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _values.toBig)(0.1, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.true;\nconst [maxLiq, maxLiq8Dec] = await Promise.all([\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address),\n    hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(maxLiq.repayValue).gt(0);\n(0, _chai.expect)(maxLiq8Dec.repayValue).gt(0);\n(0, _chai.expect)(maxLiq.repayValue).gt(maxLiq8Dec.repayValue);",
                  "err": {},
                  "uuid": "c4ab483f-0b54-4f55-9132-7eb33e798a9e",
                  "parentUUID": "ed60c5d0-8bdf-4518-b5c7-7b1ab3bfa3d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9145c97-b8f7-4d73-8a6d-ad865b00de54",
                "c4ab483f-0b54-4f55-9132-7eb33e798a9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1921,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b659e4e3-9ec1-435f-9bbe-b1985e41ef03",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(7.5);",
                      "err": {},
                      "uuid": "96bebeab-2f05-4145-aa50-161752edebc0",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 500,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\nconst userOneDebtBefore = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst liquidatorBalanceBefore = await f.Collateral.balanceOf(liquidator.address);\nconst liquidatorBalanceKrBefore = await f.KrAsset.balanceOf(liquidator.address);\nconst kreskoBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxRepayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11, 8));\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, maxRepayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address));\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst userOneDebtAfterLiquidation = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebtAfterLiquidation.eq(userOneDebtBefore.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst userOneCollateralAfterLiquidation = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral);\n(0, _chai.expect)(userOneCollateralAfterLiquidation.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\n(0, _chai.expect)(await f.KrAsset.balanceOf(liquidator.address)).eq(liquidatorBalanceKrBefore.sub(maxRepayAmount));\n// Confirm that userTwo has received some collateral from the contract\n(0, _chai.expect)(await f.Collateral.balanceOf(liquidator.address)).gt(liquidatorBalanceBefore);\n// Confirm that Kresko contract's collateral balance has decreased.\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).lt(kreskoBalanceBefore);",
                      "err": {},
                      "uuid": "9b361ffe-7163-42fa-bf32-7eae2887e278",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with a single CDP",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with a single CDP",
                      "timedOut": false,
                      "duration": 861,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.updateCollateralFactor(f.Collateral.address, 0.99e4);\nawait hre.Diamond.updateKFactor(f.KrAsset.address, 1.02e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address);\nawait Liquidator.liquidate(user1.address, f.KrAsset.address, maxLiq.repayAmount.add((0, _values.toBig)(1222, 27)), f.Collateral.address, maxLiq.repayAssetIndex, maxLiq.seizeAssetIndex);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user1.address)).to.be.eq(await _optimizations.default.getMaxLiquidationRatio());\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "0f841d11-2745-4021-991d-f40076ee3b02",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to MLR with multiple CDPs",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should liquidate up to MLR with multiple CDPs",
                      "timedOut": false,
                      "duration": 1254,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _collaterals.depositMockCollateral)({\n    user: user1,\n    amount: (0, _values.toBig)(10, 8),\n    asset: f.Collateral8Dec\n});\nf.Collateral.setPrice(5.5);\nf.Collateral8Dec.setPrice(6);\nawait hre.Diamond.updateCollateralFactor(f.Collateral.address, 0.9754e4);\nawait hre.Diamond.updateKFactor(f.KrAsset.address, 1.05e4);\nawait (0, _liquidations.liquidate)(user1, f.KrAsset, f.Collateral8Dec);\nconst [crAfter, isLiquidatableAfter] = await Promise.all([\n    hre.Diamond.getAccountCollateralRatio(user1.address),\n    hre.Diamond.getAccountLiquidatable(user1.address)\n]);\n(0, _chai.expect)(isLiquidatableAfter).to.be.false;\n(0, _chai.expect)(crAfter).to.be.eq(await _optimizations.default.getMaxLiquidationRatio());",
                      "err": {},
                      "uuid": "491f2a70-2b87-423a-99cf-7a62a08599c2",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 299,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = f.userOneMaxLiqPrecalc.wadDiv((0, _values.toBig)(11));\nconst tx = await Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, _optimizations.default.getAccountMintIndex(user1.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user1.address, f.Collateral.address));\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);",
                      "err": {},
                      "uuid": "dca3a0d7-34ef-4293-b9fd-e2d76eeaa8ea",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 112,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(10);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(Liquidator.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE').withArgs(16500000000, 15400000000);",
                      "err": {},
                      "uuid": "808aaa61-ec57-4a26-ad79-37f34bf066cf",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'ZERO_REPAY').withArgs(f.KrAsset.address);",
                      "err": {},
                      "uuid": "6346c4de-e63e-494a-bf29-2670b629e57e",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should clamp liquidations if repay value/amount exceeds debt",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should clamp liquidations if repay value/amount exceeds debt",
                      "timedOut": false,
                      "duration": 794,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _values.toBig)(10));\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount, hre.Diamond.address);\n// Liquidation should fail\nconst liquidatorBalanceBefore = await f.KrAsset.balanceOf(liquidatorTwo.address);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user1.address, f.KrAsset.address, f.Collateral.address);\n(0, _chai.expect)(maxLiq.repayAmount).to.be.lt(repayAmount);\nconst tx = await LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'LiquidationOccurred');\nconst liquidatorBalanceAfter = await f.KrAsset.balanceOf(liquidatorTwo.address);\n(0, _chai.expect)(event.args.account).to.equal(user1.address);\n(0, _chai.expect)(event.args.liquidator).to.equal(liquidatorTwo.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.args.seizedCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.args.repayAmount).to.not.equal(repayAmount);\n(0, _chai.expect)(event.args.repayAmount).to.equal(maxLiq.repayAmount);\n(0, _chai.expect)(event.args.collateralSent).to.be.equal(maxLiq.seizeAmount);\n(0, _chai.expect)(liquidatorBalanceAfter.add(repayAmount)).to.not.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(liquidatorBalanceAfter.add(maxLiq.repayAmount)).to.equal(liquidatorBalanceBefore);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user1.address)).to.be.eq(await hre.Diamond.getMaxLiquidationRatio());",
                      "err": {},
                      "uuid": "d24f2a6b-85cc-4909-9e64-558807d2ac9b",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 512,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.Collateral.setPrice(f.Collateral.config.args.price);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getMinCollateralRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinCollateralAtRatio(user1.address, _optimizations.default.getLiquidationThreshold());\nf.Collateral.setPrice(9.9);\nconst accountCollateralValue = await hre.Diamond.getAccountTotalCollateralValue(user1.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user1.address)).to.be.false;",
                      "err": {},
                      "uuid": "d64f41a2-476f-4b8b-b410-1fef4ca07ae6",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator token approval for Kresko Assets",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should allow liquidations without liquidator token approval for Kresko Assets",
                      "timedOut": false,
                      "duration": 372,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(0);\nconst repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await f.KrAsset.contract.allowance(user2.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "9643b6d9-65b4-4f21-a5e6-1327b3678146",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 348,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const repayAmount = (0, _values.toBig)(0.5);\nawait f.KrAsset.setBalance(liquidatorTwo, repayAmount);\nawait f.KrAsset.contract.setVariable('_allowances', {\n    [liquidatorTwo.address]: {\n        [hre.Diamond.address]: repayAmount\n    }\n});\nawait (0, _chai.expect)(LiquidatorTwo.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await f.KrAsset.contract.allowance(liquidatorTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "9ea1ef0c-3fc5-474a-b435-39b3c1cdeae1",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)(User.liquidate(user1.address, f.KrAsset.address, repayAmount, f.Collateral.address, 0, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SELF_LIQUIDATION');",
                      "err": {},
                      "uuid": "a991cf98-b43c-495a-bb78-7e6daa1f89b6",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should error on seize underflow",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate should error on seize underflow",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "fdc0b9b9-8adc-4b2f-bcbf-528828299810",
                      "parentUUID": "23f6a93f-53e3-4f39-bcc4-1e30c7153573",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9b361ffe-7163-42fa-bf32-7eae2887e278",
                    "0f841d11-2745-4021-991d-f40076ee3b02",
                    "491f2a70-2b87-423a-99cf-7a62a08599c2",
                    "dca3a0d7-34ef-4293-b9fd-e2d76eeaa8ea",
                    "808aaa61-ec57-4a26-ad79-37f34bf066cf",
                    "6346c4de-e63e-494a-bf29-2670b629e57e",
                    "d24f2a6b-85cc-4909-9e64-558807d2ac9b",
                    "d64f41a2-476f-4b8b-b410-1fef4ca07ae6",
                    "9643b6d9-65b4-4f21-a5e6-1327b3678146",
                    "9ea1ef0c-3fc5-474a-b435-39b3c1cdeae1",
                    "a991cf98-b43c-495a-bb78-7e6daa1f89b6"
                  ],
                  "failures": [],
                  "pending": [
                    "fdc0b9b9-8adc-4b2f-bcbf-528828299810"
                  ],
                  "skipped": [],
                  "duration": 5114,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await f.resetRebasing();",
                      "err": {},
                      "uuid": "7e28f104-ac58-420f-a357-bb8551ddd15a",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should setup correct",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should setup correct",
                      "timedOut": false,
                      "duration": 453,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [mcr, cr, cr2, liquidatable] = await Promise.all([\n    _optimizations.default.getMinCollateralRatio(),\n    hre.Diamond.getAccountCollateralRatio(user3.address),\n    hre.Diamond.getAccountCollateralRatio(user4.address),\n    hre.Diamond.getAccountLiquidatable(user3.address)\n]);\n(0, _chai.expect)(cr).to.closeTo(mcr, 8);\n(0, _chai.expect)(cr2).to.closeTo(mcr, 1);\n(0, _chai.expect)(liquidatable).to.be.false;",
                      "err": {},
                      "uuid": "b10105a1-ee01-4754-a252-1c74cedfdfa0",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE').withArgs(1000000000000, 933333332400);",
                      "err": {},
                      "uuid": "81792e33-b299-48a2-8d77-b06f7adf60ee",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 111,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait (0, _chai.expect)(Liquidator.liquidate(user4.address, f.KrAsset.address, 100, f.Collateral.address, _optimizations.default.getAccountMintIndex(user4.address, f.KrAsset.address), _optimizations.default.getAccountDepositIndex(user4.address, f.Collateral.address))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE').withArgs(1000000000000, 933333332400);",
                      "err": {},
                      "uuid": "842b848b-bdd7-41d6-83ad-da12afbbb41b",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 1408,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = true;\nconst rebasePrice = 1 / denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.Collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true);\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "418df499-8ece-4123-bff4-55650587ed0d",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 933,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 4;\nconst positive = false;\nconst rebasePrice = 1 * denominator;\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.false;\nf.KrAsset.setPrice(rebasePrice + 1);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user4.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral, true)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "69064894-5cc0-4937-87fb-f3950bac8f03",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate krAsset collaterals up to min amount",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate krAsset collaterals up to min amount",
                      "timedOut": false,
                      "duration": 749,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.updateCollateralFactor(f.KrAssetCollateral.address, 0.99e4);\nawait hre.Diamond.updateKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, maxLiq.repayAmount, hre.Diamond.address);\nawait Liquidator.liquidate(user3.address, f.KrAssetCollateral.address, maxLiq.repayAmount.sub(1e9), f.KrAssetCollateral.address, maxLiq.repayAssetIndex, maxLiq.seizeAssetIndex);\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(1e12.toString());",
                      "err": {},
                      "uuid": "6cf8b776-1522-468c-984f-b0b69fba1621",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate to 0",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate to 0",
                      "timedOut": false,
                      "duration": 743,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "f.KrAssetCollateral.setPrice(100);\nawait hre.Diamond.updateCollateralFactor(f.KrAssetCollateral.address, 1e4);\nawait hre.Diamond.updateKFactor(f.KrAssetCollateral.address, 1e4);\nconst maxLiq = await hre.Diamond.getMaxLiqValue(user3.address, f.KrAssetCollateral.address, f.KrAssetCollateral.address);\nconst liquidationAmount = maxLiq.repayAmount.add((0, _values.toBig)(20, 27));\nawait f.KrAssetCollateral.setBalance(hre.users.liquidator, liquidationAmount, hre.Diamond.address);\nawait Liquidator.liquidate(user3.address, f.KrAssetCollateral.address, liquidationAmount, f.KrAssetCollateral.address, maxLiq.repayAssetIndex, maxLiq.seizeAssetIndex);\nconst depositsAfter = await hre.Diamond.getAccountCollateralAmount(user3.address, f.KrAssetCollateral.address);\n(0, _chai.expect)(depositsAfter).to.equal(0);",
                      "err": {},
                      "uuid": "0a76f2fb-043f-41be-932b-307078e647d1",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 2544,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid * denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "38ee0e1a-72ff-4b51-91c7-feaee124948e",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter - Liquidations #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 2387,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const newPrice = 1.2;\nf.KrAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user4.address)){\n    const values = await (0, _liquidations.liquidate)(user4, f.KrAsset, f.Collateral);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user4.address), 8);\nresults.userOneHFAfter = (await hre.Diamond.getAccountCollateralRatio(user4.address)).toNumber();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nf.KrAsset.setPrice(rebasePrice);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.getAccountLiquidatable(user5.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.getAccountLiquidatable(user5.address)){\n    const values = await (0, _liquidations.liquidate)(user5, f.KrAsset, f.Collateral);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _values.fromBig)(await hre.Diamond.getAccountTotalCollateralValue(user5.address), 8);\nresults.userTwoHFAfter = (await hre.Diamond.getAccountCollateralRatio(user5.address)).toNumber();\n(0, _chai.expect)(results.userTwoHFAfter).to.equal(results.userOneHFAfter);\n(0, _chai.expect)(results.collateralSeized).to.equal(results.collateralSeizedRebase);\n(0, _chai.expect)(results.debtRepaid / denominator).to.equal(results.debtRepaidRebase);\n(0, _chai.expect)(results.userOneValueAfter).to.equal(results.userTwoValueAfter);",
                      "err": {},
                      "uuid": "20be51b8-59ed-462d-838e-5e9bdb488435",
                      "parentUUID": "44352ded-984b-4804-bdfe-9c84dbfe3df1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b10105a1-ee01-4754-a252-1c74cedfdfa0",
                    "81792e33-b299-48a2-8d77-b06f7adf60ee",
                    "842b848b-bdd7-41d6-83ad-da12afbbb41b",
                    "418df499-8ece-4123-bff4-55650587ed0d",
                    "69064894-5cc0-4937-87fb-f3950bac8f03",
                    "6cf8b776-1522-468c-984f-b0b69fba1621",
                    "0a76f2fb-043f-41be-932b-307078e647d1",
                    "38ee0e1a-72ff-4b51-91c7-feaee124948e",
                    "20be51b8-59ed-462d-838e-5e9bdb488435"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9442,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1caa9b8a-7190-4ef2-b4f9-ef3da233c71e",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.mintRepayFixture)();\n[[user1, User1], [user2, User2]] = f.users;\nawait f.reset();",
              "err": {},
              "uuid": "7cbc041d-4257-4082-9614-44d242b38de4",
              "parentUUID": "1caa9b8a-7190-4ef2-b4f9-ef3da233c71e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e70f177-9006-4bfb-94aa-9bd8d905acd0",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 266,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(f.initialMintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _values.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "6f3ee74e-c533-4277-92a0-5ff69ab66f79",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 455,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(50);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "f67cbcfd-cbe7-43d7-802b-64653f35fd45",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 426,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _values.toBig)(10);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(f.initialMintAmount.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _values.toBig)(20);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset2.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    f.KrAsset.address,\n    f.KrAsset2.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset2);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await f.KrAsset2.balanceOf(user1.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await f.KrAsset2.contract.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "7fe0b737-d02c-407e-9318-f3b4f2f3f612",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 288,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _values.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst currMinimumDebtValue = await hre.Diamond.getMinDebtValue();\n(0, _chai.expect)(mintAmountUSDValue).to.equal(currMinimumDebtValue);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "4899b6f7-d7dc-4505-b423-b0b6b62148f2",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 230,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.default.MANAGER, user2.address);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _values.toBig)(1);\nawait User2.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userTwoBalanceAfter = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userTwoBalanceAfter).to.equal(mintAmount);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);",
                      "err": {},
                      "uuid": "420d39de-39ae-4138-9291-19e0b8823695",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 155,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetMinted');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount);",
                      "err": {},
                      "uuid": "0dc83432-9410-41b9-a1ba-36f5cb7b983b",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 46,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(User1.mintKreskoAsset(user2.address, f.KrAsset.address, (0, _values.toBig)(1))).to.be.revertedWith(`AccessControl: account ${user1.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "9fa695f4-a575-48d4-80ea-40fcb629cbbe",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currMinimumDebtValue = await _optimizations.default.getMinDebtValue();\nconst mintAmount = currMinimumDebtValue.wadDiv(_mocks.TEN_USD.ebn(8)).sub(1e9);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'MINT_VALUE_LOW').withArgs(f.KrAsset.address, 10e8 - 1, currMinimumDebtValue);",
                      "err": {},
                      "uuid": "9a1a011b-8625-4f5d-a775-af21a7ebe245",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 33,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, '0x0000000000000000000000000000000000000002', (0, _values.toBig)(1))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'KRASSET_DOES_NOT_EXIST').withArgs('0x0000000000000000000000000000000000000002');",
                      "err": {},
                      "uuid": "3419d702-7712-4304-b940-58e443d69c8f",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 360,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateralAmountDeposited = await _optimizations.default.getAccountCollateralAmount(user1.address, f.Collateral.address);\nconst MCR = await hre.Diamond.getMinCollateralRatio();\nconst mcrAmount = collateralAmountDeposited.percentMul(MCR);\nconst mintAmount = mcrAmount.add(1);\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nconst userState = await hre.Diamond.getAccountState(user1.address);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'COLLATERAL_VALUE_LOW').withArgs(userState.totalCollateralValue, mintValue.percentMul(MCR));",
                      "err": {},
                      "uuid": "e1ca4904-9972-4040-ac22-415f3748dc0c",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 230,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait f.Collateral.setBalance(user1, (0, _values.toBig)(100000000));\nawait (0, _chai.expect)(User1.depositCollateral(user1.address, f.Collateral.address, (0, _values.toBig)(10000))).not.to.be.reverted;\nconst assetSupplyLimit = (0, _values.toBig)(1);\nconst mintAmount = (0, _values.toBig)(2);\nawait f.KrAsset.update({\n    ...f.KrAsset.config.args,\n    krAssetConfig: {\n        ...f.KrAsset.config.args.krAssetConfig,\n        supplyLimit: assetSupplyLimit\n    }\n});\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'MAX_SUPPLY_EXCEEDED').withArgs(f.KrAsset.address, (await f.KrAsset.contract.totalSupply()).add(mintAmount), assetSupplyLimit);\nawait f.KrAsset.update({\n    ...f.KrAsset.config.args,\n    krAssetConfig: {\n        ...f.KrAsset.config.args.krAssetConfig,\n        supplyLimit: assetSupplyLimit\n    }\n});",
                      "err": {},
                      "uuid": "d1d33d16-8ac1-47bc-a302-0672a66e19b2",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "5996145f-95f1-490f-a28f-1cb46c8ebac7",
                      "parentUUID": "9282e39f-58b7-46a5-8f0e-6014e2dcb2e8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6f3ee74e-c533-4277-92a0-5ff69ab66f79",
                    "f67cbcfd-cbe7-43d7-802b-64653f35fd45",
                    "7fe0b737-d02c-407e-9318-f3b4f2f3f612",
                    "4899b6f7-d7dc-4505-b423-b0b6b62148f2",
                    "420d39de-39ae-4138-9291-19e0b8823695",
                    "0dc83432-9410-41b9-a1ba-36f5cb7b983b",
                    "9fa695f4-a575-48d4-80ea-40fcb629cbbe",
                    "9a1a011b-8625-4f5d-a775-af21a7ebe245",
                    "3419d702-7712-4304-b940-58e443d69c8f",
                    "e1ca4904-9972-4040-ac22-415f3748dc0c",
                    "d1d33d16-8ac1-47bc-a302-0672a66e19b2"
                  ],
                  "failures": [],
                  "pending": [
                    "5996145f-95f1-490f-a28f-1cb46c8ebac7"
                  ],
                  "skipped": [],
                  "duration": 2598,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "c4c1ffe6-0dc0-40a0-bd5b-7a2623667d79",
                  "title": "#mint - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "07289a3d-1f4e-463e-9ae6-3aebc192550d",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 204,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "10175567-1a2c-4ce4-819a-a265b933e1b0",
                          "parentUUID": "07289a3d-1f4e-463e-9ae6-3aebc192550d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 204,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "5b935113-79a5-4c36-9bf5-3cc2ae056ceb",
                          "parentUUID": "07289a3d-1f4e-463e-9ae6-3aebc192550d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 203,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "79e1a4f6-d3a4-4dd1-b831-445eb9e52191",
                          "parentUUID": "07289a3d-1f4e-463e-9ae6-3aebc192550d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 204,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst balanceBefore = await f.KrAsset.balanceOf(user1.address);\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\n(0, _chai.expect)(balanceAfter).to.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.equal(debtAmount);",
                          "err": {},
                          "uuid": "bd96e7a5-8a36-4c7f-9ebe-cc36ef4a4cc0",
                          "parentUUID": "07289a3d-1f4e-463e-9ae6-3aebc192550d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "10175567-1a2c-4ce4-819a-a265b933e1b0",
                        "5b935113-79a5-4c36-9bf5-3cc2ae056ceb",
                        "79e1a4f6-d3a4-4dd1-b831-445eb9e52191",
                        "bd96e7a5-8a36-4c7f-9ebe-cc36ef4a4cc0"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 815,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "2bb364cc-870e-45c2-9728-e1916cd5037b",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 314,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "99ef01b9-f4ea-4af2-91b8-c07741665df0",
                          "parentUUID": "2bb364cc-870e-45c2-9728-e1916cd5037b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 314,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\nconst valueBeforeRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Adjust price accordingly\nconst assetPrice = await f.KrAsset.getPrice();\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "72262a8b-1fe7-4ffe-8a9c-ae1530a599c6",
                          "parentUUID": "2bb364cc-870e-45c2-9728-e1916cd5037b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 304,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice, 8) / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "024c4eb8-ff8a-4493-9f27-d750baec1ad0",
                          "parentUUID": "2bb364cc-870e-45c2-9728-e1916cd5037b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 309,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await f.KrAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price accordingly\nf.KrAsset.setPrice((0, _values.fromBig)(assetPrice.mul(denominator), 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(valueAfterRebase).to.equal(valueBeforeRebase);",
                          "err": {},
                          "uuid": "9650f622-79b2-4756-a0c5-b796a4d69950",
                          "parentUUID": "2bb364cc-870e-45c2-9728-e1916cd5037b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "99ef01b9-f4ea-4af2-91b8-c07741665df0",
                        "72262a8b-1fe7-4ffe-8a9c-ae1530a599c6",
                        "024c4eb8-ff8a-4493-9f27-d750baec1ad0",
                        "9650f622-79b2-4756-a0c5-b796a4d69950"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1241,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "65d76434-aa19-43e0-ac97-24b3238a60e0",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 704,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, f.KrAsset)).to.equal(valueBeforeRebase);\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await f.KrAsset.contract.balanceOf(user1.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, f.KrAsset)).to.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "0a5971fa-e4d9-4f40-b3af-11d3515dcaa3",
                          "parentUUID": "65d76434-aa19-43e0-ac97-24b3238a60e0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 684,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const assetPrice = await f.KrAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Mint before rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await f.KrAsset.contract.balanceOf(user1.address);\nconst debtAmountAfterFirstMint = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfterFirstMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nf.KrAsset.setPrice((0, _values.fromBig)(assetPriceRebase, 8));\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(user1, f.KrAsset);\nconst debtAmountAfterFirstRebase = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, f.KrAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, f.KrAsset));\n// Mint after rebase\nawait User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await hre.Diamond.getAccountTotalDebtValue(user1.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), f.KrAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "6194caf6-255c-4463-8ce3-0f70e1d1e140",
                          "parentUUID": "65d76434-aa19-43e0-ac97-24b3238a60e0",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0a5971fa-e4d9-4f40-b3af-11d3515dcaa3",
                        "6194caf6-255c-4463-8ce3-0f70e1d1e140"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1388,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 159,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await User1.mintKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount);",
                      "err": {},
                      "uuid": "4b8e96b9-ea06-49d1-b7b3-f9338154f1ac",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 194,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userBalance).to.equal(f.initialMintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userDebt).to.closeTo(f.initialMintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "5cdc0787-de2f-482e-8ea9-c26edf25c9c2",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9a9df7ad-5fa2-4adb-a6b4-25ca74b4e361",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 240,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.grantRole(_roles.default.MANAGER, user2.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _values.toBig)(1);\nconst kreskoAssetIndex = 0;\nconst userOneBalanceBefore = await f.KrAsset.balanceOf(user1.address);\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait User2.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// await expect(User2.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be\n//   .reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await f.KrAsset.balanceOf(user1.address);\n(0, _chai.expect)(userOneBalance).to.equal(userOneBalanceBefore, 'userOneBalance');\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await f.KrAsset.balanceOf(user2.address);\n(0, _chai.expect)(userThreeBalance).to.equal(f.initialMintAmount.sub(burnAmount), 'userThreeBalance');\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount), 'totalSupplyAfter');\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user2.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n], 'mintedKreskoAssetsAfter');\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(userOneDebt).to.equal(f.initialMintAmount.sub(burnAmount));",
                      "err": {},
                      "uuid": "44c1a4d4-9ee4-4fda-a185-6e168bb00233",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "0ce8ea98-aee6-4d6b-b0e5-a60e0e4dd225",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 357,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await f.KrAsset.balanceOf(user1.address);\nconst kreskoAssetTotalSupplyBefore = await f.KrAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst minDebtValue = (0, _values.fromBig)(await _optimizations.default.getMinDebtValue(), 8);\nconst oraclePrice = f.KrAsset.config.args.price;\nconst burnAmount = (0, _values.toBig)((0, _values.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await f.KrAsset.balanceOf(user1.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await f.KrAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    f.KrAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "ea78e330-e70a-4e27-b791-4b60fa4218b2",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 165,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, f.initialMintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'KreskoAssetBurned');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(f.KrAsset.address);\n(0, _chai.expect)(event.amount).to.equal(f.initialMintAmount.div(5));",
                      "err": {},
                      "uuid": "7f76fbe6-7e36-4dad-9f30-5bf17308e89f",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 281,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = f.initialMintAmount.add(secondMintAmount);\nawait (0, _chai.expect)(User1.mintKreskoAsset(user1.address, f.KrAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "42739504-ac5f-4d50-b533-97177e3be1c3",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 31,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, 0, kreskoAssetIndex)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'ZERO_BURN');",
                      "err": {},
                      "uuid": "e25e68f0-84ac-4314-94c1-5c423af6d1df",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 44,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(User2.burnKreskoAsset(user1.address, f.KrAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${user2.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "d3a07299-699f-4f92-8494-b116992c65ea",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _optimizations.default.getAccountDebtAmount(user1.address, f.KrAsset);\nconst burnAmount = debt.add((0, _values.toBig)(1));\nawait (0, _chai.expect)(User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "491b312d-9e23-4019-9620-f777f02d6253",
                      "parentUUID": "af21397c-4df5-49e3-bb0c-03ebb5ccf16f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "24dd8158-0a44-433d-a18f-58c517e807ff",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "timedOut": false,
                          "duration": 536,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01e4;\nawait f.KrAsset.update({\n    ...f.KrAsset.config.args,\n    krAssetConfig: {\n        ...f.KrAsset.config.args.krAssetConfig,\n        openFee,\n        supplyLimit: _values.MaxUint128\n    }\n});\nconst mintAmount = (0, _values.toBig)(1);\nconst mintValue = mintAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst expectedFeeValue = mintValue.percentMul(openFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(_mocks.TEN_USD.ebn(8));\n// Get the balances prior to the fee being charged.\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Mint Kresko asset\nconst tx = await User1.mintKreskoAsset(user1.address, f.KrAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_fees.default.OPEN);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst [, values] = await hre.Diamond.previewFee(user1.address, f.KrAsset.address, mintAmount, _fees.default.OPEN);\n(0, _chai.expect)(values[0]).eq(expectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "8e4d558b-5a41-4de0-b8b0-47c4fb2a5413",
                          "parentUUID": "24dd8158-0a44-433d-a18f-58c517e807ff",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "8e4d558b-5a41-4de0-b8b0-47c4fb2a5413"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 536,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "277abd29-6282-4b01-8296-0ff2cbb8b7dc",
                      "title": "Protocol Close Fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit FeePaid event",
                          "timedOut": false,
                          "duration": 197,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _values.toBig)(1);\nconst burnValue = burnAmount.wadMul(_mocks.TEN_USD.ebn(8));\nconst closeFee = f.KrAsset.config.args.krAssetConfig.closeFee; // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.percentMul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.wadDiv(f.Collateral.config.args.price.ebn(8));\nconst feeRecipient = await hre.Diamond.getFeeRecipient();\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await f.Collateral.balanceOf(feeRecipient);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await User1.burnKreskoAsset(user1.address, f.KrAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await f.Collateral.balanceOf(hre.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await f.Collateral.balanceOf(feeRecipient);\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal(expectedCollateralFeeAmount);\n// Ensure the emitted event is as expected.\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.account).to.equal(user1.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(f.Collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedCollateralFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_fees.default.CLOSE);",
                          "err": {},
                          "uuid": "b143e141-e814-48a0-9724-7a228994d454",
                          "parentUUID": "277abd29-6282-4b01-8296-0ff2cbb8b7dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 486,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_fees.default.CLOSE);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.mul(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "5992d4c1-f824-4e78-816c-670571889e1b",
                          "parentUUID": "277abd29-6282-4b01-8296-0ff2cbb8b7dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol Close Fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 497,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const wAmount = 1;\nconst burnAmount = (0, _values.toBig)(1);\nconst expectedFeeAmount = burnAmount.percentMul(f.KrAsset.config.args.krAssetConfig.closeFee);\nconst expectedFeeValue = expectedFeeAmount.wadMul((0, _values.toBig)(_mocks.TEN_USD, 8));\nconst event = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmount\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n(0, _chai.expect)(event.feeType).to.equal(_fees.default.CLOSE);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _values.fromBig)(await f.KrAsset.getPrice(), 8) * denominator;\nf.KrAsset.setPrice(priceAfter);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount.div(denominator);\nawait (0, _collaterals.withdrawCollateral)({\n    user: user2,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(wAmount)\n});\nconst eventAfterRebase = await (0, _events.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: user2,\n    asset: f.KrAsset,\n    amount: burnAmountRebase\n}), hre.Diamond, 'FeePaid');\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "7958fdb4-df4f-4b66-be2a-b215ea1e7e93",
                          "parentUUID": "277abd29-6282-4b01-8296-0ff2cbb8b7dc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b143e141-e814-48a0-9724-7a228994d454",
                        "5992d4c1-f824-4e78-816c-670571889e1b",
                        "7958fdb4-df4f-4b66-be2a-b215ea1e7e93"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1180,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [
                    "5cdc0787-de2f-482e-8ea9-c26edf25c9c2",
                    "44c1a4d4-9ee4-4fda-a185-6e168bb00233",
                    "ea78e330-e70a-4e27-b791-4b60fa4218b2",
                    "7f76fbe6-7e36-4dad-9f30-5bf17308e89f",
                    "42739504-ac5f-4d50-b533-97177e3be1c3",
                    "e25e68f0-84ac-4314-94c1-5c423af6d1df",
                    "d3a07299-699f-4f92-8494-b116992c65ea",
                    "491b312d-9e23-4019-9620-f777f02d6253"
                  ],
                  "failures": [],
                  "pending": [
                    "9a9df7ad-5fa2-4adb-a6b4-25ca74b4e361",
                    "0ce8ea98-aee6-4d6b-b0e5-a60e0e4dd225"
                  ],
                  "skipped": [],
                  "duration": 1385,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "6ac4a95c-603d-42ac-816e-690393851361",
                  "title": "#burn - rebase",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase \"before each\" hook in \"#burn - rebase\"",
                      "timedOut": false,
                      "duration": 167,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: f.KrAsset,\n    amount: mintAmount,\n    user: user1\n});",
                      "err": {},
                      "uuid": "609d5bf8-6c4f-40ae-8f84-6663c9ec710a",
                      "parentUUID": "6ac4a95c-603d-42ac-816e-690393851361",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "a1a053c0-1896-40d6-b742-c04c732c8d69",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 197,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n(0, _chai.expect)(debtAfter).to.equal(0);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(0);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(f.initialMintAmount); // WEI",
                          "err": {},
                          "uuid": "d9e811e8-9214-4cf4-9503-e98805150d96",
                          "parentUUID": "a1a053c0-1896-40d6-b742-c04c732c8d69",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 243,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "b9c41ebd-0ba8-4c88-bb88-d392c94b6fe9",
                          "parentUUID": "a1a053c0-1896-40d6-b742-c04c732c8d69",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 200,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt;\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _values.fromBig)(await f.KrAsset.contract.balanceOf(user1.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _values.toBig)(expectedBalanceAfterBurn * denominator).add(f.initialMintAmount));",
                          "err": {},
                          "uuid": "38885f07-7d33-435d-a667-58424e348c78",
                          "parentUUID": "a1a053c0-1896-40d6-b742-c04c732c8d69",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 240,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst repayAmount = debt.div(2);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await f.KrAsset.contract.balanceOf(user1.address);\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator)).add(f.initialMintAmount);\nconst wkrAssetBalanceKresko = await f.KrAsset.anchor.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "351d7c22-d522-4f69-8f76-3f26972836dc",
                          "parentUUID": "a1a053c0-1896-40d6-b742-c04c732c8d69",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d9e811e8-9214-4cf4-9503-e98805150d96",
                        "b9c41ebd-0ba8-4c88-bb88-d392c94b6fe9",
                        "38885f07-7d33-435d-a667-58424e348c78",
                        "351d7c22-d522-4f69-8f76-3f26972836dc"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 880,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    },
                    {
                      "uuid": "05c05a6d-32a8-4ebe-8c45-c8625a98c7a1",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 232,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "3d45d6c3-715a-44dd-8c83-06eab8b514b1",
                          "parentUUID": "05c05a6d-32a8-4ebe-8c45-c8625a98c7a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 430,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD / denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(f.KrAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _optimizations.default.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "6ad8ceaa-95ec-4d29-abbe-b5fb78baaef6",
                          "parentUUID": "05c05a6d-32a8-4ebe-8c45-c8625a98c7a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 234,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n(0, _chai.expect)(debtValueAfter).to.equal(0);",
                          "err": {},
                          "uuid": "9e11ad69-06da-4990-b4a1-60e806ee827a",
                          "parentUUID": "05c05a6d-32a8-4ebe-8c45-c8625a98c7a1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 409,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await hre.Diamond.getValue(f.KrAsset.address, mintAmount);\nf.KrAsset.setPrice(_mocks.TEN_USD * denominator);\nawait f.KrAsset.contract.rebase((0, _values.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nawait User1.burnKreskoAsset(user1.address, f.KrAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hre.Diamond.getAccountDebtAmount(user1.address, f.KrAsset.address);\nconst debtValueAfter = await hre.Diamond.getValue(f.KrAsset.address, debtAfter);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hre.Diamond.getAccountMintedAssets(user1.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(f.KrAsset.address);",
                          "err": {},
                          "uuid": "23be5eca-d840-4bbd-aee8-0b992c3edf18",
                          "parentUUID": "05c05a6d-32a8-4ebe-8c45-c8625a98c7a1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "3d45d6c3-715a-44dd-8c83-06eab8b514b1",
                        "6ad8ceaa-95ec-4d29-abbe-b5fb78baaef6",
                        "9e11ad69-06da-4990-b4a1-60e806ee827a",
                        "23be5eca-d840-4bbd-aee8-0b992c3edf18"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1305,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 30000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "120d5e26-8c9e-4290-a589-3d212cc0d711",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n[, , [user]] = f.users;",
              "err": {},
              "uuid": "b4109acb-3829-472b-b19a-e5adb1bbdbdc",
              "parentUUID": "120d5e26-8c9e-4290-a589-3d212cc0d711",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd9d9d66-cb5a-4724-b285-5b93b7420b3d",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7814db25-b460-44b1-aee0-36d85836b18e",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw withdraw correct amount",
                      "timedOut": false,
                      "duration": 130,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nawait (0, _chai.expect)(f.Receiver.testWithdrawalAmount(f.Collateral.address, withdrawalAmount)).to.not.be.revertedWith('wront amount received');\n(0, _chai.expect)(await f.Collateral.balanceOf(f.Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "6d039c21-b6ca-43e6-96e4-d7c41fb91378",
                      "parentUUID": "7814db25-b460-44b1-aee0-36d85836b18e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 264,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst balKreskoBefore = await f.Collateral.contract.balanceOf(hre.Diamond.address);\nawait Receiver.test(f.Collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(f.Collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(user.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await f.Collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "ac54b44b-a03c-4d37-b88e-2ea2a775313c",
                      "parentUUID": "7814db25-b460-44b1-aee0-36d85836b18e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 621,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(f.Collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await f.Collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await hre.Diamond.getAccountCollateralRatio(user.address)).to.be.eq(1.5e4);\nawait (0, _chai.expect)(Receiver.test(f.Collateral.address, 10e15.toString())).to.be.reverted;",
                      "err": {},
                      "uuid": "aa001590-a4ca-402a-ad38-b522921b9c91",
                      "parentUUID": "7814db25-b460-44b1-aee0-36d85836b18e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 225,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await f.Collateral.balanceOf(hre.Diamond.address);\nawait Receiver.testRedeposit(f.Collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await f.Collateral.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await f.Collateral.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "493a0858-fcac-4466-84ca-241c2708f91f",
                      "parentUUID": "7814db25-b460-44b1-aee0-36d85836b18e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 210,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst deposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nf.Collateral2.setPrice(10);\nawait f.Collateral2.setBalance(user, f.depositAmount);\nawait f.Collateral2.contract.setVariable('_allowances', {\n    [user.address]: {\n        [hre.Diamond.address]: f.depositAmount,\n        [Receiver.address]: f.depositAmount\n    }\n});\nawait Receiver.testDepositAlternate(f.Collateral.address, deposits, f.Collateral2.address);\nconst secondCollateralDeposits = await _optimizations.default.getAccountCollateralAmount(user.address, f.Collateral2.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "eae87f1a-c232-4be8-b401-0e9db34d5902",
                      "parentUUID": "7814db25-b460-44b1-aee0-36d85836b18e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6d039c21-b6ca-43e6-96e4-d7c41fb91378",
                    "ac54b44b-a03c-4d37-b88e-2ea2a775313c",
                    "aa001590-a4ca-402a-ad38-b522921b9c91",
                    "493a0858-fcac-4466-84ca-241c2708f91f",
                    "eae87f1a-c232-4be8-b401-0e9db34d5902"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1450,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "9cbdb5e7-b156-465d-a1b6-90a91f9876d9",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 46,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 0)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 0)).to.be.revertedWith(Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "b71a9929-a6a1-400e-b4a4-b4f222665627",
                      "parentUUID": "9cbdb5e7-b156-465d-a1b6-90a91f9876d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 95,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await hre.Diamond.revokeRole(_roles.default.MANAGER, f.Receiver.address);\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, 10000)).to.be.reverted;\n            // await expect(f.Receiver.test(f.Collateral.address, 10000)).to.be.revertedWith(\n            //     `AccessControl: account ${f.Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`,\n            // );",
                      "err": {},
                      "uuid": "314f08ff-823b-44a1-a6c5-80cd5dff3b7c",
                      "parentUUID": "9cbdb5e7-b156-465d-a1b6-90a91f9876d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 306,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(f.Receiver.test(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "f891047a-4a9b-4ea1-b6ce-df9ce8878467",
                      "parentUUID": "9cbdb5e7-b156-465d-a1b6-90a91f9876d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 309,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = f.Receiver;\nconst { maxWithdrawAmount } = await (0, _collaterals.getMaxWithdrawal)(user.address, f.Collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(f.Collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.reverted;",
                      "err": {},
                      "uuid": "d44da117-87ea-4b1e-9e80-c7ac726aedee",
                      "parentUUID": "9cbdb5e7-b156-465d-a1b6-90a91f9876d9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b71a9929-a6a1-400e-b4a4-b4f222665627",
                    "314f08ff-823b-44a1-a6c5-80cd5dff3b7c",
                    "f891047a-4a9b-4ea1-b6ce-df9ce8878467",
                    "d44da117-87ea-4b1e-9e80-c7ac726aedee"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 756,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b7a890ca-758e-42a8-b9f3-3c0460fd47d2",
          "title": "Gating",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/06-gating.ts",
          "file": "/src/test/minter/06-gating.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Gating\"",
              "fullTitle": "Gating \"before each\" hook in \"Gating\"",
              "timedOut": false,
              "duration": 111,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// Set Gating phase to 3\nawait hre.Diamond.updatePhase(2);\n// setup collateral for userOne and userTwo\nthis.initialBalance = (0, _values.toBig)(100000);\nawait f.Collateral.setBalance(hre.users.userOne, this.initialBalance, hre.Diamond.address);\nawait f.Collateral.setBalance(hre.users.userTwo, this.initialBalance, hre.Diamond.address);\nthis.depositArgsOne = {\n    user: hre.users.userOne,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\nthis.depositArgsTwo = {\n    user: hre.users.userTwo,\n    asset: f.Collateral,\n    amount: (0, _values.toBig)(10000)\n};\n// Deploy nft contract\n[this.nft] = await hre.deploy('MockERC1155', {\n    args: [],\n    from: hre.users.deployer.address\n});\nawait hre.Diamond.updateKreskian(this.nft.address);",
              "err": {},
              "uuid": "3ca61af3-f3b6-491f-999e-1f7fc6f29eba",
              "parentUUID": "b7a890ca-758e-42a8-b9f3-3c0460fd47d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not allow to deposit collateral if the user doesn't have required nft's",
              "fullTitle": "Gating should not allow to deposit collateral if the user doesn't have required nft's",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).to.be.reverted;",
              "err": {},
              "uuid": "ec8789ec-38df-4f6b-b55f-da6595aae7a1",
              "parentUUID": "b7a890ca-758e-42a8-b9f3-3c0460fd47d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow to deposit collateral if the user has the required nft's",
              "fullTitle": "Gating should allow to deposit collateral if the user has the required nft's",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.nft.safeTransferFrom(hre.users.deployer.address, this.depositArgsOne.user.address, 0, 1, '0x00');\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsOne.user).depositCollateral(this.depositArgsOne.user.address, f.Collateral.address, this.depositArgsOne.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "396c0406-1a57-4e18-9b23-991e0ed7afb7",
              "parentUUID": "b7a890ca-758e-42a8-b9f3-3c0460fd47d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "After all the phases anyone should be able to deposit collateral",
              "fullTitle": "Gating After all the phases anyone should be able to deposit collateral",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await hre.Diamond.updatePhase(3);\n// Anyone should be able to deposit collateral\nawait (0, _chai.expect)((0, _general.wrapContractWithSigner)(hre.Diamond, this.depositArgsTwo.user).depositCollateral(this.depositArgsTwo.user.address, f.Collateral.address, this.depositArgsTwo.amount)).not.to.be.reverted;",
              "err": {},
              "uuid": "682f688f-199e-47d2-b0e4-6f58c43d0ba5",
              "parentUUID": "b7a890ca-758e-42a8-b9f3-3c0460fd47d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec8789ec-38df-4f6b-b55f-da6595aae7a1",
            "396c0406-1a57-4e18-9b23-991e0ed7afb7",
            "682f688f-199e-47d2-b0e4-6f58c43d0ba5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 195,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c218bbfd-1634-418d-b3af-ed2d472e1398",
          "title": "Oracles",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-oracles.ts",
          "file": "/src/test/oracle/00-oracles.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Oracles\"",
              "fullTitle": "Oracles \"before each\" hook in \"Oracles\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// Deploy one price feed\n[, [user]] = f.users;\nthis.deployer = await hre.ethers.getNamedSigner('deployer');\nthis.userOne = await hre.ethers.getNamedSigner('userOne');\nf.Collateral.setPrice(10);",
              "err": {},
              "uuid": "1cf06759-aa37-4322-a9e9-4c28f60a7b98",
              "parentUUID": "c218bbfd-1634-418d-b3af-ed2d472e1398",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d1b46a3-a013-4627-8b85-1001e7277fb7",
              "title": "Redstone",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-oracles.ts",
              "file": "/src/test/oracle/00-oracles.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct setup",
                  "fullTitle": "Oracles Redstone should have correct setup",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check initial conditions\n(0, _chai.expect)(await hre.Diamond.getAccountTotalCollateralValue(user.address)).to.equal((0, _values.toBig)(10000, 8), 'collateral value should be $10');",
                  "err": {},
                  "uuid": "a02973a4-0d27-497b-b3c8-93350436ccd6",
                  "parentUUID": "8d1b46a3-a013-4627-8b85-1001e7277fb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get redstone price when chainlink price = 0",
                  "fullTitle": "Oracles Redstone should get redstone price when chainlink price = 0",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 0\nf.Collateral.setPrice(0);\nconst redstoneCollateralPrice = 20;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $20');",
                  "err": {},
                  "uuid": "dbb80c28-49ea-45af-8314-3cd8c35f2789",
                  "parentUUID": "8d1b46a3-a013-4627-8b85-1001e7277fb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get primary price when price +- oracleDeviationPct of reference price ",
                  "fullTitle": "Oracles Redstone should get primary price when price +- oracleDeviationPct of reference price ",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await f.Collateral.setOracleOrder([\n    _types.OracleType.Redstone,\n    _types.OracleType.Chainlink\n]);\n/// set chainlink price to 12\nf.Collateral.setPrice(12);\n/// set redstone price to 11\nconst redstoneCollateralPrice = 11;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $11');",
                  "err": {},
                  "uuid": "4521fa81-2918-4d5e-ae96-8bd3b10b2d37",
                  "parentUUID": "8d1b46a3-a013-4627-8b85-1001e7277fb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if price deviates too much",
                  "fullTitle": "Oracles Redstone should revert if price deviates too much",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 20\nf.Collateral.setPrice(20);\nconst redstoneCollateralPrice = 10;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\n// should revert if price deviates more than oracleDeviationPct\nawait (0, _chai.expect)(redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.be.reverted;\nf.Collateral.setPrice(10);",
                  "err": {},
                  "uuid": "172ada5c-934a-45f4-8a16-8fdf46edbc27",
                  "parentUUID": "8d1b46a3-a013-4627-8b85-1001e7277fb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return redstone price if sequencer is down",
                  "fullTitle": "Oracles Redstone should return redstone price if sequencer is down",
                  "timedOut": false,
                  "duration": 154,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/// set chainlink price to 5\nf.Collateral.setPrice(5);\nconst redstoneCollateralPrice = 200;\nconst redstoneDiamond = (0, _redstone.wrapPrices)(hre.Diamond, [\n    ..._redstone.defaultRedstoneDataPoints.map((p)=>p.value === 0 ? {\n            ...p,\n            value: 1\n        } : p),\n    {\n        dataFeedId: _mocks.testCollateralConfig.underlyingId,\n        value: redstoneCollateralPrice\n    }\n]);\nawait (await hre.getContractOrFork('MockSequencerUptimeFeed')).setAnswer(1);\n// should return redstone price if sequencer is down\n(0, _chai.expect)(await redstoneDiamond.getAccountTotalCollateralValue(user.address)).to.be.equal(f.depositAmount.wadMul((0, _values.toBig)(redstoneCollateralPrice, 8)), 'collateral value should be $200');\nf.Collateral.setPrice(10);\nawait (await hre.getContractOrFork('MockSequencerUptimeFeed')).setAnswer(0);",
                  "err": {},
                  "uuid": "33092b33-26ef-45b5-95ae-488f84928d7a",
                  "parentUUID": "8d1b46a3-a013-4627-8b85-1001e7277fb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a02973a4-0d27-497b-b3c8-93350436ccd6",
                "dbb80c28-49ea-45af-8314-3cd8c35f2789",
                "4521fa81-2918-4d5e-ae96-8bd3b10b2d37",
                "172ada5c-934a-45f4-8a16-8fdf46edbc27",
                "33092b33-26ef-45b5-95ae-488f84928d7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 442,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c84817a0-60c1-4b43-a80e-e19e64097b6a",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.defaultFixture)();\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devOne, userOne, extOne, extTwo } = await hre.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devOne = devOne;\nthis.userOne = userOne;\nthis.extOne = extOne;\nthis.extTwo = extTwo;",
              "err": {},
              "uuid": "f7853862-512c-4823-a608-033b9c40ea25",
              "parentUUID": "c84817a0-60c1-4b43-a80e-e19e64097b6a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "af1bb14f-8120-4a8f-b116-0372d7ebf8af",
              "title": "#setSafetyStateSet",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correctly sets the safety state",
                  "fullTitle": "Safety Council #setSafetyStateSet correctly sets the safety state",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const beforeSafetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(beforeSafetyState).to.equal(false);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'setSafetyStateSet', [\n    true\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst safetyState = await hre.Diamond.safetyStateSet();\n(0, _chai.expect)(safetyState).to.equal(true);",
                  "err": {},
                  "uuid": "db8a4c04-3684-44d1-8ec8-d496018b6f5d",
                  "parentUUID": "af1bb14f-8120-4a8f-b116-0372d7ebf8af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db8a4c04-3684-44d1-8ec8-d496018b6f5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "221625e5-31e5-47a6-a70e-0d855f09731f",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1c5d3f54-895b-4aca-bbc6-27fb7d350407",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "143c6d4e-f81b-4b5f-a5b5-79bbf6ca667e",
                      "parentUUID": "1c5d3f54-895b-4aca-bbc6-27fb7d350407",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne,\n    this.extOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "4dfd767b-0dd8-4e79-ba4e-efa9acf2dadf",
                      "parentUUID": "1c5d3f54-895b-4aca-bbc6-27fb7d350407",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "56013ceb-674e-45c0-8de5-3deea4e9012a",
                      "parentUUID": "1c5d3f54-895b-4aca-bbc6-27fb7d350407",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "65009b84-5db1-4bfd-899b-a9cdfb38ad16",
                      "parentUUID": "1c5d3f54-895b-4aca-bbc6-27fb7d350407",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "143c6d4e-f81b-4b5f-a5b5-79bbf6ca667e",
                    "4dfd767b-0dd8-4e79-ba4e-efa9acf2dadf",
                    "56013ceb-674e-45c0-8de5-3deea4e9012a",
                    "65009b84-5db1-4bfd-899b-a9cdfb38ad16"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 236,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "50114aff-2bc0-42a5-8c1e-7ab530bd3b07",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "80db5825-58e5-4863-bdc2-1c40f8061d7d",
                      "parentUUID": "50114aff-2bc0-42a5-8c1e-7ab530bd3b07",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.KrAsset.address\n    ],\n    _actions.default.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.REPAY.toString(), f.KrAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "c48cfbd7-76c3-4098-a50e-9f30dcaea3c0",
                      "parentUUID": "50114aff-2bc0-42a5-8c1e-7ab530bd3b07",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hre.ethers.utils.computeAddress('0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d');\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        randomAddr\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n])).to.be.reverted;\nconst isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "71260569-9de3-477f-8e9c-1ffd358a0c3b",
                      "parentUUID": "50114aff-2bc0-42a5-8c1e-7ab530bd3b07",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "80db5825-58e5-4863-bdc2-1c40f8061d7d",
                    "c48cfbd7-76c3-4098-a50e-9f30dcaea3c0",
                    "71260569-9de3-477f-8e9c-1ffd358a0c3b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 182,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "b9ad2852-4987-45e4-b023-9f1926d6982b",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devOne,\n    this.userOne\n]);\nconst depositSafetyState = await hre.Diamond.safetyStateFor(f.Collateral.address, _actions.default.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "4b9ffa44-51b4-4be9-848c-fa8e83afb0f2",
                      "parentUUID": "b9ad2852-4987-45e4-b023-9f1926d6982b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "b78ecf9d-f85a-49e1-bf04-e23d14dbba81",
                      "parentUUID": "b9ad2852-4987-45e4-b023-9f1926d6982b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4b9ffa44-51b4-4be9-848c-fa8e83afb0f2"
                  ],
                  "failures": [],
                  "pending": [
                    "b78ecf9d-f85a-49e1-bf04-e23d14dbba81"
                  ],
                  "skipped": [],
                  "duration": 62,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "075baf2e-266e-494f-9536-be9896dc70cc",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 127,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.DEPOSIT.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "88f0dfa7-4fc5-4bfe-a778-2b5030045836",
                      "parentUUID": "075baf2e-266e-494f-9536-be9896dc70cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 126,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.WITHDRAW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "44f20d29-d4b6-4a11-b364-4296743bf71f",
                      "parentUUID": "075baf2e-266e-494f-9536-be9896dc70cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 121,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.REPAY.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "bf01019d-6e28-4569-812c-be07efe35c25",
                      "parentUUID": "075baf2e-266e-494f-9536-be9896dc70cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 124,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.BORROW.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "275b2af2-2b25-4f29-9cfd-044cc97c100c",
                      "parentUUID": "075baf2e-266e-494f-9536-be9896dc70cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 122,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nlet isPaused = await hre.Diamond.assetActionPaused(_actions.default.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nisPaused = await hre.Diamond.assetActionPaused(_actions.default.LIQUIDATION.toString(), f.Collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "67b0ad55-e5cc-47c3-8ad4-6b1045d14b19",
                      "parentUUID": "075baf2e-266e-494f-9536-be9896dc70cc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "88f0dfa7-4fc5-4bfe-a778-2b5030045836",
                    "44f20d29-d4b6-4a11-b364-4296743bf71f",
                    "bf01019d-6e28-4569-812c-be07efe35c25",
                    "275b2af2-2b25-4f29-9cfd-044cc97c100c",
                    "67b0ad55-e5cc-47c3-8ad4-6b1045d14b19"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 620,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                },
                {
                  "uuid": "0268508b-5bf9-45b8-8b7a-f5d5bbef7388",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(hre.Multisig, hre.Diamond, 'toggleAssetsPaused', [\n    [\n        f.Collateral.address\n    ],\n    _actions.default.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devOne,\n    this.extOne\n]);\nconst event = await (0, _events.getInternalEvent)(tx, hre.Diamond, 'SafetyStateChange');\n(0, _chai.expect)(event.action).to.equal(_actions.default.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(f.Collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(hre.ethers.utils.keccak256(hre.ethers.utils.toUtf8Bytes('paused')));",
                      "err": {},
                      "uuid": "dd22cbe3-6274-4b79-ae7d-6d78a716e12b",
                      "parentUUID": "0268508b-5bf9-45b8-8b7a-f5d5bbef7388",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dd22cbe3-6274-4b79-ae7d-6d78a716e12b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 26,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 30000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "09b1c0e9-5758-46db-acf6-5f3d443e7eaf",
          "title": "SCDP",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
          "file": "/src/test/scdp/00-scdp.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"SCDP\"",
              "fullTitle": "SCDP \"before each\" hook in \"SCDP\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "f = await (0, _fixtures.scdpFixture)({\n    krAssets: createAssets,\n    collaterals: createCollaterals\n});\nawait f.reset();",
              "err": {},
              "uuid": "a0c96693-80cb-4a57-b633-beb5fbceb47c",
              "parentUUID": "09b1c0e9-5758-46db-acf6-5f3d443e7eaf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
              "title": "#Configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be initialized correctly",
                  "fullTitle": "SCDP #Configuration should be initialized correctly",
                  "timedOut": false,
                  "duration": 322,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { args } = await (0, _deploy.getSCDPInitializer)(hre);\nconst configuration = await hre.Diamond.getCurrentParametersSCDP();\n(0, _chai.expect)(configuration.swapFeeRecipient).to.equal(args.swapFeeRecipient);\n(0, _chai.expect)(configuration.liquidationThreshold).to.equal(args.liquidationThreshold);\n(0, _chai.expect)(configuration.minCollateralRatio).to.equal(args.minCollateralRatio);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include.members([\n    f.KrAsset.address,\n    f.KrAsset2.address,\n    f.KISS.address\n]);\nconst depositsEnabled = await Promise.all([\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral.address),\n    hre.Diamond.getDepositEnabledSCDP(f.Collateral8Dec.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address),\n    hre.Diamond.getDepositEnabledSCDP(f.KISS.address)\n]);\n(0, _chai.expect)(depositsEnabled).to.deep.equal([\n    true,\n    true,\n    false,\n    false,\n    true\n]);\nconst depositAssets = await hre.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.include.members([\n    f.Collateral.address,\n    f.Collateral8Dec.address,\n    f.KISS.address\n]);",
                  "err": {},
                  "uuid": "011d9695-7a38-44fb-9d9b-17205397e88c",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to whitelist new deposit asset",
                  "fullTitle": "SCDP #Configuration should be able to whitelist new deposit asset",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assetInfoBefore = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoBefore.isSCDPDepositAsset).to.equal(false);\nawait hre.Diamond.updateAsset(f.KrAsset2.address, {\n    ...assetInfoBefore,\n    isSCDPDepositAsset: true,\n    depositLimitSCDP: 1\n});\nconst assetInfoAfter = await hre.Diamond.getAsset(f.KrAsset2.address);\n(0, _chai.expect)(assetInfoAfter.decimals).to.equal(await f.KISS.contract.decimals());\n(0, _chai.expect)(assetInfoAfter.liquidityIndexSCDP).to.equal(_values.RAY);\n(0, _chai.expect)(assetInfoAfter.depositLimitSCDP).to.equal(1);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset2.address)).to.equal(true);",
                  "err": {},
                  "uuid": "7035d994-2f01-47f9-8fd6-e8da9b58650b",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update deposit limit of asset",
                  "fullTitle": "SCDP #Configuration should be able to update deposit limit of asset",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateDepositLimitSCDP(f.Collateral.address, 1);\nconst collateral = await hre.Diamond.getAsset(f.Collateral.address);\n(0, _chai.expect)(collateral.decimals).to.equal(await f.Collateral.contract.decimals());\n(0, _chai.expect)(collateral.liquidityIndexSCDP).to.equal(_values.RAY);\n(0, _chai.expect)(collateral.depositLimitSCDP).to.equal(1);",
                  "err": {},
                  "uuid": "a65d31a9-e2b4-43ff-bb7c-9a497fdf3f24",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable a deposit asset",
                  "fullTitle": "SCDP #Configuration should be able to disable a deposit asset",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setDepositAssetSCDP(f.Collateral.address, false);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.Collateral.address);\nconst depositAssets = await hre.Diamond.getDepositAssetsSCDP();\n(0, _chai.expect)(depositAssets).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);",
                  "err": {},
                  "uuid": "04d27c11-8d45-4090-ab53-06f7b93c5d17",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to disable and enable a collateral asset",
                  "fullTitle": "SCDP #Configuration should be able to disable and enable a collateral asset",
                  "timedOut": false,
                  "duration": 474,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setCollateralSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\nawait hre.Diamond.setDepositAssetSCDP(f.Collateral.address, false);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setCollateralSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getCollateralsSCDP()).to.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.not.include(f.Collateral.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(false);\nawait hre.Diamond.setDepositAssetSCDP(f.Collateral.address, true);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.Collateral.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getDepositAssetsSCDP()).to.include(f.Collateral.address);",
                  "err": {},
                  "uuid": "dcdcdf71-068c-4834-8882-96d1af471107",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to add whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to add whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(scdpKrAssetConfig.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(scdpKrAssetConfig.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(scdpKrAssetConfig.liqIncentiveSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(scdpKrAssetConfig.protocolFeeShareSCDP);",
                  "err": {},
                  "uuid": "48f70119-ce2f-40f6-8c7b-b36399621eb8",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to update a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to update a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const update = {\n    ...f.KrAsset.config.assetStruct,\n    swapInFeeSCDP: 0.05e4,\n    swapOutFeeSCDP: 0.05e4,\n    liqIncentiveSCDP: 1.06e4,\n    protocolFeeShareSCDP: 0.4e4\n};\nawait hre.Diamond.updateAsset(f.KrAsset.address, update);\nconst assetInfo = await hre.Diamond.getAsset(f.KrAsset.address);\n(0, _chai.expect)(assetInfo.swapInFeeSCDP).to.equal(update.swapInFeeSCDP);\n(0, _chai.expect)(assetInfo.swapOutFeeSCDP).to.equal(update.swapOutFeeSCDP);\n(0, _chai.expect)(assetInfo.protocolFeeShareSCDP).to.equal(update.protocolFeeShareSCDP);\n(0, _chai.expect)(assetInfo.liqIncentiveSCDP).to.equal(update.liqIncentiveSCDP);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.include(f.KrAsset.address);\nconst collaterals = await hre.Diamond.getCollateralsSCDP();\n(0, _chai.expect)(collaterals).to.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "86fc5482-d9cb-463b-9388-fbfda3a9baf4",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to remove a whitelisted kresko asset",
                  "fullTitle": "SCDP #Configuration should be able to remove a whitelisted kresko asset",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.setKrAssetSCDP(f.KrAsset.address, false);\nconst krAssets = await hre.Diamond.getKreskoAssetsSCDP();\n(0, _chai.expect)(krAssets).to.not.include(f.KrAsset.address);\n(0, _chai.expect)(await hre.Diamond.getDepositEnabledSCDP(f.KrAsset.address)).to.equal(false);",
                  "err": {},
                  "uuid": "fda3f412-963f-459d-9de5-479b909445d7",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to enable and disable swap pairs",
                  "fullTitle": "SCDP #Configuration should be able to enable and disable swap pairs",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapPairsEnabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: true\n    }\n];\nawait hre.Diamond.setSwapPairs(swapPairsEnabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(true);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(true);\nconst swapPairsDisabled = [\n    {\n        assetIn: f.Collateral.address,\n        assetOut: f.KrAsset.address,\n        enabled: false\n    }\n];\nawait hre.Diamond.setSwapPairs(swapPairsDisabled);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.Collateral.address, f.KrAsset.address)).to.equal(false);\n(0, _chai.expect)(await hre.Diamond.getSwapEnabledSCDP(f.KrAsset.address, f.Collateral.address)).to.equal(false);",
                  "err": {},
                  "uuid": "4a517d52-76c1-4103-a282-44e519a86af2",
                  "parentUUID": "2ca06dcb-8cca-4038-a16d-b0acfbdde01c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "011d9695-7a38-44fb-9d9b-17205397e88c",
                "7035d994-2f01-47f9-8fd6-e8da9b58650b",
                "a65d31a9-e2b4-43ff-bb7c-9a497fdf3f24",
                "04d27c11-8d45-4090-ab53-06f7b93c5d17",
                "dcdcdf71-068c-4834-8882-96d1af471107",
                "48f70119-ce2f-40f6-8c7b-b36399621eb8",
                "86fc5482-d9cb-463b-9388-fbfda3a9baf4",
                "fda3f412-963f-459d-9de5-479b909445d7",
                "4a517d52-76c1-4103-a282-44e519a86af2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1771,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ff3733af-9a4e-4579-9356-d1f6583b2944",
              "title": "#Deposit",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deposit collateral, calculate correct deposit values",
                  "fullTitle": "SCDP #Deposit should be able to deposit collateral, calculate correct deposit values",
                  "timedOut": false,
                  "duration": 1157,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (collateralPrice * depositAmount).ebn(8); // cfactor = 1\nawait Promise.all(f.usersArr.map((user)=>{\n    return (0, _redstone.wrapKresko)(hre.Diamond, user).depositSCDP(user.address, f.Collateral.address, depositAmount18Dec);\n}));\nconst [userInfos, statistics, assetInfo] = await Promise.all([\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((user)=>user.address), [\n        f.Collateral.address\n    ]),\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\nfor (const userInfo of userInfos){\n    const balance = await f.Collateral.balanceOf(userInfo.account);\n    (0, _chai.expect)(balance).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.totalScaledDepositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositValue).to.equal(expectedValueUnadjusted);\n}\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfo.depositValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValue).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValue).to.equal(0);\n// Adjusted\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(expectedValueAdjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.collateralValueAdjusted).to.equal(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(statistics.debtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.effectiveDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValueAdjusted).to.equal(0);\n(0, _chai.expect)(statistics.crDebtValue).to.equal(0);\n(0, _chai.expect)(statistics.cr).to.equal(0);",
                  "err": {},
                  "uuid": "eda646e7-31ae-4fdd-8d3d-f045832dc1a2",
                  "parentUUID": "ff3733af-9a4e-4579-9356-d1f6583b2944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to deposit multiple collaterals, calculate correct deposit values",
                  "fullTitle": "SCDP #Deposit should be able to deposit multiple collaterals, calculate correct deposit values",
                  "timedOut": false,
                  "duration": 1492,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedValueUnadjusted = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted = (0, _values.toBig)(collateralPrice / 1 * depositAmount, 8); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(collateralPrice * 0.8 * depositAmount, 8); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const User = (0, _general.wrapContractWithSigner)(hre.Diamond, user);\n    return Promise.all([\n        User.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        User.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositValue).to.equal(expectedValueUnadjusted);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec);\n    (0, _chai.expect)(userInfo.deposits[1].depositValue).to.equal(expectedValueUnadjusted8Dec);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec));\n}\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(depositAmount18Dec.mul(f.usersArr.length));\n(0, _chai.expect)(assetInfos[1].depositAmount).to.equal(depositAmount8Dec.mul(f.usersArr.length));\n// WITH_FACTORS global\nconst valueTotalAdjusted = expectedValueAdjusted.mul(f.usersArr.length);\nconst valueTotalAdjusted8Dec = expectedValueAdjusted8Dec.mul(f.usersArr.length);\nconst valueAdjusted = valueTotalAdjusted.add(valueTotalAdjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.equal(valueTotalAdjusted);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.equal(valueTotalAdjusted8Dec);\n(0, _chai.expect)(globals.collateralValueAdjusted).to.equal(valueAdjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);\n// WITHOUT_FACTORS global\nconst valueTotalUnadjusted = expectedValueUnadjusted.mul(f.usersArr.length);\nconst valueTotalUnadjusted8Dec = expectedValueUnadjusted8Dec.mul(f.usersArr.length);\nconst valueUnadjusted = valueTotalUnadjusted.add(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(valueTotalUnadjusted);\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(valueTotalUnadjusted8Dec);\n(0, _chai.expect)(globals.collateralValue).to.equal(valueUnadjusted);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "fd6a3021-d8a0-496c-b188-3374a67d9f4d",
                  "parentUUID": "ff3733af-9a4e-4579-9356-d1f6583b2944",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eda646e7-31ae-4fdd-8d3d-f045832dc1a2",
                "fd6a3021-d8a0-496c-b188-3374a67d9f4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2649,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "25a10b56-4fae-4e81-b128-caaa87f2ac2c",
              "title": "#Withdraw",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Withdraw\"",
                  "fullTitle": "SCDP #Withdraw \"before each\" hook in \"#Withdraw\"",
                  "timedOut": false,
                  "duration": 254,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    await Promise.all([\n        UserKresko.depositSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.depositSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));",
                  "err": {},
                  "uuid": "8e2f44ea-1d9e-4762-8741-e040b97e4e85",
                  "parentUUID": "25a10b56-4fae-4e81-b128-caaa87f2ac2c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to withdraw full collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw full collateral of multiple assets",
                  "timedOut": false,
                  "duration": 1701,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map(async (user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, depositAmount18Dec),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, depositAmount8Dec)\n    ]);\n}));\n(0, _chai.expect)(await f.Collateral.balanceOf(hre.Diamond.address)).to.equal(0);\nconst [userInfos, assetInfos, globals] = await Promise.all([\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\nfor (const userInfo of userInfos){\n    (0, _chai.expect)(await f.Collateral.balanceOf(userInfo.account)).to.equal(depositAmount18Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.deposits[1].scaledDepositAmount).to.equal(0);\n    (0, _chai.expect)(userInfo.totalDepositValue).to.equal(0);\n}\nfor (const assetInfo of assetInfos){\n    (0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n    (0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n    (0, _chai.expect)(assetInfo.swapDeposits).to.equal(0);\n}\n(0, _chai.expect)(globals.collateralValue).to.equal(0);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "ea9d9552-17ed-49dd-97a1-4f0704896a0a",
                  "parentUUID": "25a10b56-4fae-4e81-b128-caaa87f2ac2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to withdraw partial collateral of multiple assets",
                  "fullTitle": "SCDP #Withdraw should be able to withdraw partial collateral of multiple assets",
                  "timedOut": false,
                  "duration": 2297,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const partialWithdraw = depositAmount18Dec.div(f.usersArr.length);\nconst partialWithdraw8Dec = depositAmount8Dec.div(f.usersArr.length);\nconst expectedValueUnadjusted = (0, _values.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted = (0, _values.toBig)(collateralPrice * 1 * depositAmount, 8).mul(200).div(300); // cfactor = 1\nconst expectedValueUnadjusted8Dec = (0, _values.toBig)(collateralPrice * depositAmount, 8).mul(200).div(300);\nconst expectedValueAdjusted8Dec = (0, _values.toBig)(collateralPrice * 0.8 * depositAmount, 8).mul(200).div(300); // cfactor = 0.8\nawait Promise.all(f.usersArr.map((user)=>{\n    const UserKresko = (0, _redstone.wrapKresko)(hre.Diamond, user);\n    return Promise.all([\n        UserKresko.withdrawSCDP(user.address, f.Collateral.address, partialWithdraw),\n        UserKresko.withdrawSCDP(user.address, f.Collateral8Dec.address, partialWithdraw8Dec)\n    ]);\n}));\nconst [collateralBalanceAfter, collateral8DecBalanceAfter, globals, assetInfos, userInfos] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    f.Collateral8Dec.balanceOf(hre.Diamond.address),\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getAssetInfosSCDP([\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ]),\n    hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n        f.Collateral.address,\n        f.Collateral8Dec.address\n    ])\n]);\nfor (const userInfo of userInfos){\n    const [balance18Dec, balance8Dec] = await Promise.all([\n        f.Collateral.balanceOf(userInfo.account),\n        f.Collateral8Dec.balanceOf(userInfo.account)\n    ]);\n    (0, _chai.expect)(balance18Dec).to.equal(partialWithdraw);\n    (0, _chai.expect)(balance8Dec).to.equal(partialWithdraw8Dec);\n    (0, _chai.expect)(userInfo.deposits[0].depositAmount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[0].scaledDepositAmount).to.equal(depositAmount18Dec.sub(partialWithdraw));\n    (0, _chai.expect)(userInfo.deposits[1].depositAmount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.deposits[1].scaledDepositAmount).to.equal(depositAmount8Dec.sub(partialWithdraw8Dec));\n    (0, _chai.expect)(userInfo.totalDepositValue).to.closeTo(expectedValueUnadjusted.add(expectedValueUnadjusted8Dec), (0, _values.toBig)(0.00001, 8));\n}\n(0, _chai.expect)(collateralBalanceAfter).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(collateral8DecBalanceAfter).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositAmount).to.closeTo((0, _values.toBig)(2000), 1);\n(0, _chai.expect)(assetInfos[1].depositAmount).to.closeTo((0, _values.toBig)(2000, 8), 1);\n(0, _chai.expect)(assetInfos[0].depositValue).to.closeTo(expectedValueUnadjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[0].depositValueAdjusted).to.closeTo(expectedValueAdjusted.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValue).to.closeTo(expectedValueUnadjusted8Dec.mul(f.usersArr.length), 20);\n(0, _chai.expect)(assetInfos[1].depositValueAdjusted).to.closeTo(expectedValueAdjusted8Dec.mul(f.usersArr.length), 20);\nconst totalValueRemaining = expectedValueUnadjusted8Dec.mul(f.usersArr.length).add(expectedValueUnadjusted.mul(f.usersArr.length));\n(0, _chai.expect)(globals.collateralValue).to.closeTo(totalValueRemaining, 20);\n(0, _chai.expect)(globals.debtValue).to.equal(0);\n(0, _chai.expect)(globals.cr).to.equal(0);",
                  "err": {},
                  "uuid": "10ed60c9-6638-4948-b73b-514a24de96ac",
                  "parentUUID": "25a10b56-4fae-4e81-b128-caaa87f2ac2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea9d9552-17ed-49dd-97a1-4f0704896a0a",
                "10ed60c9-6638-4948-b73b-514a24de96ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3998,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "49636173-1e70-4c3e-8a80-0ecc85f316d0",
              "title": "#Fee Distribution",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Fee Distribution\"",
                  "fullTitle": "SCDP #Fee Distribution \"before each\" hook in \"#Fee Distribution\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "incomeCumulator = hre.users.deployer;\nIncomeCumulator = (0, _redstone.wrapKresko)(hre.Diamond, incomeCumulator);\nawait f.Collateral.setBalance(incomeCumulator, depositAmount18Dec.mul(f.usersArr.length), hre.Diamond.address);",
                  "err": {},
                  "uuid": "1ef0eda4-5ffc-42ca-b9a3-4bd5fca4f87f",
                  "parentUUID": "49636173-1e70-4c3e-8a80-0ecc85f316d0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to cumulate fees into deposits",
                  "fullTitle": "SCDP #Fee Distribution should be able to cumulate fees into deposits",
                  "timedOut": false,
                  "duration": 3344,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fees = depositAmount18Dec.mul(f.usersArr.length);\nconst expectedValueNoFees = (0, _values.toBig)(collateralPrice * depositAmount, 8);\nconst expectedValueFees = expectedValueNoFees.mul(2);\n// deposit some\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(hre.Diamond, signer).depositSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\n// cumulate some income\nawait IncomeCumulator.cumulateIncomeSCDP(f.Collateral.address, fees);\n// check that the fees are cumulated\nfor (const data of (await hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.deposits[0].scaledDepositValue).to.equal(expectedValueFees);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(expectedValueNoFees);\n    (0, _chai.expect)(data.totalScaledDepositValue).to.equal(expectedValueFees);\n}\n// withdraw principal\nawait Promise.all(f.usersArr.map((signer)=>(0, _redstone.wrapKresko)(hre.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec)));\nfor (const user of (await hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(user.account);\n    (0, _chai.expect)(user.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(user.deposits[0].scaledDepositValue).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalScaledDepositValue).to.equal(expectedValueFees.sub(expectedValueNoFees));\n    (0, _chai.expect)(user.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec);\n}\nconst [assetInfo, stats, balance] = await Promise.all([\n    hre.Diamond.getAssetInfoSCDP(f.Collateral.address),\n    hre.Diamond.getStatisticsSCDP(),\n    f.Collateral.balanceOf(hre.Diamond.address)\n]);\n(0, _chai.expect)(balance).to.equal(fees);\n(0, _chai.expect)(assetInfo.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfo.depositValueAdjusted).to.equal(0);\n(0, _chai.expect)(stats.collateralValue).to.equal(0);\n// Withdraw fees\nawait Promise.all(f.usersArr.map((signer)=>{\n    return (0, _redstone.wrapKresko)(hre.Diamond, signer).withdrawSCDP(signer.address, f.Collateral.address, depositAmount18Dec);\n}));\nfor (const data of (await hre.Diamond.getAccountInfosSCDP(f.usersArr.map((u)=>u.address), [\n    f.Collateral.address\n]))){\n    const balance = await f.Collateral.balanceOf(data.account);\n    (0, _chai.expect)(balance).to.equal(depositAmount18Dec.add(depositAmount18Dec));\n    (0, _chai.expect)(data.deposits[0].depositValue).to.equal(0);\n    (0, _chai.expect)(data.deposits[0].scaledDepositValue).to.equal(0);\n    (0, _chai.expect)(data.totalDepositValue).to.equal(0);\n    (0, _chai.expect)(data.totalScaledDepositValue).to.equal(0);\n}\n// nothing left in protocol.\nconst [colalteralBalanceKresko, assetInfoFinal] = await Promise.all([\n    f.Collateral.balanceOf(hre.Diamond.address),\n    hre.Diamond.getAssetInfoSCDP(f.Collateral.address)\n]);\n(0, _chai.expect)(colalteralBalanceKresko).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositAmount).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValue).to.equal(0);\n(0, _chai.expect)(assetInfoFinal.depositValueAdjusted).to.equal(0);",
                  "err": {},
                  "uuid": "b9937661-a957-4c7c-8012-6044d25bd3e0",
                  "parentUUID": "49636173-1e70-4c3e-8a80-0ecc85f316d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9937661-a957-4c7c-8012-6044d25bd3e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3344,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
              "title": "#Swap",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Swap\"",
                  "fullTitle": "SCDP #Swap \"before each\" hook in \"#Swap\"",
                  "timedOut": false,
                  "duration": 47,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor, (0, _values.toBig)(10_000));\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, depositAmount18Dec);",
                  "err": {},
                  "uuid": "5a5a2345-4bf5-4e26-a27f-43ba59ad77b9",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have collateral in pool",
                  "fullTitle": "SCDP #Swap should have collateral in pool",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(value.collateralValue).to.equal((0, _values.toBig)(depositAmount, 8));\n(0, _chai.expect)(value.debtValue).to.equal(0);\n(0, _chai.expect)(value.cr).to.equal(0);",
                  "err": {},
                  "uuid": "9afd839e-6fd9-4e09-830c-3005c4f7748b",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to preview a swap",
                  "fullTitle": "SCDP #Swap should be able to preview a swap",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nconst assetInPrice = (0, _values.toBig)(ONE_USD, 8);\n(0, _chai.expect)(await f.KrAsset2.getPrice()).to.equal(KreskoAsset2Price.ebn(8));\nconst assetOutPrice = (0, _values.toBig)(KreskoAsset2Price, 8);\nconst feePercentage = FEE_KISS_KRASSET;\nconst feePercentageProtocol = 0.5e4;\nconst expectedTotalFee = swapAmount.percentMul(feePercentage);\nconst expectedProtocolFee = expectedTotalFee.percentMul(feePercentageProtocol);\nconst expectedFee = expectedTotalFee.sub(expectedProtocolFee);\nconst amountInAfterFees = swapAmount.sub(expectedTotalFee);\nconst expectedAmountOut = amountInAfterFees.wadMul(assetInPrice).wadDiv(assetOutPrice);\nconst [amountOut, feeAmount, feeAmountProtocol] = await hre.Diamond.previewSwapSCDP(f.KISS.address, f.KrAsset2.address, swapAmount);\n(0, _chai.expect)(amountOut).to.equal(expectedAmountOut);\n(0, _chai.expect)(feeAmount).to.equal(expectedFee);\n(0, _chai.expect)(feeAmountProtocol).to.equal(expectedProtocolFee);",
                  "err": {},
                  "uuid": "10767c68-6a39-428b-ba0d-ac0491176494",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == 0 | swap collateral == 0",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == 0 | swap collateral == 0",
                  "timedOut": false,
                  "duration": 968,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(ONE_USD); // $1\nconst kissInAfterFees = swapAmount.sub(swapAmount.percentMul(FEE_KISS_KRASSET));\nconst expectedAmountOut = kissInAfterFees.wadMul(ONE_USD.ebn(8)).wadDiv(KreskoAsset2Price.ebn(8));\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmount);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedAmountOut);\nconst [KR2Balance, KISSBalance, swapperInfo, assetInfos, global] = await Promise.all([\n    f.KrAsset2.balanceOf(f.swapper.address),\n    f.KISS.balanceOf(f.swapper.address),\n    hre.Diamond.getAccountInfoSCDP(f.swapper.address, [\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.getAssetInfosSCDP([\n        f.KrAsset2.address,\n        f.KISS.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(KR2Balance).to.equal(expectedAmountOut);\n(0, _chai.expect)(KISSBalance).to.equal((0, _values.toBig)(10_000).sub(swapAmount));\n(0, _chai.expect)(swapperInfo.deposits[0].depositValue).to.equal(0);\n(0, _chai.expect)(swapperInfo.deposits[1].depositValue).to.equal(0);\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(expectedAmountOut);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal(kissInAfterFees);\nconst expectedDepositValue = (0, _values.toBig)(depositAmount, 8).add(kissInAfterFees.wadMul(ONE_USD.ebn(8)));\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal(expectedAmountOut.wadMul(KreskoAsset2Price.ebn(8)));\n(0, _chai.expect)(global.collateralValue).to.equal(expectedDepositValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedAmountOut.wadMul(KreskoAsset2Price.ebn(8)));\n(0, _chai.expect)(global.cr).to.equal(expectedDepositValue.percentDiv(expectedAmountOut.wadMul(KreskoAsset2Price.ebn(8))));",
                  "err": {},
                  "uuid": "a1be25cd-feb8-4eea-8881-847b7a47dd48",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, shared debt == assetsIn | swap collateral == assetsOut",
                  "timedOut": false,
                  "duration": 1259,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountAsset = swapAmount.percentMul(1e4 - FEE_KISS_KRASSET).wadMul(ONE_USD.ebn(8)).wadDiv(KreskoAsset2Price.ebn(8));\nconst expectedKissOut = swapAmountAsset.percentMul(1e4 - FEE_KISS_KRASSET).wadMul(KreskoAsset2Price.ebn(8)).wadDiv(ONE_USD.ebn(8));\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: f.swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(100)\n});\nawait (0, _krassets.mintKrAsset)({\n    user: f.swapper,\n    asset: f.KrAsset2,\n    amount: (0, _values.toBig)(0.1)\n});\nconst globalBefore = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(globalBefore.collateralValue).to.equal(initialDepositValue);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n// the swap that clears debt\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountAsset, 0);\nconst [event, assetInfos] = await Promise.all([\n    (0, _events.getNamedEvent)(tx, 'Swap'),\n    hre.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ])\n]);\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal(initialDepositValue);\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\nconst global = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(global.collateralValue).to.equal((0, _values.toBig)(1000, 8));\n(0, _chai.expect)(global.debtValue).to.equal(0);\n(0, _chai.expect)(global.cr).to.equal(0);",
                  "err": {},
                  "uuid": "696daf0b-0047-43e6-8329-90379815632b",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, debt > assetsIn | swap deposits > assetsOut",
                  "timedOut": false,
                  "duration": 1136,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1); // $1\nconst swapValue = (0, _values.toBig)(1, 8);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst assetInfoKISS = await hre.Diamond.getAssetInfoSCDP(f.KISS.address);\nconst feeValueFirstSwap = swapValue.percentMul(FEE_KISS_KRASSET);\nconst valueInAfterFees = swapValue.sub(feeValueFirstSwap);\n(0, _chai.expect)(assetInfoKISS.depositValue).to.equal(depositValue.add(valueInAfterFees));\nconst expectedSwapDeposits = valueInAfterFees.num(8).ebn(18);\n(0, _chai.expect)(assetInfoKISS.swapDeposits).to.equal(expectedSwapDeposits);\nconst swapAmountSecond = (0, _values.toBig)(0.009); // this is $0.90, so less than $0.96 since we want to ensure debt > assetsIn | swap deposits > assetsOut\nconst swapValueSecond = swapAmountSecond.wadMul(KreskoAsset2Price.ebn(8));\nconst feeValueSecondSwap = swapValueSecond.sub(swapValueSecond.percentMul(FEE_KISS_KRASSET));\nconst expectedKissOut = feeValueSecondSwap.wadDiv(ONE_USD.ebn(8)); // 0.8685\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountSecond, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountSecond);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOut);\nconst [depositValueKR2, depositValueKISS, assetInfos, globals] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.swapper.address, f.KrAsset2.address),\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.swapper.address, f.KISS.address),\n    hre.Diamond.getAssetInfosSCDP([\n        f.KISS.address,\n        f.KrAsset2.address\n    ]),\n    hre.Diamond.getStatisticsSCDP()\n]);\n(0, _chai.expect)(depositValueKR2).to.equal(0);\n(0, _chai.expect)(depositValueKISS).to.equal(0);\nconst expectedSwapDepositsAfter = expectedSwapDeposits.sub((0, _values.toBig)(0.9));\nconst expectedSwapDepositsValue = expectedSwapDepositsAfter.wadMul(assetInfoKISS.assetPrice);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(expectedSwapDepositsAfter);\n(0, _chai.expect)(assetInfos[0].depositValue).to.equal((0, _values.toBig)(depositAmount, 8).add(expectedSwapDepositsValue));\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(expectedSwapDepositsValue);\nconst expectedDebtAfter = expectedSwapDepositsValue.wadDiv(await f.KrAsset2.getPrice());\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(expectedDebtAfter);\nconst expectedCollateralValue = expectedSwapDepositsValue.add(depositAmount.ebn(8));\n(0, _chai.expect)(globals.collateralValue).to.equal(expectedCollateralValue); // swap deposits + collateral deposited\n(0, _chai.expect)(globals.debtValue).to.equal(expectedSwapDepositsValue); //\n(0, _chai.expect)(globals.cr).to.equal(expectedCollateralValue.percentDiv(expectedSwapDepositsValue));",
                  "err": {},
                  "uuid": "002cd2b5-0a5d-440f-9be8-3941869b65e4",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                  "fullTitle": "SCDP #Swap should be able to swap, debt < assetsIn | swap deposits < assetsOut",
                  "timedOut": false,
                  "duration": 2029,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmountKiss = (0, _values.toBig)(ONE_USD).mul(100); // $100\nconst swapAmountKrAsset = (0, _values.toBig)(2); // $200\nconst swapValue = 200;\nconst firstSwapFeeAmount = swapAmountKiss.percentMul(FEE_KISS_KRASSET);\nconst expectedKissOutSecondSwap = swapAmountKrAsset.sub(swapAmountKrAsset.percentMul(FEE_KISS_KRASSET)).wadMul(KreskoAsset2Price.ebn(8)).wadDiv(ONE_USD.ebn(8));\nconst krAssetOutFirstSwap = swapAmountKiss.sub(firstSwapFeeAmount).wadMul(ONE_USD.ebn(8)).wadDiv(KreskoAsset2Price.ebn(8));\nconst krAssetOutFirstSwapValue = krAssetOutFirstSwap.wadMul(KreskoAsset2Price.ebn(8));\n// deposit some to kresko for minting first\nawait (0, _collaterals.depositCollateral)({\n    user: f.swapper,\n    asset: f.KISS,\n    amount: (0, _values.toBig)(400)\n});\nconst ICDPMintAmount = (0, _values.toBig)(1.04);\nawait (0, _krassets.mintKrAsset)({\n    user: f.swapper,\n    asset: f.KrAsset2,\n    amount: ICDPMintAmount\n});\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmountKiss, 0);\nconst expectedSwapDeposits = swapAmountKiss.sub(firstSwapFeeAmount);\nconst stats = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(await f.KreskoSwapper.getSwapDepositsSCDP(f.KISS.address)).to.equal(expectedSwapDeposits);\n(0, _chai.expect)(stats.collateralValue).to.be.eq(depositAmount.ebn().add(expectedSwapDeposits).wadMul(ONE_USD.ebn(8)));\n// the swap that matters, here user has 0.96 (previous swap) + 1.04 (mint). expecting 192 kiss from swap.\nconst [expectedAmountOut] = await f.KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmountKrAsset);\n(0, _chai.expect)(expectedAmountOut).to.equal(expectedKissOutSecondSwap);\nconst tx = await f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmountKrAsset, 0);\nconst event = await (0, _events.getNamedEvent)(tx, 'Swap');\n(0, _chai.expect)(event.args.who).to.equal(f.swapper.address);\n(0, _chai.expect)(event.args.assetIn).to.equal(f.KrAsset2.address);\n(0, _chai.expect)(event.args.assetOut).to.equal(f.KISS.address);\n(0, _chai.expect)(event.args.amountIn).to.equal(swapAmountKrAsset);\n(0, _chai.expect)(event.args.amountOut).to.equal(expectedKissOutSecondSwap);\nconst assetInfos = await hre.Diamond.getAssetInfosSCDP([\n    f.KISS.address,\n    f.KrAsset2.address\n]);\n// f.KISS deposits sent in swap\nconst acocuntPrincipalDepositsKISS = await f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(assetInfos[0].swapDeposits).to.equal(0); // half of 2 krAsset\n(0, _chai.expect)(assetInfos[0].depositAmount).to.equal(acocuntPrincipalDepositsKISS);\n// KrAsset debt is cleared\n(0, _chai.expect)(assetInfos[1].debtValue).to.equal(0);\n(0, _chai.expect)(assetInfos[1].debtAmount).to.equal(0);\n// KISS debt is issued\nconst expectedKissDebtValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[0].debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(assetInfos[0].debtAmount).to.equal(expectedKissDebtValue.wadDiv(ONE_USD.ebn(8)));\n// krAsset swap deposits\nconst expectedSwapDepositValue = (0, _values.toBig)(swapValue, 8).sub(krAssetOutFirstSwapValue);\n(0, _chai.expect)(assetInfos[1].swapDeposits).to.equal((0, _values.toBig)(2).sub(krAssetOutFirstSwap));\n(0, _chai.expect)(assetInfos[1].depositValue).to.equal(expectedSwapDepositValue); // asset price is $100\nconst global = await hre.Diamond.getStatisticsSCDP();\nconst expectedCollateralValue = (0, _values.toBig)(1000, 8).add(expectedSwapDepositValue);\n(0, _chai.expect)(global.collateralValue).to.equal(expectedCollateralValue);\n(0, _chai.expect)(global.debtValue).to.equal(expectedKissDebtValue);\n(0, _chai.expect)(global.cr).to.equal(expectedCollateralValue.percentDiv(expectedKissDebtValue));",
                  "err": {},
                  "uuid": "782429e4-1e5a-4e1c-8223-12102c9b305b",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cumulates fees on swap",
                  "fullTitle": "SCDP #Swap cumulates fees on swap",
                  "timedOut": false,
                  "duration": 1004,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmountNew = (0, _values.toBig)(10000 - depositAmount);\nawait f.KISS.setBalance(f.depositor, depositAmountNew);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, depositAmountNew);\nconst swapAmount = (0, _values.toBig)(ONE_USD * 2600); // $1\nconst scaledDepositsStart = await f.KreskoSwapper.getAccountScaledDepositsSCDP(f.depositor.address, f.KISS.address);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst scaledDepositsAfterSwap = await f.KreskoSwapper.getAccountScaledDepositsSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(scaledDepositsAfterSwap).to.gt(scaledDepositsStart);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, f.KrAsset2.balanceOf(f.swapper.address), 0);\nconst scaledDepositsAfterSecondSwap = await f.KreskoSwapper.getAccountScaledDepositsSCDP(f.depositor.address, f.KISS.address);\n(0, _chai.expect)(scaledDepositsAfterSecondSwap).to.gt(scaledDepositsAfterSwap);\nconst feesGained = await f.KreskoSwapper.getAccountDepositFeesGainedSCDP(f.depositor.address, f.KISS.address);\nawait f.KreskoDepositor.withdrawSCDP(f.depositor.address, f.KISS.address, feesGained);\nconst [scaledDepositsAfter, feesAfter] = await Promise.all([\n    f.KreskoSwapper.getAccountScaledDepositsSCDP(f.depositor.address, f.KISS.address),\n    f.KreskoSwapper.getAccountDepositFeesGainedSCDP(f.depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(feesGained).to.eq(feesAfter);\n(0, _chai.expect)(scaledDepositsAfter).to.eq((0, _values.toBig)(10000));\nawait f.KreskoDepositor.withdrawSCDP(f.depositor.address, f.KISS.address, (0, _values.toBig)(10000));\nconst [depositsAfterFourth, feesAfterFourth] = await Promise.all([\n    f.KreskoSwapper.getAccountDepositValueSCDP(f.depositor.address, f.KISS.address),\n    f.KreskoSwapper.getAccountScaledDepositsSCDP(f.depositor.address, f.KISS.address)\n]);\n(0, _chai.expect)(depositsAfterFourth).to.eq(0);\n(0, _chai.expect)(feesAfterFourth).to.eq(0);",
                  "err": {},
                  "uuid": "b3a8f64c-d524-4535-9483-5702c447d77b",
                  "parentUUID": "b31c4f3e-c79d-44f1-8bdb-2a2e5db6ef14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9afd839e-6fd9-4e09-830c-3005c4f7748b",
                "10767c68-6a39-428b-ba0d-ac0491176494",
                "a1be25cd-feb8-4eea-8881-847b7a47dd48",
                "696daf0b-0047-43e6-8329-90379815632b",
                "002cd2b5-0a5d-440f-9be8-3941869b65e4",
                "782429e4-1e5a-4e1c-8223-12102c9b305b",
                "b3a8f64c-d524-4535-9483-5702c447d77b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6622,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "cac6c1eb-5e60-4dbc-b92a-f525b35f1c09",
              "title": "#Liquidations",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Liquidations\"",
                  "fullTitle": "SCDP #Liquidations \"before each\" hook in \"#Liquidations\"",
                  "timedOut": false,
                  "duration": 111,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "for (const signer of f.usersArr){\n    await f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000));\n}\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor2, (0, _values.toBig)(10_000));\nawait Promise.all([\n    f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec),\n    f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral8Dec.address, depositAmount8Dec),\n    f.KreskoDepositor2.depositSCDP(f.depositor2.address, f.KISS.address, depositAmount18Dec)\n]);",
                  "err": {},
                  "uuid": "8a7a3d74-b826-44c1-a9c5-190c538b7e68",
                  "parentUUID": "cac6c1eb-5e60-4dbc-b92a-f525b35f1c09",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should identify if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is not underwater",
                  "timedOut": false,
                  "duration": 548,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600); // $1\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;",
                  "err": {},
                  "uuid": "3aacb556-41b2-4eff-9e5e-9d9a9f18391f",
                  "parentUUID": "cac6c1eb-5e60-4dbc-b92a-f525b35f1c09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert liquidations if the pool is not underwater",
                  "fullTitle": "SCDP #Liquidations should revert liquidations if the pool is not underwater",
                  "timedOut": false,
                  "duration": 736,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600); // $1\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\n(0, _chai.expect)(await hre.Diamond.getLiquidatableSCDP()).to.be.false;\nawait f.KrAsset2.setBalance(hre.users.liquidator, (0, _values.toBig)(1_000_000));\nawait (0, _chai.expect)(f.KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, (0, _values.toBig)(7.7), f.Collateral8Dec.address)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE');",
                  "err": {},
                  "uuid": "8207f855-4f40-4ba5-a6d9-b4291d650c44",
                  "parentUUID": "cac6c1eb-5e60-4dbc-b92a-f525b35f1c09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify if the pool is underwater",
                  "fullTitle": "SCDP #Liquidations should identify if the pool is underwater",
                  "timedOut": false,
                  "duration": 811,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nf.Collateral.setPrice(collateralPrice / 1000);\nf.Collateral8Dec.setPrice(collateralPrice / 1000);\nconst [stats, params, liquidatable] = await Promise.all([\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getCurrentParametersSCDP(),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(stats.cr).to.be.lt(params.liquidationThreshold);\n(0, _chai.expect)(liquidatable).to.be.true;",
                  "err": {},
                  "uuid": "a28e36cb-b4c7-4d0e-918c-7d61c683acfa",
                  "parentUUID": "cac6c1eb-5e60-4dbc-b92a-f525b35f1c09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow liquidating the underwater pool",
                  "fullTitle": "SCDP #Liquidations should allow liquidating the underwater pool",
                  "timedOut": false,
                  "duration": 2759,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(ONE_USD * 2600);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0);\nconst newKreskoAssetPrice = 500;\nf.KrAsset2.setPrice(newKreskoAssetPrice);\nconst [scdpParams, maxLiquidatable, krAssetPrice, statsBefore] = await Promise.all([\n    hre.Diamond.getCurrentParametersSCDP(),\n    hre.Diamond.getMaxLiqValueSCDP(f.KrAsset2.address, f.Collateral8Dec.address),\n    f.KrAsset2.getPrice(),\n    hre.Diamond.getStatisticsSCDP()\n]);\nconst repayAmount = maxLiquidatable.repayValue.wadDiv(krAssetPrice);\nawait f.KrAsset2.setBalance(hre.users.liquidator, repayAmount.add(1e18.toString()));\n(0, _chai.expect)(statsBefore.cr).to.lt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(statsBefore.cr).to.gt(1e4);\nconst tx = await f.KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address);\nconst [statsAfter, liquidatableAfter] = await Promise.all([\n    hre.Diamond.getStatisticsSCDP(),\n    hre.Diamond.getLiquidatableSCDP()\n]);\n(0, _chai.expect)(statsAfter.cr).to.gt(scdpParams.liquidationThreshold);\n(0, _chai.expect)(statsAfter.crDebtValueAdjusted).to.eq(2.01e4);\n(0, _chai.expect)(liquidatableAfter).to.eq(false);\nawait (0, _chai.expect)(f.KreskoLiquidator.liquidateSCDP(f.KrAsset2.address, repayAmount, f.Collateral8Dec.address)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'CANNOT_LIQUIDATE');\nconst event = await (0, _events.getNamedEvent)(tx, 'SCDPLiquidationOccured');\nconst expectedSeizeAmount = repayAmount.wadMul((0, _values.toBig)(newKreskoAssetPrice, 8)).percentMul(1.05e4).wadDiv((0, _values.toBig)(collateralPrice, 8)).div(10 ** 10);\n(0, _chai.expect)(event.args.liquidator).to.eq(hre.users.liquidator.address);\n(0, _chai.expect)(event.args.seizeAmount).to.eq(expectedSeizeAmount);\n(0, _chai.expect)(event.args.repayAmount).to.eq(repayAmount);\n(0, _chai.expect)(event.args.seizeCollateral).to.eq(f.Collateral8Dec.address);\n(0, _chai.expect)(event.args.repayKreskoAsset).to.eq(f.KrAsset2.address);\nconst expectedDepositsAfter = depositAmount8Dec.sub(event.args.seizeAmount);\n(0, _chai.expect)(expectedDepositsAfter).to.be.lt(depositAmount8Dec);\nconst [principalDeposits, depositsWithFees, params] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountScaledDepositsSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getCurrentParametersSCDP()\n]);\n(0, _chai.expect)(principalDeposits).to.eq(expectedDepositsAfter);\n(0, _chai.expect)(depositsWithFees).to.eq(expectedDepositsAfter);\nawait f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec.mul(10));\nconst stats = await hre.Diamond.getStatisticsSCDP();\n(0, _chai.expect)(stats.cr).to.gt(params.minCollateralRatio);\nawait (0, _chai.expect)(f.KreskoDepositor.withdrawSCDP(f.depositor.address, f.Collateral8Dec.address, expectedDepositsAfter)).to.not.be.reverted;\nconst [principalEnd, depositsWithFeesEnd] = await Promise.all([\n    hre.Diamond.getAccountDepositSCDP(f.depositor.address, f.Collateral8Dec.address),\n    hre.Diamond.getAccountScaledDepositsSCDP(f.depositor.address, f.Collateral8Dec.address)\n]);\n(0, _chai.expect)(principalEnd).to.eq(0);\n(0, _chai.expect)(depositsWithFeesEnd).to.eq(0);",
                  "err": {},
                  "uuid": "f62a08d9-cf5f-474d-807d-8c23a83a9306",
                  "parentUUID": "cac6c1eb-5e60-4dbc-b92a-f525b35f1c09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3aacb556-41b2-4eff-9e5e-9d9a9f18391f",
                "8207f855-4f40-4ba5-a6d9-b4291d650c44",
                "a28e36cb-b4c7-4d0e-918c-7d61c683acfa",
                "f62a08d9-cf5f-474d-807d-8c23a83a9306"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4854,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
              "title": "#Error",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/scdp/00-scdp.ts",
              "file": "/src/test/scdp/00-scdp.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#Error\"",
                  "fullTitle": "SCDP #Error \"before each\" hook in \"#Error\"",
                  "timedOut": false,
                  "duration": 77,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Promise.all(f.usersArr.map((signer)=>f.Collateral.setBalance(signer, (0, _values.toBig)(1_000_000))));\nawait f.KISS.setBalance(f.swapper, (0, _values.toBig)(10_000));\nawait f.KISS.setBalance(f.depositor, hre.ethers.BigNumber.from(1));\nawait Promise.all([\n    f.KreskoDepositor.depositSCDP(f.depositor.address, f.KISS.address, 1),\n    f.KreskoDepositor.depositSCDP(f.depositor.address, f.Collateral.address, depositAmount18Dec)\n]);",
                  "err": {},
                  "uuid": "0e2df0e9-5aa9-4282-8cdb-15f197f49bd0",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should revert depositing unsupported tokens",
                  "fullTitle": "SCDP #Error should revert depositing unsupported tokens",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [UnsupportedToken] = await hre.deploy('MockERC20', {\n    args: [\n        'UnsupportedToken',\n        'UnsupportedToken',\n        18,\n        (0, _values.toBig)(1)\n    ]\n});\nawait UnsupportedToken.approve(hre.Diamond.address, hre.ethers.constants.MaxUint256);\nconst { deployer } = await hre.getNamedAccounts();\nawait (0, _chai.expect)(hre.Diamond.depositSCDP(deployer, UnsupportedToken.address, 1)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'INVALID_DEPOSIT_ASSET').withArgs(UnsupportedToken.address);",
                  "err": {},
                  "uuid": "e051bb3b-3a74-4e86-a96d-b262d400292a",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawing without deposits",
                  "fullTitle": "SCDP #Error should revert withdrawing without deposits",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(f.KreskoSwapper.withdrawSCDP(f.depositor.address, f.Collateral.address, 1)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SCDP_WITHDRAWAL_VIOLATION').withArgs(f.Collateral.address, 1, 0, 0);",
                  "err": {},
                  "uuid": "68f80b64-5fc6-49bf-a870-cc79c61edd3a",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals below MCR",
                  "fullTitle": "SCDP #Error should revert withdrawals below MCR",
                  "timedOut": false,
                  "duration": 456,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(ONE_USD).mul(1000); // $1000\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KISS.address, f.KrAsset2.address, swapAmount, 0); // generates the debt\nconst deposits = await f.KreskoSwapper.getAccountDepositSCDP(f.depositor.address, f.Collateral.address);\nawait (0, _chai.expect)(f.KreskoDepositor.withdrawSCDP(f.depositor.address, f.Collateral.address, deposits)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'DEBT_EXCEEDS_COLLATERAL').withArgs(960e8, 4800e8, 5e4);",
                  "err": {},
                  "uuid": "f50d3e1c-6a2b-4eee-99da-6aaf37e36c0e",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert withdrawals of swap owned collateral deposits",
                  "fullTitle": "SCDP #Error should revert withdrawals of swap owned collateral deposits",
                  "timedOut": false,
                  "duration": 404,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nconst deposits = await f.KreskoSwapper.getSwapDepositsSCDP(f.KrAsset2.address);\n(0, _chai.expect)(deposits).to.be.gt(0);\nawait (0, _chai.expect)(f.KreskoSwapper.withdrawSCDP(f.swapper.address, f.KrAsset2.address, deposits)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SCDP_WITHDRAWAL_VIOLATION').withArgs(f.KrAsset2.address, swapAmount, 0, 0);",
                  "err": {},
                  "uuid": "135c74e4-c6c7-4ddc-b3e0-5f45dfa4300d",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping with price below minAmountOut",
                  "fullTitle": "SCDP #Error should revert swapping with price below minAmountOut",
                  "timedOut": false,
                  "duration": 284,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nconst [amountOut] = await f.KreskoSwapper.previewSwapSCDP(f.KrAsset2.address, f.KISS.address, swapAmount);\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, amountOut.add(1))).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SWAP_SLIPPAGE').withArgs(amountOut, amountOut.add(1));",
                  "err": {},
                  "uuid": "47821c50-fb16-4e4f-96ab-cf0b820a935d",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping unsupported asset",
                  "fullTitle": "SCDP #Error should revert swapping unsupported asset",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.Collateral.address, swapAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'INVALID_ASSET').withArgs(f.Collateral.address);",
                  "err": {},
                  "uuid": "514538dc-0a13-40bb-8f3c-0f6f2e91f8e3",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping a disabled route",
                  "fullTitle": "SCDP #Error should revert swapping a disabled route",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nawait hre.Diamond.setSwapPairsSingle({\n    assetIn: f.KrAsset2.address,\n    assetOut: f.KISS.address,\n    enabled: false\n});\nawait (0, _chai.expect)(f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0)).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'SWAP_NOT_ENABLED').withArgs(f.KrAsset2.address, f.KISS.address);",
                  "err": {},
                  "uuid": "270e2872-7013-45e1-b402-b7dad6d197b2",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert swapping causes CDP to go below MCR",
                  "fullTitle": "SCDP #Error should revert swapping causes CDP to go below MCR",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const swapAmount = (0, _values.toBig)(1_500_000);\nawait f.KrAsset2.setBalance(f.swapper, swapAmount);\nconst tx = f.KreskoSwapper.swapSCDP(f.swapper.address, f.KrAsset2.address, f.KISS.address, swapAmount, 0);\nawait (0, _chai.expect)(tx).to.be.revertedWithCustomError((0, _errors.CError)(hre), 'DEBT_EXCEEDS_COLLATERAL').withArgs('15001000000000000', '75000000000000000', 5e4);",
                  "err": {},
                  "uuid": "8398adef-a734-400b-9751-6fc4321e8400",
                  "parentUUID": "bc7c2cd4-1849-40de-b225-1c4c5eabce03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e051bb3b-3a74-4e86-a96d-b262d400292a",
                "68f80b64-5fc6-49bf-a870-cc79c61edd3a",
                "f50d3e1c-6a2b-4eee-99da-6aaf37e36c0e",
                "135c74e4-c6c7-4ddc-b3e0-5f45dfa4300d",
                "47821c50-fb16-4e4f-96ab-cf0b820a935d",
                "514538dc-0a13-40bb-8f3c-0f6f2e91f8e3",
                "270e2872-7013-45e1-b402-b7dad6d197b2",
                "8398adef-a734-400b-9751-6fc4321e8400"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1719,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs/test-report",
        "assetsDir": "docs/test-report/assets",
        "reportTitle": "Kresko Protocol Hardhat Test Report",
        "reportPageTitle": "Kresko Protocol Hardhat Test Report"
      },
      "version": "6.2.0"
    }
  }
}